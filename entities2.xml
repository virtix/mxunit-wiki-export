<?xml version="1.0" encoding="UTF-8"?>
<hibernate-generic datetime="2012-01-09 11:38:57">

  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767278</id>
    <property name="body"><![CDATA[{toc}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]

{tip}




h2. 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and[request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5);
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in Mighty Mock on Adobe ColdFusion]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734522</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767280</id>
    <property name="body"><![CDATA[{toc}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]
{tip}




h2. 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and [request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5);
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in Mighty Mock on Adobe ColdFusion]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734524</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767281</id>
    <property name="body"><![CDATA[{toc}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]
{tip}




h2. 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and [request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5, label="some label");
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Core features should now be CF7 compatible.
* MightyMock behavioral inconsistency on CF8 fixed
* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in MightyMock on Adobe ColdFusion

h3. Backwards Compatibility

* debug() will be backwards compatible IF for calls not using named arguments
* debug() will now fail if the old (removed) "debugdata" argument was passed like so: debug(debugdata=someStruct); to fix, either change debugdata to "var" or remove the named argument]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734525</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767267</id>
    <property name="body"><![CDATA[{toc}

h2. Introduction

[Bob Silverberg|http://silverwareconsulting.com/] and I were trying to tackle a memory problem in his unit tests for [ValidateThis|http://validatethis.org] . Running CF with 1GB of memory, he'd get Out Of Memory Errors and his tests would not complete when run in the browser \-\- i.e. all tests running in a single page request. When run through Eclipse \-\- where each test method is run as a separate request \-\- he had no troubles.

This is our story.

h2. First Line of Defense

I always suggest these as the first culprits in memory problems:
# Memory Tracking turned on in the CF Server Monitor
# Request output debugging turned on in CFAdmin (I'm NOT talking about the Line Debugger... just regular old debug output)

In and of themselves neither of these are evil; however, when an application, or a particular page, does a tremendous amount of work, both of those can become problems in a hurry.

Bob turned both off, and he was still running out of memory.

h2. My first task...

I needed to replicate the issue. I got all his code and ran his tests. Fortunately, I, too, received an OOME. I then turned off debugging and, sure enough, the tests completed as expected (though slowly).

So, lesson #1 kids: debugging can crash your server

{tip}At this point, I no longer have problems, but Bob still does. Thus, we're not done yet{tip}

h2. Meanwhile, Back at Bob's Ranch

I suggested to Bob that he start to troubleshoot this by adding the "excludes" attribute onto his DirectoryTestSuite, and initially exclude everything but the first test, then incrementally remove tests from the Excludes until he got the error. Then, he'd probably know which test was causing troubles.&nbsp;

Normally, this is a fine approach. It turns out that it wouldn't have helped anyway. But hey, this stuff is hit and miss.

h2. Gathering data

My next step was to get a heap dump of ColdFusion as it was running the tests... I needed to see what was consuming all the memory. To do so, I used the java "jmap" command to get the dump and Eclipse MAT to analyze the dump. This is not nearly as complicated as it sounds, and I wrote up [full instructions here|http://blog.mxunit.org/2010/01/using-eclipse-mat-to-track-down.html] .

h2. Inspecting data


h3. Narrowing down to "FusionContext"


I used Eclipse MAT to inspect the heap dump. When I first loaded it, I opened the "Dominator Tree" and saw the following two entries sucking up a combined 200+MB of RAM:
* coldfusion.filter.FusionContext
* coldfusion.bootstrat.BoostrapClassLoader

Let's look at the first few consumers for each of these:

 !memory1.png|align=center!
Now, looking at the BootstrapClassLoader, I see a FontSetBuilder taking up a whole lot of memory. I have no idea what the hell that is, so I ignore it. I figure I can't do anything about it anyway, so....

Let's look at the big old HashMap in the FusionContext. That looks like something I might be able to do something about. Why? Well, I don't know... I just imagine that any variables my app is creating live in there.

h3. Narrowing down to a Code File

{tip}When working with Eclipse MAT, keep your eyes on the "Inspector View" as you select different items in the "dominator tree" editor{tip}


This was kind of just dumb luck and I'm not sure exactly what it means. Nonetheless, if you look at the image below, you'll see that when I opened up the HashMap in the FusionContext I had a whole mess of entries for "CFDummyComponent". Clicking on one of those showed \-\- over in the "Inspector" view on the left, that the file was "cfMockRegistry2ecfc" followed by some numbers. This told me that the file associated with that component was "*MockRegistry.cfc*".

Hmmm... MockRegistry is a component of MightyMock, and Bob's tests make heavy use of MightyMock.


 !memory2.png|thumbnail,align=center!
Then, drilling into one of those instances, you see a lot of *coldfusion.tagext.io.OutputTag* instances.

 !memory3.png|thumbnail,align=center!

h2. Light Bulb

So here's where I put things together:
# File named MockRegistry.cfc
# Tons of OutputTag instances

What could this mean?

Well, that must mean that something's being output in that file. But what? it's a component that sets up mocking... why would it be outputting anything?

Sure enough, opening the file showed me the answer: *<cfcomponent output="true">*

h2. Full Disclosure

I left out a step in the lightbulb moment, but the problem is that I cannot for the life of me figure out how to get back to what I saw. Basically, when I was digging through the heap dump in MAT, I saw an instance of "cfsavecontent". That is truly what made me suspicious about the output problem. But, I can't find it again... so be it.

h2. Conclusion

I set output="false" on MockRegistry.cfc, ran all of the unit tests to confirm that didn't break anything. Then I ran Bob's code again. Bingo... no OOME errors. In addition, while the tests were running, I took another heap dump, and Sure enough, memory was down to a completely reasonable level. Rather than consuming 100+MB of memory, FusionContext was down in the teens.

*Does this mean output="true" is bad?*&nbsp; No, it doesn't. It means a) don't use it unless you need it, and b) something's going on under the hood in CF where, if you have output="true" on in a component, it seems to keep a reference to&nbsp; everything in that page's context, such that normal garbage collection can't do its job because the current stack still has a reference to everything in that OutputTag. It appears that when output="false", the data in the component and the component's functions are not being referenced by an OutputTag and as such are free to be reclaimed by the garbage collector]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734509</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767269</id>
    <property name="body"><![CDATA[Hello friends,

On the fifth step of this configuration, I get the error regarding connection to remote facade url.

It says:

Could not connect to facade URL.

Try running this in a browser:

http://localhost/mxunit/framework/RemoteFacade.cfc?wsdl&method=ping

In console, I get (504)Proxy Timeout error.

However Above url works perfectly in my browser after giving coldfusion admin password.

I also provided authentication in project properties for mxunit. (right click on project \-> properties \-> mxunit)

Please Help\!]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5734512</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767268</id>
    <property name="body"><![CDATA[This sound a lot like my memory leak problem I saw on CF8 having to do with the "output" tag being omitted:

[http://blog.maestropublishing.com/fixing-a-mysterious-memory-leak-on-coldfusion|http://blog.maestropublishing.com/fixing-a-mysterious-memory-leak-on-coldfusion]

This begs the question \-\- which version CF did you test on and what was the updater / hot fixes applied.&nbsp; Supposedly this issue was fixed in Cumulative Hot fix 4 for ColdFusion 8.0.1. You can download it from here:
[|http://kb2.adobe.com/cps/402/kb402604.html#CF801]

[http://kb2.adobe.com/cps/402/kb402604.html#CF801|http://kb2.adobe.com/cps/402/kb402604.html#CF801]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5734510</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767263</id>
    <property name="body"><![CDATA[{toc}

h2. Introduction

Bob Silverberg and I were trying to tackle a memory problem in his unit tests for ValidateThis. Running CF with 1GB of memory, he'd get Out Of Memory Errors and his tests would not complete when run in the browser \-\- i.e. all tests running in a single page request. When run through Eclipse \-\- where each test method is run as a separate request \-\- he had no troubles.

This is our story.

h2. First Line of Defense

I always suggest these as the first culprits in memory problems:
# Memory Tracking turned on in the CF Server Monitor
# Request output debugging turned on in CFAdmin (I'm NOT talking about the Line Debugger... just regular old debug output)

In and of themselves neither of these are evil; however, when an application, or a particular page, does a tremendous amount of work, both of those can become problems in a hurry.

Bob turned both off, and he was still running out of memory.

h2. My first task...

I needed to replicate the issue. I got all his code and ran his tests. Fortunately, I, too, received an OOME. I then turned off debugging and, sure enough, the tests completed as expected (though slowly).

So, lesson #1 kids: debugging can crash your server

{tip}At this point, I no longer have problems, but Bob still does. Thus, we're not done yet{tip}

h2. Meanwhile, Back at Bob's Ranch

I suggested to Bob that he start to troubleshoot this by adding the "excludes" attribute onto his DirectoryTestSuite, and initially exclude everything but the first test, then incrementally remove tests from the Excludes until he got the error. Then, he'd probably know which test was causing troubles.&nbsp;

Normally, this is a fine approach. It turns out that it wouldn't have helped anyway. But hey, this stuff is hit and miss.

h2. Gathering data

My next step was to get a heap dump of ColdFusion as it was running the tests... I needed to see what was consuming all the memory. To do so, I used the java "jmap" command to get the dump and Eclipse MAT to analyze the dump. This is not nearly as complicated as it sounds, and I wrote up [full instructions here|http://blog.mxunit.org/2010/01/using-eclipse-mat-to-track-down.html] .

h2. Inspecting data


h3. Narrowing down to "FusionContext"


I used Eclipse MAT to inspect the heap dump. When I first loaded it, I opened the "Dominator Tree" and saw the following two entries sucking up a combined 200+MB of RAM:
* coldfusion.filter.FusionContext
* coldfusion.bootstrat.BoostrapClassLoader

Let's look at the first few consumers for each of these:

 !memory1.png|align=center!
Now, looking at the BootstrapClassLoader, I see a FontSetBuilder taking up a whole lot of memory. I have no idea what the hell that is, so I ignore it. I figure I can't do anything about it anyway, so....

Let's look at the big old HashMap in the FusionContext. That looks like something I might be able to do something about. Why? Well, I don't know... I just imagine that any variables my app is creating live in there.

h3. Narrowing down to a Code File

{tip}When working with Eclipse MAT, keep your eyes on the "Inspector View" as you select different items in the "dominator tree" editor{tip}


This was kind of just dumb luck and I'm not sure exactly what it means. Nonetheless, if you look at the image below, you'll see that when I opened up the HashMap in the FusionContext I had a whole mess of entries for "CFDummyComponent". Clicking on one of those showed \-\- over in the "Inspector" view on the left, that the file was "cfMockRegistry2ecfc" followed by some numbers. This told me that the file associated with that component was "*MockRegistry.cfc*".

 !memory2.png|thumbnail,align=center!
Then, drilling into one of those instances, you see a lot of *coldfusion.tagext.io.OutputTag* instances.

 !memory3.png|thumbnail,align=center!

h2. Light Bulb

So here's where I put things together:
# File named MockRegistry.cfc
# Tons of OutputTag instances

What could this mean?

Well, that must mean that something's being output in that file. But what? it's a component that sets up mocking... why would it be outputting anything?

Sure enough, opening the file showed me the answer: *<cfcomponent output="true">*

h2. Full Disclosure

I left out a step in the lightbulb moment, but the problem is that I cannot for the life of me figure out how to get back to what I saw. Basically, when I was digging through the heap dump in MAT, I saw an instance of "cfsavecontent". That is truly what made me suspicious about the output problem. But, I can't find it again... so be it.

h2. Conclusion

I set output="false" on MockRegistry.cfc, ran all of the unit tests to confirm that didn't break anything. Then I ran Bob's code again. Bingo... no OOME errors. In addition, while the tests were running, I took another heap dump, and Sure enough, memory was down to a completely reasonable level. Rather than consuming 100+MB of memory, FusionContext was down in the teens.

*Does this mean output="true" is bad?*&nbsp; No, it doesn't. It means a) don't use it unless you need it, and b) something's going on under the hood in CF where, if you have output="true" on in a component, it seems to keep a reference to&nbsp; everything in that page's context, such that normal garbage collection can't do its job because the current stack still has a reference to everything in that OutputTag. It appears that when output="false", the data in the component and the component's functions are not being referenced by an OutputTag and as such are free to be reclaimed by the garbage collector]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734505</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767262</id>
    <property name="body"><![CDATA[[Running Adobe ColdFusion on Amazon EC2|Running Adobe ColdFusion on Amazon EC2]

[How cfcomponent output="true"  can affect memory consumption|How cfcomponent output="true"  can affect memory consumption]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734504</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767265</id>
    <property name="body"><![CDATA[{toc}

h2. Introduction

Bob Silverberg and I were trying to tackle a memory problem in his unit tests for ValidateThis. Running CF with 1GB of memory, he'd get Out Of Memory Errors and his tests would not complete when run in the browser \-\- i.e. all tests running in a single page request. When run through Eclipse \-\- where each test method is run as a separate request \-\- he had no troubles.

This is our story.

h2. First Line of Defense

I always suggest these as the first culprits in memory problems:
# Memory Tracking turned on in the CF Server Monitor
# Request output debugging turned on in CFAdmin (I'm NOT talking about the Line Debugger... just regular old debug output)

In and of themselves neither of these are evil; however, when an application, or a particular page, does a tremendous amount of work, both of those can become problems in a hurry.

Bob turned both off, and he was still running out of memory.

h2. My first task...

I needed to replicate the issue. I got all his code and ran his tests. Fortunately, I, too, received an OOME. I then turned off debugging and, sure enough, the tests completed as expected (though slowly).

So, lesson #1 kids: debugging can crash your server

{tip}At this point, I no longer have problems, but Bob still does. Thus, we're not done yet{tip}

h2. Meanwhile, Back at Bob's Ranch

I suggested to Bob that he start to troubleshoot this by adding the "excludes" attribute onto his DirectoryTestSuite, and initially exclude everything but the first test, then incrementally remove tests from the Excludes until he got the error. Then, he'd probably know which test was causing troubles.&nbsp;

Normally, this is a fine approach. It turns out that it wouldn't have helped anyway. But hey, this stuff is hit and miss.

h2. Gathering data

My next step was to get a heap dump of ColdFusion as it was running the tests... I needed to see what was consuming all the memory. To do so, I used the java "jmap" command to get the dump and Eclipse MAT to analyze the dump. This is not nearly as complicated as it sounds, and I wrote up [full instructions here|http://blog.mxunit.org/2010/01/using-eclipse-mat-to-track-down.html] .

h2. Inspecting data


h3. Narrowing down to "FusionContext"


I used Eclipse MAT to inspect the heap dump. When I first loaded it, I opened the "Dominator Tree" and saw the following two entries sucking up a combined 200+MB of RAM:
* coldfusion.filter.FusionContext
* coldfusion.bootstrat.BoostrapClassLoader

Let's look at the first few consumers for each of these:

 !memory1.png|align=center!
Now, looking at the BootstrapClassLoader, I see a FontSetBuilder taking up a whole lot of memory. I have no idea what the hell that is, so I ignore it. I figure I can't do anything about it anyway, so....

Let's look at the big old HashMap in the FusionContext. That looks like something I might be able to do something about. Why? Well, I don't know... I just imagine that any variables my app is creating live in there.

h3. Narrowing down to a Code File

{tip}When working with Eclipse MAT, keep your eyes on the "Inspector View" as you select different items in the "dominator tree" editor{tip}


This was kind of just dumb luck and I'm not sure exactly what it means. Nonetheless, if you look at the image below, you'll see that when I opened up the HashMap in the FusionContext I had a whole mess of entries for "CFDummyComponent". Clicking on one of those showed \-\- over in the "Inspector" view on the left, that the file was "cfMockRegistry2ecfc" followed by some numbers. This told me that the file associated with that component was "*MockRegistry.cfc*".

 !memory2.png|thumbnail,align=center!
Then, drilling into one of those instances, you see a lot of *coldfusion.tagext.io.OutputTag* instances.

 !memory3.png|thumbnail,align=center!

h2. Light Bulb

So here's where I put things together:
# File named MockRegistry.cfc
# Tons of OutputTag instances

What could this mean?

Well, that must mean that something's being output in that file. But what? it's a component that sets up mocking... why would it be outputting anything?

Sure enough, opening the file showed me the answer: *<cfcomponent output="true">*

h2. Full Disclosure

I left out a step in the lightbulb moment, but the problem is that I cannot for the life of me figure out how to get back to what I saw. Basically, when I was digging through the heap dump in MAT, I saw an instance of "cfsavecontent". That is truly what made me suspicious about the output problem. But, I can't find it again... so be it.

h2. Conclusion

I set output="false" on MockRegistry.cfc, ran all of the unit tests to confirm that didn't break anything. Then I ran Bob's code again. Bingo... no OOME errors. In addition, while the tests were running, I took another heap dump, and Sure enough, memory was down to a completely reasonable level. Rather than consuming 100+MB of memory, FusionContext was down in the teens.

*Does this mean output="true" is bad?*&nbsp; No, it doesn't. It means a) don't use it unless you need it, and b) something's going on under the hood in CF where, if you have output="true" on in a component, it seems to keep a reference to&nbsp; everything in that page's context, such that normal garbage collection can't do its job because the current stack still has a reference to everything in that OutputTag. It appears that when output="false", the data in the component and the component's functions are not being referenced by an OutputTag and as such are free to be reclaimed by the garbage collector]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734507</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767277</id>
    <property name="body"><![CDATA[{toc}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]



h2. 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and[request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5);
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in Mighty Mock on Adobe ColdFusion]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734521</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767276</id>
    <property name="body"><![CDATA[{toc}


h2. 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and[request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5);
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in Mighty Mock on Adobe ColdFusion]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734520</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767271</id>
    <property name="body"><![CDATA[Peter,

I saw this behavior on CF9.0.1 with the latest hotfixes applied. I'm pretty sure Bob is running the same setup, though on a Mac (I'm on Windows)]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5734514</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767270</id>
    <property name="body"><![CDATA[In this tutorial, you will learn how to create an Ant build file that      executes MXUnit tests and generates JUnit reports

First off, you should be familiar with [Ant|http://ant.apache.org/]. If not, visit the       site, [download    Ant|http://ant.apache.org/bindownload.cgi] and play around with it to develop a basic understanding of       projects and tasks.

Ok, now that you're an expert let's kick it. We'll use the MXUnit tests       that we use to build the framework. These are located in the MXUnit       Framework download in /mxunit/tests. We will use the minimal required       options in order to run the Ant task. All optional task attributes can be       found [here|default:Ant Task Doc] . This tutorial assumes installation of MXUnit directly in the webroot;       e.g., /mxunit/

These are the basic steps to create the build that runs tests and       generates a report
# Create ant Ant build project
# Define the MXUnit Ant Task
# Tell MXUnit Which Tests You Want to Run
# Define The JUnit Report Task
# Run it ...
# View the report


*1. Create an Ant build&nbsp;project*

Type the folling into a text file and save it as       /mxunit/tutorial/ant/build.xml.

{code}
<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">
</project>
{code}

If you run just this in Ant you should see the following:

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/ant-junit-1.png!

This is what we expect to see. The build fails because there is no      target main defined. We will define this task next.

*2. Define The MXUnit Ant Task*

Add the following into the build.xml file:

{code}
<project name="MXUnitTask" basedir="." default="main">
<mkdir dir="testresults" />

<target name="main" depends="runtests" description="Main target for running the tests." />

<target name="runtests" description="Make output directories and run the MXUnit task">
<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
<mxunittask server="localhost" port="8500"
outputdir="testresults"
verbose="true">
</mxunittask>
</target>
</project>
{code}

This instructs Ant to use the MXUnit Ant Task located in /mxunit/ant/lib/mxunit-ant.jar. It then tells the MXUnit Ant Task to use         the localhost as the target server and the HTTP port 8500.

You should change         these values to point to any installation of the MXUnit Framework. The outputdir is the location to where the test results will be saved. The         verbose attribute instructs the task to print additional information to         stdout. If you run this, you should see the following:

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/ant-junit-2.png!

This is good. We have made contact with the MXUnit Ant Task. The build fails with a  java.lang.NullPointerException   because the task expects some tests to run and none were provided.

*3. Tell MXUnit Which Tests You Want to Run*
&nbsp;
Add the following to the build.xml file:

{code}
<project name="MXUnitTask" basedir="." default="main">

<mkdir dir="testresults" />

<target name="main" depends="runtests" description="Main target for running the tests." />

<target name="runtests" description="Make output directories and run the MXUnit task">
<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
<mxunittask server="localhost" port="8500"
outputdir="testresults"
verbose="true">
<directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
</mxunittask>
</target>
</project>
{code}

We inserted the directory element to         instruct the MXUnit Ant Task to run all the tests in the directory         specified by the path attribute.

Note,         make sure your path attribute points to         the location of the /mxunit/tests/framework directory. When you run this,         the HttpAntRunner.cfc is called by the task. This runner executes the         tests using the mxunit framework and saves the results as JUnitXml to the         location specified by the outputdir attribute.

When run, you should see the following:

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/ant-junit-3.png!

You should now have 2 files in /mxunit/tutorial/ant/testresults/tmp/ called mxunitdirectorytestsuite_1.xml and testresults.properties.       The first one will be used by JUnit in  the next step to generate a report. The second one          can be used to summarize all the test results run, as you can have multiple directory elements in the task.


*4. Define The JUnit Report Task*
Type the following into the build.xml:

{code}
<project name="MXUnitTask" basedir="." default="main">

<mkdir dir="testresults" />

<target name="main" depends="runtests,junitreport" description="Main target for running the tests." />

<target name="runtests" description="Make output directories and run the MXUnit task">
<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
<mxunittask server="localhost" port="8500"
outputdir="testresults"
verbose="true">
<directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
</mxunittask>
</target>



<target name="junitreport" description="Create a report for the rest result">
<mkdir dir="junithtml"/>
<junitreport todir="junithtml">
<fileset dir="testresults">
<include name="*.xml"/>
</fileset>
<report format="frames" todir="junithtml" styledir="../../ant/xsl"/>
</junitreport>
</target>

</project>

{code}


*We've a couple of new things here*:
1. Created a new target for Ant (junitreport). This target is responsible for         generating the JUnit-style report.
2. Instructed the main target to call the runtests target first, then          the junitreport task after that.

The junitreport task is looking for the XML         files we created with the runtests task. Hence, we use the fileset element         to tell JUnit where to go to find the XML test results.
You'll also notice that we point         to the /mxunit/ant/xsl directory for the formatting information.         This is optional, and you may use any stylesheet you wish or the default         one in Ant's JUnit Report Task path.

*5. Run it ...* you should see this:

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/ant-junit-4.png!

*6. View the report*

You can now browse /mxunit/tutorial/ant/junithtml/ and open index.html in your web browser. You     should see the following: An live interactive version of this report is available [here|http://mxunit.org/testresults/index.html].

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/ant-junit-5.png!

You can take this process further by adding additional directory elements that      contain tests. You may also execute individual test cases using the testcase element. Details on the MXUnit Ant Task can be found [here|default:Ant Task Doc] . ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734513</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767272</id>
    <property name="body"><![CDATA[Found solution from

[http://groups.google.com/group/mxunit/browse_thread/thread/439a103b81a24765|http://groups.google.com/group/mxunit/browse_thread/thread/439a103b81a24765]

[http://stackoverflow.com/questions/3777441/could-not-connect-to-remote-facade-url|http://stackoverflow.com/questions/3777441/could-not-connect-to-remote-facade-url]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5734516</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686557</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.cfinnovate.com/pages/viewpage.action?pageId=5341334]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341334</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-03-02 08:34:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-03-02 08:34:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686586</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&source=web&cd=3&ved=0CCIQFjAC&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341213&rct=j&q=mxunit%20remote%20facade%20hudson%20orm&ei=nZVvTZnUOIXPgAfKsuFQ&usg=AFQjCNFYyOEZrVtmgNfj5rrm1CpwdWNQTw]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341213</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-03-03 13:22:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-03-03 13:22:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686321</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunit+search+for+tests+project+folder+mismatch&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-02-21 19:06:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-02-21 19:06:15.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">1015809</id>
    <property name="name"><![CDATA[installation]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2009-01-17 13:32:08.000</property>
    <property name="lastModificationDate">2009-01-17 13:32:08.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686048</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com.hk/search?hl=zh-TW&biw=1259&bih=823&tbs=lr:lang_1zh-TW&q=vmware+%22lang%3D1033%26locale%3D1033%22&start=10&sa=N]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341213</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-02-09 10:53:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-02-09 10:53:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686089</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/display/default/MXUnit+Documentation]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292799</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-02-10 03:49:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-02-10 03:49:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686090</id>
    <property name="viewCount">4</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/display/default/MXUnit+Documentation]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292709</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-02-10 03:50:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-02-10 03:50:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686091</id>
    <property name="viewCount">5</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/display/default/MXUnit+Documentation]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786468</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-02-10 03:51:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-02-10 03:51:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686082</id>
    <property name="viewCount">6</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/display/default/MXUnit+Documentation]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734480</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-02-10 03:42:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-02-10 03:42:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686083</id>
    <property name="viewCount">5</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/display/default/MXUnit+Documentation]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734465</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-02-10 03:43:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-02-10 03:43:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686084</id>
    <property name="viewCount">6</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/display/default/MXUnit+Documentation]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734418</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-02-10 03:44:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-02-10 03:44:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686085</id>
    <property name="viewCount">4</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/display/default/MXUnit+Documentation]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341346</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-02-10 03:45:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-02-10 03:45:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686086</id>
    <property name="viewCount">5</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/display/default/MXUnit+Documentation]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341305</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-02-10 03:46:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-02-10 03:46:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686087</id>
    <property name="viewCount">5</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/display/default/MXUnit+Documentation]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947969</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-02-10 03:47:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-02-10 03:47:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686088</id>
    <property name="viewCount">8</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/display/default/MXUnit+Documentation]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292868</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-02-10 03:48:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-02-10 03:48:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6686072</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.cfinnovate.com/pages/viewpage.action?pageId=5341265]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341265</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-02-09 23:49:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-02-09 23:49:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767174</id>
    <property name="body"><![CDATA[[CFEclipse|http://cfeclipse.org] and ColdFusion Builder give you the same snippet functionality you know and love from ColdFusion Studio. When you download MXUnit, you get a directory of snippets (and key combos) that you can apply to your own snippets. These snippets live in mxunit/eclipse/snippets. You can copy them manually, or use a bundled ANT task.

h2. Step 1: Where do your snippets live?

# &nbsp;In Eclipse:
## CFEclipse: go to Window \-\- Preferences \-\- CFEclipse
## ColdFusion Builder: Window \-\- Preferences \-\- ColdFusion \-\-  Snippets
# &nbsp;Copy the path to the snippets directory

h2. Step 2: Manually Copy the snippets


# &nbsp;open that path on your file system
# &nbsp;In a separate window, open the mxunit/eclipse/snippets/ directory on your file system. Copy the contents of that directory into the snippets directory that you just opened in #3
# &nbsp;optionally, copy the contents of snippets/mxunit/keyCombos.properties into your existing keyCombos.properties file

h2. Step 2 (optional): Use ANT to copy them for you

The first time you do this, it'll be a two step process. Step 1 has you creating a 1-line properties file; Step 2 has you executing the ANT task
# In mxunit/eclipse/snippets, create a file named copysnippets.properties
# Populate it like so: snipdir.options=c:/my/path/to/cf/snippets, where that snippets directory is the value of your snippet path
# Right click on "copysnippets.properties" and select "Run as ANT build"
# This will copy the mxunit snippets into your existing Eclipse snippets directory, and it will copy the mxunit keycombos into your keycombos file. It will NOT overwrite your existing key combos. It will make a backup of your keycombos file.

{tip}The paths must be forward slashes\!
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; On my computer, the path is:
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; snipdir.options=C:/Users/Marc/EclipseWorkspaces/MyCFWorkspace/.metadata/.plugins/org.cfeclipse.cfml/snippets

this can be a comma-separated list, too, just in case you have multiple snippets locations
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; (for different eclipse installs, for example)


{tip}
h2. Step 3: Refresh your Snip Tree View

# Open the Snip Tree View
# Click the Refresh Icon
# You'll now have an mxunit directory with a bunch of snippets

h2. Step 4: Give it a shot

# Create a scratch file, call it "MyTest.cfc" or some such thing
# In that file, type "mxunit", and then hit "ctrl-j", which is the default key sequence to execute a snippet insertion
# Your file will now have a test case stub.

{tip}Explore the different packages and snippets in the "mxunit" directory in the Snip Tree View to see what other snippets are available\!{tip}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734406</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767175</id>
    <property name="body"><![CDATA[{toc}
[CFEclipse|http://cfeclipse.org] and ColdFusion Builder give you the same snippet functionality you know and love from ColdFusion Studio. When you download MXUnit, you get a directory of snippets (and key combos) that you can apply to your own snippets. These snippets live in mxunit/eclipse/snippets. You can copy them manually, or use a bundled ANT task.

You can read [my writeup on why I love snippets here|http://blog.mxunit.org/2009/04/timesavers-cfeclipse-snippets.html] . [Matt Gifford's|http://www.mattgifford.co.uk/coldfusion-builder-snippets/] is worth a read, too.


h2. Step 1: Where do your snippets live?

# &nbsp;In Eclipse:
## CFEclipse: go to Window \-\- Preferences \-\- CFEclipse
## ColdFusion Builder: Window \-\- Preferences \-\- ColdFusion \-\-  Snippets
# &nbsp;Copy the path to the snippets directory

h2. Step 2: Manually Copy the snippets


# &nbsp;open that path on your file system
# &nbsp;In a separate window, open the mxunit/eclipse/snippets/ directory on your file system. Copy the contents of that directory into the snippets directory that you just opened in #3
# &nbsp;optionally, copy the contents of snippets/mxunit/keyCombos.properties into your existing keyCombos.properties file

h2. Step 2 (optional): Use ANT to copy them for you

The first time you do this, it'll be a two step process. Step 1 has you creating a 1-line properties file; Step 2 has you executing the ANT task
# In mxunit/eclipse/snippets, create a file named copysnippets.properties
# Populate it like so: snipdir.options=c:/my/path/to/cf/snippets, where that snippets directory is the value of your snippet path
# Right click on "copysnippets.properties" and select "Run as ANT build"
# This will copy the mxunit snippets into your existing Eclipse snippets directory, and it will copy the mxunit keycombos into your keycombos file. It will NOT overwrite your existing key combos. It will make a backup of your keycombos file.

{tip}The paths must be forward slashes\!
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; On my computer, the path is:
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; snipdir.options=C:/Users/Marc/EclipseWorkspaces/MyCFWorkspace/.metadata/.plugins/org.cfeclipse.cfml/snippets

this can be a comma-separated list, too, just in case you have multiple snippets locations
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; (for different eclipse installs, for example)


{tip}

h2. Step 3: Refresh your Snip Tree View

# Open the Snip Tree View
# Click the Refresh Icon
# You'll now have an mxunit directory with a bunch of snippets

h2. Step 4: Give it a shot

# Create a scratch file, call it "MyTest.cfc" or some such thing
# In that file, type "mxunit", and then hit "ctrl-j", which is the default key sequence to execute a snippet insertion
# Your file will now have a test case stub.

{tip}Explore the different packages and snippets in the "mxunit" directory in the Snip Tree View to see what other snippets are available\!{tip}

h2. Step 5: Share your snippets with your other computers

If you work on more than one computer \-\- perhaps a computer at home, or a laptop, or a work machine \-\- and you wish to share all your snippets amongst those machines, [give this a read|http://blog.mxunit.org/2009/12/sharing-your-cfeclipse-coldfusion.html]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734407</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767176</id>
    <property name="body"><![CDATA[{toc}
[CFEclipse|http://cfeclipse.org] and [ColdFusion Builder|http://www.adobe.com/products/coldfusion/cfbuilder/features/] give you the same snippet functionality you know and love from ColdFusion Studio. When you download MXUnit, you get a directory of snippets (and key combos) that you can apply to your own snippets. These snippets live in mxunit/eclipse/snippets. You can copy them manually, or use a bundled ANT task.

You can read [my writeup on why I love snippets here|http://blog.mxunit.org/2009/04/timesavers-cfeclipse-snippets.html] . [Matt Gifford's|http://www.mattgifford.co.uk/coldfusion-builder-snippets/] is worth a read, too.


h2. Step 1: Where do your snippets live?

# &nbsp;In Eclipse:
## CFEclipse: go to Window \-\- Preferences \-\- CFEclipse
## ColdFusion Builder: Window \-\- Preferences \-\- ColdFusion \-\-  Snippets
# &nbsp;Copy the path to the snippets directory

h2. Step 2: Manually Copy the snippets


# &nbsp;open that path on your file system
# &nbsp;In a separate window, open the mxunit/eclipse/snippets/ directory on your file system. Copy the contents of that directory into the snippets directory that you just opened in #3
# &nbsp;optionally, copy the contents of snippets/mxunit/keyCombos.properties into your existing keyCombos.properties file

h2. Step 2 (optional): Use ANT to copy them for you

The first time you do this, it'll be a two step process. Step 1 has you creating a 1-line properties file; Step 2 has you executing the ANT task
# In mxunit/eclipse/snippets, create a file named copysnippets.properties
# Populate it like so: snipdir.options=c:/my/path/to/cf/snippets, where that snippets directory is the value of your snippet path
# Right click on "copysnippets.properties" and select "Run as ANT build"
# This will copy the mxunit snippets into your existing Eclipse snippets directory, and it will copy the mxunit keycombos into your keycombos file. It will NOT overwrite your existing key combos. It will make a backup of your keycombos file.

{tip}The paths must be forward slashes\!
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; On my computer, the path is:
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; snipdir.options=C:/Users/Marc/EclipseWorkspaces/MyCFWorkspace/.metadata/.plugins/org.cfeclipse.cfml/snippets

this can be a comma-separated list, too, just in case you have multiple snippets locations
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; (for different eclipse installs, for example)


{tip}

h2. Step 3: Refresh your Snip Tree View

# Open the Snip Tree View
# Click the Refresh Icon
# You'll now have an mxunit directory with a bunch of snippets

h2. Step 4: Give it a shot

# Create a scratch file, call it "MyTest.cfc" or some such thing
# In that file, type "mxunit", and then hit "ctrl-j", which is the default key sequence to execute a snippet insertion
# Your file will now have a test case stub.

{tip}Explore the different packages and snippets in the "mxunit" directory in the Snip Tree View to see what other snippets are available\!{tip}

h2. Step 5: Share your snippets with your other computers

If you work on more than one computer \-\- perhaps a computer at home, or a laptop, or a work machine \-\- and you wish to share all your snippets amongst those machines, [give this a read|http://blog.mxunit.org/2009/12/sharing-your-cfeclipse-coldfusion.html]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734408</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767178</id>
    <property name="body"><![CDATA[{toc}
In general, problems with the plugin come in two varieties:
* The plugin can't figure out the correct "cfc path" for a file
* The plugin can't communicate with the RemoteFacade URL

h2. CFC Path

If you've read the Help documentation in the plugin and you still can't figure out how to get the plugin to correctly derive the CFC path for your components, then please follow these steps:
# Close Eclipse
# Open eclipse.ini in the eclipse install directory, and add "-debug" on a separate line, toward the top of the file. For example, it might look like this:
# {code}-startup
plugins/org.eclipse.equinox.launcher_1.0.200.v20090520.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.win32.win32.x86_1.0.200.v20090519
-product
org.eclipse.epp.package.rcp.product
--launcher.XXMaxPermSize
256M
-showsplash
-debug
org.eclipse.platform
--launcher.XXMaxPermSize
256m
-vmargs
-Dosgi.requiredJavaVersion=1.5
-Xms40m
-Xmx512m{code}
# (Note the \-debug on a line by itself)
# Start Eclipse
# Try running your test. This will now put a bunch of stuff into Eclipse's error log view
# Open the Error Log View (window \-\- show view \-\- general \-\- Error Log)
# You'll see a number of entries with an "i" (Information) Icon in the top few rows. Copy the contents of those rows and email them to the MXUnit google group with an explanation of what the plugin should be doing that it's not doing
# Alternately, you can open the raw law and copy the appropriate lines which you'll find toward the bottom of the file. To get to the Eclipse error log: Help \-\- About Eclipse \-\- Installation Details \-\- View Error Log

After you do that, you can remove the \-debug from your eclipse.ini file



h2. RemoteFacade

* Ensure you can hit the URL in a browser. If not, there's your problem.
* If you can access the URL in a browser, but the plugin still can't talk to your URL, try opening that URL in Eclipse's internal browser
* If you're still getting "could not connect to facade URL" and can't figure it out, ensure that you don't have any onError stuff in your Application.cfc. Perhaps the errors are being swallowed?
* Try looking at the coldfusion error logs to see if anything in there sheds light on the problem


h2. Using the RemoteFacadeTester.cfm


As a last resort, open a file named "RemoteFacadeTester.cfm" in the mxunit/samples directory. This file is included in the distribution. At the top of the file, you'll see this content:
{code:controls=true}<!--- change these as necessary --->
<cfset mycomponent = "mxunit.PluginDemoTests.HodgePodgeTest">
<cfset myfunction = "testNotEquals">
<cfset remoteURL = "http://localhost/mxunit/framework/RemoteFacade.cfc?wsdl">{code}Replace the variables with the component, function, and URL you're trying to invoke. Run that RemoteFacadeTester.cfm in your browser and inspect the output. Look at the CFDumps. It'll show you the result of running the test when run directly, when run through a testsuite, and when run through the RemoteFacade.cfc URL. All 3 results should be roughly the same.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734410</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767181</id>
    <property name="body"><![CDATA[{toc}In general, problems with the plugin come in two varieties:
* The plugin can't figure out the correct "cfc path" for a file
* The plugin can't communicate with the RemoteFacade URL

h2. CFC Path

If you've read the Help documentation in the plugin and you still can't figure out how to get the plugin to correctly derive the CFC path for your components, then please follow these steps:
# Close Eclipse
# Open eclipse.ini in the eclipse install directory, and add "-debug" on a separate line, toward the top of the file. For example, it might look like this:
# {code}-startup
plugins/org.eclipse.equinox.launcher_1.0.200.v20090520.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.win32.win32.x86_1.0.200.v20090519
-product
org.eclipse.epp.package.rcp.product
--launcher.XXMaxPermSize
256M
-showsplash
-debug
org.eclipse.platform
--launcher.XXMaxPermSize
256m
-vmargs
-Dosgi.requiredJavaVersion=1.5
-Xms40m
-Xmx512m{code}
# (Note the \-debug on a line by itself)
# Start Eclipse
# Try running your test. This will now put a bunch of stuff into Eclipse's error log view
# Open the Error Log View (window \-\- show view \-\- general \-\- Error Log)
# You'll see a number of entries with an "i" (Information) Icon in the top few rows. Copy the contents of those rows and email them to the MXUnit google group with an explanation of what the plugin should be doing that it's not doing
# Alternately, you can open the raw law and copy the appropriate lines which you'll find toward the bottom of the file. To get to the Eclipse error log: Help \-\- About Eclipse \-\- Installation Details \-\- View Error Log

After you do that, you can remove the \-debug from your eclipse.ini file



h2. RemoteFacade

* Ensure you can hit the URL in a browser. If not, there's your problem.
* If you can access the URL in a browser, but the plugin still can't talk to your URL, try opening that URL in Eclipse's internal browser
* If you're still getting "could not connect to facade URL" and can't figure it out, ensure that you don't have any onError stuff in your Application.cfc. Perhaps the errors are being swallowed?
* Try looking at the coldfusion error logs to see if anything in there sheds light on the problem


h2. Using the RemoteFacadeTester.cfm


The RemoteFacadeTester.cfm is a great help in diagnosing problems, especially for removing the plugin from the equation so that you can follow normal ColdFusion debugging processes that you're used to.

Open a file named "RemoteFacadeTester.cfm" in the mxunit/samples directory. This file is included in the distribution. At the top of the file, you'll see this content:
{code:controls=true}<!--- change these as necessary --->
<cfset mycomponent = "mxunit.PluginDemoTests.HodgePodgeTest">
<cfset myfunction = "testNotEquals">
<cfset remoteURL = "http://localhost/mxunit/framework/RemoteFacade.cfc?wsdl">{code}Replace the variables with the component, function, and URL you're trying to invoke. Run that RemoteFacadeTester.cfm in your browser and inspect the output. Look at the CFDumps. It'll show you the result of running the test when run directly, when run through a testsuite, and when run through the RemoteFacade.cfc URL. All 3 results should be roughly the same.

{warning}If you're using this to test code that depends on setup in&nbsp; your Application.cfc \-\- especially ORM-related functionality, then you'll need to copy this file into your application{warning}

h2. A note on debugging your tests

It's not uncommon for me to get asked about problems with the plugin that end up not being plugin-related at all. The first step to debugging your problems is to confirm to the best of your ability that the behavior you're experiencing is definitely related only to running the test from the plugin and not anywhere else. That means you have to do some legwork, son. *Run your code in isolation*. Run it in a web browser. Create a quicky .cfm page and run your code from in there. Or use the RemoteFacadeTester up above.&nbsp;

If you're getting *behavior* in your code that you do not expect, then first seek to understand whether that behavior has anything at all to do with testing, or whether it's simply that there's a problem in your code. For example, if you have a test that executes some ORM functionality, and rows aren't being inserted in your test but they do in your standalone code example, ensure that the code is doing *exactly the same thing* in both situations. ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734413</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767170</id>
    <property name="body"><![CDATA[[CFEclipse|http://cfeclipse.org] gives you the same snippet functionality you know and love from ColdFusion Studio. And now it goes a step further: SnipEx servers. This means you can get snippets from other folks simply by pointing to a snipex URL.
MXUnit uses the CFSnippets.org snipex server created by Todd Sharp.


This set of instructions assumes you know how to use snippets in CFEclipse (it does not assume you know how to use snipex). Please read about snippets first if you don't know what they are. If you're interested in learning more about snipex, please read that, too. It's quick and short and good.

*Step 1: Clear your snippet cache*
NOTE: you can skip this step if you've never set up the cfsnippets.org snipex server
(From Ray Camden's blog post)
&nbsp;&nbsp; 1. Change to your Eclipse workspace. Mine was at /Users/ray/Documents/workspace
&nbsp;&nbsp; 2. Change to .metadata/.plugins/org.cfeclipse.cfml/snipex
&nbsp;&nbsp; 3. Delete all XML files
&nbsp;&nbsp; 4. Restart Eclipse

*Step 2: Add the cfsnippets.org snipex server*

&nbsp;&nbsp; 1. Open the Snip Tree View
&nbsp;&nbsp; 2. Click the little white upside down triangle to the far right
&nbsp;&nbsp; 3. Select "Edit SnipEx Servers"
&nbsp;&nbsp; 4. Add [http://cfsnippets.org/model/snippets/snipEx/snipEx.cfc] into the first open URL box
&nbsp;&nbsp; 5. Click Apply
&nbsp;&nbsp; 6. Restart Eclipse

*Step 3: Try it out*
&nbsp;&nbsp; 1. Open any existing test case or create a new one. Or just pop open the scribble pad.
&nbsp;&nbsp; 2. Open the snip tree view
&nbsp;&nbsp; 3. You'll now see "CFSnippets.org" as a new entry in the tree
&nbsp;&nbsp; 4. Expand the tree. Look in the tree for "MXUnit". Expand it.
&nbsp;&nbsp; 5. You'll see all available snippets for MXUnit in there.
&nbsp;&nbsp; 6. To insert a snippet, just double click it\!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734402</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767172</id>
    <property name="body"><![CDATA[[CFEclipse|http://cfeclipse.org] and ColdFusion Builder give you the same snippet functionality you know and love from ColdFusion Studio. When you download MXUnit, you get a directory of snippets (and key combos) that you can apply to your own snippets. These snippets live in mxunit/eclipse/snippets. You can copy them manually, or use a bundled ANT task.

h2. Step 1: Where do your snippets live?

# &nbsp;In Eclipse:
## CFEclipse: go to Window \-\- Preferences \-\- CFEclipse
## ColdFusion Builder: Window \-\- Preferences \-\- ColdFusion \-\-  Snippets
# &nbsp;Copy the path to the snippets directory

h2. Step 2: Manually Copy the snippets


# &nbsp;open that path on your file system
# &nbsp;In a separate window, open the mxunit/eclipse/snippets/ directory on your file system. Copy the contents of that directory into the snippets directory that you just opened in #3
# &nbsp;optionally, copy the contents of snippets/mxunit/keyCombos.properties into your existing keyCombos.properties file

h2. Step 2 (optional): Use ANT to copy them for you

The first time you do this, it'll be a two step process. Step 1 has you creating a 1-line properties file; Step 2 has you executing the ANT task
# In mxunit/eclipse/snippets, create a file named copysnippets.properties
# Populate it like so: snipdir.options=c:/my/path/to/cf/snippets, where that snippets directory is the value of your snippet path
# Right click on "copysnippets.properties" and select "Run as ANT build"

{tip}The paths must be forward slashes\!
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; On my computer, the path is:
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; snipdir.options=C:/Users/Marc/EclipseWorkspaces/MyCFWorkspace/.metadata/.plugins/org.cfeclipse.cfml/snippets

this can be a comma-separated list, too, just in case you have multiple snippets locations
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; (for different eclipse installs, for example)


{tip}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734404</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767190</id>
    <property name="body"><![CDATA[*Eclipse Update Site URL:* [http://mxunit.org/update]

h2. Detailed Instructions

Doesn't get much easier\! Install, Configure, Run ...

# Make sure the [MXUnit Framework|Install MXUnit] is installed.
# Get [Eclipse|http://www.eclipse.org/] if you haven't already
# In Eclipse, go to {{Help > Software Updates > Find and Install}}
!plugin-install-1.png!
# Select the {{Search for new features}} radio button. Click Next
!plugin-install-2.png!
# Click the {{New Remote Site}} button.
!plugin-install-3.png!
# Add the url [http://mxunit.org/update] to the URL field. Give it any Name; e.g, MXUnit Plugin. Click OK.
!plugin-install-4.png!
# Select All features to be installed. Click Next.
!plugin-install-5.png!
# Accept License Agreement. Click Next.
!plugin-install-6.png!
# Click Finish on the Install Dialogue.
!plugin-install-7.png!
# The plugin will download ...
!plugin-install-8.png!
# Click Install All.
!plugin-install-9.png!
# Allow the plugin to install ...
!plugin-install-10.png!
# Click Yes when prompted to restart Eclipse ...
!plugin-install-11.png!

*Next - [Configure and Test the Plugin|Configure and Test the Plugin]*]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734422</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767194</id>
    <property name="body"
      ><![CDATA[Placeholder intended to describe ways to install and configure MXUnit when not installed directly under the web root. This could also address issues such as custom Ant and HTTP runners. Lastly, this could also present ideas for configuring and running MXUnit with various frameworks.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734426</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767196</id>
    <property name="body"><![CDATA[h2. MXUnitAntTask \- Version: 1.0.3


h3. Description

Runs MXUnit tests and saves the output to the directory specified by the outputdir parameter.

This version uses HTTP to connect to the MXUnit test runner running on an Adobe ColdFusion server. Future plans may include the ability to run tests via the TCP/IP gateway in CF. Please let us know if this is something  you would like to see.

This supports the following HTTP authentication mechanisms - BASIC, DIGEST, and NTLM.

The default testrunner (/mxunit/runner/HttpAntRunner.cfc) accepts either individual test cases or directories of tests to run. This runner returns only JUnitReport formated XML. These XML files{_}may_ optionally be used by the JUnitReport Ant task to generate nice HTML reports. Example usage:

{code}
<junitreport todir="${junit.out.dir.html}">
  <fileset dir="${output.dir}">  
    <include name="*.xml"/>
   </fileset>  
   <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>  
  </junitreport> 
{code}

Note that the mxunit-ant.jar must be in Ant's class path. This can be done by specifying the taskdef tag like this:

{code}
<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}" /> 
{code}

 and then coding the rest of the MXunit Ant task ...

{code}
<mxunittask server="localhost" 
            port="8500" 
            defaultrunner="/mxunit/runner/HttpAntRunner.cfc" 
            outputdir="${output.dir}" 
            verbose="true" haltonerror="true"> ... 
{code}

In theory, one should be able to run multiple tests across multiple domains, as long as those tests are accessible via Http.

h3. Parameters

| *Attribute* | *Description* | *Required* | *Default* |
| server | The Http server name where MXUnit is located. | Yes | |
| port | The port the Http server is listening on. | No | 80 |
| outputdir | A directory in which to save JUnit XML test results. | No | |
| haltonerror | Instructs the task to stop executing when an _ERROR_ is detected. \\
 This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| haltonfailure | Instructs the task to stop executing when a _FAILURE_ is detected. \\
 This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| errorproperty | The name of a property to set in the event of an error. | No | |
| failureproperty | The name of a property to set in the event of a failure (errors are considered failures as well). | No | |
| defaultrunner | The testrunner responsible for accepting requests. | No | /mxunit/runner/HttpAntRunner.cfc |
| verbose | Flag to indicate to output additional information. | No | false |
| testResultsSummary | Name of the properties file the task creates. This file is a Java      Properties file that records a summary of all the tests the task      has executed and is saved to the location specified in      the $\{outputdir\} attribute.      This can be useful in automated deployments, for example,      if you wish inspect the results of all the tests run prior to deployment.      This offers a deeper level of granularity than the haltonerror or haltonfailure offers. \\
 The task generates the following properties that can be read by Ant using      the following syntax:\\
 &lt;br&gt;&amp;amp;lt;property file="$\{outputdir}/testresults.properties" /&amp;amp;gt;&lt;br&gt;testresults.properties looks something like:#Sat Mar 01 22:20:25 EST 2008
success.ratio=.99
total.failures=2
failure.ratio=.01
total.errors=0
error.ratio=.00
total.time=8016
total.runs=151
error.ratio is the number of errors to the total number of tests runs. \\
 failure.ratio is the number of failures to the total number of tests runs. \\
 success.ratio is the total number of tests run to the total number of errors and failures combined.\\ | No | testresults.properties |

h3. Parameters specified as nested elements


h3. directory

<directory ... >s are used to specify groups of tests to run.

| *Attribute* | *Description* | *Required* | *Default* |
| path | Directory of tests to run. | Yes | |
| componentPath | A prefix to the components being tested. This is a performance         attribute. If specified, directory tests will run faster. Otherwise, the framework         will discover the componentPath using built in Adobe ColdFusion functions.\\
 Example: componentPath="mxunit.tests.framework". \\
 MXUnit will correctly prepend this to all the         tests in the specified directory. | No\\

 *Optionallity is deprecated. Future release will require this attribute to be       specified.* | |
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
| recurse | Flag to indicate to run all tests in sub directories. | No | false |
| excludes | Comma-delimitted list of files not to include in the test suite. | No | none |
----

h3. testcase

A <testcase> allows you to specify one or more individual test cases to run.
| *Attribute* | *Description* | *Required* | *Default* |
| name | The fully qualified ColdFusion component name (com.foo.bar.MyCFC) | Yes | |
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc" |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
----

h3. Examples

This example illustrates a minimal amount of code required to run one directory of tests.  Note that this example does not save any results. This may be useful for automated deployments.

{code}
<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="runtests">

  <target name="runtests" description="Run a dir of tests recursively">

   <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />
   <mxunittask server="localhost" >
     <directory path="C:\CFusionMX7\wwwroot\mxunit\tests\framework" recurse="true" componentPath="mxunit.tests.framework" />
   </mxunittask>

  </target>
</project>
{code} 

This example runs both directories of and individual tests, saves the output to $\{output.dir}, generates a JUnit report, and  opens a web browser with the JUnit report. 

{code}
<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">

    <property name="mxunit.jar" value="../ant/lib/mxunit-ant.jar" />
    <property name="junit.out.dir.xml" value="testresults" />
    <property name="junit.out.dir.html" value="testresults/html" />
    <property name="output.dir" value="tmp" />
    <property name="style.dir" value="../ant/xsl/" />



   <target name="main" depends="browse" />


   <target name="runtests" description="Make output directories and run the MXUnit task">
     <mkdir dir="${junit.out.dir.html}" />
     <mkdir dir="${output.dir}" />
     <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />

       <mxunittask server="localhost" port="8500"
                   defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
                   connectionMethod="http"
                   outputdir="${output.dir}"
                   authmethod="basic"
                   username="foo"
                   password="bar"
                   verbose="true">

          <testcase name="mxunit.tests.framework.AssertTest" packageName="mxunit.asserttests" />
          <testcase name="mxunit.tests.framework.AssertDecoratorTest" packageName="mxunit.assertdecoratortests" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                     packageName="mxunit.framework"
                     recurse="false"
                     componentPath="mxunit.tests.framework"
                     excludes="none" />

           <!-- This has a bad componentPath and should fail -->
           <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                      remoteMethod="run"
                      path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                      packageName="mxunit.bad.framework"
                      recurse="false"
                      componentPath="mxunit.foo.bar"
                      excludes="none" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\samples"
                     packageName="mxunit.tests.samples"
                     recurse="false"
                     excludes="" />


      </mxunittask>
  </target>




  <target name="junitreport" depends="runtests" description="Create a report for the rest result">
     <mkdir dir="${junit.out.dir.html}"/>
     <junitreport todir="${junit.out.dir.html}">
        <fileset dir="${output.dir}">
           <include name="*.xml"/>
         </fileset>
         <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>
      </junitreport>
      <delete dir="${output.dir}" />
    </target>


  <!-- To fire up a browser with the test results. May not work on your machine -->

  <target name="browse" depends="junitreport">
    <exec executable="C:\Program Files\Internet Explorer\iexplore.exe">
      <arg value="C:\CFusionMX7\wwwroot\mxunit\tests\testresults\html\index.html"/>
    </exec>
  </target>



</project>

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734428</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767183</id>
    <property name="body"><![CDATA[{toc}In general, problems with the plugin come in these varieties:
* The plugin can't figure out the correct "cfc path" for a file
* The plugin can't communicate with the RemoteFacade URL
* My tests load but either never finish or throw inexplicable errors with no stack trace

h2. CFC Path

If you've read the Help documentation in the plugin and you still can't figure out how to get the plugin to correctly derive the CFC path for your components, then please follow these steps:
# Close Eclipse
# Open eclipse.ini in the eclipse install directory, and add "-debug" on a separate line, toward the top of the file. For example, it might look like this:
# {code}-startup
plugins/org.eclipse.equinox.launcher_1.0.200.v20090520.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.win32.win32.x86_1.0.200.v20090519
-product
org.eclipse.epp.package.rcp.product
--launcher.XXMaxPermSize
256M
-showsplash
-debug
org.eclipse.platform
--launcher.XXMaxPermSize
256m
-vmargs
-Dosgi.requiredJavaVersion=1.5
-Xms40m
-Xmx512m{code}
# (Note the \-debug on a line by itself)
# Start Eclipse
# Try running your test. This will now put a bunch of stuff into Eclipse's error log view
# Open the Error Log View (window \-\- show view \-\- general \-\- Error Log)
# You'll see a number of entries with an "i" (Information) Icon in the top few rows. Copy the contents of those rows and email them to the MXUnit google group with an explanation of what the plugin should be doing that it's not doing
# Alternately, you can open the raw law and copy the appropriate lines which you'll find toward the bottom of the file. To get to the Eclipse error log: Help \-\- About Eclipse \-\- Installation Details \-\- View Error Log

After you do that, you can remove the \-debug from your eclipse.ini file



h2. RemoteFacade

* Ensure you can hit the URL in a browser. If not, there's your problem.
* If you can access the URL in a browser, but the plugin still can't talk to your URL, try opening that URL in Eclipse's internal browser
* If you're still getting "could not connect to facade URL" and can't figure it out, ensure that you don't have any onError stuff in your Application.cfc. Perhaps the errors are being swallowed?
* Try looking at the coldfusion error logs to see if anything in there sheds light on the problem


h2. Using the RemoteFacadeTester.cfm


The RemoteFacadeTester.cfm is a great help in diagnosing problems, especially for removing the plugin from the equation so that you can follow normal ColdFusion debugging processes that you're used to.

Open a file named "RemoteFacadeTester.cfm" in the mxunit/samples directory. This file is included in the distribution. At the top of the file, you'll see this content:
{code:controls=true}<!--- change these as necessary --->
<cfset mycomponent = "mxunit.PluginDemoTests.HodgePodgeTest">
<cfset myfunction = "testNotEquals">
<cfset remoteURL = "http://localhost/mxunit/framework/RemoteFacade.cfc?wsdl">{code}Replace the variables with the component, function, and URL you're trying to invoke. Run that RemoteFacadeTester.cfm in your browser and inspect the output. Look at the CFDumps. It'll show you the result of running the test when run directly, when run through a testsuite, and when run through the RemoteFacade.cfc URL. All 3 results should be roughly the same.

{warning}If you're using this to test code that depends on setup in&nbsp; your Application.cfc \-\- especially ORM-related functionality, then you'll need to copy this file into your application{warning}

h2. My tests load but either never finish or throw inexplicable errors with  no stack trace

Check the following:
# If you're pointing to a custom RemoteFacade.cfc that lives in your project (because you need Application.cfc to run, for example),
## Something might be failing in Application.cfc itself. Use the RemoteFacadeTester described above for this
## Code in onRequestStart(), onRequest(), or onRequestEnd() might be causing errors or even swallowing errors
# If every test throws the same error, check to see if something's erroring in your TestCase's "setUp()" or "tearDown()" functions. Also, check if you have "constructor" code running that could be causing errors
# If you're extending a TestCase that isn't mxunit.framework.TestCase, but instead some other superclass that eventually extends mxunit.framework.TestCase, ensure that no weird errors are occurring in your superclass tests
# If you're testing ORM functionality, ensure that no errors are being thrown at the end of the request. This can happen when ORM flushes at request end, for example

h2. A note on debugging your tests

It's not uncommon for me to get asked about problems with the plugin that end up not being plugin-related at all. The first step to debugging your problems is to confirm to the best of your ability that the behavior you're experiencing is definitely related only to running the test from the plugin and not anywhere else. That means you have to do some legwork, son. *Run your code in isolation*. Run it in a web browser. Create a quicky .cfm page and run your code from in there. Or use the RemoteFacadeTester up above.&nbsp;

If you're getting *behavior* in your code that you do not expect, then first seek to understand whether that behavior has anything at all to do with testing, or whether it's simply that there's a problem in your code. For example, if you have a test that executes some ORM functionality, and rows aren't being inserted in your test but they do in your standalone code example, ensure that the code is doing *exactly the same thing* in both situations.This common problem happens to all of us\! I bring it up only because it is so common and can be quite frustrating to debug. [Here's an example of what I'm talking about|http://groups.google.com/group/mxunit/browse_thread/thread/fcc85d132fe49dfa/2b534667e023682e?lnk=gst&q=2098#2b534667e023682e]. Again, we don't mind helping debug, at all\! But we don't you to be slowed down for hours going down one path when in fact the answer was something else entirely. So, this is a kindly public service announcement.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734415</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767184</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links
* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://code.google.com/p/mxunit/issues/list]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-row}
{table}
{column}

{column:width=3%}

{column}


{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}

{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734416</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767186</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [SVN Source Code -- 2.0 Branch|http://mxunit.googlecode.com/svn/mxunit/branches/MIT/]
* [Github Fork|http://github.com/virtix/mxunit]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://code.google.com/p/mxunit/issues/list]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.


{table-row}
{table}
{column}
{column:width=3%}


{column}

{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734418</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767188</id>
    <property name="body"><![CDATA[* The file is a component (a .cfc file)
* The filename either starts or ends with "Test"
* The component extends mxunit.framework.TestCase or extends a component that eventually extends mxunit.framework.TestCase
* The TestCase can contain a setUp() and tearDown() function that will run prior to and after each and every test
* The TestCase can contain any number of public methods. Those public methods are considered tests regardless of their name, and MXUnit will run them as tests. Failures will be recorded as failures; errors as errors; and successes as successes
* Inside of your tests, you make assertions on the results of functions that you call on your component under test
* Any private methods are not considered tests and will not be run by MXUnit
* To very quickly get started, you can run the test by loading it in the browser and suffixing it with "?method=runTestRemote", like so:
** http://localhost/myapp/tests/MyTest.cfc?method=runTestRemote
* All the other ways of running tests, including in the Eclipse plugin, in a DirectoryTestSuite, or with ANT, are covered elsewhere in the docs

*Study this TestCase skeleton to learn more*


{code:language=cf|title=MyTest.cfc|controls=true|linenumbers=true}
<cfcomponent extends="mxunit.framework.TestCase">

	<!--- this will run before every single test in this test case --->
	<cffunction name="setUp" returntype="void" access="public" hint="put things here that you want to run before each test">
		<cfset obj = createObject("component","ObjectUnderTest")>

	</cffunction>

	<!--- this will run after every single test in this test case --->
	<cffunction name="tearDown" returntype="void" access="public" hint="put things here that you want to run after each test">

	</cffunction>

	<!--- your test. Name it whatever you like... make it descriptive. --->
	<cffunction name="xxx_should_xxxx_When_xxx" returntype="void" access="public">
		<!--- exercise your component under test --->
		<cfset var result = obj.doSomething()>

		<!--- if you want to "see" your data -- including complex variables, you can pass them to debug() and they will be available to you either in the HTML output or in the Eclipse plugin via rightclick- "Open TestCase results in browser" --->
		<cfset debug(result)>

		<!--- make some assertion based on the result of exercising the component --->
		<cfset assertEquals("SomeExpectedValue",result,"result should've been 'SomeExpectedValue' but was #result#")>

	</cffunction>

	<cffunction name="xxx_should_yyy_when_zzz" returntype="void">
    	<cfset var XX = "">
    	<cfset fail("xxx_should_yyy_when_zzz not yet implemented")>


    </cffunction>



	<!--- this won't get run b/c it's private --->
	<cffunction name="somePrivateFunction" access="private">
		<cfset marc.getBankAccount().add("5 meeeeelion dollars")>
	</cffunction>

</cfcomponent>

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734420</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767243</id>
    <property name="body"><![CDATA[h2. Why MXUnit?

Several fine unit testing frameworks exist for ColdFusion. Why choose MXUnit?

At its core, MXUnit grew around the concept of making things easier for the person writing the tests. We believe people shy away from unit testing because the perception (sometimes justified\!) is that it's too inconvenient. We sought to change that.

h3. Convenience features

* [Easy to see your data|View Debug Output] with cfoutput, cfdump, and debug()
* Easy to [see your cfcatch|View Debug Output#cfcatch] struct when errors occur
* Test [single methods|Running single test methods] inside a test case
* Easy "[directory runner|Running directories of tests]" for running entire directories of tests
* Easy to [test private functions|Test Private Methods] in your components
* Ability to [switch to message-first style assertions|Message First Assertions] to help ease transition from other frameworks

In addition to convenience features, MXUnit contains all the essential components of any unit testing framework:

h3. Framework Must-Haves

Test Generator for existing components

[Eclipse Plugin|Install the Eclipse Plugin] with built-in help and [keyboard shortcuts|Eclipse Plugin Keyboard Shortcuts]

Ant Integration

Plugin architecture for creating custom assertions

Many different [output formats|TestResult Output Formats]

* Basic HTML results
* ExtJS "fancy" grid results
* XML results
* JUnitReport XML results (for use with the ANT task and the JUnitReport Ant Task)
* Query results

h3. Active Development

* We're actively developing MXUnit and have more convenience features in the works. A sample:
* Easier exception testing
* Easier auto-rollback for tests that access databases
* JUnit 4 style "Hamcrest" assertions (assertThat(....))
* Customizable test generation]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734482</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767241</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-cell}

*MXUnit Office Hours*

Every few weeks we [get together on Adobe Connect|http://experts.na3.acrobat.com/mxunit-office-hours/] to chat about testing. Meetups start at Noon EST ([convert|http://www.timeanddate.com/worldclock/converter.html]). You're automatically promoted to presenter so bring a microphone. Here's the schedule:

{google-calendar:mode=agenda|width=300|height=300}[http://www.google.com/calendar/ical/h5eh6m4iirte5b7u3r997ul5q0%40group.calendar.google.com/public/basic.ics]{google-calendar}



{table-row}
{table}
{column}
{column:width=3%}



{column}
{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734480</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767234</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-cell}

*MXUnit Office Hours*

Every few weeks we [get together on Adobe Connect|map http://experts.na3.acrobat.com/mxunit-office-hours/] to chat about testing. Meetups start at Noon EST ([convert|http://www.timeanddate.com/worldclock/converter.html]). You're automatically promoted to presenter so bring a microphone. Here's the schedule:

{google-calendar:mode=agenda|width=300|height=300}[http://www.google.com/calendar/ical/h5eh6m4iirte5b7u3r997ul5q0%40group.calendar.google.com/public/basic.ics]{google-calendar}



{table-row}
{table}
{column}
{column:width=3%}



{column}
{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734472</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767235</id>
    <property name="body"
      ><![CDATA[In the default download I received the only folder under mxunit/doc is 'api'.  This throws the instructions off a bit unless you add a tutorial directory under 'doc', then you can continue as instructed.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5734474</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767231</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-cell}

*MXUnit Office Hours*

Every few weeks we get together to chat about testing. Here's the schedule:

{google-calendar:mode=agenda|width=300|height=300}[http://www.google.com/calendar/ical/h5eh6m4iirte5b7u3r997ul5q0%40group.calendar.google.com/public/basic.ics]{google-calendar}



{table-row}
{table}
{column}
{column:width=3%}



{column}
{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734469</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767232</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-cell}

*MXUnit Office Hours*

Every few weeks we get together on Adobe Connect to chat about testing. Meetups start at Noon EST ([convert|http://www.timeanddate.com/worldclock/converter.html]). You're automatically promoted to presenter so bring a microphone. Here's the schedule:

{google-calendar:mode=agenda|width=300|height=300}[http://www.google.com/calendar/ical/h5eh6m4iirte5b7u3r997ul5q0%40group.calendar.google.com/public/basic.ics]{google-calendar}



{table-row}
{table}
{column}
{column:width=3%}



{column}
{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734470</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767258</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734500</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767261</id>
    <property name="body"><![CDATA[{toc}

h2. Introduction

Bob Silverberg and I were trying to tackle a memory problem in his unit tests for ValidateThis. Running CF with 1GB of memory, he'd get Out Of Memory Errors and his tests would not complete when run in the browser \-\- i.e. all tests running in a single page request. When run through Eclipse \-\- where each test method is run as a separate request \-\- he had no troubles.

This is our story.

h2. First Line of Defense

I always suggest these as the first culprits in memory problems:
# Memory Tracking turned on in the CF Server Monitor
# Request output debugging turned on in CFAdmin (I'm NOT talking about the Line Debugger... just regular old debug output)

In and of themselves neither of these are evil; however, when an application, or a particular page, does a tremendous amount of work, both of those can become problems in a hurry.

Bob turned both off, and he was still running out of memory.

h2. My first task...

I needed to replicate the issue. I got all his code and ran his tests. Fortunately, I, too, received an OOME. I then turned off debugging and, sure enough, the tests completed as expected (though slowly).

So, lesson #1 kids: debugging can crash your server

{tip}At this point, I no longer have problems, but Bob still does. Thus, we're not done yet{tip}

h2. Meanwhile, Back at Bob's Ranch

I suggested to Bob that he start to troubleshoot this by adding the "excludes" attribute onto his DirectoryTestSuite, and initially exclude everything but the first test, then incrementally remove tests from the Excludes until he got the error. Then, he'd probably know which test was causing troubles.&nbsp;

Normally, this is a fine approach. It turns out that it wouldn't have helped anyway. But hey, this stuff is hit and miss.

h2. Gathering data

My next step was to get a heap dump of ColdFusion as it was running the tests... I needed to see what was consuming all the memory. To do so, I used the java "jmap" command to get the dump and Eclipse MAT to analyze the dump. This is not nearly as complicated as it sounds, and I wrote up [full instructions here|http://blog.mxunit.org/2010/01/using-eclipse-mat-to-track-down.html] .

h2. Inspecting data


h3. Narrowing down to "FusionContext"


I used Eclipse MAT to inspect the heap dump. When I first loaded it, I opened the "Dominator Tree" and saw the following two entries sucking up a combined 200+MB of RAM:
* coldfusion.filter.FusionContext
* coldfusion.bootstrat.BoostrapClassLoader

Let's look at the first few consumers for each of these: !memory1.png|align=center!
Now, looking at the BootstrapClassLoader, I see a FontSetBuilder taking up a whole lot of memory. I have no idea what the hell that is, so I ignore it. I figure I can't do anything about it anyway, so....

Let's look at the big old HashMap in the FusionContext. That looks like something I might be able to do something about. Why? Well, I don't know... I just imagine that any variables my app is creating live in there.

h3. Narrowing down to a Code File

{tip}When working with Eclipse MAT, keep your eyes on the "Inspector View" as you select different items in the "dominator tree" editor{tip}


This was kind of just dumb luck and I'm not sure exactly what it means. Nonetheless, if you look at the image below, you'll see that when I opened up the HashMap in the FusionContext I had a whole mess of entries for "CFDummyComponent". Clicking on one of those showed \-\- over in the "Inspector" view on the left, that the file was "cfMockRegistry2ecfc" followed by some numbers. This told me that the file associated with that component was "*MockRegistry.cfc*". !memory2.png|thumbnail,align=center!
Then, drilling into one of those instances, you see a lot of *coldfusion.tagext.io.OutputTag* instances. !memory3.png|thumbnail,align=center!

h2. Light Bulb

So here's where I put things together:
# File named MockRegistry.cfc
# Tons of OutputTag instances

What could this mean?

Well, that must mean that something's being output in that file. But what? it's a component that sets up mocking... why would it be outputting anything?

Sure enough, opening the file showed me the answer: *<cfcomponent output="true">*

h2. Full Disclosure

I left out a step in the lightbulb moment, but the problem is that I cannot for the life of me figure out how to get back to what I saw. Basically, when I was digging through the heap dump in MAT, I saw an instance of "cfsavecontent". That is truly what made me suspicious about the output problem. But, I can't find it again... so be it.

h2. Conclusion

I set output="false" on MockRegistry.cfc, ran all of the unit tests to confirm that didn't break anything. Then I ran Bob's code again. Bingo... no OOME errors. In addition, while the tests were running, I took another heap dump, and Sure enough, memory was down to a completely reasonable level. Rather than consuming 100+MB of memory, FusionContext was down in the teens.

*Does this mean output="true" is bad?*&nbsp; No, it doesn't. It means a) don't use it unless you need it, and b) something's going on under the hood in CF where, if you have output="true" on in a component, it seems to keep a reference to&nbsp; everything in that page's context, such that normal garbage collection can't do its job because the current stack still has a reference to everything in that OutputTag. It appears that when output="false", the data in the component and the component's functions are not being referenced by an OutputTag and as such are free to be reclaimed by the garbage collector]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734503</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767260</id>
    <property name="body"><![CDATA[{toc}

h2. Introduction

Bob Silverberg and I were trying to tackle a memory problem in his unit tests for ValidateThis. Running CF with 1GB of memory, he'd get Out Of Memory Errors and his tests would not complete when run in the browser \-\- i.e. all tests running in a single page request. When run through Eclipse \-\- where each test method is run as a separate request \-\- he had no troubles.

This is our story.

h2. First Line of Defense

I always suggest these as the first culprits in memory problems:
# Memory Tracking turned on in the CF Server Monitor
# Request output debugging turned on in CFAdmin (I'm NOT talking about the Line Debugger... just regular old debug output)

In and of themselves neither of these are evil; however, when an application, or a particular page, does a tremendous amount of work, both of those can become problems in a hurry.

Bob turned both off, and he was still running out of memory.

h2. My first task...

I needed to replicate the issue. I got all his code and ran his tests. Fortunately, I, too, received an OOME. I then turned off debugging and, sure enough, the tests completed as expected (though slowly).

So, lesson #1 kids: debugging can crash your server

{tip}At this point, I no longer have problems, but Bob still does. Thus, we're not done yet{tip}

h2. Meanwhile, Back at Bob's Ranch

I suggested to Bob that he start to troubleshoot this by adding the "excludes" attribute onto his DirectoryTestSuite, and initially exclude everything but the first test, then incrementally remove tests from the Excludes until he got the error. Then, he'd probably know which test was causing troubles.&nbsp;

Normally, this is a fine approach. It turns out that it wouldn't have helped anyway. But hey, this stuff is hit and miss.

h2. Gathering data

My next step was to get a heap dump of ColdFusion as it was running the tests... I needed to see what was consuming all the memory. To do so, I used the java "jmap" command to get the dump and Eclipse MAT to analyze the dump. This is not nearly as complicated as it sounds, and I wrote up [full instructions here|http://blog.mxunit.org/2010/01/using-eclipse-mat-to-track-down.html] .

h2. Inspecting data

I used Eclipse MAT to inspect the heap dump. When I first loaded it, I opened the "Dominator Tree" and saw the following two entries sucking up a combined 200+MB of RAM:
* coldfusion.filter.FusionContext
* coldfusion.bootstrat.BoostrapClassLoader

Let's look at the first few consumers for each of these: !memory1.png|align=center!
Now, looking at the BootstrapClassLoader, I see a FontSetBuilder taking up a whole lot of memory. I have no idea what the hell that is, so I ignore it. I figure I can't do anything about it anyway, so....

Let's look at the big old HashMap in the FusionContext. That looks like something I might be able to do something about. Why? Well, I don't know... I just imagine that any variables my app is creating live in there.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734502</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767250</id>
    <property name="body"><![CDATA[h2. Viewing Output

When writing unit tests, particularly with TDD, sometimes you need to see your data. Maybe you're working on a complex regular expression and you're building it up iteratively, watching the string mutate as you change the regex. Maybe you need to visualize the structure of a complex, uh, structure. Maybe when an error occurs, you actually want to see the entire cfcatch struct because you have so far failed in your mission to jack into the ether  and absorb the bits and bytes into your neurons. Maybe you just want to see the damn query.

Typically, this is pretty annoying to do in unit tests. Sometimes, it's just not possible if the framework doesn't make it easy for you. So you end up writing little tester files that create the object you're working with, do a cfdump or something, and then throw that work away when you've seen what you need to see. Icckkkkkk.

MXUnit makes seeing your data easy. In fact, making things easier is one of our core tenets. With MXUnit, you can use CFOUTPUT and CFDUMP inside the test cases themselves. But there's an even better way to see your data: debug().

Why is it better? If you use cfoutput and cfdump inside your tests, you'll only see that output if the test passes. But with debug(), you're guaranteed to see the output of any debug() calls, even if the test fails! Of course, any calls to debug() after a failed assertion won't show up, because as soon as an assertion fails the test method stops executing.

h3. How to use debug()

{code:title=Debugging Example}
<cfcomponent extends="mxunit.framework.TestCase">
	<cffunction name="testExecuteTestCase" returntype="void" hint="">
		<cfset var name = "mxunit.PluginDemoTests.DoubleMethodTest">
		<cfset var methods = "">
		<cfset var results = "">
		
		<cfset results = rf.executeTestCase(name,methods,"")>
		<cfset methods = rf.getComponentMethods(name)>
		
		<cfset debug(results)>
		
		<cfset assertTrue(isStruct(results),"results should be struct")>
		<cfset assertEquals(ArrayLen(methods),ArrayLen(StructKeyArray(results[name])),"")>
	</cffunction>
</cfcomponent>
{code}

*You can use debug() anywhere you'd normally use CFDUMP.*
 
# Caveat: No promises on how it'll behave if you try to call debug() on components and then run the test in the Eclipse plugin. You're bound to get an axis/webservice/xml parse error of some form or another.
# Caveat: if you're calling debug() on big data, like a big old struct, it's going to make your tests run slower! This is because CFDUMP, starting after CF 6.1, turned into a massive bloated slow pig of a tag, and debug() simply calls cfdump on whatever you're passing into it. I think there are a few stray Thread.sleep(2000) calls in the source code somewhere that they forgot to take out.

# Tip: I keep debug() calls on during iterative development because I probably want to see the data. When I'm finished, it's not uncommon for me to go comment them out so that they won't affect performance. Do what you want. If you don't mind a bit of a performance penalty, then don't bother.

h3. Using CFDUMP and CFOUTPUT in your tests

You can use cfdump and cfoutput in your tests, and the output will show up in the test output.

*BIG NOTE:* If your test fails, i.e. an error occurs or an assertion returns false, the output will not show up. This is why we recommend using debug().

h3. Viewing this output in the Eclipse Plugin

In the eclipse plugin, run a test (or a single method of a single test, or multiple methods, or everything in the test tree... whatever it is you want to run) When the test completes, hit &quot;b&quot; on the keyboard. &quot;b&quot; for Browser. Or hit F8. Or right click in the test view and select {{Open test case results in browser}} This will open up a browser view with the debug() and cfoutput/cfdumps from the selected tests/methods. If your eclipse preference is set to use the internal browser by default, then this will open up Eclipse's internal browser. If your preference is set to use an external browser, it'll pop open a new browser window (or tab, depending on your system setup).

The output will look like this: 

!plugin-install-19.png!

h3. Viewing this output in the web browser

When you run tests using the html or extjs browser runners, you get a column at the far right that says &quot;output&quot; or &quot;expand&quot;. Just click the link and you get your stuff.

Here's what it looks like when you click the &quot;view output&quot; link when using the extjs runner:

!extjsrunnerViewOutput.png!

Here's what it looks like when you click the &quot;expand&quot; link in the 'normal' html output runner: 

!normalhtmloutput.png!

{anchor:cfcatch}

h3. Viewing CFCATCH info when errors occur

When a test errors (for reasons other than a failed assertion), you often want to see the dump of the cfcatch struct. MXUnit automatically puts the cfcatch info into the debug dump when an error occurs. Thus, when a test errors, just hit &quot;b&quot; in the eclipse plugin when the test returns, or click &quot;view output&quot; in the browser runner, to see your cfcatch dump.

Here's what that looks like in Eclipse:

!cfcatchInPlugin.png! ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734489</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767253</id>
    <property name="body"><![CDATA[Typo: 
Type the folling ]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5734493</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767252</id>
    <property name="body"><![CDATA[h3. Here are some happy users :-)


[Animation Mentor|http://www.animationmentor.com]
"My work  (Animation Mentor) uses it for THE online animation school (sorry had to pump it up there). In fact
I've spent the whole week cleaning up our entire MXUnit set of tests to finally all pass. Keep up the great work\!"


----
[Crisp eBusiness|http://www.crisp-ebusiness.com/]
"If you want to do Test Driven Development with CFML, then MXUnit is THE framework to use\!"

----
[Figleaf Software|http://figleaf.com]
"MXUnit ROCKS"

----
[ICF Macro|http://www.macrointernational.com/]
"MXUnit is the suck\!"

----
[Mach-II Framework|http://www.mach-ii.com/]

----
[NASA|http://www.nasa.gov]
"The Altair Program here at Johnson Space Center NASA is using MXUnit for testing the Extensible Information Modeler (XIM) service application.  This set of CF services allow the Altair program to create applications to design the Lunar Lander in very flexible ways under constantly changing requirements.  XIM has further been expanded to support the certification of flight readiness (COFR) process of the ISS Payloads group and other NASA programs are in the pipeline.  Thus, unit testing of the service layer has become critical and we found
MXUnit to be the best of breed among the available CF xUnit frameworks.  It is being regularly maintained, has the best assertion capabilities, and best test output mechanisms.  The addition of ant support is an added plus (if you can get NTLM authentication working :-) "

----
[Railo Technologies|http://www.getrailo.com/]
"It's the cream of unit testing frameworks in CFML\!"

----
[SilverWare Consulting|http://www.silverwareconsulting.com/]
"It is remarkably easy to get up and running with unit testing in CF using MXUnit. The framework is well designed and full featured, and
the Eclipse plugin makes working with it a pleasure. Equally important is the support available from the development team, who are remarkably
responsive to questions, bug reports and feature requests.

Keep up the great work, hombres\!"

----
[SOSensible|http://www.sosensible.com/]
It is the most approachable ColdFusion testing framework I have come across\!"

----
[Strictly Business Computer Systems|http://www.sbcs.com]
"It's easy, it's free, it's powerful, it's the best of it's kind.  There is no reason not to use it."

----
[UNM|http://unm.edu]
"MXUnit is bad-ass.  Use it.  Use it lots."

----
[Warwick Business School staff information portal project|http://www.wbs.ac.uk/]
"We're using MXUnit for a first foray into test-driven development. The option to use multiple interfaces gives us great flexibility in how we manage tests both for writing brand new code, and regression checking a monolithic application as we refactor. The simple assertion syntax and built-in support for accessing private methods makes for very quick and natural development."]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734492</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767247</id>
    <property name="body"
      ><![CDATA[[Download Presentation Materials|http://mxunit.s3.amazonaws.com/doc/zip/CFO_2010_DemoSetup.zip] . These include pretty and print-friendly pdfs of the slides as well as all the code]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734486</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767248</id>
    <property name="body"><![CDATA[[Download Presentation Materials|http://mxunit.s3.amazonaws.com/doc/zip/CFO_2010_DemoSetup.zip] . These include pretty and print-friendly pdfs of the slides as well as all the code

{note}The latest [MXUnit nightly build|http://mxunit.org/downloadnightly.cfm] will have the most recent version of the hudson-friendly ANT file, located at mxunit/samples/build.xml]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734487</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767212</id>
    <property name="body"><![CDATA[h2. What to put in your tests \-\- or, patterns for your assertions

Components are a mix of state and behavior. Thus, when we test, we typically want to know:
* Did the state of the object change as expected?
* Did the behavior occur that I expected?

Sometimes we want to know one or the other; sometimes we want to know both.

Here are some "assertion patterns"&nbsp; to help you get started. \**The terms here are taken from the outstanding book "Test-Driven" by Lasse Koskela.

h3. Resulting-State Assertion

The resulting-state assertion tests data. It says "I'm doing something to my object that will change that object's data, or 'state'. I'm going to test that the resulting state of my object is as I expect". A simple example is the common "bank account" or "transaction" example: You have two accounts, you transfer $20 from one account to another, and you test that the first account is 20 bucks shorter and the second account has that 20 bucks. Here's a different example, using a typical "User" object:


{code:title=Resulting-State Assertion}<cffunction name="testAddPrivilegeGroup">
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>
{code}

h3. Guard Assertion

The guard assertion is simply a slight variant on the resulting state assertion; typically, the difference is that toward the top of the test, before you get into the "guts" of your assertion(s), you check the object for some condition that you want to ensure exists before proceeding with the meat of your tests. Think of it as "If this condition isn't true, I want to fail right now because the rest of the tests don't matter". Usually the "guard" is just a simple assertion for equality, often to check that a "default" condition exists. In our example here, we're simply checking that our user object always starts without the privileges we're adding. IF the user object already had those privileges, then that means something tinkered with our object (perhaps indicating a problem in our setup function) and we got a problem here, Houston, and we want to fail right now.

{code:title=Guard Assertion}<cffunction name="testAddPrivilegeGroup">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.belongsToGroup("admin"))>
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.hasPrivilegeTo("DeleteOtherUsers"))>
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>
{code}

h3. Different instances, same data

The different-instances, same-data pattern is common in DAO testing. Essentially, we're asserting that two objects are different instances but contain the same data. In MXUnit, you can test for "different instance" by using the assertNotSame() assertion.

{code:title=Different instances, same data}<cffunction name="testSaveWithRead">
	<cfset dao.save(user)>
	<cfset user2 = dao.read(user.getUserID())>
	<!--- assert they're not the same instance --->
	<cfset assertNotSame(user,user2)>
	<!--- one final check... assert the UUIDs aren't the same --->
	<cfset assertTrue( user.getUUID() neq user2.getUUID(), "user UUID and user2 UUID should not be the same but are")>

	<cfset assertEquals(user.getUserID(),user2.getUserID())>
	<cfset assertEquals(user.getCreateTS(),user2.getCreateTS())>

	<!--- is there an easier way? could we use any of the functions in the baseobject for comparisons so we don't have to test all these fields? --->
	<cfset assertEquals(user.XXXXX,user2.XXXXX)>
</cffunction>
{code}

h3. "Delta" Assertion

Sometimes you can't assert an absolute equality (like "My list is now 5 elements long"). Sometimes, you have to assert equality relative to some previous state. In the example below, imagine you're hooking into some scheduling mechanism (this would be for an integration test, for example). We don't know exactly what getTotalScheduled() will return at any given test run. Maybe it's 1. Maybe it's 30. Who knows. What we want to test is that when we schedule one additional thing, our scheduler's "totalScheduled" count increases by 1. Again, the result could be 2 or it could be 31. We don't know. This type of assertion, where we compare the state right before and right after performing some task, is called "delta", or difference, assertion.

{code:title=Delta Assertion}<cffunction name="testScheduleSomething">
	<cfset obj = createObject("component","SchedulableObject")>
	<cfset currentlyScheduled = scheduler.getTotalScheduled()>
	<cfset scheduler.scheduleSomething(obj)>
	<cfset assertEquals(currentlyScheduled+1, scheduler.getTotalScheduled())>
</cffunction>
{code}
And here's what it might look like for our User object:

{code:title=Delta Assertion on User object}<cffunction name="testPrivilegeCount">
	<cfset currentPrivilegeCount = user.getPrivilegeCount()>
	<cfset user.addPrivilege("ChangeOwnPassword")>
	<cfset assertEquals(currentPrivilegeCount+1, user.getPrivilegeCount())>
</cffunction>
{code}

h3. Interaction Assertion

With interaction assertions, we're testing to make sure an object and a collaborator worked together as we expected. A great example of an interaction is a "bean" style object, like perhaps a "User", and the DAO for that object, like a UserDAO:

{code:title=Interaction Assertion}<cffunction name="testSave"
	<cfset origUUID = user.getUUID()>
	<cfset dao.save(user)>
	<cfset newUserID = user.getUserID()>
	<!---  Assert that our DAO updated our user object with its ID after saving  --->
	<cfset assertTrue(newUserID GT 0)>
	<cfset user.setEmail("somethingnew@somethingnew.com")>
	<cfset dao.save(user)>
	<!--- We don't care about testing the update here... just that the insert didn't change the user object's key --->
	<cfset assertEquals(newUserID,user.getUserID())>
	<cfset assertEquals(origUUID,user.getUUID())>
</cffunction>
{code}

h3. Testing for Expected Exceptions

Frequently, you want to test the "error paths" in your code. You want to ensure that functions throw Exceptions under certain conditions. To test this, use the mxunit:expectedException attribute on your test's cffunction tag:

{code:title=ExpectedException}
<cffunction name="testMakePublicNonExistentMethod" mxunit:expectedException="Application">
	<!--- do something here that you expect to throw an Exception --->
	<cfset this.maker.makePublic(this.objectWithPrivateMethod,"aPrivateMethodThatDoesNotExist")>
</cffunction>
{code}

You can pass a list of expected exceptions in the expectedException attribute:
{code:title=ExpectedException list}
<cffunction name="b_shouldFailBecauseExpectedExceptionListNotThrown" mxunit:expectedException="Database,MyCustomException">
	<cfset x = doSomethingThatMightThrowADatabaseOrMyCustomException()>
</cffunction>
{code}

As of MXUnit 2.0, a separate method has been added {{expectException("some.exception");}}. This can be used in place of the annotation, but _must_ be the first statement in your test. 

{note}
It was implemented for developers who prefer cfscript, but use CFML engines that do not yet support annotations in script.
{note}

Example:

{code:title=expectException() method}
function $expectedExceptionTestUsingScriptMethodAndSingleName(){
	expectException("my.exception");
	doSomethingThatMightThrowAMyException();
}

{code}

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734445</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767210</id>
    <property name="body"><![CDATA[h2. What to put in your tests \-\- or, patterns for your assertions

Components are a mix of state and behavior. Thus, when we test, we typically want to know:
* Did the state of the object change as expected?
* Did the behavior occur that I expected?

Sometimes we want to know one or the other; sometimes we want to know both.

Here are some "assertion patterns"&nbsp; to help you get started. \**The terms here are taken from the outstanding book "Test-Driven" by Lasse Koskela.

h3. Resulting-State Assertion

The resulting-state assertion tests data. It says "I'm doing something to my object that will change that object's data, or 'state'. I'm going to test that the resulting state of my object is as I expect". A simple example is the common "bank account" or "transaction" example: You have two accounts, you transfer $20 from one account to another, and you test that the first account is 20 bucks shorter and the second account has that 20 bucks. Here's a different example, using a typical "User" object:


{code:title=Resulting-State Assertion}<cffunction name="testAddPrivilegeGroup">
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>
{code}

h3. Guard Assertion

The guard assertion is simply a slight variant on the resulting state assertion; typically, the difference is that toward the top of the test, before you get into the "guts" of your assertion(s), you check the object for some condition that you want to ensure exists before proceeding with the meat of your tests. Think of it as "If this condition isn't true, I want to fail right now because the rest of the tests don't matter". Usually the "guard" is just a simple assertion for equality, often to check that a "default" condition exists. In our example here, we're simply checking that our user object always starts without the privileges we're adding. IF the user object already had those privileges, then that means something tinkered with our object (perhaps indicating a problem in our setup function) and we got a problem here, Houston, and we want to fail right now.

{code:title=Guard Assertion}<cffunction name="testAddPrivilegeGroup">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.belongsToGroup("admin"))>
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.hasPrivilegeTo("DeleteOtherUsers"))>
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>
{code}

h3. Different instances, same data

The different-instances, same-data pattern is common in DAO testing. Essentially, we're asserting that two objects are different instances but contain the same data. In MXUnit, you can test for "different instance" by using the assertNotSame() assertion.

{code:title=Different instances, same data}<cffunction name="testSaveWithRead">
	<cfset dao.save(user)>
	<cfset user2 = dao.read(user.getUserID())>
	<!--- assert they're not the same instance --->
	<cfset assertNotSame(user,user2)>
	<!--- one final check... assert the UUIDs aren't the same --->
	<cfset assertTrue( user.getUUID() neq user2.getUUID(), "user UUID and user2 UUID should not be the same but are")>

	<cfset assertEquals(user.getUserID(),user2.getUserID())>
	<cfset assertEquals(user.getCreateTS(),user2.getCreateTS())>

	<!--- is there an easier way? could we use any of the functions in the baseobject for comparisons so we don't have to test all these fields? --->
	<cfset assertEquals(user.XXXXX,user2.XXXXX)>
</cffunction>
{code}

h3. "Delta" Assertion

Sometimes you can't assert an absolute equality (like "My list is now 5 elements long"). Sometimes, you have to assert equality relative to some previous state. In the example below, imagine you're hooking into some scheduling mechanism (this would be for an integration test, for example). We don't know exactly what getTotalScheduled() will return at any given test run. Maybe it's 1. Maybe it's 30. Who knows. What we want to test is that when we schedule one additional thing, our scheduler's "totalScheduled" count increases by 1. Again, the result could be 2 or it could be 31. We don't know. This type of assertion, where we compare the state right before and right after performing some task, is called "delta", or difference, assertion.

{code:title=Delta Assertion}<cffunction name="testScheduleSomething">
	<cfset obj = createObject("component","SchedulableObject")>
	<cfset currentlyScheduled = scheduler.getTotalScheduled()>
	<cfset scheduler.scheduleSomething(obj)>
	<cfset assertEquals(currentlyScheduled+1, scheduler.getTotalScheduled())>
</cffunction>
{code}
And here's what it might look like for our User object:

{code:title=Delta Assertion on User object}<cffunction name="testPrivilegeCount">
	<cfset currentPrivilegeCount = user.getPrivilegeCount()>
	<cfset user.addPrivilege("ChangeOwnPassword")>
	<cfset assertEquals(currentPrivilegeCount+1, user.getPrivilegeCount())>
</cffunction>
{code}

h3. Interaction Assertion

With interaction assertions, we're testing to make sure an object and a collaborator worked together as we expected. A great example of an interaction is a "bean" style object, like perhaps a "User", and the DAO for that object, like a UserDAO:

{code:title=Interaction Assertion}<cffunction name="testSave"
	<cfset origUUID = user.getUUID()>
	<cfset dao.save(user)>
	<cfset newUserID = user.getUserID()>
	<!---  Assert that our DAO updated our user object with its ID after saving  --->
	<cfset assertTrue(newUserID GT 0)>
	<cfset user.setEmail("somethingnew@somethingnew.com")>
	<cfset dao.save(user)>
	<!--- We don't care about testing the update here... just that the insert didn't change the user object's key --->
	<cfset assertEquals(newUserID,user.getUserID())>
	<cfset assertEquals(origUUID,user.getUUID())>
</cffunction>
{code}

h3. Testing for Expected Exceptions

Frequently, you want to test the "error paths" in your code. You want to ensure that functions throw Exceptions under certain conditions. To test this, use the mxunit:expectedException attribute on your test's cffunction tag:

{code:title=ExpectedException}
<cffunction name="testMakePublicNonExistentMethod" mxunit:expectedException="Application">
	<!--- do something here that you expect to throw an Exception --->
	<cfset this.maker.makePublic(this.objectWithPrivateMethod,"aPrivateMethodThatDoesNotExist")>
</cffunction>
{code}

You can pass a list of expected exceptions in the expectedException attribute:
{code:title=ExpectedException list}
<cffunction name="b_shouldFailBecauseExpectedExceptionListNotThrown" mxunit:expectedException="Database,MyCustomException">
	<cfset x = doSomethingThatMightThrowADatabaseOrMyCustomException()>
</cffunction>
{code}

As of MXUnit 2.0, a separate method has been added {{expectException("some.exception");}}. This method can be used in place of the annotation, but _must_ be the first statement in your test. Example:

{code:title="expectException() method"}
function $expectedExceptionTestUsingScriptMethodAndSingleName(){
	expectException("my.exception");
	doSomethingThatMightThrowAMyException();
}

{code}

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734443</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767208</id>
    <property name="body"><![CDATA[h2. What to put in your tests \-\- or, patterns for your assertions

Components are a mix of state and behavior. Thus, when we test, we typically want to know:
* Did the state of the object change as expected?
* Did the behavior occur that I expected?

Sometimes we want to know one or the other; sometimes we want to know both.

Here are some "assertion patterns"&nbsp; to help you get started. \**The terms here are taken from the outstanding book "Test-Driven" by Lasse Koskela.

h3. Resulting-State Assertion

The resulting-state assertion tests data. It says "I'm doing something to my object that will change that object's data, or 'state'. I'm going to test that the resulting state of my object is as I expect". A simple example is the common "bank account" or "transaction" example: You have two accounts, you transfer $20 from one account to another, and you test that the first account is 20 bucks shorter and the second account has that 20 bucks. Here's a different example, using a typical "User" object:


{code:title=Resulting-State Assertion}<cffunction name="testAddPrivilegeGroup">
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>
{code}

h3. Guard Assertion

The guard assertion is simply a slight variant on the resulting state assertion; typically, the difference is that toward the top of the test, before you get into the "guts" of your assertion(s), you check the object for some condition that you want to ensure exists before proceeding with the meat of your tests. Think of it as "If this condition isn't true, I want to fail right now because the rest of the tests don't matter". Usually the "guard" is just a simple assertion for equality, often to check that a "default" condition exists. In our example here, we're simply checking that our user object always starts without the privileges we're adding. IF the user object already had those privileges, then that means something tinkered with our object (perhaps indicating a problem in our setup function) and we got a problem here, Houston, and we want to fail right now.

{code:title=Guard Assertion}<cffunction name="testAddPrivilegeGroup">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.belongsToGroup("admin"))>
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.hasPrivilegeTo("DeleteOtherUsers"))>
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>
{code}

h3. Different instances, same data

The different-instances, same-data pattern is common in DAO testing. Essentially, we're asserting that two objects are different instances but contain the same data. In MXUnit, you can test for "different instance" by using the assertNotSame() assertion.

{code:title=Different instances, same data}<cffunction name="testSaveWithRead">
	<cfset dao.save(user)>
	<cfset user2 = dao.read(user.getUserID())>
	<!--- assert they're not the same instance --->
	<cfset assertNotSame(user,user2)>
	<!--- one final check... assert the UUIDs aren't the same --->
	<cfset assertTrue( user.getUUID() neq user2.getUUID(), "user UUID and user2 UUID should not be the same but are")>

	<cfset assertEquals(user.getUserID(),user2.getUserID())>
	<cfset assertEquals(user.getCreateTS(),user2.getCreateTS())>

	<!--- is there an easier way? could we use any of the functions in the baseobject for comparisons so we don't have to test all these fields? --->
	<cfset assertEquals(user.XXXXX,user2.XXXXX)>
</cffunction>
{code}

h3. "Delta" Assertion

Sometimes you can't assert an absolute equality (like "My list is now 5 elements long"). Sometimes, you have to assert equality relative to some previous state. In the example below, imagine you're hooking into some scheduling mechanism (this would be for an integration test, for example). We don't know exactly what getTotalScheduled() will return at any given test run. Maybe it's 1. Maybe it's 30. Who knows. What we want to test is that when we schedule one additional thing, our scheduler's "totalScheduled" count increases by 1. Again, the result could be 2 or it could be 31. We don't know. This type of assertion, where we compare the state right before and right after performing some task, is called "delta", or difference, assertion.

{code:title=Delta Assertion}<cffunction name="testScheduleSomething">
	<cfset obj = createObject("component","SchedulableObject")>
	<cfset currentlyScheduled = scheduler.getTotalScheduled()>
	<cfset scheduler.scheduleSomething(obj)>
	<cfset assertEquals(currentlyScheduled+1, scheduler.getTotalScheduled())>
</cffunction>
{code}
And here's what it might look like for our User object:

{code:title=Delta Assertion on User object}<cffunction name="testPrivilegeCount">
	<cfset currentPrivilegeCount = user.getPrivilegeCount()>
	<cfset user.addPrivilege("ChangeOwnPassword")>
	<cfset assertEquals(currentPrivilegeCount+1, user.getPrivilegeCount())>
</cffunction>
{code}

h3. Interaction Assertion

With interaction assertions, we're testing to make sure an object and a collaborator worked together as we expected. A great example of an interaction is a "bean" style object, like perhaps a "User", and the DAO for that object, like a UserDAO:

{code:title=Interaction Assertion}<cffunction name="testSave"
	<cfset origUUID = user.getUUID()>
	<cfset dao.save(user)>
	<cfset newUserID = user.getUserID()>
	<!---  Assert that our DAO updated our user object with its ID after saving  --->
	<cfset assertTrue(newUserID GT 0)>
	<cfset user.setEmail("somethingnew@somethingnew.com")>
	<cfset dao.save(user)>
	<!--- We don't care about testing the update here... just that the insert didn't change the user object's key --->
	<cfset assertEquals(newUserID,user.getUserID())>
	<cfset assertEquals(origUUID,user.getUUID())>
</cffunction>
{code}

h3. Testing for Expected Exceptions

Frequently, you want to test the "error paths" in your code. You want to ensure that functions throw Exceptions under certain conditions. To test this, use the mxunit:expectedException attribute on your test's cffunction tag:

{code:title=ExpectedException}
<cffunction name="testMakePublicNonExistentMethod" mxunit:expectedException="Application">
	<!--- do something here that you expect to throw an Exception --->
	<cfset this.maker.makePublic(this.objectWithPrivateMethod,"aPrivateMethodThatDoesNotExist")>
</cffunction>
{code}

You can pass a list of expected exceptions in the expectedException attribute:
{code:title=ExpectedException list}
<cffunction name="b_shouldFailBecauseExpectedExceptionListNotThrown" mxunit:expectedException="Database,MyCustomException">
	<cfset x = doSomethingThatMightThrowADatabaseOrMyCustomException>
</cffunction>
{code}
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734441</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767206</id>
    <property name="body"><![CDATA[{toc}
[CFEclipse|http://cfeclipse.org] and [ColdFusion Builder|http://www.adobe.com/products/coldfusion/cfbuilder/features/] give you the same snippet functionality you know and love from ColdFusion Studio. When you download MXUnit, you get a directory of snippets (and key combos) that you can apply to your own snippets. These snippets live in mxunit/eclipse/snippets. You can copy them manually, or use a bundled ANT task.

You can read [my writeup on why I love snippets here|http://blog.mxunit.org/2009/04/timesavers-cfeclipse-snippets.html] . [Matt Gifford's|http://www.mattgifford.co.uk/coldfusion-builder-snippets/] is worth a read, too.


h2. Step 1: Where do your snippets live?

# &nbsp;In Eclipse:
## CFEclipse: go to Window \-\- Preferences \-\- CFEclipse
## ColdFusion Builder: Window \-\- Preferences \-\- ColdFusion \-\-  Snippets
# &nbsp;Copy the path to the snippets directory

h2. Step 2: Manually Copy the snippets


# &nbsp;open that path on your file system
# &nbsp;In a separate window, open the mxunit/eclipse/snippets/ directory on your file system. Copy the contents of that directory into the snippets directory that you just opened in #3
# &nbsp;optionally, copy the contents of snippets/mxunit/keyCombos.properties into your existing keyCombos.properties file

h2. Step 2 (optional): Use ANT to copy them for you

The first time you do this, it'll be a two step process. Step 1 has you creating a 1-line properties file; Step 2 has you executing the ANT task
# In mxunit/eclipse/snippets, create a file named copysnippets.properties
# Populate it like so: snipdir.options=c:/my/path/to/cf/snippets, where that snippets directory is the value of your snippet path
# Right click on "copysnippets.xml" and select "Run as ANT build"
# This will copy the mxunit snippets into your existing Eclipse snippets directory, and it will copy the mxunit keycombos into your keycombos file. It will NOT overwrite your existing key combos. It will make a backup of your keycombos file.

{tip}The paths must be forward slashes\!
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; On my computer, the path is:
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; snipdir.options=C:/Users/Marc/EclipseWorkspaces/MyCFWorkspace/.metadata/.plugins/org.cfeclipse.cfml/snippets

this can be a comma-separated list, too, just in case you have multiple snippets locations
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; (for different eclipse installs, for example)


{tip}

h2. Step 3: Refresh your Snip Tree View

# Open the Snip Tree View
# Click the Refresh Icon
# You'll now have an mxunit directory with a bunch of snippets

h2. Step 4: Give it a shot

# Create a scratch file, call it "MyTest.cfc" or some such thing
# In that file, type "mxunit", and then hit "ctrl-j", which is the default key sequence to execute a snippet insertion
# Your file will now have a test case stub.

{tip}Explore the different packages and snippets in the "mxunit" directory in the Snip Tree View to see what other snippets are available\!{tip}

h2. Step 5: Share your snippets with your other computers

If you work on more than one computer \-\- perhaps a computer at home, or a laptop, or a work machine \-\- and you wish to share all your snippets amongst those machines, [give this a read|http://blog.mxunit.org/2009/12/sharing-your-cfeclipse-coldfusion.html]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734439</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767204</id>
    <property name="body"><![CDATA[{toc}In general, problems with the plugin come in these varieties:
* The plugin can't figure out the correct "cfc path" for a file
* The plugin can't communicate with the RemoteFacade URL
* My tests load but either never finish or throw inexplicable errors with no stack trace

h2. CFC Path

If you've read the Help documentation in the plugin and you still can't figure out how to get the plugin to correctly derive the CFC path for your components, then please follow these steps:
# Close Eclipse
# Open eclipse.ini in the eclipse install directory, and add "-debug" on a separate line, toward the top of the file. For example, it might look like this:
# {code}-startup
plugins/org.eclipse.equinox.launcher_1.0.200.v20090520.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.win32.win32.x86_1.0.200.v20090519
-product
org.eclipse.epp.package.rcp.product
--launcher.XXMaxPermSize
256M
-showsplash
-debug
org.eclipse.platform
--launcher.XXMaxPermSize
256m
-vmargs
-Dosgi.requiredJavaVersion=1.5
-Xms40m
-Xmx512m{code}
# (Note the \-debug on a line by itself)
# Start Eclipse
# Try running your test. This will now put a bunch of stuff into Eclipse's error log view
# Open the Error Log View (window \-\- show view \-\- general \-\- Error Log)
# You'll see a number of entries with an "i" (Information) Icon in the top few rows. Copy the contents of those rows and email them to the MXUnit google group with an explanation of what the plugin should be doing that it's not doing
# Alternately, you can open the raw law and copy the appropriate lines which you'll find toward the bottom of the file. To get to the Eclipse error log: Help \-\- About Eclipse \-\- Installation Details \-\- View Error Log

After you do that, you can remove the \-debug from your eclipse.ini file



h2. RemoteFacade

* Ensure you can hit the URL in a browser. If not, there's your problem.
* If you can access the URL in a browser, but the plugin still can't talk to your URL, try opening that URL in Eclipse's internal browser
* If you're still getting "could not connect to facade URL" and can't figure it out, ensure that you don't have any onError stuff in your Application.cfc. Perhaps the errors are being swallowed?
* Try looking at the coldfusion error logs to see if anything in there sheds light on the problem


h2. Using the RemoteFacadeTester.cfm


The RemoteFacadeTester.cfm is a great help in diagnosing problems, especially for removing the plugin from the equation so that you can follow normal ColdFusion debugging processes that you're used to.

Open a file named "RemoteFacadeTester.cfm" in the mxunit/samples directory. This file is included in the distribution. At the top of the file, you'll see this content:
{code:controls=true}<!--- change these as necessary --->
<cfset mycomponent = "mxunit.PluginDemoTests.HodgePodgeTest">
<cfset myfunction = "testNotEquals">
<cfset remoteURL = "http://localhost/mxunit/framework/RemoteFacade.cfc?wsdl">{code}Replace the variables with the component, function, and URL you're trying to invoke. Run that RemoteFacadeTester.cfm in your browser and inspect the output. Look at the CFDumps. It'll show you the result of running the test when run directly, when run through a testsuite, and when run through the RemoteFacade.cfc URL. All 3 results should be roughly the same.

{warning}If you're using this to test code that depends on setup in&nbsp; your Application.cfc \-\- especially ORM-related functionality, then you'll need to copy this file into your application{warning}

h2. My tests load but either never finish or throw inexplicable errors with  no stack trace

Check the following:
# If you're pointing to a custom RemoteFacade.cfc that lives in your project (because you need Application.cfc to run, for example),
## Something might be failing in Application.cfc itself. Use the RemoteFacadeTester described above for this
## Code in onRequestStart(), onRequest(), or onRequestEnd() might be causing errors or even swallowing errors
# If every test throws the same error, check to see if something's erroring in your TestCase's "setUp()" or "tearDown()" functions. Also, check if you have "constructor" code running that could be causing errors
# If you're extending a TestCase that isn't mxunit.framework.TestCase, but instead some other superclass that eventually extends mxunit.framework.TestCase, ensure that no weird errors are occurring in your superclass tests
# If you're testing ORM functionality, ensure that no errors are being thrown at the end of the request. This can happen when ORM flushes at request end, for example
# Look at your ColdFusion error logs\! Often CF will tell you exactly what the problem is, but sometimes it never makes its way back to the plugin

h2. A note on debugging your tests

It's not uncommon for me to get asked about problems with the plugin that end up not being plugin-related at all. The first step to debugging your problems is to confirm to the best of your ability that the behavior you're experiencing is definitely related only to running the test from the plugin and not anywhere else. That means you have to do some legwork, son. *Run your code in isolation*. Run it in a web browser. Create a quicky .cfm page and run your code from in there. Or use the RemoteFacadeTester up above.&nbsp;

If you're getting *behavior* in your code that you do not expect, then first seek to understand whether that behavior has anything at all to do with testing, or whether it's simply that there's a problem in your code. For example, if you have a test that executes some ORM functionality, and rows aren't being inserted in your test but they do in your standalone code example, ensure that the code is doing *exactly the same thing* in both situations.This common problem happens to all of us\! I bring it up only because it is so common and can be quite frustrating to debug. [Here's an example of what I'm talking about|http://groups.google.com/group/mxunit/browse_thread/thread/fcc85d132fe49dfa/2b534667e023682e?lnk=gst&q=2098#2b534667e023682e]. Again, we don't mind helping debug, at all\! But we don't you to be slowed down for hours going down one path when in fact the answer was something else entirely. So, this is a kindly public service announcement.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734437</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767205</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [SVN Source Code -- 2.0 Branch|http://mxunit.googlecode.com/svn/mxunit/branches/MIT/]
* [Github Fork|http://github.com/virtix/mxunit]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.


{table-row}
{table}
{column}
{column:width=3%}


{column}

{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734438</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767202</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [SVN Source Code -- 2.0 Branch|http://mxunit.googlecode.com/svn/mxunit/branches/MIT/]
* [Github Fork|http://github.com/virtix/mxunit]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.


{table-row}
{table}
{column}
{column:width=3%}


{column}

{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734434</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767198</id>
    <property name="body"><![CDATA[h2. MXUnitAntTask - Version: 1.0.5


h3. Description

Runs MXUnit tests and saves the output to the directory specified by the outputdir parameter.

This version uses HTTP to connect to the MXUnit test runner running on an Adobe ColdFusion server. Future plans may include the ability to run tests via the TCP/IP gateway in CF. Please let us know if this is something  you would like to see.

This supports the following HTTP authentication mechanisms - BASIC, DIGEST, and NTLM.

The default testrunner (/mxunit/runner/HttpAntRunner.cfc) accepts either individual test cases or directories of tests to run. This runner returns only JUnitReport formated XML. These XML files{_}may_ optionally be used by the JUnitReport Ant task to generate nice HTML reports. Example usage:

{code}
<junitreport todir="${junit.out.dir.html}">
  <fileset dir="${output.dir}">
    <include name="*.xml"/>
   </fileset>
   <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>
  </junitreport>
{code}

Note that the mxunit-ant.jar must be in Ant's class path. This can be done by specifying the taskdef tag like this:

{code}
<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}" />
{code}

and then coding the rest of the MXunit Ant task ...

{code}
<mxunittask server="localhost"
            port="8500"
            defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
            outputdir="${output.dir}"
            verbose="true" haltonerror="true"> ...
{code}

In theory, one should be able to run multiple tests across multiple domains, as long as those tests are accessible via Http.

h3. Parameters

| *Attribute* | *Description* | *Required* | *Default* |
| server | The Http server name where MXUnit is located. | Yes | |
| port | The port the Http server is listening on. | No | 80 |
| outputdir | A directory in which to save JUnit XML test results. | No | |
| haltonerror | Instructs the task to stop executing when an _ERROR_ is detected. \\
This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| haltonfailure | Instructs the task to stop executing when a _FAILURE_ is detected. \\
This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| errorproperty | The name of a property to set in the event of an error. | No | |
| failureproperty | The name of a property to set in the event of a failure (errors are considered failures as well). | No | |
| defaultrunner | The testrunner responsible for accepting requests. \\ {tip:title="v1.0.5"}You can append arbitrary URL parameters (for custom runners) to the {{defaultrunner}} {tip} Ecample:{code}defaultrunner="/foo/bar/my_runner.cfc?param1=123&param2-abc"{code} \\ | No | /mxunit/runner/HttpAntRunner.cfc |
| verbose | Flag to indicate to output additional information. | No | false |
| testResultsSummary | Name of the properties file the task creates. This file is a Java      Properties file that records a summary of all the tests the task      has executed and is saved to the location specified in      the $\{outputdir\} attribute.      This can be useful in automated deployments, for example,      if you wish inspect the results of all the tests run prior to deployment.      This offers a deeper level of granularity than the haltonerror or haltonfailure offers. \\
The task generates the following properties that can be read by Ant using      the following syntax: \\
<br>&lt;property file="$\{outputdir}/testresults.properties" /&gt;<br>testresults.properties looks something like:#Sat Mar 01 22:20:25 EST 2008 \\
success.ratio=.99 \\
total.failures=2 \\
failure.ratio=.01 \\
total.errors=0 \\
error.ratio=.00 \\
total.time=8016 \\
total.runs=151 \\
error.ratio is the number of errors to the total number of tests runs. \\
failure.ratio is the number of failures to the total number of tests runs. \\
success.ratio is the total number of tests run to the total number of errors and failures combined. \\ | No | testresults.properties |

h3. Parameters specified as nested elements


h3. directory

<directory ... >s are used to specify groups of tests to run.

| *Attribute* | *Description* | *Required* | *Default* |
| path | Directory of tests to run. | Yes | |
| componentPath | A prefix to the components being tested. This is a performance         attribute. If specified, directory tests will run faster. Otherwise, the framework         will discover the componentPath using built in Adobe ColdFusion functions. \\
Example: componentPath="mxunit.tests.framework". \\
MXUnit will correctly prepend this to all the         tests in the specified directory. | No \\ |

 *Optionallity is deprecated. Future release will require this attribute to be       specified.* \| \|
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
| recurse | Flag to indicate to run all tests in sub directories. | No | false |
| excludes | Comma-delimitted list of files not to include in the test suite. | No | none |
----
h3. testcase

A <testcase> allows you to specify one or more individual test cases to run.
| *Attribute* | *Description* | *Required* | *Default* |
| name | The fully qualified ColdFusion component name (com.foo.bar.MyCFC) | Yes | |
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc" |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
----
h3. Examples

This example illustrates a minimal amount of code required to run one directory of tests.  Note that this example does not save any results. This may be useful for automated deployments.

{code}
<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="runtests">

  <target name="runtests" description="Run a dir of tests recursively">

   <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />
   <mxunittask server="localhost" >
     <directory path="C:\CFusionMX7\wwwroot\mxunit\tests\framework" recurse="true" componentPath="mxunit.tests.framework" />
   </mxunittask>

  </target>
</project>
{code}
This example runs both directories of and individual tests, saves the output to $\{output.dir}, generates a JUnit report, and  opens a web browser with the JUnit report.

{code}
<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">

    <property name="mxunit.jar" value="../ant/lib/mxunit-ant.jar" />
    <property name="junit.out.dir.xml" value="testresults" />
    <property name="junit.out.dir.html" value="testresults/html" />
    <property name="output.dir" value="tmp" />
    <property name="style.dir" value="../ant/xsl/" />



   <target name="main" depends="browse" />


   <target name="runtests" description="Make output directories and run the MXUnit task">
     <mkdir dir="${junit.out.dir.html}" />
     <mkdir dir="${output.dir}" />
     <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />

       <mxunittask server="localhost" port="8500"
                   defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
                   connectionMethod="http"
                   outputdir="${output.dir}"
                   authmethod="basic"
                   username="foo"
                   password="bar"
                   verbose="true">

          <testcase name="mxunit.tests.framework.AssertTest" packageName="mxunit.asserttests" />
          <testcase name="mxunit.tests.framework.AssertDecoratorTest" packageName="mxunit.assertdecoratortests" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                     packageName="mxunit.framework"
                     recurse="false"
                     componentPath="mxunit.tests.framework"
                     excludes="none" />

           <!-- This has a bad componentPath and should fail -->
           <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                      remoteMethod="run"
                      path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                      packageName="mxunit.bad.framework"
                      recurse="false"
                      componentPath="mxunit.foo.bar"
                      excludes="none" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\samples"
                     packageName="mxunit.tests.samples"
                     recurse="false"
                     excludes="" />


      </mxunittask>
  </target>




  <target name="junitreport" depends="runtests" description="Create a report for the rest result">
     <mkdir dir="${junit.out.dir.html}"/>
     <junitreport todir="${junit.out.dir.html}">
        <fileset dir="${output.dir}">
           <include name="*.xml"/>
         </fileset>
         <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>
      </junitreport>
      <delete dir="${output.dir}" />
    </target>


  <!-- To fire up a browser with the test results. May not work on your machine -->

  <target name="browse" depends="junitreport">
    <exec executable="C:\Program Files\Internet Explorer\iexplore.exe">
      <arg value="C:\CFusionMX7\wwwroot\mxunit\tests\testresults\html\index.html"/>
    </exec>
  </target>



</project>

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734430</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767229</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-cell}

*MXUnit Office Hours*

Every few weeks we get together to chat about testing. Here's the schedule:

{google-calendar:mode=agenda}[http://www.google.com/calendar/ical/h5eh6m4iirte5b7u3r997ul5q0%40group.calendar.google.com/public/basic.ics]{google-calendar}



{table-row}
{table}
{column}
{column:width=3%}



{column}
{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734467</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767228</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-cell}

*MXUnit Office Hours*
{google-calendar:mode=agenda}[http://www.google.com/calendar/ical/h5eh6m4iirte5b7u3r997ul5q0%40group.calendar.google.com/public/basic.ics]{google-calendar}



{table-row}
{table}
{column}
{column:width=3%}



{column}
{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734466</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767227</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-cell}

*MXUnit Office Hours*



{table-row}
{table}
{column}
{column:width=3%}



{column}
{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734465</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767225</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.


{table-row}
{table}
{column}
{column:width=3%}


{column}

{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734463</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767221</id>
    <property name="body"><![CDATA[{note}
:: DRAFT ::
*This is a new work in progress.*
Comments and suggestions encouraged\!
{note}


||Feature||CF9||CF8||CF7||Railo||OBD|
|Ant|&#9745;|&#9745;|&#9745;|&#9745;|&#9745;|
|Assertions|&#9745;|&#9745;|&#9745;|&#9745;|&#9745;|
|Dataproviders|&#9745;|&#9745;| | | |
|Mocking|&#9745;|&#9745;| | | |
|Plugin|&#9745;|&#9745;|&#9745;|&#9745;| |]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734457</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767217</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.


{table-row}
{table}
{column}
{column:width=3%}


{column}

{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734450</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767215</id>
    <property name="body"><![CDATA[Data driven testing allows you to execute tests with a wide variety of input data. This can make creating and executing certain kinds of tests&nbsp; efficient and very powerful. Essentially, you provide a reference to a collection of data and MXUnit will iterate over that data and execute the test for each item in the collection.

Here it is in action:
{code:title=Basic Array Dataprovider Example}<cffunction name="setUp">
  <cfset name_data = \['joe','taj','mary','juan','hans', 'bjork','chaksa'\] />
  <cfset myObject =&nbsp; createObject('component','com.foo.MyObject').init() />
</cffunction>

<cffunction name="testNameValidation" mxunit:dataprovider="name_data">
  <cfargument name="name" hint="Each name item in the name_data array" />
  <cfset assertTrue( myObject.validateName(name), "#name# not valid" ) />
</cffunction>
{code}
To use data to drive tests, tell MXUnit about it using the mxunit:dataprovider annotation. This accepts a string name of some data that exists in the variables scope of the test. The mxunit:dataprovider annotation accepts the following types of data: array, query, list, and a CSV or Excel file. What's unique about these types of tests is that they accept parameters. The parameters represent the data you are using in your tests and may vary depending upon the type of the dataprovider. Note that this is invalid in ColdFusion: mxunit:dataprovider="#my_variable#" - this value must be a string.
Consider the following examples:

{code:title=Query Dataprovider Example}<!--------------------------------------------------------------------
           Example using a query:
    query_data = queryNew('name');
    query.addRow(1);
    query.setCell('name','ed');
   Note query name as a parameter
-------------------------------------------------------------------->
<cffunction name="testSomethingWithQuery" mxunit:dataprovider="query_data">
  <cfargument name="q" hint="A query object" />
  <cfset assertTrue( myObject.validateName(q.name), "#q.name# not valid." ) />
</cffunction>
{code}
In this example we specify the name of a query that's in the variables scope of the test. We use this query name for the mxunit:dataprovider value. This test will be run once for each row in the query, and the value of "arguments.q" in this case will be the current row of the query.

{code:title=Basic List Dataprovider Example}
<!-----------------------------------------------------------------
    Example using a list (identical to array)
    list_data = 'ed,joe,mary,jeff';
    Note list item name as a parameter
-------------------------------------------------------------------->

<cffunction name="testSomethingWithList" mxunit:dataprovider="list_data">
  <cfargument name="list_item" hint="Item in the list" />
  <cfset assertTrue( myObject.validateName(list_item), "#list_item# not valid." ) />
</cffunction>
{code}
Iterating over a list is essentially the same as an array. The data here is provided as a list of values. As in all mxunit:dataprovider types, pass in the _name_ of the data to the dataprovider.

{code:title=Basic Excel/CSV Dataprovider}
<!----------------------------------------------------------------
               Example using an Excel file
             Note query name as a parameter
------------------------------------------------------------------>
<cfset names_excel = getDirectoryFromPath(getCurrentTemplatePath()) & "/dataproviders/names.xls">
<cffunction name="testSomethingWithExcel" mxunit:dataprovider="names_excel">
  <cfargument name="name_query" hint="Default behavior is to convert Excel with header names to query object.">
  <cfset debug(myQuery)>
  <cfset assertTrue( myObject.validateName(name_query.name), "#name_query.name# not valid." ) />
</cffunction>
{code}
For the basic default excel behavior where you have an Excel file with named row headers, pass the name of the file reference to the mxunit:dataprovider. Then, treat the data as a query object, using the row headings as column names.

{code:title=Basic Iterator Dataprovider}
<!----------------------------------------------------------------
   Fuzzy Goodness
 ------------------------------------------------------------------>
<cffunction name="testRandomPasswordGenerator" mxunit:dataprovider="1000">
  <cfargument name="count" />
  <cfset pwd = myObject.generateRandomPassword(seed=count) />
  <cfset assert( myObject.isValidPassword(pwd), "#pwd# not valid. Occurred at iteration #count#" ) />
</cffunction>
{code}
Sometimes it's useful to just iterate a number of times over some computation. You can do this with MXUnit simply by specify a positive integer to the mxunit:dataprovider.

To Do: Advanced Dataproviders (2D Arrays and Excel and CSVs with or without header rows).]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734448</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5767214</id>
    <property name="body"><![CDATA[Data driven testing allows you to execute tests with a wide variety of input data. This can make creating and executing certain kinds of tests&nbsp; efficient and very powerful. Essentially, you provide a reference to a collection of data and MXUnit will iterate over that data and execute the test for each item in the collection.

Here it is in action:
{code:title=Basic Array Dataprovider Example}<cffunction name="setUp">
  <cfset name_data = \['joe','taj','mary','juan','hans', 'bjork','chaksa'\] />
  <cfset myObject =&nbsp; createObject('component','com.foo.MyObject').init() />
</cffunction>

<cffunction name="testNameValidation" mxunit:dataprovider="name_data">
  <cfargument name="name" hint="Each name item in the name_data array" />
  <cfset assertTrue( myObject.validateName(name), "#name# not valid" ) />
</cffunction>
{code}
To use data to drive tests, tell MXUnit about it using the mxunit:dataprovider annotation. This accepts a string name of some data that exists in the variables scope of the test. The mxunit:dataprovider annotation accepts the following types of data: array, query, list, and a CSV or Excel file. What's unique about these types of tests is that they accept parameters. The parameters represent the data you are using in your tests and may vary depending upon the type of the dataprovider. Note that this is invalid in ColdFusion: mxunit:dataprovider="#my_variable#" - this value must be a string.
Consider the following examples:

{code:title=Query Dataprovider Example}<\!-------------------------------------------------------------------\-
           Example using a query:
    query_data = queryNew('name');
    query.addRow(1);
    query.setCell('name','ed');
   Note query name as a parameter
\-------------------------------------------------------------------->
<cffunction name="testSomethingWithQuery" mxunit:dataprovider="query_data">
  <cfargument name="q" hint="A query object" />
  <cfset assertTrue( myObject.validateName(q.name), "#q.name# not valid." ) />
</cffunction>
{code}
In this example we specify the name of a query that's in the variables scope of the test. We use this query name for the mxunit:dataprovider value. This test will be run once for each row in the query, and the value of "arguments.q" in this case will be the current row of the query.

{code:title=Basic List Dataprovider Example}<\!----------------------------------------------------------------\-
    Example using a list (identical to array)
    list_data = 'ed,joe,mary,jeff';
    Note list item name as a parameter
\-------------------------------------------------------------------->

<cffunction name="testSomethingWithList" mxunit:dataprovider="list_data">
  <cfargument name="list_item" hint="Item in the list" />
  <cfset assertTrue( myObject.validateName(list_item), "#list_item# not valid." ) />
</cffunction>
{code}
Iterating over a list is essentially the same as an array. The data here is provided as a list of values. As in all mxunit:dataprovider types, pass in the _name_ of the data to the dataprovider.

{code:title=Basic Excel/CSV Dataprovider}<\!---------------------------------------------------------------\-
               Example using an Excel file
             Note query name as a parameter
\------------------------------------------------------------------>
<cfset names_excel = getDirectoryFromPath(getCurrentTemplatePath()) & "/dataproviders/names.xls">
<cffunction name="testSomethingWithExcel" mxunit:dataprovider="names_excel">
  <cfargument name="name_query" hint="Default behavior is to convert Excel with header names to query object.">
  <cfset debug(myQuery)>
  <cfset assertTrue( myObject.validateName(name_query.name), "#name_query.name# not valid." ) />
</cffunction>
{code}
For the basic default excel behavior where you have an Excel file with named row headers, pass the name of the file reference to the mxunit:dataprovider. Then, treat the data as a query object, using the row headings as column names.

{code:title=Basic Iterator Dataprovider}<\!---------------------------------------------------------------\-
   Fuzzy Goodness
 ------------------------------------------------------------------>
<cffunction name="testRandomPasswordGenerator" mxunit:dataprovider="1000">
  <cfargument name="count" />
  <cfset pwd = myObject.generateRandomPassword(seed=count) />
  <cfset assert( myObject.isValidPassword(pwd), "#pwd# not valid. Occurred at iteration #count#" ) />
</cffunction>
{code}
Sometimes it's useful to just iterate a number of times over some computation. You can do this with MXUnit simply by specify a positive integer to the mxunit:dataprovider.

Next: Advanced Dataproviders (2D Arrays and Excel and CSVs with or without header rows).]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734447</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6685777</id>
    <property name="viewCount">2</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=5341265]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341265</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-01-26 16:01:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-01-26 16:01:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6685776</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.ca/search?hl=en&client=firefox-a&hs=jGT&rls=org.mozilla%3Aen-US%3Aofficial&channel=s&q=mxunit+addContent&aq=f&aqi=&aql=&oq=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341265</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-01-26 16:00:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-01-26 16:00:15.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">6914057</id>
    <property name="name"><![CDATA[automation]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2011-03-06 23:39:54.000</property>
    <property name="lastModificationDate">2011-03-06 23:39:54.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">6914056</id>
    <property name="name"><![CDATA[jenkins]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2011-03-06 23:39:54.000</property>
    <property name="lastModificationDate">2011-03-06 23:39:54.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">6914066</id>
    <property name="name"><![CDATA[cheapuggboots]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2011-10-01 07:43:03.000</property>
    <property name="lastModificationDate">2011-10-01 07:43:03.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">6914065</id>
    <property name="name"><![CDATA[boot]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2011-10-01 07:42:40.000</property>
    <property name="lastModificationDate">2011-10-01 07:42:40.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">6914062</id>
    <property name="name"><![CDATA[favourite]]></property>
    <property name="owner"><![CDATA[st1n6r4y@yahoo.com]]></property>
    <property name="namespace"><![CDATA[my]]></property>
    <property name="creationDate">2011-04-15 16:45:27.000</property>
    <property name="lastModificationDate">2011-04-15 16:45:27.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">6914061</id>
    <property name="name"><![CDATA[ci]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2011-04-02 13:17:45.000</property>
    <property name="lastModificationDate">2011-04-02 13:17:45.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">6914064</id>
    <property name="name"><![CDATA[ugg]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2011-10-01 07:42:40.000</property>
    <property name="lastModificationDate">2011-10-01 07:42:40.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">6914063</id>
    <property name="name"><![CDATA[cheap]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2011-10-01 07:42:40.000</property>
    <property name="lastModificationDate">2011-10-01 07:42:40.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">5800401</id>
    <property name="destinationPageTitle"
      ><![CDATA[//kb2.adobe.com/cps/402/kb402604.html]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5734510</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-09-16 22:52:57.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-09-16 22:52:57.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">5800402</id>
    <property name="destinationPageTitle"
      ><![CDATA[//kb2.adobe.com/cps/402/kb402604.html]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5734510</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-09-16 22:52:57.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-09-16 22:52:57.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">5800400</id>
    <property name="destinationPageTitle"
      ><![CDATA[//blog.maestropublishing.com/fixing-a-mysterious-memory-leak-on-coldfusion]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5734510</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-09-16 22:52:57.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-09-16 22:52:57.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">5800409</id>
    <property name="destinationPageTitle"
      ><![CDATA[//groups.google.com/group/mxunit/browse_thread/thread/439a103b81a24765]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5734516</id>
    </property>
    <property name="creatorName"><![CDATA[vikaskanani@yahoo.co.in]]></property>
    <property name="creationDate">2010-09-24 04:12:45.000</property>
    <property name="lastModifierName"><![CDATA[vikaskanani@yahoo.co.in]]></property>
    <property name="lastModificationDate">2010-09-24 04:12:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">5800410</id>
    <property name="destinationPageTitle"
      ><![CDATA[//stackoverflow.com/questions/3777441/could-not-connect-to-remote-facade-url]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5734516</id>
    </property>
    <property name="creatorName"><![CDATA[vikaskanani@yahoo.co.in]]></property>
    <property name="creationDate">2010-09-24 04:12:45.000</property>
    <property name="lastModifierName"><![CDATA[vikaskanani@yahoo.co.in]]></property>
    <property name="lastModificationDate">2010-09-24 04:12:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">5800403</id>
    <property name="destinationPageTitle"
      ><![CDATA[//localhost/mxunit/framework/RemoteFacade.cfc?wsdl&method=ping]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5734512</id>
    </property>
    <property name="creatorName"><![CDATA[vikaskanani@yahoo.co.in]]></property>
    <property name="creationDate">2010-09-17 09:37:25.000</property>
    <property name="lastModifierName"><![CDATA[vikaskanani@yahoo.co.in]]></property>
    <property name="lastModificationDate">2010-09-17 09:37:25.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6685459</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=4292769]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292771</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-01-11 16:55:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-01-11 16:55:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6685475</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?client=safari&rls=en&q=mxunit+pdf+documentation&ie=UTF-8&oe=UTF-8]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292848</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-01-12 15:33:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-01-12 15:33:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6685390</id>
    <property name="viewCount">2</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&source=web&cd=5&ved=0CDcQFjAE&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5734402&rct=j&q=coldfusion%20%22edit%20snipex%20servers%22&ei=PZYoTfHyH4KTnQeD9e2VAQ&usg=AFQjCNGxJ_hIx0NHj0MpeT1vZVOhw5Uu7Q]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734402</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-01-08 16:54:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-01-08 16:54:15.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">6914050</id>
    <property name="name"><![CDATA[mock]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2011-01-27 02:04:54.000</property>
    <property name="lastModificationDate">2011-01-27 02:04:54.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">6914049</id>
    <property name="name"><![CDATA[injectmethod]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2011-01-27 02:04:49.000</property>
    <property name="lastModificationDate">2011-01-27 02:04:49.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6685084</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=5341592]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341611</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-12-14 23:29:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-12-14 23:29:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6684973</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.be/search?client=safari&rls=en&q=ant+junit+save+results&ie=UTF-8&oe=UTF-8&redir_esc=&ei=7e4ATYfaI86K4Qarn6T0Ag]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341298</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-12-09 15:00:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-12-09 15:00:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6684881</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=4292848&maxRecentlyUpdatedPageCount=30]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292848</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-12-06 16:48:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-12-06 16:48:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6684912</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&source=web&cd=24&ved=0CCkQFjADOBQ&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D4948033&rct=j&q=joe%20rinehart%20booz%20allen&ei=YHj-TNHiOsaqlAfZ1cmBCQ&usg=AFQjCNHRfhbN9SM_YQgUZxctIV1hpx0wEA]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-12-07 18:10:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-12-07 18:10:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6684877</id>
    <property name="viewCount">2</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&source=web&cd=43&ved=0CB8QFjACOCg&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D4948033&rct=j&q=helios%20%22key%20binding%22%20broken&ei=of38TLTNEIjpOdbWgdUK&usg=AFQjCNHRfhbN9SM_YQgUZxctIV1hpx0wEA]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-12-06 15:14:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-12-06 15:21:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6684733</id>
    <property name="viewCount">2</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpreviousversions.action?pageId=786598]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786602</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-12-01 09:23:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-04-14 07:58:15.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6829024</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.specialpricegolf.com/titleist/driver/titleist-910d2-driver">titleist]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-11-23 02:32:16.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-11-23 02:32:16.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6829023</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.golfclubsoff.com/taylormade-r11-driver-p-235.html">Taylormader11</a]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-11-23 02:32:16.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-11-23 02:32:16.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6829026</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.specialpricegolf.com/ping/driver/ping-g20-driver">Ping]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-11-23 02:32:16.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-11-23 02:32:16.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6829025</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.specialpricegolf.com/titleist/driver/titleist-910d3-driver">titleist]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-11-23 02:32:16.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-11-23 02:32:16.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6829020</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.golfclubsoff.com/titleist-910d2-driver-p-286.html">titleist]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-11-23 02:32:16.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-11-23 02:32:16.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6829022</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.golfclubsoff.com/ping-g20-driver-p-275.html">Ping]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-11-23 02:32:16.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-11-23 02:32:16.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6829021</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.golfclubsoff.com/titleist-910d3-driver-p-230.html">titleist]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-11-23 02:32:16.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-11-23 02:32:16.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6829032</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.discountracket.com/wilson-racket/wilson-blx-tennis-racquets">Wilson]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-11-23 02:32:16.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-11-23 02:32:16.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6829031</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.discountracket.com/prince-racket">Prince]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-11-23 02:32:16.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-11-23 02:32:16.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6829028</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.discountracket.com/wilson-racket">Wilson]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-11-23 02:32:16.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-11-23 02:32:16.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6829027</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.specialpricegolf.com/taylormade-golf/driver">Taylormade]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-11-23 02:32:16.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-11-23 02:32:16.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6829030</id>
    <property name="destinationPageTitle"><![CDATA[//www.discountracket.com/head">Head]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-11-23 02:32:16.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-11-23 02:32:16.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6829029</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.discountracket.com/babolat">Babolat]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-11-23 02:32:16.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-11-23 02:32:16.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">5472265</id>
    <property name="name"><![CDATA[teardown]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2010-06-24 22:12:27.000</property>
    <property name="lastModificationDate">2010-06-24 22:12:27.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">5472266</id>
    <property name="name"><![CDATA[anatomy]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2010-06-24 22:12:27.000</property>
    <property name="lastModificationDate">2010-06-24 22:12:27.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">5472267</id>
    <property name="name"><![CDATA[testcase]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2010-06-24 22:12:27.000</property>
    <property name="lastModificationDate">2010-06-24 22:12:27.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">5472261</id>
    <property name="name"><![CDATA[integration]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2010-04-24 13:03:02.000</property>
    <property name="lastModificationDate">2010-04-24 13:03:02.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">5472262</id>
    <property name="name"><![CDATA[ant]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2010-04-24 13:03:02.000</property>
    <property name="lastModificationDate">2010-04-24 13:03:02.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">5472263</id>
    <property name="name"><![CDATA[httpantrunner]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2010-06-03 12:23:12.000</property>
    <property name="lastModificationDate">2010-06-03 12:23:12.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">5472264</id>
    <property name="name"><![CDATA[setup]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2010-06-24 22:12:27.000</property>
    <property name="lastModificationDate">2010-06-24 22:12:27.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">5472257</id>
    <property name="name"><![CDATA[install]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2010-03-26 09:49:50.000</property>
    <property name="lastModificationDate">2010-03-26 09:49:50.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">5472258</id>
    <property name="name"><![CDATA[mocking]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2010-03-26 10:09:04.000</property>
    <property name="lastModificationDate">2010-03-26 10:09:04.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">5472259</id>
    <property name="name"><![CDATA[hudson]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2010-04-24 13:03:02.000</property>
    <property name="lastModificationDate">2010-04-24 13:03:02.000</property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">5472260</id>
    <property name="name"><![CDATA[continuous]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2010-04-24 13:03:02.000</property>
    <property name="lastModificationDate">2010-04-24 13:03:02.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">4360136</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewinfo.action?pageId=4292775]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292778</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2009-11-12 18:34:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2009-11-12 18:34:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5079299</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com.my/search?hl=en&source=hp&q=mxunit+documentation&meta=&aq=9&oq=MXunit+]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292858</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-02-24 06:57:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-02-24 06:57:15.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826976</id>
    <property name="destinationPageTitle"><![CDATA[//blogs.hoycinema.com/a123456777/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826975</id>
    <property name="destinationPageTitle"><![CDATA[//lazzeo.com/a123456777/blog/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826978</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.newar.com.np/blog.php?user=a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826977</id>
    <property name="destinationPageTitle"><![CDATA[//yaplog.jp/wu060231/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826972</id>
    <property name="destinationPageTitle"
      ><![CDATA[//users.section101.com/?page=user_blog&amp;room=a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826971</id>
    <property name="destinationPageTitle"><![CDATA[//a123456777.bloges.org/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826974</id>
    <property name="destinationPageTitle"
      ><![CDATA[//fr.weblog.26l.com/weblog.2108606.html]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826973</id>
    <property name="destinationPageTitle"
      ><![CDATA[//woodstockuniverse.com/?page=user_blog&amp;room=a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826984</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.muslimduniya.com/member/view_blog.php?profile_id=1684]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826983</id>
    <property name="destinationPageTitle"
      ><![CDATA[//imfriends.net/user/a123456777/blogs]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826986</id>
    <property name="destinationPageTitle"
      ><![CDATA[//polovinka.bg/member/view_blog.php?profile_id=245759]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826985</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.kerchoonz.com/user/a123456777/blogs]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826980</id>
    <property name="destinationPageTitle"><![CDATA[//hurones.net/blog/5116]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826979</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.bambinidisatana.com/network/blogs/liststories/user_a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826982</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.filipinopeople.com/user/a123456777/blogs]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826981</id>
    <property name="destinationPageTitle"><![CDATA[//obshestvo.ru/blog/2107]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826991</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.creativesocial.net/pg/blog/owner/a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826992</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.exfatpeople.com/user/wu060231/blogs]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826993</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.lovemuhammad.com/pg/blog/wu060231]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826994</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.lovemuhammad.com/pg/blog/wu060231]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826987</id>
    <property name="destinationPageTitle"><![CDATA[//wrapcandy.com/friends/a123456777/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826988</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.carandcycleclub.com/index.php?do=/public/user/blogs/name_a123456777/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826989</id>
    <property name="destinationPageTitle"
      ><![CDATA[//freckbook.com/blogs/posts/a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826990</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.spanishmusic.biz/user/a123456777/blogs]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826999</id>
    <property name="destinationPageTitle"><![CDATA[//saswingers.org/blog/7525]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827000</id>
    <property name="destinationPageTitle"><![CDATA[//www.lw-works.com/blog/32892]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827001</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.mygatheringspace.com/blogs.php?action=show_member_blog&amp;ownerID=4188]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827002</id>
    <property name="destinationPageTitle"
      ><![CDATA[//social.wowjen.com/a123456777/blog/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826995</id>
    <property name="destinationPageTitle"
      ><![CDATA[//my.carttube.com/blogs/posts/a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826996</id>
    <property name="destinationPageTitle"><![CDATA[//www.mihirafamily.com/wuxi]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826997</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.myspate.com/blogs_view.php?id=4199]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826998</id>
    <property name="destinationPageTitle"
      ><![CDATA[//osi.parsons.edu/archive/osi2007/?q=blog/11710]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826946</id>
    <property name="destinationPageTitle"><![CDATA[//www.wu060231.19dog.com/blog/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826945</id>
    <property name="destinationPageTitle"
      ><![CDATA[//blog.sohu.com/people/!d3UwNjAyMzFAaG90bWFpbC5jb20]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826944</id>
    <property name="destinationPageTitle"><![CDATA[//17847589.blog.hexun.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826943</id>
    <property name="destinationPageTitle"><![CDATA[//blog.sina.com.cn/u/2350370677]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826942</id>
    <property name="destinationPageTitle"><![CDATA[//hi.baidu.com/ab123456777a/blog]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826941</id>
    <property name="destinationPageTitle"><![CDATA[//wu060231.blog.163.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826940</id>
    <property name="destinationPageTitle"><![CDATA[//chouniu.blogtrue.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826939</id>
    <property name="destinationPageTitle"><![CDATA[//a123456777.inube.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826954</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.indyarocks.com/blogs/blog_visiterview_main.php?id=360777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826953</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.art-ba-ba.com/blog/U/default.asp?UID=54175]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826952</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.blogusers.com/sme_blog.php?u=a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826951</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.holatu.com/user/a123456777/blogs]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826950</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.blogstoday.co.uk/bloghome.aspx?username=a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826949</id>
    <property name="destinationPageTitle"><![CDATA[//phlog.net/wuxi]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826948</id>
    <property name="destinationPageTitle"><![CDATA[//a123456777.insanejournal.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826947</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.freedatingsiteahead.co.uk/blogs.php?action=show_member_blog&amp;ownerID=6264]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826961</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.kaka365.com/blog/blog.php?uid=6632]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826962</id>
    <property name="destinationPageTitle"
      ><![CDATA[//american-idol-stars.com/blog/a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826959</id>
    <property name="destinationPageTitle"><![CDATA[//a123456777.livejournal.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826960</id>
    <property name="destinationPageTitle"><![CDATA[//wu060231.blogspot.es/admin/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826957</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.adultblogs.com/users/a123456777/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826958</id>
    <property name="destinationPageTitle"><![CDATA[//a123456777.tumblr.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826955</id>
    <property name="destinationPageTitle"><![CDATA[//wu060231.choblogs.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826956</id>
    <property name="destinationPageTitle"><![CDATA[//wu060231.eklablog.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826969</id>
    <property name="destinationPageTitle"><![CDATA[//a123456777.nipox.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826970</id>
    <property name="destinationPageTitle"><![CDATA[//wu060231.blog.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826967</id>
    <property name="destinationPageTitle"><![CDATA[//wu060231.podbean.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826968</id>
    <property name="destinationPageTitle"
      ><![CDATA[//vidi.co.il/profile_blogs/a123456777/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826965</id>
    <property name="destinationPageTitle"><![CDATA[//blog.cnfol.com/wu060231]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826966</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.sanalkahve.com/user/a123456777/blogs]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826963</id>
    <property name="destinationPageTitle"><![CDATA[//wu060231.blogree.com/?tpl]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826964</id>
    <property name="destinationPageTitle"><![CDATA[//a123456.bloggd.org/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827006</id>
    <property name="destinationPageTitle"><![CDATA[//blog.jinti.com/wu060231]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827005</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.cnfblog.com/blogs.php?blog_id=11702]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827004</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.kolspot.com/user/a123456777/blogs]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827003</id>
    <property name="destinationPageTitle"
      ><![CDATA[//gritosverticais.socialgo.com/members/profile/862/blog]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827010</id>
    <property name="destinationPageTitle"><![CDATA[//a123456777.putblog.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827009</id>
    <property name="destinationPageTitle"><![CDATA[//a1234546777.un165.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827008</id>
    <property name="destinationPageTitle"><![CDATA[//blogsdelagente.com/wuxi/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827007</id>
    <property name="destinationPageTitle"><![CDATA[//www.writernia.com/blog/13876]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827014</id>
    <property name="destinationPageTitle"
      ><![CDATA[//solobuscame.com/social/blog.php?user=a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827013</id>
    <property name="destinationPageTitle"><![CDATA[//www.blog2net.com/a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827012</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.freeblognetwork.com/a123456777/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827011</id>
    <property name="destinationPageTitle"><![CDATA[//www.blogouf.com/a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827018</id>
    <property name="destinationPageTitle"><![CDATA[//a123456777.yesblog.ru/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827017</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.cretaceousworld.com/geobooks/My.asp?User_ID=4380]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827016</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.tudou.com/home/diary_u98907984c00m00p1.html]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827015</id>
    <property name="destinationPageTitle"
      ><![CDATA[//bbs.hkange.com/boke.asp?wuxi.index.html]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827021</id>
    <property name="destinationPageTitle"><![CDATA[//602980500.podomatic.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827022</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.shyfda.gov.cn/notes/blog.asp?username=a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827019</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.xxllove.net/blogs_view.php?id=103622]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827020</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.randki.gazeta.ie/blogs_view.php?id=5142]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827025</id>
    <property name="destinationPageTitle"
      ><![CDATA[//home.km-airnet.net/space-79607-do-blog-view-me.html]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827026</id>
    <property name="destinationPageTitle"><![CDATA[//blog.19lou.com/25193057/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827023</id>
    <property name="destinationPageTitle"
      ><![CDATA[//shejishi.e-jjj.com/Web/OwnerIndex/378694/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827024</id>
    <property name="destinationPageTitle"
      ><![CDATA[//blog.xdzjw.com/Log/LogList.aspx?UserID=4674&ClassID=4736]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827027</id>
    <property name="destinationPageTitle"
      ><![CDATA[//baike.hnce.com.cn/index.php?user-space-150524.htm]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826932</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.darksiders.net/user/a123456777/blogs]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826931</id>
    <property name="destinationPageTitle"><![CDATA[//a123456777.over-blog.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826934</id>
    <property name="destinationPageTitle"><![CDATA[//a123456777.fotopages.com/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826933</id>
    <property name="destinationPageTitle"><![CDATA[//www.blurty.com/users/a123456777/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826936</id>
    <property name="destinationPageTitle"
      ><![CDATA[//gvrl.com/profile.asp?memberid=8204]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826935</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.graphicdesigncommunity.com/blogs.php?action=show_member_blog&amp;ownerID=85833]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826938</id>
    <property name="destinationPageTitle"><![CDATA[//a123456777.createblog.com/blog/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826937</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.equestrianblogging.com/blogs/a123456777]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826928</id>
    <property name="destinationPageTitle"
      ><![CDATA[//a123456777.mylivepage.com/blog/index/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826930</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.mywebprofile.com/a123456777/blog/]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6826929</id>
    <property name="destinationPageTitle"><![CDATA[//www.thoughts.com/a123456777a]]></property>
    <property name="destinationSpaceKey"><![CDATA[>http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
    <property name="creatorName"><![CDATA[macmakeup]]></property>
    <property name="creationDate">2011-10-14 07:22:13.000</property>
    <property name="lastModifierName"><![CDATA[macmakeup]]></property>
    <property name="lastModificationDate">2011-10-14 07:22:13.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828068</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828070</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828069</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828072</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828071</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828074</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828073</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374104</id>
    <property name="body"><![CDATA[h2. *Installing the MXUnit Framework*

This should be the easiest part\! Download, unzip, and test ...&nbsp; You can also [watch the video|MXUnit Install Screencast] if you're so inclined


1. [Download|http://mxunit.org/download.cfm] the latest version ...


!install-download.png!


2. Unzip to your webroot; e.g., C:\Inetpub\wwwroot\
{color:darkred}{*}Note:*{color} The MXUnit framework can exist in any ColdFusion context -        in the webroot or in the custom tags.
{color:darkred}{*}However{*}{color},        The examples assume installation directly under the webroot.

!install-unzip.png!


3. Test the install by pointing your web browser to the installation; e.g., [http://localhost:8500/mxunit/index.cfm|http://localhost:8500/mxunit/index.cfm] You should see this:

 !install-test.png!


4. Write some good clean code that works.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341352</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374099</id>
    <property name="body"><![CDATA[h2. Why MXUnit?

Several fine unit testing frameworks exist for ColdFusion. Why choose MXUnit?

At its core, MXUnit grew around the concept of making things easier for the person writing the tests. We believe people shy away from unit testing because the perception (sometimes justified\!) is that it's too inconvenient. We sought to change that.

h3. Convenience features

* [Easy to see your data|View Debug Output] with cfoutput, cfdump, and debug()
* Easy to [see your cfcatch|View Debug Output#cfcatch] struct when errors occur
* Test [single methods|Running single test methods] inside a test case
* Easy "[directory runner|Running directories of tests]" for running entire directories of tests
* Easy to [test private functions|Test Private Methods] in your components
* Ability to [switch to message-first style assertions|Message First Assertions] to help ease transition from other frameworks

In addition to convenience features, MXUnit contains all the essential components of any unit testing framework:

h3. Framework Must-Haves

Test Generator for existing components

[Eclipse Plugin|Install the Eclipse Plugin] with built-in help and [keyboard shortcuts|Eclipse Plugin Keyboard Shortcuts]

Ant Integration

Plugin architecture for creating custom assertions

Many different [output formats|MXUnit TestResult Output Formats]

* Basic HTML results
* ExtJS "fancy" grid results
* XML results
* JUnitReport XML results (for use with the ANT task and the JUnitReport Ant Task)
* Query results

h3. Active Development

* We're actively developing MXUnit and have more convenience features in the works. A sample:
* Easier exception testing
* Easier auto-rollback for tests that access databases
* JUnit 4 style "Hamcrest" assertions (assertThat(....))
* Customizable test generation]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341347</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374098</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links
* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [File a Bug|http://code.google.com/p/mxunit/issues/list]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher
* Adam	Haskell
* Mike	Henke
* Randy	Merril
* Mike	Rankin
* Bill	Shelton
* Bob	Silverberg
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-row}
{table}
{column}

{column:width=3%}

{column}


{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}

{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341346</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374101</id>
    <property name="body"><![CDATA[h2. *MXUnit TestResult output formats*

MXUnit provides a high level of flexibility by providing    test results in various output formats. Some of these are   preformatted, such as HTML, and others are _raw_ to   allow developers to generate customizable output formats.

The available TestResult output formats are:
# HTML Format
# ExtJs Format
# XML Format
# JUnit Report XML
# ColdFusion Query Format
# ColdFusion Array format
We will use the MXUnit example found in  the installation package mxunit/samples/MyTestSuite.cfm as the   base TestResults.    You may want to refer to your local TestResult API for details; e.g., [http://localhost:8500/mxunit/doc/api/]

The syntax for generating the various types of output is:

{code}<cfset output = results.getResultsOutput( ['html', 'extjs', 'xml', 'junitxml', 'query', 'array'] ) />
<cfoutput>#output#<cfoutput>
{code}
Note: Since the above query and array types are complex data structures, you will get an error by trying to print those directly, as illustrated above. You most likely be computing other outputs if you use those types.

Following are simple examples of how to handle the various output types.

Note that in order to toggle between HTML and ExtJs format, pass in a URL.output=\['html'\|'extjs'\] to your TestSuite

*1. HTML Format*

The HTML output is basic preformatted HTML:

{code}<cfoutput>#results.getResultsOutput( 'html' )#<cfoutput>

{code}

!outputs-1.png!



*2. ExtJs Format*

ExtJs is a rich user interface set of APIs written in JavaScript.

{code}<cfoutput>#results.getResultsOutput( 'extjs' )#<cfoutput>

{code}

!outputs-2.png!


*3. XML Format*

This is basic raw XML format that can be transformed into custom HTML output.


{code}<cfoutput>#results.getResultsOutput( 'xml' )#<cfoutput>

{code}

!outputs-3.png!


*4. JUnit Report XML*


This is an XML format that is used by [Ant's JunitReport Task|http://ant.apache.org/manual/OptionalTasks/junitreport.html]. Also see the MXUnit Ant Task for usage information.

{code}<cfoutput>#results.getResultsOutput( 'junitxml' )#<cfoutput>

{code}

!outputs-4.png!


*5. ColdFusion Query Format*

Returns a CF Query object that you can loop over as if it were a database query.

{code} <cfset q = results.getResultsOutput( 'query' ) />
 <cfoutput query="q">
   #q.component#, #q.testStatus# ...
 </cfoutput>

{code}

The available columns names: COMPONENT, CONTENT, DATETIME, DEBUG, ERROR, NUMBER, TESTNAME, TESTSTATUS, TIME, TRACE.
Summary data members ( q = results.getResultsOutput('query') ) :
q.testRuns = How many tests were run,
q.failures = How many tests fail,
q.errors = How many errors occurred,
q.successes = How many successes occurred,
q.totalExecutionTime = How long it took, in milliseconds, to run all the tests

{code}<cfdump var="#results.getResultsOutput( 'query' )#" />
{code}


!outputs-5.png!



*6. ColdFusion Array Format*

This is how internal test results are stored within the TestResult component.
To access specific members, you can execute the following:

{code} <cfset a = results.getResultsOutput( 'array' ) />
 <cfoutput>
   #a[1]["component"]#, #a[1]["testStatus"]# ...
 </cfoutput>

{code}
{code}<cfdump var="#results.getResultsOutput( 'array' )#" />

{code}

!outputs-6.png!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341349</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374100</id>
    <property name="body"><![CDATA[h2. Getting Started with TestSuites

A TestSuite is a collection of tests that logically fit together.

h3. Creating and Running a TestSuite

MXUnit was built to make it as easy as possible to create tests and test suites.
For this tutorial we will _incrementally_ rebuild the MXUnit example found in  the installation package mxunit/samples/MyTestSuite.cfm.

The steps for creating and running a TestSuite are:
# Create a ColdFusion page to run the suite
# Create a TestSuite object
# Tell the TestSuite what tests to add
# run() the TestSuite
# Print the output
# Run the suite in your web browser

*1. Create a ColdFusion page to run this example*

Create an empty ColdFusion page and save it as MyTestSuite.cfm in/mxunit/doc/tutorial/mytests

*2. Create a TestSuite object*

Type the following code into the template:

{code:title=MyTestSuite.cfm}<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
</cfscript>

{code}
*3. Tell the TestSuite what tests to add*

{code}<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
 //Add all runnable methods in MyComponentTest
 testSuite.addAll("mxunit.samples.MyComponentTest");
 testSuite.addAll("mxunit.samples.MyOtherComponentTest"); //Identical to above
 //add explicit test cased (don't start with 'test').
 //Note you can add more than one at a time as a list
 testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");

</cfscript>

{code}
*4. Run the TestSuite*
{code}<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
 testSuite.addAll("mxunit.samples.MyComponentTest");
 testSuite.addAll("mxunit.samples.MyOtherComponentTest");
 testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");
 //Run the tests and save everything in "results"
 results = testSuite.run();
</cfscript>
{code}
*5. Do something with the output*
{code}<cfscript>
testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
testSuite.addAll("mxunit.samples.MyComponentTest");
testSuite.addAll("mxunit.samples.MyOtherComponentTest"); //Identical to above
testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");
results = testSuite.run();
//Now print the results. Simple\!
writeOutput(results.getResultsOutput('html')); //See next section for other output formats
</cfscript>

{code}


*6. Run the suite in your web browser*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyTestSuite.cfm|http://localhost:8500/mxunit/doc/tutorial/mytests/MyTestSuite.cfm]

You should see this:

!suites-1.png!


*Next - [Overview of MXUnit TestResult output formats|MXUnit TestResult Output Formats]*]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341348</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374094</id>
    <property name="body"><![CDATA[h2. MXUnitAntTask \- Version: 1.0.3


h3. Description

Runs MXUnit tests and saves the output to the directory specified by the outputdir parameter.

This version uses HTTP to connect to the MXUnit test runner running on an Adobe ColdFusion server. Future plans may include the ability to run tests via the TCP/IP gateway in CF. Please let us know if this is something  you would like to see.

This supports the following HTTP authentication mechanisms - BASIC, DIGEST, and NTLM.

The default testrunner (/mxunit/runner/HttpAntRunner.cfc) accepts either individual test cases or directories of tests to run. This runner returns only JUnitReport formated XML. These XML files{_}may_ optionally be used by the JUnitReport Ant task to generate nice HTML reports. Example usage:

{code}
<junitreport todir="${junit.out.dir.html}">  
 <fileset dir="${output.dir}">  <include name="*.xml"/> </fileset>  
 <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>  </junitreport> 
{code}

Note that the mxunit-ant.jar must be in Ant's class path. This can be done by specifying the taskdef tag like this:

{code}
<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}" /> 
{code}

 and then coding the rest of the MXunit Ant task ...

{code}
<mxunittask server="localhost" 
            port="8500" 
            defaultrunner="/mxunit/runner/HttpAntRunner.cfc" 
            outputdir="${output.dir}" 
            verbose="true" haltonerror="true"> ... 
{code}

In theory, one should be able to run multiple tests across multiple domains, as long as those tests are accessible via Http.

h3. Parameters

| *Attribute* | *Description* | *Required* | *Default* |
| server | The Http server name where MXUnit is located. | Yes | |
| port | The port the Http server is listening on. | No | 80 |
| outputdir | A directory in which to save JUnit XML test results. | No | |
| haltonerror | Instructs the task to stop executing when an _ERROR_ is detected. \\
 This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| haltonfailure | Instructs the task to stop executing when a _FAILURE_ is detected. \\
 This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| errorproperty | The name of a property to set in the event of an error. | No | |
| failureproperty | The name of a property to set in the event of a failure (errors are considered failures as well). | No | |
| defaultrunner | The testrunner responsible for accepting requests. | No | /mxunit/runner/HttpAntRunner.cfc |
| verbose | Flag to indicate to output additional information. | No | false |
| testResultsSummary | Name of the properties file the task creates. This file is a Java      Properties file that records a summary of all the tests the task      has executed and is saved to the location specified in      the $\{outputdir\} attribute.      This can be useful in automated deployments, for example,      if you wish inspect the results of all the tests run prior to deployment.      This offers a deeper level of granularity than the haltonerror or haltonfailure offers. \\
 The task generates the following properties that can be read by Ant using      the following syntax:\\
 &lt;br&gt;&amp;amp;lt;property file="${outputdir}/testresults.properties" /&amp;amp;gt;&lt;br&gt;testresults.properties looks something like:#Sat Mar 01 22:20:25 EST 2008
success.ratio=.99
total.failures=2
failure.ratio=.01
total.errors=0
error.ratio=.00
total.time=8016
total.runs=151
error.ratio is the number of errors to the total number of tests runs. \\
 failure.ratio is the number of failures to the total number of tests runs. \\
 success.ratio is the total number of tests run to the total number of errors and failures combined.\\ | No | testresults.properties |

h3. Parameters specified as nested elements


h3. directory

<directory ... >s are used to specify groups of tests to run.
| *Attribute* | *Description* | *Required* | *Default* |
| path | Directory of tests to run. | Yes | |
| componentPath | A prefix to the components being tested. This is a performance         attribute. If specified, directory tests will run faster. Otherwise, the framework         will discover the componentPath using built in Adobe ColdFusion functions.\\
 Example: componentPath="mxunit.tests.framework". \\
 MXUnit will correctly prepend this to all the         tests in the specified directory. | No\\
 *Optionallity is deprecated. Future release will require this attribute to be       specified.* | |
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
| recurse | Flag to indicate to run all tests in sub directories. | No | false |
| excludes | Comma-delimitted list of files not to include in the test suite. | No | none |
----
h3. testcase

A <testcase> allows you to specify one or more individual test cases to run.
| *Attribute* | *Description* | *Required* | *Default* |
| name | The fully qualified ColdFusion component name (com.foo.bar.MyCFC) | Yes | |
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc" |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
----
h3. Examples

This example illustrates a minimal amount of code required to run one directory of tests.  Note that this example does not save any results. This may be useful for automated deployments.

{code}
<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="runtests">

  <target name="runtests" description="Run a dir of tests recursively">

   <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />
   <mxunittask server="localhost" >
     <directory path="C:\CFusionMX7\wwwroot\mxunit\tests\framework" recurse="true" componentPath="mxunit.tests.framework" />
   </mxunittask>

  </target>
</project>
{code} 

This example runs both directories of and individual tests, saves the output to ${output.dir}, generates a JUnit report, and  opens a web browser with the JUnit report. 

{code}
<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">

    <property name="mxunit.jar" value="../ant/lib/mxunit-ant.jar" />
    <property name="junit.out.dir.xml" value="testresults" />
    <property name="junit.out.dir.html" value="testresults/html" />
    <property name="output.dir" value="tmp" />
    <property name="style.dir" value="../ant/xsl/" />



   <target name="main" depends="browse" />


   <target name="runtests" description="Make output directories and run the MXUnit task">
     <mkdir dir="${junit.out.dir.html}" />
     <mkdir dir="${output.dir}" />
     <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />

       <mxunittask server="localhost" port="8500"
                   defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
                   connectionMethod="http"
                   outputdir="${output.dir}"
                   authmethod="basic"
                   username="foo"
                   password="bar"
                   verbose="true">

          <testcase name="mxunit.tests.framework.AssertTest" packageName="mxunit.asserttests" />
          <testcase name="mxunit.tests.framework.AssertDecoratorTest" packageName="mxunit.assertdecoratortests" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                     packageName="mxunit.framework"
                     recurse="false"
                     componentPath="mxunit.tests.framework"
                     excludes="none" />

           <!-- This has a bad componentPath and should fail -->
           <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                      remoteMethod="run"
                      path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                      packageName="mxunit.bad.framework"
                      recurse="false"
                      componentPath="mxunit.foo.bar"
                      excludes="none" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\samples"
                     packageName="mxunit.tests.samples"
                     recurse="false"
                     excludes="" />


      </mxunittask>
  </target>




  <target name="junitreport" depends="runtests" description="Create a report for the rest result">
     <mkdir dir="${junit.out.dir.html}"/>
     <junitreport todir="${junit.out.dir.html}">
        <fileset dir="${output.dir}">
           <include name="*.xml"/>
         </fileset>
         <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>
      </junitreport>
      <delete dir="${output.dir}" />
    </target>


  <!-- To fire up a browser with the test results. May not work on your machine -->

  <target name="browse" depends="junitreport">
    <exec executable="C:\Program Files\Internet Explorer\iexplore.exe">
      <arg value="C:\CFusionMX7\wwwroot\mxunit\tests\testresults\html\index.html"/>
    </exec>
  </target>



</project>

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341342</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374096</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [File A Bug or Feature|http://code.google.com/p/mxunit/issues/list]
* [Google Group (Help)|http://groups.google.com/group/mxunit]
* [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [File a Bug|http://code.google.com/p/mxunit/issues/list]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher
* Adam	Haskell
* Mike	Henke
* Randy	Merril
* Mike	Rankin
* Bill	Shelton
* Bob	Silverberg
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-row}
{table}
{column}

{column:width=3%}

{column}


{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}

{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341344</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828083</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374090</id>
    <property name="body"
      ><![CDATA[{html-include:url=http://mxunit.org/doc/mxunit-ant-doc.html}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341338</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828084</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828085</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374092</id>
    <property name="body"><![CDATA[h2. MXUnitAntTask \- Version: 1.0.3


h3. Description

Runs MXUnit tests and saves the output to the directory specified by the outputdir parameter.

This version uses HTTP to connect to the MXUnit test runner running on an Adobe ColdFusion server. Future plans may include the ability to run tests via the TCP/IP gateway in CF. Please let us know if this is something  you would like to see.

This version should also be able to handle Http authentications - BASIC, DIGEST, and NTLM.

The default testrunner (/mxunit/runner/HttpAntRunner.cfc) accepts either individual test cases or directories of tests to run. This runner returns only JUnitReport formated XML. These XML files{_}may_ optionally be used by the JUnitReport Ant task to generate nice HTML reports. Example usage:

&lt;br&gt;   &amp;amp;lt;junitreport todir="${junit.out.dir.html}"&amp;amp;gt;&lt;br&gt;     &amp;amp;lt;fileset dir="${output.dir}"&amp;amp;gt;&lt;br&gt;       &amp;amp;lt;include name="*.xml"/&amp;amp;gt;&lt;br&gt;     &amp;amp;lt;/fileset&amp;amp;gt;&lt;br&gt;     &amp;amp;lt;report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/&amp;amp;gt;&lt;br&gt;   &amp;amp;lt;/junitreport&amp;amp;gt;&lt;br&gt;

Note that the mxunit-ant.jar must be in Ant's class path. This can be done by specifying the taskdef tag like this:&amp;amp;lt;taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   /&amp;amp;gt;&lt;br&gt; and then coding the rest of the MXunit Ant task ...&amp;amp;lt;mxunittask server="localhost" port="8500"&lt;br&gt;                   defaultrunner="/mxunit/runner/HttpAntRunner.cfc"&lt;br&gt;                   outputdir="${output.dir}"&lt;br&gt;                   verbose="true"&lt;br&gt;                   haltonerror="true"&amp;amp;gt; ...

In theory, one should be able to run multiple tests across multiple domains, as long as those tests are accessible via Http.

h3. Parameters

| *Attribute* | *Description* | *Required* | *Default* |
| server | The Http server name where MXUnit is located. | Yes | |
| port | The port the Http server is listening on. | No | 80 |
| outputdir | A directory in which to save JUnit XML test results. | No | |
| haltonerror | Instructs the task to stop executing when an _ERROR_ is detected. \\
 This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| haltonfailure | Instructs the task to stop executing when a _FAILURE_ is detected. \\
 This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| errorproperty | The name of a property to set in the event of an error. | No | |
| failureproperty | The name of a property to set in the event of a failure (errors are considered failures as well). | No | |
| defaultrunner | The testrunner responsible for accepting requests. | No | /mxunit/runner/HttpAntRunner.cfc |
| verbose | Flag to indicate to output additional information. | No | false |
| testResultsSummary | Name of the properties file the task creates. This file is a Java      Properties file that records a summary of all the tests the task      has executed and is saved to the location specified in      the ${outputdir} attribute.      This can be useful in automated deployments, for example,      if you wish inspect the results of all the tests run prior to deployment.      This offers a deeper level of granularity than the haltonerror or haltonfailure offers. \\
 The task generates the following properties that can be read by Ant using      the following syntax:\\
 &lt;br&gt;&amp;amp;lt;property file="${outputdir}/testresults.properties" /&amp;amp;gt;&lt;br&gt;testresults.properties looks something like:#Sat Mar 01 22:20:25 EST 2008
success.ratio=.99
total.failures=2
failure.ratio=.01
total.errors=0
error.ratio=.00
total.time=8016
total.runs=151
error.ratio is the number of errors to the total number of tests runs. \\
 failure.ratio is the number of failures to the total number of tests runs. \\
 success.ratio is the total number of tests run to the total number of errors and failures combined.\\ | No | testresults.properties |

h3. Parameters specified as nested elements


h3. directory

<directory ... >s are used to specify groups of tests to run.
| *Attribute* | *Description* | *Required* | *Default* |
| path | Directory of tests to run. | Yes | |
| componentPath | A prefix to the components being tested. This is a performance         attribute. If specified, directory tests will run faster. Otherwise, the framework         will discover the componentPath using built in Adobe ColdFusion functions.\\
 Example: componentPath="mxunit.tests.framework". \\
 MXUnit will correctly prepend this to all the         tests in the specified directory. | No\\
 *Optionallity is deprecated. Future release will require this attribute to be       specified.* | |
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
| recurse | Flag to indicate to run all tests in sub directories. | No | false |
| excludes | Comma-delimitted list of files not to include in the test suite. | No | none |
----
h3. testcase

A <testcase> allows you to specify one or more individual test cases to run.
| *Attribute* | *Description* | *Required* | *Default* |
| name | The fully qualified ColdFusion component name (com.foo.bar.MyCFC) | Yes | |
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc" |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
----
h3. Examples

This example illustrates a minimal amount of code required to run one directory of tests.  Note that this example does not save any results. This may be useful for automated deployments.<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="runtests">

  <target name="runtests" description="Run a dir of tests recursively">

   <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />
   <mxunittask server="localhost" >
     <directory path="C:\CFusionMX7\wwwroot\mxunit\tests\framework" recurse="true" componentPath="mxunit.tests.framework" />
   </mxunittask>

  </target>
</project>
 This example runs both directories of and individual tests, saves the output to ${output.dir}, generates a JUnit report, and  opens a web browser with the JUnit report. <?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">

    <property name="mxunit.jar" value="../ant/lib/mxunit-ant.jar" />
    <property name="junit.out.dir.xml" value="testresults" />
    <property name="junit.out.dir.html" value="testresults/html" />
    <property name="output.dir" value="tmp" />
    <property name="style.dir" value="../ant/xsl/" />



   <target name="main" depends="browse" />


   <target name="runtests" description="Make output directories and run the MXUnit task">
     <mkdir dir="${junit.out.dir.html}" />
     <mkdir dir="${output.dir}" />
     <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />

       <mxunittask server="localhost" port="8500"
                   defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
                   connectionMethod="http"
                   outputdir="${output.dir}"
                   authmethod="basic"
                   username="foo"
                   password="bar"
                   verbose="true">

          <testcase name="mxunit.tests.framework.AssertTest" packageName="mxunit.asserttests" />
          <testcase name="mxunit.tests.framework.AssertDecoratorTest" packageName="mxunit.assertdecoratortests" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                     packageName="mxunit.framework"
                     recurse="false"
                     componentPath="mxunit.tests.framework"
                     excludes="none" />

           <!-- This has a bad componentPath and should fail -->
           <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                      remoteMethod="run"
                      path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                      packageName="mxunit.bad.framework"
                      recurse="false"
                      componentPath="mxunit.foo.bar"
                      excludes="none" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\samples"
                     packageName="mxunit.tests.samples"
                     recurse="false"
                     excludes="" />


      </mxunittask>
  </target>




  <target name="junitreport" depends="runtests" description="Create a report for the rest result">
     <mkdir dir="${junit.out.dir.html}"/>
     <junitreport todir="${junit.out.dir.html}">
        <fileset dir="${output.dir}">
           <include name="*.xml"/>
         </fileset>
         <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>
      </junitreport>
      <delete dir="${output.dir}" />
    </target>


  <!-- To fire up a browser with the test results. May not work on your machine -->

  <target name="browse" depends="junitreport">
    <exec executable="C:\Program Files\Internet Explorer\iexplore.exe">
      <arg value="C:\CFusionMX7\wwwroot\mxunit\tests\testresults\html\index.html"/>
    </exec>
  </target>



</project>]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341340</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828086</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828087</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374086</id>
    <property name="body"><![CDATA[[CFEclipse|http://cfeclipse.org] gives you the same snippet functionality you know and love from ColdFusion Studio. And now it goes a step further: SnipEx servers. This means you can get snippets from other folks simply by pointing to a snipex URL.
MXUnit uses the CFSnippets.org snipex server created by Todd Sharp.
This set of instructions assumes you know how to use snippets in CFEclipse (it does not assume you know how to use snipex). Please read about snippets first if you don't know what they are. If you're interested in learning more about snipex, please read that, too. It's quick and short and good.
Step 1: Clear your snippet cache
NOTE: you can skip this step if you've never set up the cfsnippets.org snipex server
(From Ray Camden's blog post)
&nbsp;&nbsp; 1. Change to your Eclipse workspace. Mine was at /Users/ray/Documents/workspace
&nbsp;&nbsp; 2. Change to .metadata/.plugins/org.cfeclipse.cfml/snipex
&nbsp;&nbsp; 3. Delete all XML files
&nbsp;&nbsp; 4. Restart Eclipse
Step 2: Add the cfsnippets.org snipex server
&nbsp;&nbsp; 1. Open the Snip Tree View
&nbsp;&nbsp; 2. Click the little white upside down triangle to the far right
&nbsp;&nbsp; 3. Select "Edit SnipEx Servers"
&nbsp;&nbsp; 4. Add http://cfsnippets.org/model/snippets/snipEx/snipEx.cfc into the first open URL box
&nbsp;&nbsp; 5. Click Apply
&nbsp;&nbsp; 6. Restart Eclipse
Step 3: Try it out
&nbsp;&nbsp; 1. Open any existing test case or create a new one. Or just pop open the scribble pad.
&nbsp;&nbsp; 2. Open the snip tree view
&nbsp;&nbsp; 3. You'll now see "CFSnippets.org" as a new entry in the tree
&nbsp;&nbsp; 4. Expand the tree. Look in the tree for "MXUnit". Expand it.
&nbsp;&nbsp; 5. You'll see all available snippets for MXUnit in there.
&nbsp;&nbsp; 6. To insert a snippet, just double click it\!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341334</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828088</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828089</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374088</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [File a Bug|http://code.google.com/p/mxunit/issues/list]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher
* Adam	Haskell
* Mike	Henke
* Randy	Merril
* Mike	Rankin
* Bill	Shelton
* Bob	Silverberg
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-row}
{table}
{column}

{column:width=3%}

{column}


{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}

{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341336</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828090</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828075</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374082</id>
    <property name="body"><![CDATA[h2.

{pagetree:root=Using the Eclipse Plugin}


[Install / Update|Install the Eclipse Plugin]

[Configure and Test|default:Configure and Test the Plugin]


[Keyboard Shortcuts|default:Eclipse Plugin Keyboard Shortcuts]

[Tips and Tricks|Eclipse Plugin Tips and Tricks]


[Troubleshooting|Eclipse Plugin Troubleshooting]

[Frequently Asked Questions|Eclipse Plugin FAQ]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341330</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828076</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828077</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828078</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828079</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828080</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374079</id>
    <property name="body"><![CDATA[
Before I (Marc) began testing with MXUnit, I used CFUnit. It's a fine framework. Its assertion style adheres to the JUnit convention, which is "message-first", like so:

{code}

	<cffunction name="testAssertEqualsMessageFirstFailure">
		<cfset expected = 1>
		<cfset actual = 2>
		<cfset assertEquals("here's my message",expected,actual)>
	</cffunction>
{code}	

This is all fine and good. However, many consider this an inconvenience, particularly when testing for equality (as opposed to using assertTrue()). The reason is that your assertion kind of negates the need for a message at times, and thus you see code like this all over the place:

{code}	<cffunction name="testAssertEqualsMessageFirstFailure">
		<cfset expected = 1>
		<cfset actual = 2>
		<cfset assertEquals("",expected,actual)>
	</cffunction>
{code}	

Again, no biggie. I got used to it and never paid it much mind. Nonetheless, MXUnit does not use message-first but instead uses message-optional assertions by default:

{code}	<cffunction name="testAssertEqualsMessageOptionalFailure">
		<cfset expected = 1>
		<cfset actual = 2>
		<cfset assertEquals(expected,actual)>
		<!--- optional message at end --->
		<cfset assertEquals(expected,actual,"here's my message")>
	</cffunction>
{code}	

Now, by the time I started using MXUnit, I head a healthy set of tests built, and they all used message-first assertions. This created a problem for me: spend a few hours modifying all my tests to use message-optional? Or something else. I went with something else. MXUnit supports the ability to use message-first style assertions for the main assertions: assertEquals and assertTrue. You do this by calling setTestStyle("cfunit") in your tests. You can do this in individual tests or in the setUp function. And, in addition, you can mix and match if you choose (why you'd do that, I don't know). To make a test use message-optional assertions in a test case that is also using message-first assertions in other test functions, simply call setTestStyle("default"). Here's an example of all this:

{code}	<cffunction name="setUp">
		<cfset setTestStyle("cfunit")>
	</cffunction>
	
	<cffunction name="testAssertEqualsMessageFirstFailure">
		<cfset expected = 1>
		<cfset actual = 2>
		<cfset assertEquals("my message",expected,actual)>		
	</cffunction>
	
	<cffunction name="testAssertEqualsMessageOptionalFailure">
		<cfset setTestStyle("default")>
		<cfset expected = 1>
		<cfset actual = 2>
		<cfset assertEquals(expected,actual,"my message")>		
	</cffunction>
{code}	

Eventually, I spent that few hours changing my tests to use message-optional assertions. Mostly because I think it makes them more maintainable and less confusing. So, please understand that setTestStyle("cfunit") is merely a convenience for those with existing tests who want to give MXUnit a try! It's not the suggested method of testing with MXUnit.
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341327</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828081</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828082</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:03.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374081</id>
    <property name="body"><![CDATA[h2.



[Install / Update|Install the Eclipse Plugin]

[Configure and Test|default:Configure and Test the Plugin]


[Keyboard Shortcuts|default:Eclipse Plugin Keyboard Shortcuts]

[Tips and Tricks|Eclipse Plugin Tips and Tricks]


[Troubleshooting|Eclipse Plugin Troubleshooting]

[Frequently Asked Questions|Eclipse Plugin FAQ]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341329</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374072</id>
    <property name="body"><![CDATA[Testing private methods with MXUnit

With MXUnit, testing private methods is easy.

Imagine a component named Something.cfc. It has a method named somePrivate:

{code}

	 	<cffunction name="somePrivate" access="private">
	 		<cfargument name="someArg" required="false" default="blah">
	 		<cfreturn someArg>
	 	</cffunction>
	{code}

You can't test this method directly. You can only test it indirectly through the component's public API. A lot of times, that's entirely appropriate. But sometimes, maybe that function is particularly nasty or granular and you'd just feel better if you could test it directly.

In typed languages such as Java, testing private methods is pretty difficult. In ColdFusion it's much easier because, unlike in Java, subclasses can call super.somePrivateMethod() and it'll actually work. Private in CF is not like private in Java. Thus, the preferred way to test private functions in CF has been to create a subclass of the object under test and override the private function with a public version which simply calls the parent. Robert Blackburn, maintainer of CFUnit, discusses this nicely.

As Robert discusses at the end, the primary concern here is that you create more maintenance when your private methods change. Now, you have three files to change: the component itself, the subclass containing the overridden private methods, and the test case.

If this is your cup of tea, that's cool. It's an accepted approach to this problem and it works well. You need read no further. However, if you don't particularly care for the extra maintenance, MXUnit makes it a bit easier.

{code|title=PrivateMethodTest.cfc}
	<cfcomponent extends="mxunit.framework.TestCase">
		
		<cffunction name="testSomePrivateDefaultBehavior">
	 		<cfset myObj = createObject("component","Something")>
			<cfset makePublic(myObj,"somePrivate")>
			<cfset ret = myObj.somePrivate("blah2")>
			<cfset assertEquals("blah2",ret)>
	 	</cffunction>
		
		<cffunction name="testSomePrivateUsingDifferentName">
	 		<cfset myObj = createObject("component","Something")>
			<cfset makePublic(myObj,"somePrivate","_somePrivate")>
			<cfset ret = myObj._somePrivate("blah2")>
			<cfset assertEquals("blah2",ret)>
	 	</cffunction>
		
	</cfcomponent>
{code}

Didjoo see that? Simply call makePublic(), passing in:

* An instance of the object with the private method
* The method name you want to test
* Optionally, a name for the "proxy" for the private method. If you don't pass anything, it'll just be the private method name

Internally, all that's happening is a bit of method shuffling. The original private method is renamed to something else, and a new, public method is injected into the object. This injected function then calls the original private method directly. This means that when you call "myObj.somePrivate()", you're calling this new function on the object you've already created and thus all your initialization done prior to that function call is retained. This would include anything done in the setUp function as well as anything done in the test function prior to this specific function call.

To see more examples, download the MXUnit framework and look at mxunit/tests/framework/PublicProxyMakerTest.cfc
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341318</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374071</id>
    <property name="body"><![CDATA[
Testing private methods with MXUnit

With MXUnit, testing private methods is easy.

Imagine a component named Something.cfc. It has a method named somePrivate:

{code}

	 	<cffunction name="somePrivate" access="private">
	 		<cfargument name="someArg" required="false" default="blah">
	 		<cfreturn someArg>
	 	</cffunction>
	{code}

You can't test this method directly. You can only test it indirectly through the component's public API. A lot of times, that's entirely appropriate. But sometimes, maybe that function is particularly nasty or granular and you'd just feel better if you could test it directly.

In typed languages such as Java, testing private methods is pretty difficult. In ColdFusion it's much easier because, unlike in Java, subclasses can call super.somePrivateMethod() and it'll actually work. Private in CF is not like private in Java. Thus, the preferred way to test private functions in CF has been to create a subclass of the object under test and override the private function with a public version which simply calls the parent. Robert Blackburn, maintainer of CFUnit, discusses this nicely.

As Robert discusses at the end, the primary concern here is that you create more maintenance when your private methods change. Now, you have three files to change: the component itself, the subclass containing the overridden private methods, and the test case.

If this is your cup of tea, that's cool. It's an accepted approach to this problem and it works well. You need read no further. However, if you don't particularly care for the extra maintenance, MXUnit makes it a bit easier.

{code}
	<cfcomponent extends="mxunit.framework.TestCase">
		
		<cffunction name="testSomePrivateDefaultBehavior">
	 		<cfset myObj = createObject("component","Something")>
			<cfset makePublic(myObj,"somePrivate")>
			<cfset ret = myObj.somePrivate("blah2")>
			<cfset assertEquals("blah2",ret)>
	 	</cffunction>
		
		<cffunction name="testSomePrivateUsingDifferentName">
	 		<cfset myObj = createObject("component","Something")>
			<cfset makePublic(myObj,"somePrivate","_somePrivate")>
			<cfset ret = myObj._somePrivate("blah2")>
			<cfset assertEquals("blah2",ret)>
	 	</cffunction>
		
	</cfcomponent>
{code}

Didjoo see that? Simply call makePublic(), passing in:

* An instance of the object with the private method
* The method name you want to test
* Optionally, a name for the "proxy" for the private method. If you don't pass anything, it'll just be the private method name

Internally, all that's happening is a bit of method shuffling. The original private method is renamed to something else, and a new, public method is injected into the object. This injected function then calls the original private method directly. This means that when you call "myObj.somePrivate()", you're calling this new function on the object you've already created and thus all your initialization done prior to that function call is retained. This would include anything done in the setUp function as well as anything done in the test function prior to this specific function call.

To see more examples, download the MXUnit framework and look at mxunit/tests/framework/PublicProxyMakerTest.cfc
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341317</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374070</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341316</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374069</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Download|http://mxunit.org/download.cfm]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]

h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [File a Bug|http://code.google.com/p/mxunit/issues/list]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher
* Adam	Haskell
* Mike	Henke
* Randy	Merril
* Mike	Rankin
* Bill	Shelton
* Bob	Silverberg
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-row}
{table}
{column}

{column:width=3%}

{column}


{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}

{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341315</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374066</id>
    <property name="body"><![CDATA[Custom Assertions - How To

Sometimes you need complex and/or repetitive assertions. This can put a damper on any TDD effort. So, we provide you an easy way to add custom assertions to your tests without having to change the mxunit core.

The steps for creating your custom assertion are as follows:

   1. Write a test for your assertion
   2. Write the assertion
   3. Decide how you want to load it: Always or only on selected tests.

Assertion Rules:

   1. Your assertion will need to throw mxunit.exception.AssertionFailedError or use an existing assertion that throws this exception.
   2. If you want to have optional first or last parameter message, you will need to call normalizeArguments(arguments) in your code.


Custom Assertion Example: Say you need to frequently validate email addresses. You can do this with a pretty regular expression such as this :
{code}
^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$
{code}
The code for this might look like:

{code}
<cffunction name="testValidEmailAddress">
  <cfscript>
   var emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]\{2,\})$";
   var emailAddress = "somebody@somewhere.com";
   assertTrue(refind(emailRegEx,emailAddress) lt 1,"Invalid email address format");
  </cfscript>
</cffunction>
{code}

This is fine, but you could save yourself some typing and some Ctrl+C/Ctrl+V errors. How about something that looks like this instead?

{code}
<cffunction name="testValidEmailAddress">
  <cfscript>
   var emailAddress = "somebody@somewhere.com";
   assertIsValidEmail(emailAddress);
  </cfscript>
</cffunction>
{code}

Much better! And this has the added bonus of not having to find a replace hundreds of complex regular expressions in your code; you would just do that in one place.

Here's how:

1. Write a test for your assertion:

{code}
<cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >

<cffunction name="testAssertIsValidEmail">
  <cfscript>
    var goodEmailAddress = "somebody@somewhere.com";
    var badEmailAddress = "so ~~/\/\/\/\/\~~ m=+ebod$y@someplace.zombie";
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
    assertIsValidEmail(goodEmailAddress);
    try{
      //expect failure
      assertIsValidEmail(badEmailAddress);
    }
    catch(mxunit.exception.AssertionFailedError e){}
  </cfscript>
</cffunction>

</cfcomponent>
{code}

The above fails because we do not yet have ValidEmailAssertion written. Note the addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion") statement. This tells the MXUnit framework to load your assertion at runtime.

2. Write the assertion

{code}
<cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   </cfscript>

  <cfif actual lt 1>
  <cfthrow type="mxunit.exception.AssertionFailedError" message="#arguments.message#" />
  </cfif>
  <cfreturn true />
</cffunction>

</cfcomponent>
{code}

You could also leverage existing assertions and write the following instead:
view plaincopy to clipboardprint?

{code}
<cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   assertTrue(refind(emailRegEx,arguments.email) lt 1, arguments.message);
  </cfscript>

   <cfreturn true />
</cffunction>

</cfcomponent>
{code}

Note the arguments = normalizeArguments(arguments) statement. This allows for the flexibility if you want to be able to pass the message parameter first or last.

Ok. Now when we run our test, we're in the green. Our new assertion works as expected. Wahoo!

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/custom-assertion-1.png!

3. Decide how you want to load the new code. The options are for each test or for all tests. You've already seen how to load custom assertions in your code. This can also be done in setUp().

{code}
<cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >
 ...
<cffunction name="setUp">
  <cfscript>
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
  </cfscript>
</cffunction>

</cfcomponent>

{code}

What if you want your new assertion to always be available? Edit the mxunit-config.xml file located in \{mxunit install\}/mxunit/framework/

Add the following line :
{code}
<?xml version="1.0" encoding="UTF-8" ?>
 <mxunit-config>
  ...
  <config-element type="assertionExtension" path="mxunit.framework.ext.ValidEmailAssertion" autoload="true" override="false" />
  ...
 </mxunit-config>
 {code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341312</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374065</id>
    <property name="body"><![CDATA[Custom Assertions - How To

Sometimes you need complex and/or repetitive assertions. This can put a damper on any TDD effort. So, we provide you an easy way to add custom assertions to your tests without having to change the mxunit core.

The steps for creating your custom assertion are as follows:

   1. Write a test for your assertion
   2. Write the assertion
   3. Decide how you want to load it: Always or only on selected tests.

Assertion Rules:

   1. Your assertion will need to throw mxunit.exception.AssertionFailedError or use an existing assertion that throws this exception.
   2. If you want to have optional first or last parameter message, you will need to call normalizeArguments(arguments) in your code.


Custom Assertion Example: Say you need to frequently validate email addresses. You can do this with a pretty regular expression such as this :
^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]\{2,\})$
The code for this might look like:

{code}
<cffunction name="testValidEmailAddress">
  <cfscript>
   var emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]\{2,\})$";
   var emailAddress = "somebody@somewhere.com";
   assertTrue(refind(emailRegEx,emailAddress) lt 1,"Invalid email address format");
  </cfscript>
</cffunction>
{code}

This is fine, but you could save yourself some typing and some Ctrl+C/Ctrl+V errors. How about something that looks like this instead?

{code}
<cffunction name="testValidEmailAddress">
  <cfscript>
   var emailAddress = "somebody@somewhere.com";
   assertIsValidEmail(emailAddress);
  </cfscript>
</cffunction>
{code}

Much better! And this has the added bonus of not having to find a replace hundreds of complex regular expressions in your code; you would just do that in one place.

Here's how:

1. Write a test for your assertion:

{code}
<cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >

<cffunction name="testAssertIsValidEmail">
  <cfscript>
    var goodEmailAddress = "somebody@somewhere.com";
    var badEmailAddress = "so ~~/\/\/\/\/\~~ m=+ebod$y@someplace.zombie";
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
    assertIsValidEmail(goodEmailAddress);
    try{
      //expect failure
      assertIsValidEmail(badEmailAddress);
    }
    catch(mxunit.exception.AssertionFailedError e){}
  </cfscript>
</cffunction>

</cfcomponent>
{code}

The above fails because we do not yet have ValidEmailAssertion written. Note the addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion") statement. This tells the MXUnit framework to load your assertion at runtime.

2. Write the assertion

{code}
<cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   </cfscript>

  <cfif actual lt 1>
  <cfthrow type="mxunit.exception.AssertionFailedError" message="#arguments.message#" />
  </cfif>
  <cfreturn true />
</cffunction>

</cfcomponent>
{code}

You could also leverage existing assertions and write the following instead:
view plaincopy to clipboardprint?

{code}
<cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   assertTrue(refind(emailRegEx,arguments.email) lt 1, arguments.message);
  </cfscript>

   <cfreturn true />
</cffunction>

</cfcomponent>
{code}

Note the arguments = normalizeArguments(arguments) statement. This allows for the flexibility if you want to be able to pass the message parameter first or last.

Ok. Now when we run our test, we're in the green. Our new assertion works as expected. Wahoo!

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/custom-assertion-1.png!

3. Decide how you want to load the new code. The options are for each test or for all tests. You've already seen how to load custom assertions in your code. This can also be done in setUp().

{code}
<cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >
 ...
<cffunction name="setUp">
  <cfscript>
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
  </cfscript>
</cffunction>

</cfcomponent>

{code}

What if you want your new assertion to always be available? Edit the mxunit-config.xml file located in \{mxunit install\}/mxunit/framework/

Add the following line :
{code}
<?xml version="1.0" encoding="UTF-8" ?>
 <mxunit-config>
  ...
  <config-element type="assertionExtension" path="mxunit.framework.ext.ValidEmailAssertion" autoload="true" override="false" />
  ...
 </mxunit-config>
 {code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341311</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374064</id>
    <property name="body"><![CDATA[Custom Assertions - How To

Sometimes you need complex and/or repetitive assertions. This can put a damper on any TDD effort. So, we provide you an easy way to add custom assertions to your tests without having to change the mxunit core.

The steps for creating your custom assertion are as follows:

   1. Write a test for your assertion
   2. Write the assertion
   3. Decide how you want to load it: Always or only on selected tests.

Assertion Rules:

   1. Your assertion will need to throw mxunit.exception.AssertionFailedError or use an existing assertion that throws this exception.
   2. If you want to have optional first or last parameter message, you will need to call normalizeArguments(arguments) in your code.


Custom Assertion Example: Say you need to frequently validate email addresses. You can do this with a pretty regular expression such as this :
^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$
The code for this might look like:

{code}
<cffunction name="testValidEmailAddress">
  <cfscript>
   var emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   var emailAddress = "somebody@somewhere.com";
   assertTrue(refind(emailRegEx,emailAddress) lt 1,"Invalid email address format");
  </cfscript>
</cffunction>
{code}

This is fine, but you could save yourself some typing and some Ctrl+C/Ctrl+V errors. How about something that looks like this instead?

{code}
<cffunction name="testValidEmailAddress">
  <cfscript>
   var emailAddress = "somebody@somewhere.com";
   assertIsValidEmail(emailAddress);
  </cfscript>
</cffunction>
{code}

Much better! And this has the added bonus of not having to find a replace hundreds of complex regular expressions in your code; you would just do that in one place.

Here's how:

1. Write a test for your assertion:

{code}
<cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >

<cffunction name="testAssertIsValidEmail">
  <cfscript>
    var goodEmailAddress = "somebody@somewhere.com";
    var badEmailAddress = "so ~~/\/\/\/\/\~~ m=+ebod$y@someplace.zombie";
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
    assertIsValidEmail(goodEmailAddress);
    try{
      //expect failure
      assertIsValidEmail(badEmailAddress);
    }
    catch(mxunit.exception.AssertionFailedError e){}
  </cfscript>
</cffunction>

</cfcomponent>
{code}

The above fails because we do not yet have ValidEmailAssertion written. Note the addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion") statement. This tells the MXUnit framework to load your assertion at runtime.

2. Write the assertion

{code}
<cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   </cfscript>

  <cfif actual lt 1>
  <cfthrow type="mxunit.exception.AssertionFailedError" message="#arguments.message#" />
  </cfif>
  <cfreturn true />
</cffunction>

</cfcomponent>
{code}

You could also leverage existing assertions and write the following instead:
view plaincopy to clipboardprint?

{code}
<cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   assertTrue(refind(emailRegEx,arguments.email) lt 1, arguments.message);
  </cfscript>

   <cfreturn true />
</cffunction>

</cfcomponent>
{code}

Note the arguments = normalizeArguments(arguments) statement. This allows for the flexibility if you want to be able to pass the message parameter first or last.

Ok. Now when we run our test, we're in the green. Our new assertion works as expected. Wahoo!

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/custom-assertion-1.png!

3. Decide how you want to load the new code. The options are for each test or for all tests. You've already seen how to load custom assertions in your code. This can also be done in setUp().

{code}
<cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >
 ...
<cffunction name="setUp">
  <cfscript>
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
  </cfscript>
</cffunction>

</cfcomponent>

{code}

What if you want your new assertion to always be available? Edit the mxunit-config.xml file located in \{mxunit install\}/mxunit/framework/

Add the following line :
{code}
<?xml version="1.0" encoding="UTF-8" ?>
 <mxunit-config>
  ...
  <config-element type="assertionExtension" path="mxunit.framework.ext.ValidEmailAssertion" autoload="true" override="false" />
  ...
 </mxunit-config>
 {code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341310</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374062</id>
    <property name="body"><![CDATA[Custom Assertions - How To

Sometimes you need complex and/or repetitive assertions. This can put a damper on any TDD effort. So, we provide you an easy way to add custom assertions to your tests without having to change the mxunit core.

The steps for creating your custom assertion are as follows:

   1. Write a test for your assertion
   2. Write the assertion
   3. Decide how you want to load it: Always or only on selected tests.

Assertion Rules:

   1. Your assertion will need to throw mxunit.exception.AssertionFailedError or use an existing assertion that throws this exception.
   2. If you want to have optional first or last parameter message, you will need to call normalizeArguments(arguments) in your code.


Custom Assertion Example: Say you need to frequently validate email addresses. You can do this with a pretty regular expression such as this :
^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$
The code for this might look like:

{code}
<cffunction name="testValidEmailAddress">
  <cfscript>
   var emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   var emailAddress = "somebody@somewhere.com";
   assertTrue(refind(emailRegEx,emailAddress) lt 1,"Invalid email address format");
  </cfscript>
</cffunction>
{code}

This is fine, but you could save yourself some typing and some Ctrl+C/Ctrl+V errors. How about something that looks like this instead?

{code}
<cffunction name="testValidEmailAddress">
  <cfscript>
   var emailAddress = "somebody@somewhere.com";
   assertIsValidEmail(emailAddress);
  </cfscript>
</cffunction>
{code}

Much better! And this has the added bonus of not having to find a replace hundreds of complex regular expressions in your code; you would just do that in one place.

Here's how:

1. Write a test for your assertion:

{code}
<cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >

<cffunction name="testAssertIsValidEmail">
  <cfscript>
    var goodEmailAddress = "somebody@somewhere.com";
    var badEmailAddress = "so ~~/\/\/\/\/\~~ m=+ebod$y@someplace.zombie";
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
    assertIsValidEmail(goodEmailAddress);
    try{
      //expect failure
      assertIsValidEmail(badEmailAddress);
    }
    catch(mxunit.exception.AssertionFailedError e){}
  </cfscript>
</cffunction>

</cfcomponent>
{code}

The above fails because we do not yet have ValidEmailAssertion written. Note the addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion") statement. This tells the MXUnit framework to load your assertion at runtime.

2. Write the assertion

{code}
<cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   </cfscript>

  <cfif actual lt 1>
  <cfthrow type="mxunit.exception.AssertionFailedError" message="#arguments.message#" />
  </cfif>
  <cfreturn true />
</cffunction>

</cfcomponent>
{code}

You could also leverage existing assertions and write the following instead:
view plaincopy to clipboardprint?

{code}
<cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   assertTrue(refind(emailRegEx,arguments.email) lt 1, arguments.message);
  </cfscript>

   <cfreturn true />
</cffunction>

</cfcomponent>
{code}

Note the arguments = normalizeArguments(arguments) statement. This allows for the flexibility if you want to be able to pass the message parameter first or last.

Ok. Now when we run our test, we're in the green. Our new assertion works as expected. Wahoo!

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/custom-assertion-1.png!

3. Decide how you want to load the new code. The options are for each test or for all tests. You've already seen how to load custom assertions in your code. This can also be done in setUp().

{code}
<cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >
 ...
<cffunction name="setUp">
  <cfscript>
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
  </cfscript>
</cffunction>

</cfcomponent>

{code}

What if you want your new assertion to always be available? Edit the mxunit-config.xml file located in {mxunit install}/mxunit/framework/

Add the following line :
{code}
<?xml version="1.0" encoding="UTF-8" ?>
 <mxunit-config>
  ...
  <config-element type="assertionExtension" path="mxunit.framework.ext.ValidEmailAssertion" autoload="true" override="false" />
  ...
 </mxunit-config>
 {code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341308</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374060</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=60%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Download|http://mxunit.org/download.cfm]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]

h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [File a Bug|http://code.google.com/p/mxunit/issues/list]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher
* Adam	Haskell
* Mike	Henke
* Randy	Merril
* Mike	Rankin
* Bill	Shelton
* Bob	Silverberg
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-row}
{table}
{column}

{column:width=5%}

{column}


{column:width=35%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}

{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341305</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374058</id>
    <property name="body"><![CDATA[{html}
<center>

<!-- the comment and script is used to workaround the KB912945 patch -->
	<!--[if gte IE 6]> <comment id="to_be_rewritten"> <![endif]-->
	<OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" WIDTH="814" HEIGHT="701" id="movie">
	<PARAM NAME=movie VALUE="mxunit_ant_automation_demo.swf"> 
	<PARAM NAME=quality VALUE=high>
	<PARAM NAME=bgcolor VALUE=#FFFFFF>
	<EMBED src="mxunit_ant_automation_demo.swf" quality=high bgcolor=#FFFFFF WIDTH="814" HEIGHT="701" NAME="movie" ALIGN="" TYPE="application/x-shockwave-flash" PLUGINSPAGE="http://www.macromedia.com/go/getflashplayer"></EMBED>
	</OBJECT>
	</comment><script language="Javascript" src="ieupdate.js"></script>


</center> 
{html}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341303</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374057</id>
    <property name="body"><![CDATA[{html}
<center>

	<!-- the comment and script is used to workaround the KB912945 patch -->
	<!--[if gte IE 6]> <comment id="to_be_rewritten"> <![endif]-->
	<OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" WIDTH="718" HEIGHT="541" id="movie">
	<PARAM NAME=movie VALUE="mxunit-install3.swf"> 
	<PARAM NAME=quality VALUE=high>
	<PARAM NAME=bgcolor VALUE=#FFFFFF>
	<EMBED src="https://mxunit.s3.amazonaws.com/video/mxunit_ant_automation_demo.swf" quality=high bgcolor=#FFFFFF WIDTH="718" HEIGHT="541" NAME="movie" ALIGN="" TYPE="application/x-shockwave-flash" PLUGINSPAGE="http://www.macromedia.com/go/getflashplayer"></EMBED>
	</OBJECT>
	</comment><script language="Javascript" src="ieupdate.js"></script>

</center> 
{html}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341302</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374055</id>
    <property name="body"
      ><![CDATA[{html-include:url=http://mxunit.s3.amazonaws.com/video/mxunit_ant_automation_demo.html}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341300</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374053</id>
    <property name="body"><![CDATA[In this tutorial, you will learn how to create an Ant build file that      executes MXUnit tests and generates JUnit reports

First off, you should be familiar with [Ant|http://ant.apache.org/]. If not, visit the       site, [download    Ant|http://ant.apache.org/bindownload.cgi] and play around with it to develop a basic understanding of       projects and tasks.

Ok, now that you're an expert let's kick it. We'll use the MXUnit tests       that we use to build the framework. These are located in the MXUnit       Framework download in /mxunit/tests. We will use the minimal required       options in order to run the Ant task. All optional task attributes can be       found [here|default:Ant Task Doc] .

This tutorial assumes installation of MXUnit directly in the webroot;       e.g., /mxunit/

These are the basic steps to create the build that runs tests and       generates a report
# Create ant Ant build project
# Define the MXUnit Ant Task
# Tell MXUnit Which Tests You Want to Run
# Define The JUnit Report Task
# Run it ...
# View the report


*1. Create an Ant build&nbsp;project*

Type the folling into a text file and save it as       /mxunit/tutorial/ant/build.xml. 

{code}
<?xml version="1.0" encoding="ISO-8859-1"?> 
<project name="MXUnitTask" basedir="." default="main">
</project>
{code}

If you run just this in Ant you should see the following:

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/ant-junit-1.png!

This is what we expect to see. The build fails because there is no      target main defined. We will define this task next.

*2. Define The MXUnit Ant Task*

Add the following into the build.xml file:

{code}
<project name="MXUnitTask" basedir="." default="main">
<mkdir dir="testresults" />

<target name="main" depends="runtests" description="Main target for running the tests." />

<target name="runtests" description="Make output directories and run the MXUnit task">
<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
<mxunittask server="localhost" port="8500"
outputdir="testresults"
verbose="true">
</mxunittask>
</target>
</project>
{code}

This instructs Ant to use the MXUnit Ant Task located in /mxunit/ant/lib/mxunit-ant.jar. It then tells the MXUnit Ant Task to use         the localhost as the target server and the HTTP port 8500. You should change         these values to point to any installation of the MXUnit Framework. The outputdir is the location to where the test results will be saved. The         verbose attribute instructs the task to print additional information to         stdout.
If you run this, you should see the following: 

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/ant-junit-2.png!

This is good. We have made contact with the MXUnit Ant Task. The build fails with a  java.lang.NullPointerException   because the task expects some tests to run and none were provided.

*3. Tell MXUnit Which Tests You Want to Run*
&nbsp;
Add the following to the build.xml file: 

{code}
<project name="MXUnitTask" basedir="." default="main">

<mkdir dir="testresults" />

<target name="main" depends="runtests" description="Main target for running the tests." />

<target name="runtests" description="Make output directories and run the MXUnit task">
<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
<mxunittask server="localhost" port="8500"
outputdir="testresults"
verbose="true">
<directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
</mxunittask>
</target>
</project>
{code}

We inserted the directory element to         instruct the MXUnit Ant Task to run all the tests in the directory         specified by the path attribute. Note,         make sure your path attribute points to         the location of the /mxunit/tests/framework directory. When you run this,         the HttpAntRunner.cfc is called by the task. This runner executes the         tests using the mxunit framework and save the results as JUnitXml to the         location specified by the outputdir attribute.
When run, you should see the following:

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/ant-junit-3.png!

You should now have 2 files in /mxunit/tutorial/ant/testresults/tmp/ called mxunitdirectorytestsuite_1.xml and testresults.properties.       The first one will be used by JUnit in  the next step to generate a report. The second one          can be used to summarize all the test results run, as you can have multiple directory elements in the task.


*4. Define The JUnit Report Task*
Type the following into the build.xml:

{code}

<project name="MXUnitTask" basedir="." default="main">

<mkdir dir="testresults" />

<target name="main" depends="runtests,junitreport" description="Main target for running the tests." />

<target name="runtests" description="Make output directories and run the MXUnit task">
<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
<mxunittask server="localhost" port="8500"
outputdir="testresults"
verbose="true">
<directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
</mxunittask>
</target>



<target name="junitreport" description="Create a report for the rest result">
<mkdir dir="junithtml"/>
<junitreport todir="junithtml">
<fileset dir="testresults">
<include name="*.xml"/>
</fileset>
<report format="frames" todir="junithtml" styledir="../../ant/xsl"/>
</junitreport>
</target>

</project>

{code}


We've a couple of new things here:
1. Created a new target for Ant (junitreport). This target is responsible for         generating the JUnit-style report.
2. Instructed the main target to call the runtests target first, then          the junitreport task after that.
The junitreport task is looking for the XML         files we created with the runtests task. Hence, we use the fileset element         to tell JUnit where to go to find the XML test results.
You'll also notice that we point         to the /mxunit/ant/xsl directory for the formatting information.         This is optional, and you may use any stylesheet you wish or the default         one in Ant's JUnit Report Task path.

*5. Run it ...* you should see this:

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/ant-junit-4.png!

*6. View the report*

You can now browse /mxunit/tutorial/ant/junithtml/ and open index.html in your web browser. You     should see the following: An live interactive version of this report is available [here|http://mxunit.org/testresults/index.html].

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/ant-junit-5.png!

You can take this process further by adding additional directory elements that      contain tests. You may also execute individual test cases using the testcase element. Details on the MXUnit Ant Task can be found  [here|default:Ant Task Doc] . 

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341298</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374051</id>
    <property name="body"><![CDATA[In this tutorial, you will learn how to create an Ant build file that       executes MXUnit tests and generates JUnit reports

First off, you should be familiar with [Ant|http://ant.apache.org/]. If not, visit the       site, [download       Ant|http://ant.apache.org/bindownload.cgi] and play around with it to develop a basic understanding of       projects and tasks.

Ok, now that you're an expert let's kick it. We'll use the MXUnit tests       that we use to build the framework. These are located in the MXUnit       Framework download in /mxunit/tests. We will use the minimal required       options in order to run the Ant task. All optional task attributes can be       found [here|http://mxunit.org/doc/mxunit-ant-doc.html].

This tutorial assumes installation of MXUnit directly in the webroot;       e.g., /mxunit/

These are the basic steps to create the build that runs tests and       generates a report
# Create ant Ant build project
# Define the MXUnit Ant Task
# Tell MXUnit Which Tests You Want to Run
# Define The JUnit Report Task
# Run it ...
# View the report

&nbsp;

*1. Create an Ant build&nbsp;project*

Type the folling into a text file and save it as       /mxunit/tutorial/ant/build.xml. [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# </project>&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">
</project>
If you run just this in Ant you should see the following:

This is what we expect to see. The build fails because there is no      target main defined. We will define this task next.

*2. Define The MXUnit Ant Task*

Add the following into the build.xml file: [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">
  <mkdir dir="testresults" />

  <target name="main" depends="runtests" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                outputdir="testresults"
                verbose="true">
  </mxunittask>
</target>
</project>

This instructs Ant to use the MXUnit Ant Task located in /mxunit/ant/lib/mxunit-ant.jar. It then tells the MXUnit Ant Task to use         the localhost as the target server and the HTTP port 8500. You should change         these values to point to any installation of the MXUnit Framework. The outputdir is the location to where the test results will be saved. The         verbose attribute instructs the task to print additional information to         stdout.
If you run this, you should see the following: This is good. We have made contact with the MXUnit Ant Task. The build fails with a  java.lang.NullPointerException         because the task expects some tests to run and none were provided.

*3. Tell MXUnit Which Tests You Want to Run*
&nbsp;
Add the following to the build.xml file: [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<directory&nbsp;path="C:\ColdFusion8\wwwroot\mxunit\tests\framework"&nbsp;recurse="false"&nbsp;componentPath="mxunit.tests.framework"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">

  <mkdir dir="testresults" />

  <target name="main" depends="runtests" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                 outputdir="testresults"
                 verbose="true">
      <directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
  </mxunittask>
</target>
</project>

We inserted the directory element to         instruct the MXUnit Ant Task to run all the tests in the directory         specified by the path attribute. Note,         make sure your path attribute points to         the location of the /mxunit/tests/framework directory. When you run this,         the HttpAntRunner.cfc is called by the task. This runner executes the         tests using the mxunit framework and save the results as JUnitXml to the         location specified by the outputdir attribute.
When run, you should see the following:
You should now have 2 files in /mxunit/tutorial/ant/testresults/tmp/ called mxunitdirectorytestsuite_1.xml and testresults.properties.          The first one will be used by JUnit in  the next step to generate a report. The second one          can be used to summarize all the test results run, as you can have multiple directory elements in the task.
*4. Define The JUnit Report Task*
Type the following into the build.xml: [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests,junitreport"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<directory&nbsp;path="C:\ColdFusion8\wwwroot\mxunit\tests\framework"&nbsp;recurse="false"&nbsp;componentPath="mxunit.tests.framework"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# <target&nbsp;name="junitreport"&nbsp;description="Create&nbsp;a&nbsp;report&nbsp;for&nbsp;the&nbsp;rest&nbsp;result">&nbsp;&nbsp;
# &nbsp;<mkdir&nbsp;dir="junithtml"/>&nbsp;&nbsp;
# &nbsp;<junitreport&nbsp;todir="junithtml">&nbsp;&nbsp;
# &nbsp;&nbsp;<fileset&nbsp;dir="testresults">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<include&nbsp;name="*.xml"/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;</fileset>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;<report&nbsp;format="frames"&nbsp;todir="junithtml"&nbsp;styledir="../../ant/xsl"/>&nbsp;&nbsp;
# &nbsp;&nbsp;</junitreport>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# &nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">

  <mkdir dir="testresults" />

  <target name="main" depends="runtests,junitreport" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                 outputdir="testresults"
                 verbose="true">
      <directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
  </mxunittask>
</target>



<target name="junitreport" description="Create a report for the rest result">
 <mkdir dir="junithtml"/>
 <junitreport todir="junithtml">
  <fileset dir="testresults">
     <include name="*.xml"/>
   </fileset>
   <report format="frames" todir="junithtml" styledir="../../ant/xsl"/>
  </junitreport>
</target>

</project>


     We've a couple of new things here:
1. Created a new target for Ant (junitreport). This target is responsible for         generating the JUnit-style report.
2. Instructed the main target to call the runtests target first, then          the junitreport task after that.
The junitreport task is looking for the XML         files we created with the runtests task. Hence, we use the fileset element         to tell JUnit where to go to find the XML test results.
You'll also notice that we point         to the /mxunit/ant/xsl directory for the formatting information.         This is optional, and you may use any stylesheet you wish or the default         one in Ant's JUnit Report Task path.

*5. Run it ...* you should see this:
*6. View the report*

You can now browse /mxunit/tutorial/ant/junithtml/ and open index.html in your web browser. You     should see the following: An live interactive version of this report is available [here|http://mxunit.org/testresults/index.html].

You can take this process further by adding additional directory elements that      contain tests. You may also execute individual test cases using the testcase element. Details on the MXUnit Ant Task can be found [here|http://mxunit.org/doc/mxunit-ant-doc.html]. ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341296</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374049</id>
    <property name="body"><![CDATA[In this tutorial, you will learn how to create an Ant build file that       executes MXUnit tests and generates JUnit reports

First off, you should be familiar with [Ant|http://ant.apache.org/]. If not, visit the       site, [download       Ant|http://ant.apache.org/bindownload.cgi] and play around with it to develop a basic understanding of       projects and tasks.

Ok, now that you're an expert let's kick it. We'll use the MXUnit tests       that we use to build the framework. These are located in the MXUnit       Framework download in /mxunit/tests. We will use the minimal required       options in order to run the Ant task. All optional task attributes can be       found [here|http://mxunit.org/doc/mxunit-ant-doc.html].

This tutorial assumes installation of MXUnit directly in the webroot;       e.g., /mxunit/

These are the basic steps to create the build that runs tests and       generates a report
# Create ant Ant build project
# Define the MXUnit Ant Task
# Tell MXUnit Which Tests You Want to Run
# Define The JUnit Report Task
# Run it ...
# View the report

&nbsp;

*1. Create an Ant build&nbsp;project*
Type the folling into a text file and save it as       /mxunit/tutorial/ant/build.xml. [
|http://mxunit.org/doc/index.cfm?doc=antjunit#][|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# </project>&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">
</project>
If you run just this in Ant you should see the following: This is what we expect to see. The build fails because there is no      target main defined. We will define this task next.

*2. Define The MXUnit Ant Task* Add the following into the build.xml file:

<?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;&nbsp;
# &nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">
  <mkdir dir="testresults" />

  <target name="main" depends="runtests" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                outputdir="testresults"
                verbose="true">
  </mxunittask>
</target>
</project>

This instructs Ant to use the MXUnit Ant Task located in /mxunit/ant/lib/mxunit-ant.jar. It then tells the MXUnit Ant Task to use         the localhost as the target server and the HTTP port 8500. You should change         these values to point to any installation of the MXUnit Framework. The outputdir is the location to where the test results will be saved. The         verbose attribute instructs the task to print additional information to         stdout.
If you run this, you should see the following: This is good. We have made contact with the MXUnit Ant Task. The build fails with a  java.lang.NullPointerException         because the task expects some tests to run and none were provided.

*3. Tell MXUnit Which Tests You Want to Run*
&nbsp;
Add the following to the build.xml file:

<?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<directory&nbsp;path="C:\ColdFusion8\wwwroot\mxunit\tests\framework"&nbsp;recurse="false"&nbsp;componentPath="mxunit.tests.framework"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">

  <mkdir dir="testresults" />

  <target name="main" depends="runtests" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                 outputdir="testresults"
                 verbose="true">
      <directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
  </mxunittask>
</target>
</project>

We inserted the directory element to         instruct the MXUnit Ant Task to run all the tests in the directory         specified by the path attribute. Note,         make sure your path attribute points to         the location of the /mxunit/tests/framework directory. When you run this,         the HttpAntRunner.cfc is called by the task. This runner executes the         tests using the mxunit framework and save the results as JUnitXml to the         location specified by the outputdir attribute.
When run, you should see the following:
You should now have 2 files in /mxunit/tutorial/ant/testresults/tmp/ called mxunitdirectorytestsuite_1.xml and testresults.properties.          The first one will be used by JUnit in  the next step to generate a report. The second one          can be used to summarize all the test results run, as you can have multiple directory elements in the task.
*4. Define The JUnit Report Task*
Type the following into the build.xml: [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests,junitreport"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<directory&nbsp;path="C:\ColdFusion8\wwwroot\mxunit\tests\framework"&nbsp;recurse="false"&nbsp;componentPath="mxunit.tests.framework"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# <target&nbsp;name="junitreport"&nbsp;description="Create&nbsp;a&nbsp;report&nbsp;for&nbsp;the&nbsp;rest&nbsp;result">&nbsp;&nbsp;
# &nbsp;<mkdir&nbsp;dir="junithtml"/>&nbsp;&nbsp;
# &nbsp;<junitreport&nbsp;todir="junithtml">&nbsp;&nbsp;
# &nbsp;&nbsp;<fileset&nbsp;dir="testresults">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<include&nbsp;name="*.xml"/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;</fileset>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;<report&nbsp;format="frames"&nbsp;todir="junithtml"&nbsp;styledir="../../ant/xsl"/>&nbsp;&nbsp;
# &nbsp;&nbsp;</junitreport>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# &nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">

  <mkdir dir="testresults" />

  <target name="main" depends="runtests,junitreport" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                 outputdir="testresults"
                 verbose="true">
      <directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
  </mxunittask>
</target>



<target name="junitreport" description="Create a report for the rest result">
 <mkdir dir="junithtml"/>
 <junitreport todir="junithtml">
  <fileset dir="testresults">
     <include name="*.xml"/>
   </fileset>
   <report format="frames" todir="junithtml" styledir="../../ant/xsl"/>
  </junitreport>
</target>

</project>


     We've a couple of new things here:
1. Created a new target for Ant (junitreport). This target is responsible for         generating the JUnit-style report.
2. Instructed the main target to call the runtests target first, then          the junitreport task after that.
The junitreport task is looking for the XML         files we created with the runtests task. Hence, we use the fileset element         to tell JUnit where to go to find the XML test results.
You'll also notice that we point         to the /mxunit/ant/xsl directory for the formatting information.         This is optional, and you may use any stylesheet you wish or the default         one in Ant's JUnit Report Task path.

*5. Run it ...* you should see this:
*6. View the report*

You can now browse /mxunit/tutorial/ant/junithtml/ and open index.html in your web browser. You     should see the following: An live interactive version of this report is available [here|http://mxunit.org/testresults/index.html].

You can take this process further by adding additional directory elements that      contain tests. You may also execute individual test cases using the testcase element. Details on the MXUnit Ant Task can be found [here|http://mxunit.org/doc/mxunit-ant-doc.html].]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374167</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## ? Icons
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing toolbar
## Full Screen
### Ctrl-M
### Full-Screen Plugin for full-screen on 'roids
## Detached tabs
# Keyboard shortcuts
## Find links&nbsp;in the Eclipse help under "Workbench User Guide \-\- Concepts \-\- Accessibility features in Eclipse"
## Resource finding and creation
### Ctrl-N&nbsp; (ctrl-N&nbsp;&nbsp; ctrl-N&nbsp; ctrl-N&nbsp;&nbsp;&nbsp; Get your damn hands off the mouse. File \-\- New is killing you)
### Ctrl-Shift-R&nbsp;&nbsp;&nbsp; \---&nbsp; The best damn Eclipse shortcut, period
## Editor Navigation
### Ctrl-PgUp and Ctrl-PgDown
### Ctrl-E
### Ctrl-Q
## File Navigation And Manipulation
### Ctrl-K and Ctrl-Shift-K
### Ctrl-L
### Ctrl-Shift-N (CFEclipse Only)
### text insertion shortcuts
## Showing Views
### Alt-Shift-Q, Q
### Ctrl-3
### Customize\!
## Customizing Keys
### Window \-\- preferences \-\- keys
### Ctrl-3 "keys"
### Ctrl-Shift-L, Ctrl-Shift-L (to use this, you can't be in the CFEclipse editor window... click in a view and then use this shortcut; does not work in CFBuilder)
## MouseFeed
### Pavlov + Keyboard shortcuts = MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is [http://update.mousefeed.com/])]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341448</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374166</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## ? Icons
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing toolbar
## Full Screen
## Detached tabs
# Keyboard shortcuts
## Find links&nbsp;in the Eclipse help under "Workbench User Guide \-\- Concepts \-\- Accessibility features in Eclipse"
## Resource finding and creation
### Ctrl-N&nbsp; (ctrl-N&nbsp;&nbsp; ctrl-N&nbsp; ctrl-N&nbsp;&nbsp;&nbsp; Get your damn hands off the mouse. File \-\- New is killing you)
### Ctrl-Shift-R&nbsp;&nbsp;&nbsp; \---&nbsp; The best damn Eclipse shortcut, period
## Editor Navigation
### Ctrl-PgUp and Ctrl-PgDown
### Ctrl-E
### Ctrl-Q
## File Navigation And Manipulation
### Ctrl-K and Ctrl-Shift-K
### Ctrl-L
### Ctrl-Shift-N (CFEclipse Only)
### text insertion shortcuts
## Showing Views
### Alt-Shift-Q, Q
### Ctrl-3
### Customize\!
## Customizing Keys
### Window \-\- preferences \-\- keys
### Ctrl-3 "keys"
### Ctrl-Shift-L, Ctrl-Shift-L (to use this, you can't be in the CFEclipse editor window... click in a view and then use this shortcut; does not work in CFBuilder)
## MouseFeed
### Pavlov + Keyboard shortcuts = MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is [http://update.mousefeed.com/])]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341447</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374168</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## ? Icons
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing toolbar
## Full Screen
### Ctrl-M
### Full-Screen Plugin for&nbsp;Ctrl+M on 'roids
## Detached tabs
# Keyboard shortcuts
## Find links&nbsp;in the Eclipse help under "Workbench User Guide \-\- Concepts \-\- Accessibility features in Eclipse"
## Resource finding and creation
### Ctrl-N&nbsp; (ctrl-N&nbsp;&nbsp; ctrl-N&nbsp; ctrl-N&nbsp;&nbsp;&nbsp; Get your damn hands off the mouse. File \-\- New is killing you)
### Ctrl-Shift-R&nbsp;&nbsp;&nbsp; \---&nbsp; The best damn Eclipse shortcut, period
## Editor Navigation
### Ctrl-PgUp and Ctrl-PgDown
### Ctrl-E
### Ctrl-Q
## File Navigation And Manipulation
### Ctrl-K and Ctrl-Shift-K
### Ctrl-L
### Ctrl-Shift-N (CFEclipse Only)
### text insertion shortcuts
## Showing Views
### Alt-Shift-Q, Q
### Ctrl-3
### Customize\!
## Customizing Keys
### Window \-\- preferences \-\- keys
### Ctrl-3 "keys"
### Ctrl-Shift-L, Ctrl-Shift-L (to use this, you can't be in the CFEclipse editor window... click in a view and then use this shortcut; does not work in CFBuilder)
## MouseFeed
### Pavlov + Keyboard shortcuts = MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is [http://update.mousefeed.com/])]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341449</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374171</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## ? Icons
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing toolbar
## Full Screen
### Ctrl-M
### Full-Screen Plugin (for&nbsp;Ctrl+M on 'roids)
## Detached tabs
# Keyboard shortcuts
## Find links&nbsp;in the Eclipse help under "Workbench User Guide \-\- Concepts \-\- Accessibility features in Eclipse"
## Resource finding and creation
### Ctrl-N&nbsp; (ctrl-N&nbsp;&nbsp; ctrl-N&nbsp; ctrl-N&nbsp;&nbsp;&nbsp; Get your damn hands off the mouse. File \-\- New is killing you)
### Ctrl-Shift-R&nbsp;&nbsp;&nbsp; \---&nbsp; The best damn Eclipse shortcut, period
## Editor Navigation
### Ctrl-PgUp and Ctrl-PgDown
### Ctrl-E
### Ctrl-Q
## File Navigation And Manipulation
### Ctrl-K and Ctrl-Shift-K
### Ctrl-L
### Ctrl-Shift-N (CFEclipse Only)
### text insertion shortcuts
## Showing Views
### Alt-Shift-Q, Q
### Ctrl-3
### Customize\!
## Mylyn tasks
### Ctrl-F9 to find and activate tasks
### Ctrl-Shift-F9 to deactivate the current task
## Customizing Keys
### Window \-\- preferences \-\- keys
### Ctrl-3 "keys"
### Ctrl-Shift-L, Ctrl-Shift-L (to use this, you can't be in the CFEclipse editor window... click in a view and then use this shortcut; does not work in CFBuilder)
## MouseFeed
### Pavlov + Keyboard shortcuts = MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is [http://update.mousefeed.com/])]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341452</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374170</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## ? Icons
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing toolbar
## Full Screen
### Ctrl-M
### Full-Screen Plugin (for&nbsp;Ctrl+M on 'roids)
## Detached tabs
# Keyboard shortcuts
## Find links&nbsp;in the Eclipse help under "Workbench User Guide \-\- Concepts \-\- Accessibility features in Eclipse"
## Resource finding and creation
### Ctrl-N&nbsp; (ctrl-N&nbsp;&nbsp; ctrl-N&nbsp; ctrl-N&nbsp;&nbsp;&nbsp; Get your damn hands off the mouse. File \-\- New is killing you)
### Ctrl-Shift-R&nbsp;&nbsp;&nbsp; \---&nbsp; The best damn Eclipse shortcut, period
## Editor Navigation
### Ctrl-PgUp and Ctrl-PgDown
### Ctrl-E
### Ctrl-Q
## File Navigation And Manipulation
### Ctrl-K and Ctrl-Shift-K
### Ctrl-L
### Ctrl-Shift-N (CFEclipse Only)
### text insertion shortcuts
## Showing Views
### Alt-Shift-Q, Q
### Ctrl-3
### Customize\!
## Customizing Keys
### Window \-\- preferences \-\- keys
### Ctrl-3 "keys"
### Ctrl-Shift-L, Ctrl-Shift-L (to use this, you can't be in the CFEclipse editor window... click in a view and then use this shortcut; does not work in CFBuilder)
## MouseFeed
### Pavlov + Keyboard shortcuts = MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is [http://update.mousefeed.com/])]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341451</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374173</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## ? Icons
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing the toolbar
## Full Screen
### Ctrl-M
### Full-Screen Plugin (for&nbsp;Ctrl+M on 'roids)
## Detached tabs
# Keyboard shortcuts
## Find links&nbsp;in the Eclipse help under "Workbench User Guide \-\- Concepts \-\- Accessibility features in Eclipse"
## Resource finding and creation
### Ctrl-N&nbsp; (ctrl-N&nbsp;&nbsp; ctrl-N&nbsp; ctrl-N&nbsp;&nbsp;&nbsp; Get your damn hands off the mouse. File \-\- New is killing you)
### Ctrl-Shift-R&nbsp;&nbsp;&nbsp; \---&nbsp; The best damn Eclipse shortcut, period
## Editor Navigation
### Ctrl-PgUp and Ctrl-PgDown
### Ctrl-E
### Ctrl-Q
## File Navigation And Manipulation
### Ctrl-K and Ctrl-Shift-K
### Ctrl-L
### Ctrl-Shift-N (CFEclipse Only)
### text insertion shortcuts
## Showing Views
### Alt-Shift-Q, Q
### Ctrl-3
### Customize\!
## Mylyn tasks
### Ctrl-F9 to find and activate tasks
### Ctrl-Shift-F9 to deactivate the current task
## Customizing Keys
### Window \-\- preferences \-\- keys
### Ctrl-3 "keys"
### Ctrl-Shift-L, Ctrl-Shift-L (to use this, you can't be in the CFEclipse editor window... click in a view and then use this shortcut; does not work in CFBuilder)
## MouseFeed
### Pavlov + Keyboard shortcuts = MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is [http://update.mousefeed.com/])]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341454</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374158</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## ? Icons
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing toolbar
## Full Screen
## Detached tabs
# Keyboard shortcuts
## Resource finding and creation
### Ctrl-N&nbsp; (ctrl-N&nbsp;&nbsp; ctrl-N&nbsp; ctrl-N&nbsp;&nbsp;&nbsp; Get your damn hands off the mouse. File \-\- New is killing you)
### Ctrl-Shift-R&nbsp;&nbsp;&nbsp; \---&nbsp; The best damn Eclipse shortcut, period
## Editor Navigation
## File Navigation
## Showing Views
## Customizing Keys
## MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is [http://update.mousefeed.com/])]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341439</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374160</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## ? Icons
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing toolbar
## Full Screen
## Detached tabs
# Keyboard shortcuts
## Resource finding and creation
### Ctrl-N&nbsp; (ctrl-N&nbsp;&nbsp; ctrl-N&nbsp; ctrl-N&nbsp;&nbsp;&nbsp; Get your damn hands off the mouse. File \-\- New is killing you)
### Ctrl-Shift-R&nbsp;&nbsp;&nbsp; \---&nbsp; The best damn Eclipse shortcut, period
## Editor Navigation
### Ctrl-PgUp and Ctrl-PgDown
### Ctrl-E
### Ctrl-Q
### Ctrl-L
## File Navigation
### &nbsp;
## Showing Views
## Customizing Keys
## MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is [http://update.mousefeed.com/])]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341441</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374162</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## ? Icons
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing toolbar
## Full Screen
## Detached tabs
# Keyboard shortcuts
## Resource finding and creation
### Ctrl-N&nbsp; (ctrl-N&nbsp;&nbsp; ctrl-N&nbsp; ctrl-N&nbsp;&nbsp;&nbsp; Get your damn hands off the mouse. File \-\- New is killing you)
### Ctrl-Shift-R&nbsp;&nbsp;&nbsp; \---&nbsp; The best damn Eclipse shortcut, period
## Editor Navigation
### Ctrl-PgUp and Ctrl-PgDown
### Ctrl-E
### Ctrl-Q
## File Navigation And Manipulation
### Ctrl-K and Ctrl-Shift-K
### Ctrl-L
### Ctrl-Shift-N (CFEclipse Only)
### text insertion shortcuts
## Showing Views
## Customizing Keys
## MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is [http://update.mousefeed.com/])]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341443</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374164</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## ? Icons
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing toolbar
## Full Screen
## Detached tabs
# Keyboard shortcuts
## Resource finding and creation
### Ctrl-N&nbsp; (ctrl-N&nbsp;&nbsp; ctrl-N&nbsp; ctrl-N&nbsp;&nbsp;&nbsp; Get your damn hands off the mouse. File \-\- New is killing you)
### Ctrl-Shift-R&nbsp;&nbsp;&nbsp; \---&nbsp; The best damn Eclipse shortcut, period
## Editor Navigation
### Ctrl-PgUp and Ctrl-PgDown
### Ctrl-E
### Ctrl-Q
## File Navigation And Manipulation
### Ctrl-K and Ctrl-Shift-K
### Ctrl-L
### Ctrl-Shift-N (CFEclipse Only)
### text insertion shortcuts
## Showing Views
### Alt-Shift-Q, Q
### Ctrl-3
### Customize\!
## Customizing Keys
### Window \-\- preferences \-\- keys
### Ctrl-3 "keys"
### Ctrl-Shift-L, Ctrl-Shift-L (to use this, you can't be in the CFEclipse editor window... click in a view and then use this shortcut; does not work in CFBuilder)
## MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is [http://update.mousefeed.com/])]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341445</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374152</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* http://www.meetup.com/coldfusionmeetup/calendar/13102729/

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## ? Icons
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing toolbar
## Full Screen
## Detached tabs
# Keyboard shortcuts
## Resource finding and creation
## Editor Navigation
## File Navigation
## Showing Views
## Customizing Keys
## MouseFeed

h2. Mylyn Links



h3. Official Links


[Mylyn  Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341433</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374154</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## ? Icons
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing toolbar
## Full Screen
## Detached tabs
# Keyboard shortcuts
## Resource finding and creation
## Editor Navigation
## File Navigation
## Showing Views
## Customizing Keys
## MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn  Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341435</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374156</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## ? Icons
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing toolbar
## Full Screen
## Detached tabs
# Keyboard shortcuts
## Resource finding and creation
## Editor Navigation
## File Navigation
## Showing Views
## Customizing Keys
## MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn  Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is http://update.mousefeed.com/)]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341437</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374145</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/CFU2008ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341426</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374147</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* [April 2010 -- Online ColdFusion Meetup -- Know Your Tools: Productivity Tips-n-tricks for]
* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/CFU2008ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341428</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374148</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* [April 2010 -- Online ColdFusion  Meetup -- Know your tools: Productivity Tips-n-Tricks for ColdFusion Builder / CFEclipse
]
* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/CFU2008ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341429</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374149</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* April 2010 -- Online ColdFusion&nbsp; Meetup -- Know your tools: Productivity Tips-n-Tricks for ColdFusion Builder / CFEclipse
* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/CFU2008ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341430</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374137</id>
    <property name="body"><![CDATA[* If your mocked object returns an MXUnit MightyMock object rather than what you intended, this is likely due to an incorrect parameter in the definition. 

For example, if you mock an object like this:

{code}
  
  myMock = mock("foo");
  myMock.bar("{string}").returns(true);

{code}

And it's subsequently invoked like this:


{code}
  
  some_bool = myMock.bar(2);
  assert(some_bool);

{code}

This will fail because myMock.foo(...) is expecting a string, which the integer 2 is not. What's happening is that when you call myMock.bar(2), MXUnit thinks you're defining a new mock rather than executing it.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341417</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374128</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/CFU2008
ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341401</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374126</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/DDT218_Automating%20the%20build-deploy%20process%20with%20ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341399</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374133</id>
    <property name="body"><![CDATA[In general the steps will follow this simple pattern:
# Create the mock
# Define behavior
# Inject the mock into the component under test
# Run the component under test
# Optionally verify how the mock was called

{pagetree:root=How to use it}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341412</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374131</id>
    <property name="body"><![CDATA[In general the steps will follow this simple pattern:
# Create the mock
# Define behavior
# Inject the mock into the component under test
# Run the component under test
# Optionally verify how the mock was called]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341410</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374130</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links
* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://code.google.com/p/mxunit/issues/list]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher
* Adam	Haskell
* Mike	Henke
* Randy	Merril
* Mike	Rankin
* Bill	Shelton
* Bob	Silverberg
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-row}
{table}
{column}

{column:width=3%}

{column}


{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}

{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341407</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374111</id>
    <property name="body"><![CDATA[h2. *MXUnit TestResult output formats*

MXUnit provides a high level of flexibility by providing    test results in various output formats. Some of these are   preformatted, such as HTML, and others are _raw_ to   allow developers to generate customizable output formats.

The available TestResult output formats are:
# HTML Format
# ExtJs Format
# XML Format
# JUnit Report XML
# ColdFusion Query Format
# ColdFusion Array format
We will use the MXUnit example found in  the installation package mxunit/samples/MyTestSuite.cfm as the   base TestResults.    You may want to refer to your local TestResult API for details; e.g., [http://localhost:8500/mxunit/doc/api/]

The syntax for generating the various types of output is:

{code}<cfset output = results.getResultsOutput( ['html', 'extjs', 'xml', 'junitxml', 'query', 'array'] ) />
<cfoutput>#output#<cfoutput>
{code}
Note: Since the above query and array types are complex data structures, you will get an error by trying to print those directly, as illustrated above. You most likely be computing other outputs if you use those types.

Following are simple examples of how to handle the various output types.

Note that in order to toggle between HTML and ExtJs format, pass in a URL.output=\['html'\|'extjs'\] to your TestSuite

*1. HTML Format*

The HTML output is basic preformatted HTML:

{code}<cfoutput>#results.getResultsOutput( 'html' )#<cfoutput>

{code}

!outputs-1.png!



*2. ExtJs Format*

ExtJs is a rich user interface set of APIs written in JavaScript.

{code}<cfoutput>#results.getResultsOutput( 'extjs' )#<cfoutput>

{code}

!outputs-2.png!


*3. XML Format*

This is basic raw XML format that can be transformed into custom HTML output.


{code}<cfoutput>#results.getResultsOutput( 'xml' )#<cfoutput>

{code}

!outputs-3.png!


*4. JUnit Report XML*


This is an XML format that is used by [Ant's JunitReport Task|http://ant.apache.org/manual/OptionalTasks/junitreport.html]. Also see the MXUnit Ant Task for usage information.

{code}<cfoutput>#results.getResultsOutput( 'junitxml' )#<cfoutput>

{code}

!outputs-4.png!


*5. ColdFusion Query Format*

Returns a CF Query object that you can loop over as if it were a database query.

{code} <cfset q = results.getResultsOutput( 'query' ) />
 <cfoutput query="q">
   #q.component#, #q.testStatus# ...
 </cfoutput>

{code}

The available columns names: COMPONENT, CONTENT, DATETIME, DEBUG, ERROR, NUMBER, TESTNAME, TESTSTATUS, TIME, TRACE.
Summary data members ( q = results.getResultsOutput('query') ) :
q.testRuns = How many tests were run,
q.failures = How many tests fail,
q.errors = How many errors occurred,
q.successes = How many successes occurred,
q.totalExecutionTime = How long it took, in milliseconds, to run all the tests

{code}<cfdump var="#results.getResultsOutput( 'query' )#" />
{code}


!outputs-5.png!



*6. ColdFusion Array Format*

This is how internal test results are stored within the TestResult component.
To access specific members, you can execute the following:

{code} <cfset a = results.getResultsOutput( 'array' ) />
 <cfoutput>
   #a[1]["component"]#, #a[1]["testStatus"]# ...
 </cfoutput>

{code}
{code}<cfdump var="#results.getResultsOutput( 'array' )#" />

{code}

!outputs-6.png!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341396</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374228</id>
    <property name="body"><![CDATA[{rss:url=http://blog.mxunit.org/feeds/posts/default?alt=rss|showTitlesOnly=true}
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341527</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374223</id>
    <property name="body"><![CDATA[Often, your build.xml file will use the default HttpAntRunner.cfc inside of the mxunit package:
{code:title=Common use of MXUnit ANT Task|controls=true} <mxunittask server="${server.name}" port="${server.port}"
                   defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
                   verbose="true"
                   haltonfailure="true"
                   haltonerror="true">

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="${component.path}\mxunit\tests\framework"
                     packageName="mxunit.tests.framework"
                     componentPath="mxunit.tests.framework"
                     recurse="false"
                    />

</mxunittask>
{code}

However, it's possible that your tests need to be run under the context of your application. This is certainly true if you're using CF's built-in ORM functionality. It's also true if your tests or the code under test access application-scoped variables. Finally, this is probably true if you're testing controllers in a framework such as ColdBox.

Fortunately, you can solve this in two simple steps:
# Create a custom HttpAntRunner.cfc and put it in your application. Perhaps it's at c:/apps/MyBadassApp/tests/HttpAntRunner.cfc
# In your ANT file, point your mxunit defaultRunner to this new CFC
{code:title=Your custom HttpAntRunner.cfc|controls=true|linenumbers=true}<cfcomponent extends="mxunit.runner.HttpAntRunner"></cfcomponent>{code}
then:
{code:title=ANT task points to the location of your new runner} <mxunittask server="${server.name}" port="${server.port}"
                   defaultrunner="/MyBadassApp/tests/HttpAntRunner.cfc"
                   verbose="true"
                   haltonfailure="true"
                   haltonerror="true">

....

</mxunittask>{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341521</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374234</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:
<script type="text/javascript" src="http://www.assoc-amazon.com/s/link-enhancer?tag=mx06-20&o=1">
</script>
<noscript>
    <img src="http://www.assoc-amazon.com/s/noscript?tag=mx06-20" alt="" />
</noscript>


]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341533</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374235</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:
    <img src="http://www.assoc-amazon.com/s/noscript?tag=mx06-20" alt="" />


]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341534</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374236</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:
!http://www.assoc-amazon.com/s/noscript?tag=mx06-20!


]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341535</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374232</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

<iframe src="http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341531</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374211</id>
    <property name="body"
      ><![CDATA[You're absolutely correct. The markup was malformed. Thanks. As for the component names, we're mocking a MyComponent which MyOtherComponent depends upon. It might make sense to edit this page with more meaningful names as well as provide  a detailed explanation of object collaboration, too.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5341505</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374210</id>
    <property name="body"><![CDATA[Suppose you have a component you want to test and that component calls a method on another component which returns a number needed by the 1{^}st^ component:

{color:#800000}<cfcomponent{color}{color:#800000}hint={color}{color:#0000ff}"Example Component To Mock"{color}{color:#800000}output={color}{color:#0000ff}"false"{color}{color:#800000}>{color}
{color:#800000}&nbsp;&nbsp; &nbsp;{color}{color:#800000}<cffunction{color}{color:#800000}name={color}{color:#0000ff}"myMethod"{color}{color:#800000}>{color}
{color:#800000}&nbsp;&nbsp; &nbsp;{color}{color:#800000}<cfargument{color}{color:#800000}name={color}{color:#0000ff}"foo"{color}{color:#800000}/>{color}
{color:#800000}&nbsp;&nbsp; &nbsp;{color}{color:#800000}<cfset{color}myData = myOtherComponent.doSomething({color:#0000ff}'foo'{color}){color:#800000}/>{color}

 {color:#800000}_&nbsp;&nbsp; &nbsp;_{color}{color:#999999}_<\!--\- Do something with myData \--->_{color}{color:#800000}&nbsp;&nbsp; &nbsp;{color}{color:#800000}<cfreturn{color}{color:#0000ff}true{color}{color:#800000}/>{color}

{color:#800000}</cffunction>{color}
{color:#800000}</cfcomponent>{color}

You can mock MyOtherComponentlike this:

{color:#800000}<cfcomponent{color}{color:#800000}extends={color}{color:#0000ff}"mxunit.framework.TestCase"{color}{color:#800000}output={color}{color:#0000ff}"false"{color}{color:#800000}>{color}

 {color:#800000}&nbsp;&nbsp; &nbsp;{color}{color:#800000}<cffunction{color}{color:#800000}name={color}{color:#0000ff}"testMyComponentInteractions"{color}{color:#800000}>{color}

 {color:#808080}_&nbsp;&nbsp; &nbsp;_{color}{color:#808080}_<\!--\- Create the mock \--->_{color}

 {color:#800000}&nbsp;&nbsp; &nbsp;{color}{color:#800000}<cfset{color} myMock = mock({color:#0000ff}'MyOtherComponent'{color}) />

 {color:#800000}_&nbsp;&nbsp; &nbsp;_{color}{color:#666666}_<\!--\- Define Behavior \--->_{color}{color:#800000}&nbsp;&nbsp; &nbsp;{color}{color:#800000}<cfset{color} myMock.doSomething({color:#0000ff}'foo'{color}).returns({color:#ff0a0a}123456{color}) {color:#808080}/>{color}

{color:#800000}_&nbsp;&nbsp; &nbsp;_{color}{color:#999999}_<\!--\- Inject into component \--->_{color}{color:#800000}&nbsp;&nbsp; &nbsp;{color}{color:#800000}<cfset{color}myComponent.setMyOtherComponent(mock) {color:#800000}/>{color}

 {color:#800000}_&nbsp;&nbsp; &nbsp;_{color}{color:#666666}_<\!--\- Exercise MyComponent \--->_{color}{color:#800000}&nbsp;&nbsp; &nbsp;{color}{color:#800000}<cfset{color}myComponent.myMethod({color:#0000ff}'foo'{color}){color:#800000}/>{color}

&nbsp;&nbsp; {color:#800000}</cffunction>{color}
{color:#800000}</cfcomponent>{color}

*Side Bar* The init('component.name')statement above is optional. It's only required if your component under test requires an exact type; e.g.,

 {color:#800000}<cffunction{color}{color:#800000}name={color}{color:#0000ff}"setMyOtherComponent"{color}{color:#800000}>{color}
{color:#800000}&nbsp; <cfargument name={color}{color:#0000ff}'aCollaborator'{color}{color:#800000}type={color}{color:#0000ff}'MyOtherComponent'{color}{color:#800000}/>{color}

 {color:#808080}_..._{color}

{color:#800000}</cffunction>{color}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341504</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374213</id>
    <property name="body"><![CDATA[Suppose you have a component you want to test (_MyComponent_) and that component calls a method on another component (_MyOtherComponent_) which returns a number needed by the 1st component:

{code:title=MyComponent (The component under test) }
<cfcomponent hint="Example Component To Mock" output="false">
    
   <cffunction name="myMethod">
    	<cfargument name="foo" />
    	<cfset myData = myOtherComponent.doSomething('foo') />
    	<!--- Do something with myData --->
    	<cfreturn true />
			</cffunction>

</cfcomponent>
{code}

Using MightyMock, you can mock MyOtherComponent like this:

{code:title=Sample MXUnit Test Case}
<cfcomponent extends="mxunit.framework.TestCase" output="false">
    
    <cffunction name="testMyComponentInteractions">
    
    	<!--- Our component under test (CUT) --->
    	<cfset myComponent = createObject('component','MyComponent') />
    
    	<!--- Create the mock --->
    	<cfset mock = createObject('component','MightyMock').init('MyOtherComponent') />
    
    	<!--- Define the behavior for our mock, including expected parameters --->
    	<cfset mock.doSomething('foo').returns( 123456 ) />
    
    	<!--- Inject the mock into CUT --->
    	<cfset myComponent.setMyOtherComponent(mock) />
    
    	<!--- Exercise MyComponent --->
    	<cfset actual = myComponent.myMethod('foo') />
   
   		<!--- Perform some test --->  
     <cfset assert( actual eq 'cool and bad-ass')  /> 
   </cffunction>
   
</cfcomponent>
{code}

What's important to consider here is the difference between mocking and stubbing. Here we are testing some data returned by our component under test. We're using
the internal MXUnit mocking facilities to stub out the data returned by _MyOtherComponent_. *If* the CUT returned void, it makes it more difficult to test. In cases like that, we would use verification rather than testing the data (or state) returned by the CUT.

_Side Bar_: The init('component.name') statement above is optional. It's only required if your component under test requires an exact type; e.g.,

{code}



<cffunction name="setMyOtherComponent">
  <cfargument name='aCollaborator' type='MyOtherComponent' />
...
</cffunction>

{code}
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341507</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374212</id>
    <property name="body"><![CDATA[Suppose you have a component you want to test and that component calls a method on another component which returns a number needed by the 1st component:

{code}
<cfcomponent hint="Example Component To Mock" output="false">
    <cffunction name="myMethod">
    <cfargument name="foo" />
    <cfset myData = myOtherComponent.doSomething('foo') />
    <!--- Do something with myData --->
    <cfreturn true />
</cffunction>
</cfcomponent>
{code}

Using MightyMock, you can mock MyOtherComponent like this:

{code}
<cfcomponent extends="mxunit.framework.TestCase" output="false">
    <cffunction name="testMyComponentInteractions">
    <!--- Create the mock --->
    <cfset mock = createObject('component','MightyMock').init('MyOtherComponent') />
    <!--- Define Behavior --->
    <cfset mock.doSomething('foo').returns( 123456 ) />
    <!--- Inject into component --->
    <cfset myComponent.setMyOtherComponent(mock) />
    <!--- Exercise MyComponent --->
    <cfset myComponent.myMethod('foo') />
   </cffunction>
</cfcomponent>
{code}

Side Bar The init('component.name') statement above is optional. It's only required if your component under test requires an exact type; e.g.,

{code}



<cffunction name="setMyOtherComponent">
  <cfargument name='aCollaborator' type='MyOtherComponent' />
...
</cffunction>

{code}
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341506</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374208</id>
    <property name="body"
      ><![CDATA[This is hard to follow, if for no other reason than the markup is all mixed up.&nbsp; Mostly all the methods/variables are very similarly named but I don't see which are supposed to represent what.&nbsp; Where does _myComponent_ come from?  What is _myOtherComponent_?  Can you please elaborate?]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5341502</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374214</id>
    <property name="body"><![CDATA[Suppose you have a component you want to test (_MyComponent_) and that component calls a method on another component (_MyOtherComponent_) which returns a number needed by the 1st component:

{code:title=MyComponent (The component under test) }
<cfcomponent hint="Example Component To Mock" output="false">
    
   <cffunction name="myMethod">
    	<cfargument name="foo" />
    	<cfset myData = myOtherComponent.doSomething('foo') />
    	<!--- Do something with myData --->
    	<cfreturn true />
   </cffunction>

</cfcomponent>
{code}

Using MightyMock, you can mock MyOtherComponent like this:

{code:title=Sample MXUnit Test Case}
<cfcomponent extends="mxunit.framework.TestCase" output="false">
    
    <cffunction name="testMyComponentInteractions">
    
    	<!--- Our component under test (CUT) --->
    	<cfset myComponent = createObject('component','MyComponent') />
    
    	<!--- Create the mock --->
    	<cfset mock = createObject('component','MightyMock').init('MyOtherComponent') />
    
    	<!--- Define the behavior for our mock, including expected parameters --->
    	<cfset mock.doSomething('foo').returns( 123456 ) />
    
    	<!--- Inject the mock into CUT --->
    	<cfset myComponent.setMyOtherComponent(mock) />
    
    	<!--- Exercise MyComponent --->
    	<cfset actual = myComponent.myMethod('foo') />
   
   		<!--- Perform some test --->  
     <cfset assert( actual eq 'cool and bad-ass')  /> 
   </cffunction>
   
</cfcomponent>
{code}

What's important to consider here is the difference between mocking and stubbing. Here we are testing some data returned by our component under test. We're using
the internal MXUnit mocking facilities to stub out the data returned by _MyOtherComponent_. *If* the CUT returned void, it makes it more difficult to test. In cases like that, we would use verification rather than testing the data (or state) returned by the CUT.

_Side Bar_: The init('component.name') statement above is optional. It's only required if your component under test requires an exact type; e.g.,

{code}



<cffunction name="setMyOtherComponent">
  <cfargument name='aCollaborator' type='MyOtherComponent' />
...
</cffunction>

{code}
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341508</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374216</id>
    <property name="body"><![CDATA[Suppose you have a component you want to test (_MyComponent_) and that component calls a method on another component (_MyOtherComponent_) which returns a number needed by the 1st component:

{code:title=MyComponent (The component under test) }
<cfcomponent hint="Example Component To Mock" output="false">
    
   <cffunction name="myMethod">
    	<cfargument name="foo" />
    	<cfset myData = myOtherComponent.doSomething('foo') />
    	<!--- Do something with myData --->
    	<cfreturn true />
   </cffunction>

</cfcomponent>
{code}

Using the MXUnit mocking facility, you can mock MyOtherComponent like this:

{code:title=Sample MXUnit Test Case}
<cfcomponent extends="mxunit.framework.TestCase" output="false">
    
    <cffunction name="testMyComponentInteractions">
    
    	<!--- Our component under test (CUT) --->
    	<cfset myComponent = createObject('component','MyComponent') />
    
    	<!--- Create the mock --->
    	<cfset mock = createObject('component','MightyMock').init('MyOtherComponent') />
    
    	<!--- Define the behavior for our mock, including expected parameters --->
    	<cfset mock.doSomething('foo').returns( 123456 ) />
    
    	<!--- Inject the mock into CUT --->
    	<cfset myComponent.setMyOtherComponent(mock) />
    
    	<!--- Exercise MyComponent --->
    	<cfset actual = myComponent.myMethod('foo') />
   
   		<!--- Perform some test --->  
     <cfset assert( actual eq 'cool and bad-ass')  /> 
   </cffunction>
   
</cfcomponent>
{code}

What's important to consider here is the difference between mocking and stubbing. Here we are testing some data returned by our component under test. We're using
the internal MXUnit mocking facilities to stub out the data returned by _MyOtherComponent_. *If* the CUT returned void, it makes it more difficult to test. In cases like that, we would use verification rather than testing the data (or state) returned by the CUT.

_Side Bar_: The init('component.name') statement above is optional. It's only required if your component under test requires an exact type; e.g.,

{code}



<cffunction name="setMyOtherComponent">
  <cfargument name='aCollaborator' type='MyOtherComponent' />
...
</cffunction>

{code}
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341510</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374197</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* [CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit|CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit] \-\- April 22, 2010 \-\- An ungentle introduction to Continuous Integration for CFMLers
* [April 2010 -- Online ColdFusion  Meetup -- Know your tools: Productivity Tips-n-Tricks for ColdFusion Builder / CFEclipse|CFMeetupEclipseProductivity|Master your tool]
* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14, 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14, 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16, 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/CFU2008ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.

{tip}Just getting started with unit testing? John C Bland II gave a fantastic overview... [watch it here|http://experts.na3.acrobat.com/p76614762/] .{tip}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341484</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374194</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* [CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit|CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit] \-\- April 22 2010 \-\- An ungentle introduction to Continuous Integration for CFMLers
* [April 2010 -- Online ColdFusion  Meetup -- Know your tools: Productivity Tips-n-Tricks for ColdFusion Builder / CFEclipse|CFMeetupEclipseProductivity|Master your tool]
* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/CFU2008ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341481</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374195</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* [CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit|CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit] \-\- April 22 2010 \-\- An ungentle introduction to Continuous Integration for CFMLers
* [April 2010 -- Online ColdFusion  Meetup -- Know your tools: Productivity Tips-n-Tricks for ColdFusion Builder / CFEclipse|CFMeetupEclipseProductivity|Master your tool]
* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/CFU2008ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.

{tip}Just getting started with unit testing? John C Bland II gave a fantastic overview... [watch it here|http://experts.na3.acrobat.com/p76614762/] .{tip}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341482</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374192</id>
    <property name="body"><![CDATA[{pagetree:root=Automation}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341479</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374200</id>
    <property name="body"><![CDATA[So you've downloaded mxunit. Now What? How do you set up your own project? Where do you put your tests?

Everyone hates to hear this, but there's no one right answer. However, we're not gonna leave you hangin' with that lame answer. Here's what we've done (and still do):

# put your tests in a directory named "tests" parallel to your components
** *pros:*
*** in the same place so they're easy to find
*** separated so you have no danger of accidentally running a "real" component as a test case 
** *cons:*
*** if it matters to you, you probably don't want to deploy your tests to prod, so you'd need to filter them out somehow (ANT!)
*** put your tests in a directory named "tests" underneath your components directory
** *pros*
*** in the same place so they're easy to find
*** separated so you have no danger of accidentally running a "real" component as a test case 
** *cons*
*** if it matters to you, you probably don't want to deploy your tests to prod, so you'd need to filter them out somehow (ANT!)
*** put your tests in a directory named "tests" underneath your components directory
# put your tests in a directory named "tests" outside your project
** *pros*
*** centralize all your tests in one place
*** forces you to find problems where your tests rely on data they shouldn't be able to see (session info, etc)
** *cons*
*** potentially not as intuitive to find tests for a project when getting started initially
*** makes it harder to access application-specific data (that might be a good thing though)
# put your tests in the same directory as your components
** *pros*
*** extremely easy to see your tests and components together
** *cons*
*** you probably don't want to deploy tests to production so you'd need to use ANT or some other tool to pull those files out during deployments
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341489</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374181</id>
    <property name="body"><![CDATA[{toc:minLevel=4}
I have tried to anticipate the most common problems and address them in the Help that comes with the MXUnit Eclipse plugin. You should always consult the Help first\!

h4. Q: What version of Eclipse will the plugin work in?

A: As of right now, Eclipse 3.4 and later. If you need a version that works on Eclipse 3.3, use [http://mxunit.org/update33] as the update site


h4. Q: Why won't the plugin see "MyFile.cfc" as a test?

A: Because the file doesn't start or end with the word "Test".

h4. Q: The plugin seems to be ignoring my custom RemoteFacade.cfc URL

A: Try restarting Eclipse. Also, it only honors that URL when it's set at the project level, not in a subdirectory of a project

h4. Q: The plugin can't figure out my "cfc path" (dot notation)

A: Read the plugin help. If you still can't figure it out from reading the help, please email the [Google Group|http://groups.google.com/group/mxunit]

h4. Q: The plugin won't do anything with a TestSuite I created

A: The plugin doesn't do test suites. Read the Help for an explanation

h4. Q: Why doesn't the plugin support NTLMv2?

A: Because neither Apache Axis nor commons HTTPClient doesn't support it. There does not, as of this writing, appear to be a free java client for NTLMv2

h4. Q: When I run the tests in the plugin, my Application scope variables aren't present

A: You'll need a custom RemoteFacade.cfc (very easy\!). See the Plugin Help.

h4. Q: When I run the tests in the plugin, I get "Variable FORM is undefined". Why?


A: The plugin runs the tests via SOAP. The form scope is not available to ColdFusion components during webservice calls. My advice: Don't use the form scope in your CFCs

h4. Q: When I add certain variables to a "debug()" call, the plugin hangs. Why?

A: debug() duplicates and then cfdumps whatever variables are passed into it. Depending on the content of the variable you're trying to debug, this could kill ColdFusion.



h4. Q: What are the differences between how the plugin runs tests and how the tests run when I run them in the browser?

A: The plugin runs test test one test at a time, one request at a time. This means there is zero chance for "bleed" from one test method run to another. When you run them in the browser, they're run as a single request.

In addition, since the plugin runs the tests via SOAP, the FORM scope is not available.

h4. Q: What do you call a snail in a ship?

A: A Snailor\!

h4. Q: Does the Plugin work in ColdFusion Builder?

A: Of course]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341465</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374176</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing the toolbar
## Full Screen
### Ctrl-M
### Full-Screen Plugin (for&nbsp;Ctrl+M on 'roids \--\- gives you mega full screen with Ctrl-Alt-Z)
## Detached tabs
# Keyboard shortcuts
## Find links&nbsp;in the Eclipse help under "Workbench User Guide \-\- Concepts \-\- Accessibility features in Eclipse"
## Resource finding and creation
### Ctrl-N&nbsp; (ctrl-N&nbsp;&nbsp; ctrl-N&nbsp; ctrl-N&nbsp;&nbsp;&nbsp; Get your damn hands off the mouse. File \-\- New is killing you)
### Ctrl-Shift-R&nbsp;&nbsp;&nbsp; \---&nbsp; The best damn Eclipse shortcut, period
## Editor Navigation
### Ctrl-PgUp and Ctrl-PgDown
### Ctrl-E
### Ctrl-Q
## File Navigation And Manipulation
### Ctrl-K and Ctrl-Shift-K
### Ctrl-L
### Ctrl-Shift-N (CFEclipse Only)
### text insertion shortcuts
## Showing Views
### Alt-Shift-Q, Q
### Ctrl-3
### Customize\!
## Mylyn tasks
### Ctrl-F9 to find and activate tasks
### Ctrl-Shift-F9 to deactivate the current task
## Customizing Keys
### Window \-\- preferences \-\- keys
### Ctrl-3 "keys"
### Ctrl-Shift-L, Ctrl-Shift-L (to use this, you can't be in the CFEclipse editor window... click in a view and then use this shortcut; does not work in CFBuilder)
## MouseFeed
### Pavlov + Keyboard shortcuts = MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is [http://update.mousefeed.com/])]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341457</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374175</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing the toolbar
## Full Screen
### Ctrl-M
### Full-Screen Plugin (for&nbsp;Ctrl+M on 'roids)&nbsp; (gives you mega full screen with Ctrl-Alt-Z
## Detached tabs
# Keyboard shortcuts
## Find links&nbsp;in the Eclipse help under "Workbench User Guide \-\- Concepts \-\- Accessibility features in Eclipse"
## Resource finding and creation
### Ctrl-N&nbsp; (ctrl-N&nbsp;&nbsp; ctrl-N&nbsp; ctrl-N&nbsp;&nbsp;&nbsp; Get your damn hands off the mouse. File \-\- New is killing you)
### Ctrl-Shift-R&nbsp;&nbsp;&nbsp; \---&nbsp; The best damn Eclipse shortcut, period
## Editor Navigation
### Ctrl-PgUp and Ctrl-PgDown
### Ctrl-E
### Ctrl-Q
## File Navigation And Manipulation
### Ctrl-K and Ctrl-Shift-K
### Ctrl-L
### Ctrl-Shift-N (CFEclipse Only)
### text insertion shortcuts
## Showing Views
### Alt-Shift-Q, Q
### Ctrl-3
### Customize\!
## Mylyn tasks
### Ctrl-F9 to find and activate tasks
### Ctrl-Shift-F9 to deactivate the current task
## Customizing Keys
### Window \-\- preferences \-\- keys
### Ctrl-3 "keys"
### Ctrl-Shift-L, Ctrl-Shift-L (to use this, you can't be in the CFEclipse editor window... click in a view and then use this shortcut; does not work in CFBuilder)
## MouseFeed
### Pavlov + Keyboard shortcuts = MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is [http://update.mousefeed.com/])]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341456</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374174</id>
    <property name="body"><![CDATA[h1. Know your Tools: Being More Productive in ColdFusion Builder / CFEclipse

*CFMeetup Link (with recording URL):* [http://www.meetup.com/coldfusionmeetup/calendar/13102729/]

h2. Topics Covered

# Teach a man to fish: How to use Eclipse Help
## The Welcome Screen: a few things actually work (and are useful)
## Help contents \-\- familiarity with structure
## F1
# Mylyn
## Tasks
## Noise Reduction
## Context Switching
## Context Sharing (if time permits)
# Workbench Navigation
## Editor fun (especially useful for developing with more than 1 monitor)
## Customizing the toolbar
## Full Screen
### Ctrl-M
### Full-Screen Plugin (for&nbsp;Ctrl+M on 'roids)
## Detached tabs
# Keyboard shortcuts
## Find links&nbsp;in the Eclipse help under "Workbench User Guide \-\- Concepts \-\- Accessibility features in Eclipse"
## Resource finding and creation
### Ctrl-N&nbsp; (ctrl-N&nbsp;&nbsp; ctrl-N&nbsp; ctrl-N&nbsp;&nbsp;&nbsp; Get your damn hands off the mouse. File \-\- New is killing you)
### Ctrl-Shift-R&nbsp;&nbsp;&nbsp; \---&nbsp; The best damn Eclipse shortcut, period
## Editor Navigation
### Ctrl-PgUp and Ctrl-PgDown
### Ctrl-E
### Ctrl-Q
## File Navigation And Manipulation
### Ctrl-K and Ctrl-Shift-K
### Ctrl-L
### Ctrl-Shift-N (CFEclipse Only)
### text insertion shortcuts
## Showing Views
### Alt-Shift-Q, Q
### Ctrl-3
### Customize\!
## Mylyn tasks
### Ctrl-F9 to find and activate tasks
### Ctrl-Shift-F9 to deactivate the current task
## Customizing Keys
### Window \-\- preferences \-\- keys
### Ctrl-3 "keys"
### Ctrl-Shift-L, Ctrl-Shift-L (to use this, you can't be in the CFEclipse editor window... click in a view and then use this shortcut; does not work in CFBuilder)
## MouseFeed
### Pavlov + Keyboard shortcuts = MouseFeed

h2. Mylyn Links



h4. Official Links


[Mylyn Home Page|http://www.eclipse.org/mylyn/]

[Mylyn 3.0 Video|http://live.eclipse.org/node/573] (older but excellent)

[April 14, 2010 Mylyn Webinar|http://www.zend.com/en/company/news/event/webinar-code-at-the-speed-of-thought-with-task-focused-programming]


[TaskTop Home Page|http://tasktop.com/] (TaskTop is mylyn's big brother. Reasonably priced, too)

[TaskTop Videos|http://tasktop.com/resources/videos/]

h4. MXUnit Blog Posts


[Why I love Mylyn|http://blog.mxunit.org/2010/02/why-mylyn-is-indispensible.html]


[My Favorite Mylyn Menu|http://blog.mxunit.org/2010/02/best-eclipse-menu-youve-never-heard-of.html]

[Linking Mylyn up to Jira|http://blog.mxunit.org/2010/03/mylyn-and-jira-short-tutorial.html] (short screencast)

[Sharing context with another developer|http://blog.mxunit.org/2010/03/mylyn-and-jira-sharing-context-with.html] (short screencast)

[Creating new Issues from TODO comments|http://blog.mxunit.org/2010/03/mylyn-creating-new-issues-from-todo.html] (short screencast)


h2. Shortcut Links


[Common Eclipse Shortcuts|http://blog.mxunit.org/2009/04/timesavers-common-eclipse-shortcuts.html]

[Ctrl-Shift-R|http://blog.mxunit.org/2009/04/timesavers-ctrl-shift-r.html]

[Resource Navigation|http://blog.mxunit.org/2009/04/timesavers-tabaholic.html]

[Full Screen and Maximizing screen real estate|http://blog.mxunit.org/2009/07/coldfusion-builder-maximizing-screen.html]

[MouseFeed Home Page|http://www.mousefeed.com/] (Eclipse update site is [http://update.mousefeed.com/])]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341455</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374189</id>
    <property name="body"
      ><![CDATA[Download Presentation Materials. These include pretty and print-friendly pdfs of the slides as well as all the code]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341474</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374186</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* [April 2010 -- Online ColdFusion  Meetup -- Know your tools: Productivity Tips-n-Tricks for ColdFusion Builder / CFEclipse|CFMeetupEclipseProductivity|Master your tool]
* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/CFU2008ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341471</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374287</id>
    <property name="body"><![CDATA[Suppose you have a component you want to test (_MyComponent_) and that component calls a method on another component (_MyOtherComponent_) which returns a number needed by the 1st component:

{code:title=MyComponent (The component under test) }
<cfcomponent hint="Example Component To Mock" output="false">
    
   <cffunction name="myMethod">
    	<cfargument name="foo" />
    	<cfset myData = myOtherComponent.doSomething('foo') />
    	<!--- Do something with myData --->
    	<cfreturn true />
   </cffunction>

   <cffunction name="setMyOtherComponent">
     <cfargument name='aCollaborator' type='MyOtherComponent' />
      ...
   </cffunction>

</cfcomponent>
{code}

Using the MXUnit mocking facility, you can mock MyOtherComponent like this:

{code:title=Sample MXUnit Test Case}
<cfcomponent extends="mxunit.framework.TestCase" output="false">
    
    <cffunction name="testMyComponentInteractions">
    
    	<!--- Our component under test (CUT) --->
    	<cfset myComponent = createObject('component','MyComponent') />
    
    	<!--- Create the mock --->
    	<cfset mock = createObject('component','MightyMock').init('MyOtherComponent') />
    
    	<!--- Define the behavior for our mock, including expected parameters --->
    	<cfset mock.doSomething('foo').returns( 123456 ) />
    
    	<!--- Inject the mock into CUT --->
    	<cfset myComponent.setMyOtherComponent(mock) />
    
    	<!--- Exercise MyComponent --->
    	<cfset actual = myComponent.myMethod('foo') />
   
   		<!--- Perform some test --->  
     <cfset assert( actual eq 'cool and bad-ass')  /> 
   </cffunction>
   
</cfcomponent>
{code}

What's important to consider here is the difference between mocking and stubbing. Here we are testing some data returned by our component under test. We're using
the internal MXUnit mocking facilities to stub out the data returned by _MyOtherComponent_. *If* the CUT returned void, it makes it more difficult to test. In cases like that, we would use verification rather than testing the data (or state) returned by the CUT.

_Side Bar_: The init('component.name') statement above is optional. It's only required if your component under test requires an exact type; e.g.,






]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341586</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374291</id>
    <property name="body"><![CDATA[h3. Mocking

If your dependency does not return any data, but rather _does{_}something (returns void), you will want to verify that it was called, but maybe you don't want to incur side-effects, such as emails or logging:

{code:title=MyComponentTest.cfc}
<cffunction name="myMethod">
    <cfargument name="foo" />

    <cfset myOtherComponent.writeToLog('Hello.') />

    <!--- do a bunch of other stuff ... --->
    <cfset myOtherComponent.writeToLog('Good bye.') />

</cffunction>
{code}


A mock for this would like something like :


{code:title=MyMockTest.cfc}
<cffunction name="testMyComponent">

<!--- Create the mock --->
<cfset myMock=mock('MyOtherComponent') />

<!--- Define Behavior --->

<cfset myMock.writeToLog ('Hello.') />

<cfset myMock.writeToLog ('Good Bye.') />

<cfset myComponent.setMyOtherComponent(mock) />

<!--- Exercise MyComponent --->

<cfset myComponent.myMethod('foo') />

<!--- Verify --->

<cfset myMock.verify().writeToLog ('Hello.') />

<cfset myMock.verify().writeToLog ('Good Bye.') />

</cffunction>
{code}
*Note{*}that there is no returns()method chained to the end of of the writeToLog()behavior definition. This is a shortcut and is the same as myMock.writeToLog ({color:#0000ff}...{color}).returns().It saves you 9 or so keystrokes. The reason being is that true "mocks" typically do not return data.

If you are not overly concerned with the literal details of the method calls, you could simplify this with{_}argument patterns_:

{code: title=MyMockTest.cfc}
<cffunction name="testMyComponent">

<!--- Create the mock --->

<cfset myMock=mock('MyOtherComponent') />

<!--- Define Behavior --->

<cfset myMock.writeToLog('{string}').returns() />

<cfset myComponent.setMyOtherComponent(mock) />

<!--- Exercise MyComponent --->

<cfset myComponent.myMethod('foo') />

<!--- Verify --->

<cfset myMock.verifyTimes(2).writeToLog('{string}') />


</cffunction>

{code}

In the above example, we use the keyword, \{string\}, instead of literal arguments.

What happens under the hood is that when the method is called by the component that is passing in any _single string argument_ as a parameter, the defined mock behavior is invoked.

Argument patterns support all common CFML data types. The intent is that it's identical to the typeattribute of CFARGUMENT : \{numeric\} , \{any\} , \{query\} , \{struct\} , \{array\} , etc.  See Argument Matching in the next section for more detail.

The above examples create _Fast Mocks_, that is mocks that can be created quickly but may not have the desired _type{_}you need; that is, what's specified in the first parameter. To create a _Type Safe_ mock, simply tell MightyMock that's what you want:

{code}
<cfset myMock=mock('MyOtherComponent',true) />
{code}

The second parameter  in the constructor tells MXUnit to return an object of the same type specified in the first parameter. If an object of that type cannot be found, and instantiation exception will be thrown.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341590</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374293</id>
    <property name="body"><![CDATA[h3. Mocking

If your dependency does not return any data, but rather _does_ something (returns void), you will want to verify that it was called, but maybe you don't want to incur side-effects, such as emails or logging:

{code:title=MyComponent (The component under test) }
<cfcomponent hint="Example Component To Mock" output="false">
    
    <cffunction name="myMethod">
        <cfargument name="foo" />
        <cfset myOtherComponent.writeToLog('Hello.') />
        <!--- do a bunch of other stuff ... --->
        <cfset myOtherComponent.writeToLog('Good bye.') />
   </cffunction>

   <cffunction name="setMyOtherComponent">
     <cfargument name='aCollaborator' type='MyOtherComponent' />
      ...
   </cffunction>

</cfcomponent>
{code}

Using the MXUnit mocking facility, you can mock MyOtherComponent like this:

{code:title=Sample MXUnit Test Case}
<cfcomponent extends="mxunit.framework.TestCase" output="false">
    
    <cffunction name="testMyComponent">
    
    	<!--- Our component under test (CUT) --->
    	<cfset myComponent = createObject('component','MyComponent') />
    
    	<!--- Create the mock --->
    	<cfset mockOtherComponent = mock('MyOtherComponent') />
    
    	<!--- Define Behavior --->
    	<cfset mockOtherComponent.writeToLog('Hello.') />
    	<cfset mockOtherComponent.writeToLog('Good Bye.') />

    	<!--- Inject the mock into CUT --->
    	<cfset myComponent.setMyOtherComponent(mockOtherComponent) />
    
    	<!--- Exercise MyComponent --->
    	<cfset actual = myComponent.myMethod('foo') />
   
    	<!--- Verify --->
    	<cfset mockOtherComponent.verify().writeToLog('Hello.') />
    	<cfset mockOtherComponent.verify().writeToLog('Good Bye.') />
   </cffunction>
   
</cfcomponent>
{code}
*Note* that there is no returns() method chained to the end of of the writeToLog() behavior definition. This is a shortcut and is the same as myMock.writeToLog({color:#0000ff}...{color}).returns(). It saves you 9 or so keystrokes. The reason being is that true "mocks" typically do not return data.

If you are not overly concerned with the literal details of the method calls, you could simplify this with _argument patterns_:

{code:title=Sample MXUnit Test Case}
<cfcomponent extends="mxunit.framework.TestCase" output="false">
    
    <cffunction name="testMyComponent">
    
    	<!--- Our component under test (CUT) --->
    	<cfset myComponent = createObject('component','MyComponent') />
    
    	<!--- Create the mock --->
    	<cfset mockOtherComponent = mock('MyOtherComponent') />
    
    	<!--- Define Behavior --->
    	<cfset mockOtherComponent.writeToLog('{string}').returns() />

    	<!--- Inject the mock into CUT --->
    	<cfset myComponent.setMyOtherComponent(mockOtherComponent) />
    
    	<!--- Exercise MyComponent --->
    	<cfset actual = myComponent.myMethod('foo') />
   
    	<!--- Verify --->
    	<cfset mockOtherComponent.verifyTimes(2).writeToLog('{string}') />
   </cffunction>
   
</cfcomponent>
{code}

In the above example, we use the keyword, \{string\}, instead of literal arguments.

What happens under the hood is that when the method is called by the component that is passing in any _single string argument_ as a parameter, the defined mock behavior is invoked.

Argument patterns support all common CFML data types. The intent is that it's identical to the typeattribute of CFARGUMENT : \{numeric\} , \{any\} , \{query\} , \{struct\} , \{array\} , etc.  See Argument Matching in the next section for more detail.

The above examples create _Fast Mocks_, that is mocks that can be created quickly but may not have the desired _type_ you need; that is, what's specified in the first parameter. To create a _Type Safe_ mock, simply tell MightyMock that's what you want:

{code}
<cfset mockOtherComponent=mock('MyOtherComponent',true) />
{code}

The second parameter  in the constructor tells MXUnit to return an object of the same type specified in the first parameter. If an object of that type cannot be found, an instantiation exception will be thrown.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341592</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374296</id>
    <property name="body"><![CDATA[h2. {color:#ff6600}(Status:DRAFT as of 3.26.10\- Note that this feature is available in MXUnit 2.x and later){color}

!http://i905.photobucket.com/albums/ac259/virtix/customLogo.png|align=left!

Formerly known as MightyMock, MXUnit offers a built-in, simple, lightweight framework for mocking component interactions. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the next section.

*Prefer or already use another mocking framework like MockBox?* No problem\! When using MXUnit's mocking syntax, you can tell it to use the mocking framework of your choice.

{pagetree: root=Mocking and Stubbing}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341595</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374300</id>
    <property name="body"><![CDATA[MXUnit's mocking integration allows you to create a mock with a single method call from within your test case, using the _mock()_ method.

The fastest way to create a mock is to call mock() with no arguments:
{code:title=Simple Mock Example}
<cfset mockOtherComponent = mock() />
{code}

If the component under test (CUT) expects the object that you are mocking to be of a specific type, you can create a _typeSafe_ mock:
{code:title=typeSafe Mock Example}
<cfset mockOtherComponent = mock("my.component.toBeMocked","typeSafe") />
{code}

That code will generate a mock that ColdFusion will recognize as being an instance of _my.component.toBeMocked_. Note that if the framework cannot create an instance of that object an exception will be thrown.

Once you've created a mock you'll want to [define the behaviour|Defining a Mock's Behaviour] of the mock.



]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341599</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374270</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful (Forgive the blatant monetization. All funds ($0.43/yr) will be funneled back into MXUnit):

|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!|


|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=1932394850&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}||

|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0321146530&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}||





]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341569</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374273</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful (Forgive the blatant monetization. All funds will be funneled back into MXUnit):

|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!|


|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=1932394850&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|Lasse Koskela presents insightful and practical approaches to testing and Test Driven Development.|


{HTMLcomment}Kent Beck{HTMLcomment}
|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0321146530&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|The grand daddy of TDD, Kent Beck presents the original and revolutionary concepts behind Test Driven Development. A great presentation and a relatively simple read. 
|

{HTMLcomment}Gerard Meszaros asins=0131495054{HTMLcomment}
|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0131495054&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|A slightly more formal and certainly thorough discussion on common patterns found in unit testing. The section on smells and the refactoring advice is very useful. Also, the chapter on _Test Doubles_ presents a number of interesting perspectives on mocks and stubs.|



{HTMLcomment:hidden}
Syntax notes: {iframe macro in html table | | | ... note that the only difference is the the asin url parameter

|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0321146530&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}||

{HTMLcomment}

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341572</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374272</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful (Forgive the blatant monetization. All funds will be funneled back into MXUnit):

|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!|


|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=1932394850&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}||


{HTMLcomment}Kent Beck{HTMLcomment}
|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0321146530&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|
The grand daddy of TDD, Kent Beck presents the original and revolutionary concepts behind Test Driven Development. A great presentation and a relatively simple read. 
|



{HTMLcomment:hidden}
Syntax notes: {iframe macro in html table | | | ... note that the only difference is the the asin url parameter

|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0321146530&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}||

{HTMLcomment}

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341571</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374275</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful (Forgive the blatant monetization. All funds will be funneled back into MXUnit):

|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|{width:100px}Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!|


|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=1932394850&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|Lasse Koskela presents insightful and practical approaches to testing and Test Driven Development.|


{HTMLcomment}Kent Beck{HTMLcomment}
|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0321146530&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|The grand daddy of TDD, Kent Beck presents the original and revolutionary concepts behind Test Driven Development. A great presentation and a relatively simple read. 
|

{HTMLcomment}Gerard Meszaros asins=0131495054{HTMLcomment}
|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0131495054&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|A slightly more formal and certainly thorough discussion on common patterns found in unit testing. The section on smells and the refactoring advice is very useful. Also, the chapter on _Test Doubles_ presents a number of interesting perspectives on mocks and stubs.|



{HTMLcomment:hidden}
Syntax notes: {iframe macro in html table | | | ... note that the only difference is the the asin url parameter

|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0321146530&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}||

{HTMLcomment}

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341574</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374277</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful (Forgive the blatant monetization. All funds will be funneled back into MXUnit):


{table:rules=rows|width=90%}

{HTMLcomment}---------------Software Testing: Ammann/Offutt-----------------{HTMLcomment}

{tr}
{td:valign=top}
{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}
{td}
{td:valign=top}
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341576</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374279</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful (Forgive the blatant monetization. All funds will be funneled back into MXUnit):


{table:rules=rows|width=90%}

{HTMLcomment}\-------------\--Software Testing: Ammann/Offutt-\---------------\-{HTMLcomment}

{tr}
{td:valign=top}
{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}
{td}
{td:valign=top}

{td}
{tr}



{HTMLcomment}\-------------\--Test Driven: Lasse-\---------------\-{HTMLcomment}

{tr}
{td:valign=top}
{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=1932394850&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}
{td}
{td:valign=top}
Lasse Koskela presents insightful and practical approaches to testing and Test Driven Development.
{td}
{tr}


{HTMLcomment}\-------------\--Kent Beck-\---------------\-{HTMLcomment}
{tr}
{td:valign=top}{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0321146530&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}
{td}
{td:valign=top}
The father of TDD, Kent Beck presents the original and revolutionary concepts behind Test Driven Development. A great presentation and a relatively simple read.{td}
{tr}



{HTMLcomment}\-------------\- Gerard Meszaros asins=0131495054 \----------------\-{HTMLcomment}
{tr}
{td:valign=top}
{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0131495054&fc10321146530=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}
{td}
{td:valign=top}
A slightly more formal and certainly thorough discussion on common patterns found in unit testing. The section on test smells and the refactoring advice is immensely useful. The chapter on _Test Doubles_ presents a number of interesting perspectives on mocks and stubs.
{td}
{tr}



{table}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341578</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374281</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links
* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://code.google.com/p/mxunit/issues/list]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/])
* Mike	Henke  ([blog|http://www.henke.ws/])
* Randy	Merril  ([blog|http://forthedeveloper.com/])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/])
* Bill	Shelton  ([blog|http://blog.billshelton.me])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-row}
{table}
{column}

{column:width=3%}

{column}


{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}

{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341580</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374283</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links
* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://code.google.com/p/mxunit/issues/list]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Randy	Merril  ([blog|http://forthedeveloper.com/])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-row}
{table}
{column}

{column:width=3%}

{column}


{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}

{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341582</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374285</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links
* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://code.google.com/p/mxunit/issues/list]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Randy	Merril  ([blog|http://forthedeveloper.com/])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-row}
{table}
{column}

{column:width=3%}

{column}


{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}

{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341584</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374256</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:


|[Introduction to Software Testing|http://www.amazon.com/gp/product/0521880386?ie=UTF8&tag=mx06-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521880386] by Paul Ammann and Jeff Offutt from George Mason University, Fairfax, VA. 
{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|


----










]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341555</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374257</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}


----










]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341556</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374254</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:


|[Introduction to Software Testing|http://www.amazon.com/gp/product/0521880386?ie=UTF8&tag=mx06-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521880386] by Paul Ammann and Jeff Offutt from George Mason University, Fairfax, VA.|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|

{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}

----










]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341553</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374260</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}
{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}

----

{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=1932394850&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}




----






]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341559</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374259</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}
{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}

----










]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341558</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374264</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!|

----

{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=1932394850&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}




----






]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341563</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374262</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}|

----

{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=1932394850&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}




----






]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341561</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374268</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful (Forgive the blatant monetization. All funds ($0.43/yr) will be funneled back into MXUnit):

|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!|


|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=1932394850&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}||


|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0321146530&fc1=000000&IS2=1&lt1=_blank&m=amazon|lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;| scrolling=no|marginwidth=0|marginheight=0|frameborder=0}
||




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341567</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374266</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful (Forgive the blatant monetization:

|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!|


|{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=1932394850&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}||







]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341565</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374240</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

[Introduction to Software Testing|http://www.amazon.com/gp/product/0521880386?ie=UTF8&tag=mx06-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521880386]



]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341539</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374238</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

<a href="http://www.amazon.com/gp/product/0521880386?ie=UTF8&tag=mx06-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521880386">Introduction to Software Testing</a><img src="http://www.assoc-amazon.com/e/ir?t=mx06-20&l=as2&o=1&a=0521880386" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />



]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341537</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374245</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

[Introduction to Software Testing|http://www.amazon.com/gp/product/0521880386?ie=UTF8&tag=mx06-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521880386] by Paul Ammann and Jeff Offutt from George Mason University, Fairfax, VA. 

{iframe:src="http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"}


{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}


----










]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341544</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374243</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

[Introduction to Software Testing|http://www.amazon.com/gp/product/0521880386?ie=UTF8&tag=mx06-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521880386] by Paul Ammann and Jeff Offutt from George Mason University, Fairfax, VA. 

{iframe src="http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"}


{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}


----










]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341542</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374242</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

[Introduction to Software Testing|http://www.amazon.com/gp/product/0521880386?ie=UTF8&tag=mx06-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521880386] by Paul Ammann and Jeff Offutt from George Mason University, Fairfax, VA. 

Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the many challenges associated with software testing. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!







]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341541</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374249</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

[Introduction to Software Testing|http://www.amazon.com/gp/product/0521880386?ie=UTF8&tag=mx06-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521880386] by Paul Ammann and Jeff Offutt from George Mason University, Fairfax, VA. 

{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr}


{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}


----










]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341548</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374247</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

[Introduction to Software Testing|http://www.amazon.com/gp/product/0521880386?ie=UTF8&tag=mx06-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521880386] by Paul Ammann and Jeff Offutt from George Mason University, Fairfax, VA. 

{iframe:src="http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr"}


{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}


----










]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341546</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374246</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

[Introduction to Software Testing|http://www.amazon.com/gp/product/0521880386?ie=UTF8&tag=mx06-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521880386] by Paul Ammann and Jeff Offutt from George Mason University, Fairfax, VA. 

{iframe:src="http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr"|style="width:120px;height:240px;" s|crolling="no"|marginwidth="0"|marginheight="0"|frameborder="0"}


{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}


----










]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341545</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374253</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:


|[Introduction to Software Testing|http://www.amazon.com/gp/product/0521880386?ie=UTF8&tag=mx06-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521880386] by Paul Ammann and Jeff Offutt from George Mason University, Fairfax, VA.| 
{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}|
|
{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}||


----










]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341552</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374252</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

[Introduction to Software Testing|http://www.amazon.com/gp/product/0521880386?ie=UTF8&tag=mx06-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521880386] by Paul Ammann and Jeff Offutt from George Mason University, Fairfax, VA. 
{iframe:src=http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}


{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}


----










]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341551</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374250</id>
    <property name="body"><![CDATA[Here are some references that Los Hombres have found useful:

[Introduction to Software Testing|http://www.amazon.com/gp/product/0521880386?ie=UTF8&tag=mx06-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521880386] by Paul Ammann and Jeff Offutt from George Mason University, Fairfax, VA. 
{iframe src="http://rcm.amazon.com/e/cm?t=mx06-20&o=1&p=8&l=as1&asins=0521880386&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr|style=width:120px;height:240px;|scrolling=no|marginwidth=0|marginheight=0|frameborder=0}


{quote}
Don't let the title fool you. This is far from an introduction and addresses many areas of software testing. Specifically, it presents 36 _coverge criteria_ used in both manual and automated testing. This text represents many years of research in the area and is a great formal and practical overview of the numerous challenges associated with  testing software. Note that the authors do not take *any* of the book's royalties; instead, the royalties are used in a scholarship fund for software engineering students. If for no other reason, that may be a good motivation to buy the book!
{quote}


----










]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341549</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374349</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341649</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374346</id>
    <property name="body"><![CDATA[If your mocked object returns an MXUnit MightyMock object rather than what you intended, this is likely due to an incorrect parameter in the definition. 

For example, if you mock an object like this:

{code}
  
  myMock = mock("foo");
  myMock.bar("{string}").returns(true);

{code}

And it's subsequently invoked like this:


{code}
  
  some_bool = myMock.bar(2);
  assert(some_bool);

{code}

This will fail because myMock.foo(...) is expecting a string, which the integer 2 is not. What's happening is that when you call myMock.bar(2), MXUnit thinks you're defining a new mock rather than executing it.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341645</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374344</id>
    <property name="body"><![CDATA[I strongly recommend the following:
# always create a new instance of your component under test in the setUp function
# unless you want to override certain functions every single time \-\- which is often useful for functions that send notifications, do logging, etc \-\- then I suggest calling injectMethod in the test functions themselves and not in setUp.

This ensures that the component under test, which you define in setUp, is created anew each test and is an unmodified version of the object

In the case of ColdSpring, if you're wiring your component under test into the object once in the request, then I'd do a duplicate(coldspringInjectedObject) in setUp and use your duplicated object as the component under test]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5341643</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374342</id>
    <property name="body"><![CDATA[


A while back, I (Marc) wrote about using coldfusion's "mix-in" functionality to achieve simple mocking. The usefulness here is where you have a function that "does something", but you want to change the thing that it does for the purpose of a test. This is particularly handy when you're testing functionA(), and functionA() calls functionB() and functionC(). Maybe functionA() depends on the results of functionB() to do certain work, and then it calls functionC() to do other work. In code, it might look like:

{code}

	<cfcomponent name=MyComponent>
		<cffunction name="functionA">
			<cfargument name="someArg" required="true">
			<cfif listlen(functionB(someArg) GTE 1)>
				<cfreturn functionC(someArg)>			
			</cfif>
			<cfreturn false>
		</cffunction>
		
		<cffunction name="functionB">
			.... maybe i'll return a number ... or a list of numbers
		</cffunction>
		
		<cffunction name="functionC">
			.... i think i'll go and run a bunch of database updates
			<cfreturn true>
		</cffunction>
	</cfcomponent>
{code}	

And here might be some tests for functionA:

{code}
	<cfcomponent extends="mxunit.framework.TestCase">
		
		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>
		
		<cffunction name="functionAShouldReturnFalseForASingleListElement">
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertFalse(ret,"a single list should've been returned for SomeID and functionA should have returned false")>
		</cffunction>
		
		<cffunction name="functionAShouldReturnFalseForMultipleListElements">
			<cfset ret = obj.functionA(SomeOtherID)>
			<cfset assertFalse(ret,"multiple list elements should've been returned for SomeID and functionA should have returned false")>
		</cffunction>
		
		<cffunction name="functionAShouldReturnTrueForNoElements">
			<cfset ret = obj.functionA(AndYetAnotherID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>
	</cfcomponent>
{code}	

Now, let's say functionB() queries the database or whatever, based on the passed-in someArg argument. The problem is obvious: your database is in an unknown state, because data change all day long. And you want to do a number of tests: you want to test the condition where functionB() returns a single list element, and also when it returns more than 1 list element. Which means you need at least two known inputs for someArg: one that will ensure functionB() returns a single element, and one that ensures it'll return more than one. What a pain! Wouldn't it be great if you could say "for the purposes of this test, I want functionB() to return a single list element". and then in another test, say "And for this test, I want it to return 2 list elements"? Or, to put it another way, wouldn't it be nice to override functionB for this test, but without a lot of work?

This is why injectMethod() was born. To make it a little easier to override functions for the purpose of testing. Now, you're not overriding the function under test! You're overriding functions that the function under test calls, in order to make it easier to test the function under test. Let's have a look at our new set of tests:
{code}
	<cfcomponent extends="mxunit.framework.TestCase">
		
		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>
		
		<!---  DEFINE PRIVATE METHODS TO OVERRIDE FUNCTIONB AND FUNCTIONC  --->
		
		<cffunction name="returnsSingleListElement" access="private">
			<cfreturn "1">
		</cffunction>
		
		<cffunction name="returnsMultipleListElements" access="private">
			<cfreturn "1,2,3">
		</cffunction>
		
		<cffunction name="returnsNoListElement" access="private">
			<cfreturn "">
		</cffunction>
		
		<!---  and our tests, again  --->
		<cffunction name="functionAShouldReturnFalseForASingleListElement">
			<!--- pass in our returnSingleListElement function into the object and name it functionB (i.e., override functionB) inside the object under test --->
			<cfset injectMethod(obj, this, "returnSingleListElement", "functionB")>
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertFalse(ret,"a single list should've been returned for SomeID and functionA should have returned false")>
		</cffunction>
		
		<cffunction name="functionAShouldReturnFalseForMultipleListElements">
			<!--- pass in our returnMultipleListElements function into the object and name it functionB --->
			<cfset injectMethod(obj, this, "returnMultipleListElements", "functionB")>
			<cfset ret = obj.functionA(SomeOtherID)>
			<cfset assertFalse(ret,"multiple list elements should've been returned for SomeID and functionA should have returned false")>
		</cffunction>
		
		<cffunction name="functionAShouldReturnTrueForNoElements">
			<!--- pass in our returnNoListElement function into the object and name it functionB --->
			<cfset injectMethod(obj, this, "returnNoListElement", "functionB")>
			<cfset ret = obj.functionA(AndYetAnotherID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>
	</cfcomponent>
{code}	

As this illustrates, we've now created a very easy way to test functionA with the 3 cases we need to happen with functionB: a single list, multiple list, and no-element returns. Now, to take this one step further, you could override functionC -- which, if you remember, updates the database -- with a simple function that simply returns "true". Remember, we're not testing functionC so ideally we wouldn't touch the database at all in this case

{code}
	<cfcomponent extends="mxunit.framework.TestCase">
		
		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>
		
		<!---  DEFINE PRIVATE METHODS TO OVERRIDE FUNCTIONB AND FUNCTIONC  --->
		
		....
		
		<cffunction name="functionC_Replacement" access="private">
			<cfreturn true>
		</cffunction>
		
		<!---  and our tests, again  --->
		<cffunction name="functionAShouldReturnTrueForNoElements">
			<!--- pass in our returnNoListElement function into the object and name it functionB
					in addition, overwrite functionC with our new, spoof functionC	 --->
			<cfset injectMethod(obj, this, "returnNoListElement", "functionB")>
			<cfset injectMethod(obj, this, "functionC_Replacement", "functionC")>
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>		
		
		....
		
	</cfcomponent>
	
{code}

There you go: you can pass in functions to achieve exactly the conditions you want to achieve in order to fully test your logic. And you pass in functions that "spoof" the DB-updating function that would slow down your test and potentially corrupt your data.

I can't stress enough that this solves a different than mock objects solve. Mocks solve the problem of spoofing collaborator objects. But in this case, we're not spoofing functions in a dependent component. We're spoofing functions in the same component we're trying to test.
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341641</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374343</id>
    <property name="body"><![CDATA[Done\!]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5341642</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374340</id>
    <property name="body"
      ><![CDATA[If you use ColdSpring to resolve dependencies and set your obj in setUp(), the injected method persists throughout the request, correct?&nbsp; Is there a method to return it to it's original state?]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5341639</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374338</id>
    <property name="body"><![CDATA[In most non-trivial apps, it's important to know what's going on under the hood. This is particularly true for mocks. If something doesn't seem right you can inspect a mock to see how it's been defined and how it's been invoked. This is accomplished by using the &nbsp;(debugMock()) method. This returns a _raw_ struct with all the information about the mock object:

{code:title="Mock Debug"}
//Some MXUnit test case

//create
myMock = mock();

//define behavior
myMock.foo().returns(1234);

//invoke
myMock.foo();

//inspect
debug( myMock.debugMock() );

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341637</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374339</id>
    <property name="body"
      ><![CDATA[Can you add the injectMethod method signature with some documentation in this page so we don't have to look dig through the code to figure verify what each arg is? Thanks :) \!]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">5341638</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374334</id>
    <property name="body"><![CDATA[MXUnit's mocking integration allows you to create a mock with a single method call from within your test case, using the _mock()_ method.

The fastest way to create a mock is to call mock() with no arguments:
{code:title=Simple Mock Example}
<cfset mockOtherComponent = mock() />
{code}

If the component under test (CUT) expects the object that you are mocking to be of a specific type, you can create a _typeSafe_ mock:
{code:title=typeSafe Mock Example}
<cfset mockOtherComponent = mock('my.component.toBeMocked','typeSafe') />
{code}

That code will generate a mock that ColdFusion will recognize as being an instance of _my.component.toBeMocked_. Note that if the framework cannot create an instance of that object an exception will be thrown.

If you already have an instance of an object, and want to turn it into a mock, you can simply pass the instance of the object into the mock() method, which will create a typeSafe mock:
{code:title=typeSafe Mock from a Component Example}
<cfset otherComponent = createObject('component','my.component.toBeMocked') />
<cfset mockOtherComponent = mock(otherComponent) />
{code}

If you wish to create a mock using a framework other than MXUnit's built-in mocking framework, you can pass a third argument to the mock() method, specifying the framework's name:
{code:title=Mocking with a Different Framework}
<cfset mockOtherComponent = mock('my.component.toBeMocked','','MockBox') />
{code}

That will generate a mock using the MockBox framework. Currently MockBox and ColdMock are supported as external mocking frameworks, but others can be plugged in by editing the mxunit-config.xml file in the framework folder.

For more information on using external mocking frameworks with MXUnit, including how to specify a global mocking framework (instead of having to pass the framework name into the mock() call), see the [Using External Mocking Frameworks] section.

Once you've created a mock you'll want to [define the behaviour|Defining a Mock's Behaviour] of the mock.



]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341633</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374335</id>
    <property name="body"><![CDATA[h2. {color:#ff6600}(Status:DRAFT as of 6.21.10\- Note that this feature is available in MXUnit 2.x and later){color}

!http://i905.photobucket.com/albums/ac259/virtix/customLogo.png|align=left!

MXUnit now offers a built-in, simple, lightweight framework for mocking component interactions; this is also known as _MightyMock_. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the [Argument Matching] section.

*Prefer or already use another mocking framework like MockBox?* No problem\! When using MXUnit's mocking syntax, you can [tell it to use the mocking framework of your choice|Using External Mocking Frameworks].

{pagetree: root=Mocking and Stubbing}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341634</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374351</id>
    <property name="body"><![CDATA[* The file is a component (a .cfc file)
* The filename either starts or ends with "Test"
* The component extends mxunit.framework.TestCase or extends a component that eventually extends mxunit.framework.TestCase
* The TestCase can contain a setUp() and tearDown() function that will run prior to and after each and every test
* The TestCase can contain any number of public methods. Those public methods are considered tests regardless of their name, and MXUnit will run them as tests. Failures will be recorded as failures; errors as errors; and successes as successes
* Inside of your tests, you make assertions on the results of functions that you call on your component under test
* Any private methods are not considered tests and will not be run by MXUnit

*Study this TestCase skeleton to learn more*


{code:language=cf|title=MyTest.cfc|controls=true|linenumbers=true}
<cfcomponent extends="mxunit.framework.TestCase">

	<!--- this will run before every single test in this test case --->
	<cffunction name="setUp" returntype="void" access="public" hint="put things here that you want to run before each test">
		<cfset obj = createObject("component","ObjectUnderTest")>

	</cffunction>

	<!--- this will run after every single test in this test case --->
	<cffunction name="tearDown" returntype="void" access="public" hint="put things here that you want to run after each test">

	</cffunction>

	<!--- your test. Name it whatever you like... make it descriptive. --->
	<cffunction name="xxx_should_xxxx_When_xxx" returntype="void" access="public">
		<!--- exercise your component under test --->
		<cfset var result = obj.doSomething()>

		<!--- if you want to "see" your data -- including complex variables, you can pass them to debug() and they will be available to you either in the HTML output or in the Eclipse plugin via rightclick- "Open TestCase results in browser" --->
		<cfset debug(result)>

		<!--- make some assertion based on the result of exercising the component --->
		<cfset assertEquals("SomeExpectedValue",result,"result should've been 'SomeExpectedValue' but was #result#")>

	</cffunction>

	<cffunction name="xxx_should_yyy_when_zzz" returntype="void">
    	<cfset var XX = "">
    	<cfset fail("xxx_should_yyy_when_zzz not yet implemented")>


    </cffunction>



	<!--- this won't get run b/c it's private --->
	<cffunction name="somePrivateFunction" access="private">
		<cfset marc.getBankAccount().add("5 meeeeelion dollars")>
	</cffunction>

</cfcomponent>

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341651</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374314</id>
    <property name="body"><![CDATA[h3. Mocking

If your dependency does not return any data, but rather _does_ something (returns void), you will want to verify that it was called, but maybe you don't want to incur side-effects, such as emails or logging:

{code:title=MyComponent (The component under test) }
<cfcomponent hint="Example Component To Mock" output="false">
    
    <cffunction name="myMethod">
        <cfargument name="foo" />
        <cfset myOtherComponent.writeToLog('Hello.') />
        <!--- do a bunch of other stuff ... --->
        <cfset myOtherComponent.writeToLog('Good bye.') />
   </cffunction>

   <cffunction name="setMyOtherComponent">
     <cfargument name='aCollaborator' type='MyOtherComponent' />
      ...
   </cffunction>

</cfcomponent>
{code}

Using the MXUnit mocking facility, you can mock MyOtherComponent like this:

{code:title=Sample MXUnit Test Case}
<cfcomponent extends="mxunit.framework.TestCase" output="false">
    
    <cffunction name="testMyComponent">
    
    	<!--- Our component under test (CUT) --->
    	<cfset myComponent = createObject('component','MyComponent') />
    
    	<!--- Create the mock --->
    	<cfset mockOtherComponent = mock() />
    
    	<!--- Define Behavior --->
    	<cfset mockOtherComponent.writeToLog('Hello.') />
    	<cfset mockOtherComponent.writeToLog('Good Bye.') />

    	<!--- Inject the mock into CUT --->
    	<cfset myComponent.setMyOtherComponent(mockOtherComponent) />
    
    	<!--- Exercise MyComponent --->
    	<cfset actual = myComponent.myMethod('foo') />
   
    	<!--- Verify --->
    	<cfset mockOtherComponent.verify().writeToLog('Hello.') />
    	<cfset mockOtherComponent.verify().writeToLog('Good Bye.') />
   </cffunction>
   
</cfcomponent>
{code}
*Note* that there is no returns() method chained to the end of of the writeToLog() behavior definition. This is a shortcut and is the same as myMock.writeToLog({color:#0000ff}...{color}).returns(). It saves you 9 or so keystrokes. The reason being is that true "mocks" typically do not return data.

If you are not overly concerned with the literal details of the method calls, you could simplify this with _argument patterns_:

{code:title=Sample MXUnit Test Case}
<cfcomponent extends="mxunit.framework.TestCase" output="false">
    
    <cffunction name="testMyComponent">
    
    	<!--- Our component under test (CUT) --->
    	<cfset myComponent = createObject('component','MyComponent') />
    
    	<!--- Create the mock --->
    	<cfset mockOtherComponent = mock('MyOtherComponent') />
    
    	<!--- Define Behavior --->
    	<cfset mockOtherComponent.writeToLog('{string}').returns() />

    	<!--- Inject the mock into CUT --->
    	<cfset myComponent.setMyOtherComponent(mockOtherComponent) />
    
    	<!--- Exercise MyComponent --->
    	<cfset actual = myComponent.myMethod('foo') />
   
    	<!--- Verify --->
    	<cfset mockOtherComponent.verifyTimes(2).writeToLog('{string}') />
   </cffunction>
   
</cfcomponent>
{code}

In the above example, we use the keyword, \{string\}, instead of literal arguments.

What happens under the hood is that when the method is called by the component that is passing in any _single string argument_ as a parameter, the defined mock behavior is invoked.

Argument patterns support all common CFML data types. The intent is that it's identical to the typeattribute of CFARGUMENT : \{numeric\} , \{any\} , \{query\} , \{struct\} , \{array\} , etc.  See the [Argument Matching] section for more detail.
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341613</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374316</id>
    <property name="body"><![CDATA[MXUnit's mocking integration allows you to create a mock with a single method call from within your test case, using the _mock()_ method.

The fastest way to create a mock is to call mock() with no arguments:
{code:title=Simple Mock Example}
<cfset mockOtherComponent = mock() />
{code}

If the component under test (CUT) expects the object that you are mocking to be of a specific type, you can create a _typeSafe_ mock:
{code:title=typeSafe Mock Example}
<cfset mockOtherComponent = mock("my.component.toBeMocked","typeSafe") />
{code}

That code will generate a mock that ColdFusion will recognize as being an instance of _my.component.toBeMocked_. Note that if the framework cannot create an instance of that object an exception will be thrown.

If you wish to create a mock using a framework other than MXUnit's built-in mocking framework, you can pass a third argument to the mock() method, specifying the framework's name:
{code:title=Mocking with a Different Framework}
<cfset mockOtherComponent = mock("my.component.toBeMocked","","MockBox") />
{code}

That will generate a mock using the MockBox framework. Currently MockBox and ColdMock are supported as external mocking frameworks, but others can be plugged in by editing the mxunit-config.xml file in the framework folder.

For more information on using external mocking frameworks with MXUnit, including how to specify a global mocking framework (instead of having to pass the framework name into the mock() call), see the [Using External Mocking Frameworks] section.

Once you've created a mock you'll want to [define the behaviour|Defining a Mock's Behaviour] of the mock.



]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341615</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374310</id>
    <property name="body"><![CDATA[Suppose you have a component you want to test (_MyComponent_) and that component calls a method on another component (_MyOtherComponent_) which returns a number needed by the 1st component:

{code:title=MyComponent (The component under test) }
<cfcomponent hint="Example Component To Mock" output="false">
    
   <cffunction name="myMethod">
    	<cfargument name="foo" />
    	<cfset myData = myOtherComponent.doSomething('foo') />
    	<!--- Do something with myData --->
    	<cfreturn true />
   </cffunction>

   <cffunction name="setMyOtherComponent">
     <cfargument name='aCollaborator' type='MyOtherComponent' />
      ...
   </cffunction>

</cfcomponent>
{code}

Using the MXUnit mocking facility, you can mock MyOtherComponent like this:

{code:title=Sample MXUnit Test Case}
<cfcomponent extends="mxunit.framework.TestCase" output="false">
    
    <cffunction name="testMyComponentInteractions">
    
    	<!--- Our component under test (CUT) --->
    	<cfset myComponent = createObject('component','MyComponent') />
    
    	<!--- Create the mock --->
    	<cfset mockOtherComponent = mock('MyOtherComponent') />
    
    	<!--- Define the behavior for our mock, including expected parameters --->
    	<cfset mockOtherComponent.doSomething('foo').returns( 123456 ) />
    
    	<!--- Inject the mock into CUT --->
    	<cfset myComponent.setMyOtherComponent(mockOtherComponent) />
    
    	<!--- Exercise MyComponent --->
    	<cfset actual = myComponent.myMethod('foo') />
   
   		<!--- Perform some test --->  
     <cfset assert( actual eq 'cool and bad-ass')  /> 
   </cffunction>
   
</cfcomponent>
{code}

What's important to consider here is the difference between mocking and stubbing. Here we are testing some data returned by our component under test. We're using
the internal MXUnit mocking facilities to stub out the data returned by _MyOtherComponent_. *If* the CUT returned void, it makes it more difficult to test. In cases like that, we would use verification rather than testing the data (or state) returned by the CUT.

_Side Bar_: The argument _'MyOtherComponent'_ which is being passed into the mock() method above is optional. It's only required if your component under test requires an exact type. For example, the _setMyOtherComponent()_ method in our CUT expects an argument of type _MyOtherComponent_, therefore we pass the type of component into the mock() call.

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341609</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374312</id>
    <property name="body"><![CDATA[h3. Mocking

If your dependency does not return any data, but rather _does_ something (returns void), you will want to verify that it was called, but maybe you don't want to incur side-effects, such as emails or logging:

{code:title=MyComponent (The component under test) }
<cfcomponent hint="Example Component To Mock" output="false">
    
    <cffunction name="myMethod">
        <cfargument name="foo" />
        <cfset myOtherComponent.writeToLog('Hello.') />
        <!--- do a bunch of other stuff ... --->
        <cfset myOtherComponent.writeToLog('Good bye.') />
   </cffunction>

   <cffunction name="setMyOtherComponent">
     <cfargument name='aCollaborator' type='MyOtherComponent' />
      ...
   </cffunction>

</cfcomponent>
{code}

Using the MXUnit mocking facility, you can mock MyOtherComponent like this:

{code:title=Sample MXUnit Test Case}
<cfcomponent extends="mxunit.framework.TestCase" output="false">
    
    <cffunction name="testMyComponent">
    
    	<!--- Our component under test (CUT) --->
    	<cfset myComponent = createObject('component','MyComponent') />
    
    	<!--- Create the mock --->
    	<cfset mockOtherComponent = mock('MyOtherComponent') />
    
    	<!--- Define Behavior --->
    	<cfset mockOtherComponent.writeToLog('Hello.') />
    	<cfset mockOtherComponent.writeToLog('Good Bye.') />

    	<!--- Inject the mock into CUT --->
    	<cfset myComponent.setMyOtherComponent(mockOtherComponent) />
    
    	<!--- Exercise MyComponent --->
    	<cfset actual = myComponent.myMethod('foo') />
   
    	<!--- Verify --->
    	<cfset mockOtherComponent.verify().writeToLog('Hello.') />
    	<cfset mockOtherComponent.verify().writeToLog('Good Bye.') />
   </cffunction>
   
</cfcomponent>
{code}
*Note* that there is no returns() method chained to the end of of the writeToLog() behavior definition. This is a shortcut and is the same as myMock.writeToLog({color:#0000ff}...{color}).returns(). It saves you 9 or so keystrokes. The reason being is that true "mocks" typically do not return data.

If you are not overly concerned with the literal details of the method calls, you could simplify this with _argument patterns_:

{code:title=Sample MXUnit Test Case}
<cfcomponent extends="mxunit.framework.TestCase" output="false">
    
    <cffunction name="testMyComponent">
    
    	<!--- Our component under test (CUT) --->
    	<cfset myComponent = createObject('component','MyComponent') />
    
    	<!--- Create the mock --->
    	<cfset mockOtherComponent = mock('MyOtherComponent') />
    
    	<!--- Define Behavior --->
    	<cfset mockOtherComponent.writeToLog('{string}').returns() />

    	<!--- Inject the mock into CUT --->
    	<cfset myComponent.setMyOtherComponent(mockOtherComponent) />
    
    	<!--- Exercise MyComponent --->
    	<cfset actual = myComponent.myMethod('foo') />
   
    	<!--- Verify --->
    	<cfset mockOtherComponent.verifyTimes(2).writeToLog('{string}') />
   </cffunction>
   
</cfcomponent>
{code}

In the above example, we use the keyword, \{string\}, instead of literal arguments.

What happens under the hood is that when the method is called by the component that is passing in any _single string argument_ as a parameter, the defined mock behavior is invoked.

Argument patterns support all common CFML data types. The intent is that it's identical to the typeattribute of CFARGUMENT : \{numeric\} , \{any\} , \{query\} , \{struct\} , \{array\} , etc.  See Argument Matching in the next section for more detail.

The above examples create _Fast Mocks_, that is mocks that can be created quickly but may not have the desired _type_ you need; that is, what's specified in the first parameter. To create a _Type Safe_ mock, simply tell MightyMock that's what you want:

{code}
<cfset mockOtherComponent=mock('MyOtherComponent','typeSafe') />
{code}

The second parameter  in the constructor tells MXUnit to return an object of the same type specified in the first parameter. If an object of that type cannot be found, an instantiation exception will be thrown.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341611</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374308</id>
    <property name="body"><![CDATA[After you've created a mock and defined its behaviour, you'll want to inject it into the component under test (CUT). That is a simple matter of passing it into the method that already exists to allow for dependency injection. This is generally done either via the constructor (init() method), or via a setter.

For example, if the CUT uses constructor injection:

{code:title=MyComponent (Component under test with constructor injection)}
<cfcomponent hint="Example Component To Mock" output="false">
    
   <cffunction name="init">
      <cfargument name="aCollaborator" />
      <cfset variables.myOtherComponent = arguments.aCollaborator />
      <cfreturn this />
   </cffunction>

</cfcomponent>
{code}

You would create and inject a mock like this:

{code:title=Injecting a mock via constructor injection}
<cfset myMock = mock() />
<cfset myMock.getName().returns("The Dude") />
<cfset myComponent = createObject("component","MyComponent").init(myMock) />
{code}

If the CUT uses setter injection:

{code:title=MyComponent (Component under test with setter injection)}
<cfcomponent hint="Example Component To Mock" output="false">
    
   <cffunction name="setMyOtherComponent">
      <cfargument name="aCollaborator" />
      <cfset variables.myOtherComponent = arguments.aCollaborator />
   </cffunction>

</cfcomponent>
{code}


You would create and inject a mock like this:

{code:title=Injecting a mock via constructor injection}
<cfset myMock = mock() />
<cfset myMock.getName().returns("The Dude") />
<cfset myComponent = createObject("component","MyComponent") />
<cfset myComponent.setMyOtherComponent(myMock) />
{code}
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341607</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374304</id>
    <property name="body"><![CDATA[In general the steps will follow this simple pattern:
# Create the mock
# Define behavior
# Inject the mock into the component under test
# Run the component under test
# Optionally verify how the mock was called

There's a subtle yet important difference between mocking and stubbing. Stubbing typically involves faking what _data_ is returned by an object, while mocking is faking the _behavior_. See the next pages for examples.

{pagetree:root=How to use it}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341603</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374331</id>
    <property name="body"><![CDATA[h2. {color:#ff6600}(Status:DRAFT as of 3.26.10\- Note that this feature is available in MXUnit 2.x and later){color}

!http://i905.photobucket.com/albums/ac259/virtix/customLogo.png|align=left!

MXUnit now offers a built-in, simple, lightweight framework for mocking component interactions; this is also known as _MightyMock_. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the [Argument Matching] section.

*Prefer or already use another mocking framework like MockBox?* No problem\! When using MXUnit's mocking syntax, you can tell it to use the mocking framework of your choice.

{pagetree: root=Mocking and Stubbing}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341630</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374330</id>
    <property name="body"><![CDATA[After you have [created a mock|Creating a Mock], you'll need to define behaviours on that mock. You need to specify which methods your component under test (CUT) will call on the mock object, along with the arguments that will be passed. You can also optionally define what data the methods should return.

For example, if your CUT will call a method called _getName()_ with no arguments, and you want your mock to return "The Dude", your code would look like this:
{code:title=A method that expects no arguments}
<cfset myMock = mock() />
<cfset myMock.getName().returns('The Dude') />
{code}

If your CUT will call a method called _getNameForUser()_ passing the value "dude" into the method as an argument, and you want your mock to return "The Dude", your code would look like this:
{code:title=A method that expects a specific argument}
<cfset myMock = mock() />
<cfset myMock.getNameForUser('dude').returns('The Dude') />
{code}

If your CUT will call a method called _setName()_ passing the value "The Dude" into the method as an argument, and you don't want the method to return anything, your code would look like this:
{code:title=A method that expects a specific argument, and returns nothing}
<cfset myMock = mock() />
<cfset myMock.setName('The Dude').returns() />
{code}

You can also save yourself a few keystrokes by leaving out the _returns()_ entirely, if you don't want anything returned:
{code:title=A method that expects a specific argument, and returns nothing}
<cfset myMock = mock() />
<cfset myMock.setName('The Dude') />
{code}

You can also use [Argument Matching] to allow the CUT to call a particular method multiple times, with different arguments, provided you want the same result each time, for example:
{code:title=Using argument matching to allow for any string argument}
<cfset myMock = mock() />
<cfset myMock.getNameForUser('{string}').returns('The Dude') />
{code}

The above code will create a mock on which the _getNameForUser()_ method can be called multiple times, and it will accept any string argument, always returning the value "The Dude". For more information on which patters are supported for argument matching, see the [Argument Matching] section.

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341629</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374332</id>
    <property name="body"><![CDATA[h2. {color:#ff6600}(Status:DRAFT as of 3.26.10\- Note that this feature is available in MXUnit 2.x and later){color}

!http://i905.photobucket.com/albums/ac259/virtix/customLogo.png|align=left!

MXUnit now offers a built-in, simple, lightweight framework for mocking component interactions; this is also known as _MightyMock_. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the [Argument Matching] section.

*Prefer or already use another mocking framework like MockBox?* No problem\! When using MXUnit's mocking syntax, you can [tell it to use the mocking framework of your choice|Using External Mocking Frameworks].

{pagetree: root=Mocking and Stubbing}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341631</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374326</id>
    <property name="body"><![CDATA[In general the steps will follow this simple pattern:
# Create the mock
# Define behaviour
# Inject the mock into the component under test
# Run the component under test
# Optionally verify how the mock was called

{pagetree:root=How to use it}

There's a subtle yet important difference between mocking and stubbing. Stubbing typically involves faking what _data_ is returned by an object, while mocking is faking the _behaviour_. See the next pages on [Stubbing] and [Mocking] for examples.

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341625</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374328</id>
    <property name="body"><![CDATA[After you've created a mock and defined its behaviour, you'll want to inject it into the component under test (CUT). That is a simple matter of passing it into the method that already exists to allow for dependency injection. This is generally done either via the constructor (init() method), or via a setter.

For example, if the CUT uses constructor injection:

{code:title=MyComponent (Component under test with constructor injection)}
<cfcomponent hint="Example Component To Mock" output="false">
    
   <cffunction name="init">
      <cfargument name="aCollaborator" />
      <cfset variables.myOtherComponent = arguments.aCollaborator />
      <cfreturn this />
   </cffunction>

</cfcomponent>
{code}

You would create and inject a mock like this:

{code:title=Injecting a mock via constructor injection}
<cfset myMock = mock() />
<cfset myMock.getName().returns("The Dude") />
<cfset myComponent = createObject("component","MyComponent").init(myMock) />
{code}

If the CUT uses setter injection:

{code:title=MyComponent (Component under test with setter injection)}
<cfcomponent hint="Example Component To Mock" output="false">
    
   <cffunction name="setMyOtherComponent">
      <cfargument name="aCollaborator" />
      <cfset variables.myOtherComponent = arguments.aCollaborator />
   </cffunction>

</cfcomponent>
{code}


You would create and inject a mock like this:

{code:title=Injecting a mock via setter injection}
<cfset myMock = mock() />
<cfset myMock.getName().returns("The Dude") />
<cfset myComponent = createObject("component","MyComponent") />
<cfset myComponent.setMyOtherComponent(myMock) />
{code}
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341627</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374322</id>
    <property name="body"><![CDATA[h2. {color:#ff6600}(Status:DRAFT as of 3.26.10\- Note that this feature is available in MXUnit 2.x and later){color}

!http://i905.photobucket.com/albums/ac259/virtix/customLogo.png|align=left!

Also known as MightyMock, MXUnit offers a built-in, simple, lightweight framework for mocking component interactions. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the [Argument Matching] section.

*Prefer or already use another mocking framework like MockBox?* No problem\! When using MXUnit's mocking syntax, you can tell it to use the mocking framework of your choice.

{pagetree: root=Mocking and Stubbing}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341621</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374325</id>
    <property name="body"><![CDATA[MXUnit comes bundled with its own lightweight, yet full-featured mocking framework. If you would prefer to use an external mocking framework and still take advantage of MXUnit's _mock()_ method, you can tell MXUnit to use a different framework. You can do this in a number of ways.

h5. Use the setMockingFramework() Method

In your test case you can call the _setMockingFramework()_ method, passing in the name of the framework you wish to use. MXUnit will then use that framework for any calls to mock(). For example:
{code:title=Setting a Default Mocking Framework for a Test Case}
<cfcomponent extends="mxunit.framework.TestCase" output="false">
    
   <cffunction name="setup">
      <cfset setMockingFramework('MockBox') /> 
   </cffunction>
   
</cfcomponent>
{code}

h5. Change the Default Mocking Framework in mxunit-config.xml

MXUNit ships with a config file, named mxunit-config.xml, that resides in the _framework_ folder. There is a _config-element_ in this file with a type of _mockingFramework_, which is set to _MightyMock_ (the name of the built-in mocking framework) by default. If you change this value to the name of another supported framework, MXUnit will use that framework by default instead.

h5. Pass a Mocking Framework Name into the mock() Method

You can use the third argument of the mock() method, to override the framework to use. For example:
{code:title=Mocking with a Different Framework}
<cfset mockOtherComponent = mock('my.component.toBeMocked','','MockBox') />
{code}

h5. Mocking Frameworks Supported

MXUnit currently supports the MockBox and ColdMock mocking frameworks, in addition to its own. Additional frameworks can be supported by adding the required entries to the mxunit-config.xml file.
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341624</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374318</id>
    <property name="body"><![CDATA[MXUnit's mocking integration allows you to create a mock with a single method call from within your test case, using the _mock()_ method.

The fastest way to create a mock is to call mock() with no arguments:
{code:title=Simple Mock Example}
<cfset mockOtherComponent = mock() />
{code}

If the component under test (CUT) expects the object that you are mocking to be of a specific type, you can create a _typeSafe_ mock:
{code:title=typeSafe Mock Example}
<cfset mockOtherComponent = mock('my.component.toBeMocked','typeSafe') />
{code}

That code will generate a mock that ColdFusion will recognize as being an instance of _my.component.toBeMocked_. Note that if the framework cannot create an instance of that object an exception will be thrown.

If you wish to create a mock using a framework other than MXUnit's built-in mocking framework, you can pass a third argument to the mock() method, specifying the framework's name:
{code:title=Mocking with a Different Framework}
<cfset mockOtherComponent = mock('my.component.toBeMocked','','MockBox') />
{code}

That will generate a mock using the MockBox framework. Currently MockBox and ColdMock are supported as external mocking frameworks, but others can be plugged in by editing the mxunit-config.xml file in the framework folder.

For more information on using external mocking frameworks with MXUnit, including how to specify a global mocking framework (instead of having to pass the framework name into the mock() call), see the [Using External Mocking Frameworks] section.

Once you've created a mock you'll want to [define the behaviour|Defining a Mock's Behaviour] of the mock.



]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341617</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374320</id>
    <property name="body"><![CDATA[h2. {color:#ff6600}(Status:DRAFT as of 3.26.10\- Note that this feature is available in MXUnit 2.x and later){color}

!http://i905.photobucket.com/albums/ac259/virtix/customLogo.png|align=left!

Formerly known as MightyMock, MXUnit offers a built-in, simple, lightweight framework for mocking component interactions. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the [Argument Matching] section.

*Prefer or already use another mocking framework like MockBox?* No problem\! When using MXUnit's mocking syntax, you can tell it to use the mocking framework of your choice.

{pagetree: root=Mocking and Stubbing}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341619</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827744</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.golfclubsoff.com/taylormade-r11-driver-p-235.html]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751404</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-10-27 06:43:46.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-10-27 06:43:46.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827743</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.golfclubsoff.com/ping-g20-driver-p-275.html]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751404</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-10-27 06:43:46.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-10-27 06:43:46.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827742</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.golfclubsoff.com/titleist-910d3-driver-p-230.html]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751404</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-10-27 06:43:46.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-10-27 06:43:46.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827741</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.golfclubsoff.com/titleist-910d2-driver-p-286.html]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751404</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-10-27 06:43:46.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-10-27 06:43:46.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827740</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.golfmartdiscount.com/taylormade-r11-driver-p-239.html]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751404</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-10-27 06:43:46.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-10-27 06:43:46.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827739</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.golfzonediscount.com/ping/ping-driver/ping-g20-driver]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751404</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-10-27 06:43:46.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-10-27 06:43:46.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827737</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.golfzonediscount.com/titleist/titleist-driver/titleist-910d2-driver]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751404</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-10-27 06:43:46.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-10-27 06:43:46.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6827738</id>
    <property name="destinationPageTitle"
      ><![CDATA[//www.golfzonediscount.com/titleist/titleist-driver/titleist-910d3-driver]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751404</id>
    </property>
    <property name="creatorName"><![CDATA[huangml]]></property>
    <property name="creationDate">2011-10-27 06:43:46.000</property>
    <property name="lastModifierName"><![CDATA[huangml]]></property>
    <property name="lastModificationDate">2011-10-27 06:43:46.000</property>
  </object>
  <object class="Attachment" package="com.atlassian.confluence.pages">
    <id name="id">4227088</id>
    <property name="fileName"><![CDATA[default]]></property>
    <property name="contentType"><![CDATA[image/png]]></property>
    <property name="content" class="SpaceDescription" package="com.atlassian.confluence.spaces">
      <id name="id">786456</id>
    </property>
    <property name="creatorName"><![CDATA[virtix]]></property>
    <property name="creationDate">2009-11-23 15:14:38.000</property>
    <property name="lastModifierName"><![CDATA[virtix]]></property>
    <property name="lastModificationDate">2009-11-23 15:14:38.000</property>
    <property name="fileSize">3105</property>
    <property name="comment"/>
    <property name="attachmentVersion">2</property>
  </object>
  <object class="Attachment" package="com.atlassian.confluence.pages">
    <id name="id">4227096</id>
    <property name="fileName"><![CDATA[default]]></property>
    <property name="contentType"><![CDATA[image/png]]></property>
    <property name="content" class="SpaceDescription" package="com.atlassian.confluence.spaces">
      <id name="id">786456</id>
    </property>
    <property name="creatorName"><![CDATA[virtix]]></property>
    <property name="creationDate">2009-11-16 20:17:38.000</property>
    <property name="lastModifierName"><![CDATA[virtix]]></property>
    <property name="lastModificationDate">2009-11-16 20:17:38.000</property>
    <property name="fileSize">4952</property>
    <property name="comment"/>
    <property name="attachmentVersion">1</property>
    <property name="originalVersion" class="Attachment" package="com.atlassian.confluence.pages">
      <id name="id">4227088</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828311</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828312</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828307</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828308</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828309</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828310</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828303</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828304</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828305</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828306</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828299</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828300</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828301</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828302</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828296</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828295</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828298</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:47:45.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:47:45.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828297</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828292</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828291</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828294</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828293</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828288</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828287</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828290</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828289</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828284</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828283</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828286</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828285</id>
    <property name="destinationPageTitle"><![CDATA[//www.ukrolexreplica0.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828243</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828244</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828245</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828246</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828247</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828248</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828249</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828250</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828235</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828236</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828237</id>
    <property name="destinationPageTitle"><![CDATA[//www.ukrolexreplica0.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828238</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828239</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828240</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828241</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828242</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828228</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828227</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828230</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828229</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828232</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828231</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828234</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828233</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828220</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828219</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828222</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828221</id>
    <property name="destinationPageTitle"><![CDATA[//www.ukrolexreplica0.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828224</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828223</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828226</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828225</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828277</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828278</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828275</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828276</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828281</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828282</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:58.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:58.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828279</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828280</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828269</id>
    <property name="destinationPageTitle"><![CDATA[//www.ukrolexreplica0.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828270</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828267</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828268</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828273</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828274</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828271</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828272</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828262</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828261</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828260</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828259</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828266</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:26.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:26.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828265</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828264</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828263</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828254</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828253</id>
    <property name="destinationPageTitle"><![CDATA[//www.ukrolexreplica0.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828252</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828251</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828258</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828257</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828256</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828255</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:46:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:46:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828176</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828178</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828177</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828184</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828183</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828186</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828185</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828180</id>
    <property name="destinationPageTitle"><![CDATA[//www.ukrolexreplica0.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828179</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828182</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828181</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828159</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828160</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828161</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828155</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828156</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828157</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828158</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828210</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828209</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828208</id>
    <property name="destinationPageTitle"><![CDATA[//www.ukrolexreplica0.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828207</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828206</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828205</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828204</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373955</id>
    <property name="body"><![CDATA[{pagetree:root=Getting Started}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341188</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828203</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828218</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:45:03.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:45:03.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828217</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373960</id>
    <property name="body"><![CDATA[{pagetree:root=Getting Started}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341195</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828216</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373959</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=60%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Download|http://mxunit.org/download.cfm]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]

h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [File a Bug|http://code.google.com/p/mxunit/issues/list]

{table:border=0 width=100%}
{table-row}

{table-cell}
h6. Committers
* Marc	Esher
* Adam	Haskell
* Mike	Henke
* Randy	Merril
* Mike	Rankin
* Bill	Shelton
* Bob	Silverberg
{table-cell}
{table-cell}!einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}
{table-row}

{table}

{column}

{column:width=5%}

{column}


{column:width=35%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}

{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341194</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828215</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828214</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828213</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828212</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828211</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373962</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341198</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828193</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373968</id>
    <property name="body"><![CDATA[{pagetree:root=Getting Started}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341204</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828194</id>
    <property name="destinationPageTitle"><![CDATA[//www.ukrolexreplica0.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828191</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373966</id>
    <property name="body"><![CDATA[The MXUnit source code is available in a Subversion repository at Googlecode or as a git repository at Github.

SVN : http://mxunit.googlecode.com/svn/mxunit/trunk/

Github: http://github.com/virtix/mxunit

For Github users, make sure to look at other forks for specific features.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341202</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828192</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373967</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341203</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828189</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373972</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341209</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828190</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828187</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373970</id>
    <property name="body"><![CDATA[After installing MXUnit, move on to [Testing Basics|default:Testing Basics]. 

{pagetree:root=Getting Started}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341206</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828188</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:00.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:00.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828201</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolexreplicasstore.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373976</id>
    <property name="body"
      ><![CDATA[{rss:url=http://blog.mxunit.org/feeds/posts/default?alt=rss|max=30}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341213</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828202</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373977</id>
    <property name="body"><![CDATA[h2. *Installing the MXUnit Framework*

This should be the easiest part\! Download, unzip, and test ...&nbsp; You can also [watch the video|default:MXUnit Installation Video] if you're so inclined


1. [Download|http://mxunit.org/download.cfm] the latest version ...


!install-download.png!


2. Unzip to your webroot; e.g., C:\Inetpub\wwwroot\
{color:darkred}{*}Note:*{color} The MXUnit framework can exist in any ColdFusion context -        in the webroot or in the custom tags.
{color:darkred}{*}However{*}{color},        The examples assume installation directly under the webroot.

!install-unzip.png!


3. Test the install by pointing your web browser to the installation; e.g., [http://localhost:8500/mxunit/index.cfm|http://localhost:8500/mxunit/index.cfm] You should see this:

 !install-test.png!


4. Write some good clean code that works.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341214</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828199</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828200</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373975</id>
    <property name="body"><![CDATA[{pagetree:root=Advanced Testing (TDD Kung Fu!)}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341212</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828197</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828198</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828195</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828196</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:43:22.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:43:22.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373979</id>
    <property name="body"><![CDATA[{html}
<center>

	<!-- the comment and script is used to workaround the KB912945 patch -->
	<!--[if gte IE 6]> <comment id="to_be_rewritten"> <![endif]-->
	<OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" WIDTH="718" HEIGHT="541" id="movie">
	<PARAM NAME=movie VALUE="mxunit-install3.swf"> 
	<PARAM NAME=quality VALUE=high>
	<PARAM NAME=bgcolor VALUE=#FFFFFF>
	<EMBED src="http://mxunit.s3.amazonaws.com/video/mxunit-install3.swf" quality=high bgcolor=#FFFFFF WIDTH="718" HEIGHT="541" NAME="movie" ALIGN="" TYPE="application/x-shockwave-flash" PLUGINSPAGE="http://www.macromedia.com/go/getflashplayer"></EMBED>
	</OBJECT>
	</comment><script language="Javascript" src="ieupdate.js"></script>

</center> 
{html}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341216</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828108</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828107</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373986</id>
    <property name="body"><![CDATA[(Status:DRAFT)

!http://i905.photobucket.com/albums/ac259/virtix/customLogo.png!

Formerly known as MightyMock, MXUnit offier a built-in, simple, lightweight framework for mocking component interactions. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the next section. ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341224</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828110</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373989</id>
    <property name="body"><![CDATA[(Status:DRAFT)

!http://i905.photobucket.com/albums/ac259/virtix/customLogo.png|align=right!

Formerly known as MightyMock, MXUnit offier a built-in, simple, lightweight framework for mocking component interactions. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the next section. ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341227</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828109</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373988</id>
    <property name="body"><![CDATA[(Status:DRAFT)

!>http://i905.photobucket.com/albums/ac259/virtix/customLogo.png!

Formerly known as MightyMock, MXUnit offier a built-in, simple, lightweight framework for mocking component interactions. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the next section. ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341226</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828112</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373983</id>
    <property name="body"><![CDATA[(Status:DRAFT)

Formerly known as MightyMock, MXUnit offier a built-in, simple, lightweight framework for mocking component interactions. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the next section. 

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341221</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828111</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373982</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341220</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828114</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373985</id>
    <property name="body"><![CDATA[(Status:DRAFT)

[IMG]http://i905.photobucket.com/albums/ac259/virtix/customLogo.png[/IMG]

Formerly known as MightyMock, MXUnit offier a built-in, simple, lightweight framework for mocking component interactions. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the next section. 

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341223</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828113</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828116</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828115</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828118</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373997</id>
    <property name="body"><![CDATA[(Status:DRAFT)

!http://i905.photobucket.com/albums/ac259/virtix/customLogo.png|align=left!

Formerly known as MightyMock, MXUnit offier a built-in, simple, lightweight framework for mocking component interactions. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the next section. 

*Prefer or already use another mocking framework like MockBox?* No problem! When using MXUnit's mocking syntax, you can tell it to use the mocking framework of your choice.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341235</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828117</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828120</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373991</id>
    <property name="body"><![CDATA[(Status:DRAFT)

!http://i905.photobucket.com/albums/ac259/virtix/customLogo.png|align=left!

Formerly known as MightyMock, MXUnit offier a built-in, simple, lightweight framework for mocking component interactions. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the next section. ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341229</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828119</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828122</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828121</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828091</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828092</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828093</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374004</id>
    <property name="body"><![CDATA[h3. Mocking

If your dependency does not return any data, but rather _does{_}something (returns void), you will want to verify that it was called, but maybe you don't want to incur side-effects, such as emails or logging:

{color:#800000}<cffunction{color}{color:#800000}name={color}{color:#0000ff}"myMethod"{color}{color:#800000}>{color}
{color:#800000}&nbsp;&nbsp; &nbsp;{color}{color:#800000}<cfargument{color}{color:#800000}name={color}{color:#0000ff}"foo"{color}{color:#800000}/>{color}

 {color:#800000}&nbsp;&nbsp; &nbsp;{color}{color:#800000}<cfset{color}myOtherComponent.writeToLog({color:#0000ff}'Hello.'{color}){color:#800000}/>{color}

 {color:#800000}_&nbsp;&nbsp; &nbsp;_{color}{color:#999999}_<\!--\- do a bunch of other stuff ... \--->_{color}{color:#800000}&nbsp;&nbsp; &nbsp;{color}{color:#800000}<cfset{color}myOtherComponent.writeToLog({color:#0000ff}'Good bye.'{color}){color:#800000}/>{color}

{color:#800000}</cffunction>{color}

A mock for this would like something like :

{color:#800000}<cffunction{color}{color:#800000}name={color}{color:#0000ff}"testMyComponent"{color}{color:#800000}>{color}

 {color:#800000}_&nbsp;&nbsp; &nbsp;_{color}{color:#999999}_<\!--\- Create the  mock \--->_{color}{color:#800000}&nbsp;&nbsp; &nbsp;{color}{color:#800000}<cfset{color} myMock=mock({color:#0000ff}'MyOtherComponent'{color}){color:#b84747}/>{color}

 {color:#808080}_<\!--\- Define Behavior \--->_{color}

 {color:#800000}<cfset{color} myMock.writeToLog ({color:#0000ff}'Hello.'{color}){color:#800000}/>{color}

 {color:#800000}<cfset{color} myMock.writeToLog ({color:#0000ff}'Good Bye.'{color}){color:#800000}/>{color}

 {color:#800000}<cfset{color} myMock.setMyOtherComponent(mock) {color:#800000}/>{color}

 {color:#808080}_<\!--\- Exercise MyComponent \--->_{color}

 {color:#800000}<cfset{color} myMock.myMethod({color:#0000ff}'foo'{color}){color:#800000}/>{color}

 {color:#808080}_<\!--\- Verify \--->_{color}

 {color:#800000}<cfset{color} myMock.verify().writeToLog ({color:#0000ff}'Hello.'{color}){color:#800000}/>{color}

 {color:#800000}<cfset{color} myMock.verify().writeToLog ({color:#0000ff}'Good Bye.'{color}){color:#800000}/>{color}

{color:#800000}</cffunction>{color}

*Note{*}that there is no returns()method chained to the end of of the writeToLog()behavior definition. This is a shortcut and is the same as myMock.writeToLog ({color:#0000ff}...{color}).returns().It saves you 9 or so keystrokes. The reason being is that true "mocks" typically do not return data.

If you are not overly concerned with the literal details of the method calls, you could simplify this with{_}argument patterns_:

{color:#800000}<cffunction{color}{color:#800000}name={color}{color:#0000ff}"testMyComponent"{color}{color:#800000}>{color}

 {color:#808080}_<\!--\- Create the mock \--->_{color}

 {color:#800000}<cfset{color} myMock=mock({color:#0000ff}'MyOtherComponent'{color}){color:#b84747}/>{color}

 {color:#808080}_<\!--\- Define Behavior \--->_{color}

 {color:#800000}<cfset{color} myMock.writeToLog({color:#0000ff}'{string}'{color}).returns(){color:#800000}/>{color}

 {color:#800000}<cfset{color}myComponent.setMyOtherComponent(mock) {color:#800000}/>{color}

 {color:#808080}_<\!--\- Exercise MyComponent \--->_{color}

 {color:#800000}<cfset{color}myComponent.myMethod({color:#0000ff}'foo'{color}){color:#800000}/>{color}

 {color:#808080}_<\!--\- Verify \--->_{color}

 {color:#800000}<cfset{color} myMock.verifyTimes({color:#ff0a0a}2{color}).writeToLog({color:#0000ff}'{string}'{color}){color:#800000}/>{color}

{color:#800000}</cffunction>{color}

In the above example, we use the MightyMock keyword, {string}, instead of literal arguments.

What happens under the hood is that when the method is called by the component that is passing in any _single string argument_ as a parameter, the defined mock behavior is invoked.

MightyMock's argument patterns support all common CFML data types. The intent is that it's identical to the typeattribute of CFARGUMENT : {numeric},{any},{query},{struct},{array}, etc.  See Argument Matching in the next section for more detail.

The above examples create _Fast Mocks_, that is mocks that can be created quickly but may not have the desired _type{_}you need; that is, what's specified in the first parameter. To create a _Type Safe_ mock, simply tell MightyMock that's what you want:

{color:#800000}<cfset{color}mock=createObject({color:#0000ff}'component'{color},{color:#0000ff}'MightyMock'{color}).init({color:#0000ff}'MyOtherComponent',{color}{color:#0000ff}{*}{_}true{_}{*}{color}){color:#b84747}/>{color}

The second parameter  in the constructor tells MightyMock to return an object of the same type specified in the first parameter. If an object of that type cannot be found, and instantiation exception will be thrown.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341242</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828094</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828095</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828096</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5373999</id>
    <property name="body"><![CDATA[(Status:DRAFT)

!http://i905.photobucket.com/albums/ac259/virtix/customLogo.png|align=left!

Formerly known as MightyMock, MXUnit offier a built-in, simple, lightweight framework for mocking component interactions. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the next section. 

*Prefer or already use another mocking framework like MockBox?* No problem! When using MXUnit's mocking syntax, you can tell it to use the mocking framework of your choice.

{pagetree: root=Mocking and Stubbing}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341237</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828097</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828098</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828099</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:31.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:31.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828100</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374011</id>
    <property name="body"><![CDATA[Syntax: {code}verifyType([int count]).mockedMethod( [params] );{code}

Types: verifyAtLeast(int count), verifyAtMost(int count), verifyTimes(int count), verifyOnce(), verifyNever(), verify().  Note, verifyOnce(), verifyNever(), and verify() do not require any parameters.

Simple verification:

{code} myMock.verify().foo(1) {code}


This is the same as {code}myMock.verifyOnce().foo(1);{code} or {code}myMock.verifyTimes(1).foo(1);{code}



Chaining is also possible like this (assuming foo(1) was invoked 5 times):



{code: title=Verify.cfc} 
myMock.verifyTimes(5).
	foo(1).
	verifyAtLeast(1).foo(1).
	verifyAtMost(5) .foo(1) ;
	
{code}
	
	



This can very powerful when verifying multiple mocked methods in the component under test.


]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341251</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828101</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828102</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374013</id>
    <property name="body"><![CDATA[Verifying Order _(NOTE: Although built into MightyMock, this has not yet been wired into MXUnit)_

Frequently you will want to know if and how your mock executed and compare that with expectations. MightyMock gives you the ability to intuitively establish expectations and perform flexible verification. Instead of wiring this into a mock, we create an OrderedExpectation object and pass in the mocks to be verified:

{code}
<cfset mock.one().returns() />
<cfset mock.two().returns() />
<cfset mock.three().returns() />

<!--- Inject mock into component and run it ... --->



<!--- Ok, now let's see what happened:--->

<cfset order = ordered(mock) />

<cfset order.one().
	two().
	three().
	verify() />
{code}

If your collaborator invokes several different mocks, simply pass in a list of the mocks to be verified into the OrderedExpecation constructor. For example, if your collaborator does something like this:


{code}
<cffunction name="myMethod">
  <cfset myFirstObj.doSomething('foo') />
  <cfset mySecondObj.doSomethingElse('bar') />
  <cfset myThirdObj.doSomethingDifferent('foobar') />
</cffunction>
{code}

After creating mocks for myFirstObj, mySecondObj, and myThirdObj, you can verify the order of the call like this:

{code}
<cfset order = createObject('component','mightymock.OrderedExpectation').

init( myFirstObj, mySecondObj, myThirdObj) />

<cfset order.doSomething('foo').
	doSomethingElse('bar').
	doSomethingDifferent('foobar').
	verify() />
{code}
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341254</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828103</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374006</id>
    <property name="body"><![CDATA[h3. Mocking

If your dependency does not return any data, but rather _does{_}something (returns void), you will want to verify that it was called, but maybe you don't want to incur side-effects, such as emails or logging:

{code:title=MyComponentTest.cfc}
<cffunction name="myMethod">
    <cfargument name="foo" />

    <cfset myOtherComponent.writeToLog('Hello.') />

    <!--- do a bunch of other stuff ... --->
    <cfset myOtherComponent.writeToLog('Good bye.') />

</cffunction>
{code}


A mock for this would like something like :


{code:title=MyMockTest.cfc}
<cffunction name="testMyComponent">

    <!--- Create the mock --->
    <cfset mock=createObject('component','MightyMock').init('MyOtherComponent') />

<!--- Define Behavior --->

<cfset mock.writeToLog ('Hello.') />

<cfset mock.writeToLog ('Good Bye.') />

<cfset myComponent.setMyOtherComponent(mock) />

<!--- Exercise MyComponent --->

<cfset myComponent.myMethod('foo') />

<!--- Verify --->

<cfset mock.verify().writeToLog ('Hello.') />

<cfset mock.verify().writeToLog ('Good Bye.') />

</cffunction>
{code}
*Note{*}that there is no returns()method chained to the end of of the writeToLog()behavior definition. This is a shortcut and is the same as myMock.writeToLog ({color:#0000ff}...{color}).returns().It saves you 9 or so keystrokes. The reason being is that true "mocks" typically do not return data.

If you are not overly concerned with the literal details of the method calls, you could simplify this with{_}argument patterns_:

{color:#800000}<cffunction{color}{color:#800000}name={color}{color:#0000ff}"testMyComponent"{color}{color:#800000}>{color}

 {color:#808080}_<\!\-_{color}{color:#808080}_\-\- Create the mock \-\-_{color}{color:#808080}\->{color}

 {color:#800000}<cfset{color} myMock=mock({color:#0000ff}'MyOtherComponent'{color}){color:#b84747}/>{color}

 {color:#808080}_<\!\-_{color}{color:#808080}_\-\- Define Behavior \-\-_{color}{color:#808080}\->{color}

 {color:#800000}<cfset{color} myMock.writeToLog({color:#0000ff}'{color}{string}{color:#0000ff}'{color}).returns(){color:#800000}/>{color}

 {color:#800000}<cfset{color}myComponent.setMyOtherComponent(mock) {color:#800000}/>{color}

 {color:#808080}_<\!\-_{color}{color:#808080}_\-\- Exercise MyComponent \-\-_{color}{color:#808080}\->{color}

 {color:#800000}<cfset{color}myComponent.myMethod({color:#0000ff}'foo'{color}){color:#800000}/>{color}

 {color:#808080}_<\!\-_{color}{color:#808080}_\-\- Verify \-\-_{color}{color:#808080}\->{color}

 {color:#800000}<cfset{color} myMock.verifyTimes({color:#ff0a0a}2{color}).writeToLog({color:#0000ff}'{color}{string}{color:#0000ff}'{color}){color:#800000}/>{color}

{color:#800000}</cffunction>{color}

In the above example, we use the MightyMock keyword, {string}, instead of literal arguments.

What happens under the hood is that when the method is called by the component that is passing in any _single string argument_ as a parameter, the defined mock behavior is invoked.

MightyMock's argument patterns support all common CFML data types. The intent is that it's identical to the typeattribute of CFARGUMENT : {numeric},{any},{query},{struct},{array}, etc.  See Argument Matching in the next section for more detail.

The above examples create _Fast Mocks_, that is mocks that can be created quickly but may not have the desired _type{_}you need; that is, what's specified in the first parameter. To create a _Type Safe_ mock, simply tell MightyMock that's what you want:

{color:#800000}<cfset{color}mock=createObject({color:#0000ff}'component'{color},{color:#0000ff}'MightyMock'{color}).init({color:#0000ff}'MyOtherComponent',{color}{color:#0000ff}{*}{_}true{_}{*}{color}){color:#b84747}/>{color}

The second parameter  in the constructor tells MightyMock to return an object of the same type specified in the first parameter. If an object of that type cannot be found, and instantiation exception will be thrown.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341244</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828104</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374007</id>
    <property name="body"><![CDATA[h3. Mocking

If your dependency does not return any data, but rather _does{_}something (returns void), you will want to verify that it was called, but maybe you don't want to incur side-effects, such as emails or logging:

{code:title=MyComponentTest.cfc}
<cffunction name="myMethod">
    <cfargument name="foo" />

    <cfset myOtherComponent.writeToLog('Hello.') />

    <!--- do a bunch of other stuff ... --->
    <cfset myOtherComponent.writeToLog('Good bye.') />

</cffunction>
{code}


A mock for this would like something like :


{code:title=MyMockTest.cfc}
<cffunction name="testMyComponent">

<!--- Create the mock --->
<cfset myMock=mock('MyOtherComponent') />

<!--- Define Behavior --->

<cfset myMock.writeToLog ('Hello.') />

<cfset myMock.writeToLog ('Good Bye.') />

<cfset myComponent.setMyOtherComponent(mock) />

<!--- Exercise MyComponent --->

<cfset myComponent.myMethod('foo') />

<!--- Verify --->

<cfset myMock.verify().writeToLog ('Hello.') />

<cfset myMock.verify().writeToLog ('Good Bye.') />

</cffunction>
{code}
*Note{*}that there is no returns()method chained to the end of of the writeToLog()behavior definition. This is a shortcut and is the same as myMock.writeToLog ({color:#0000ff}...{color}).returns().It saves you 9 or so keystrokes. The reason being is that true "mocks" typically do not return data.

If you are not overly concerned with the literal details of the method calls, you could simplify this with{_}argument patterns_:

{code: title=MyMockTest.cfc}
<cffunction name="testMyComponent">

<!--- Create the mock --->

<cfset myMock=mock('MyOtherComponent') />

<!--- Define Behavior --->

<cfset myMock.writeToLog('{string}').returns() />

<cfset myComponent.setMyOtherComponent(mock) />

<!--- Exercise MyComponent --->

<cfset myComponent.myMethod('foo') />

<!--- Verify --->

<cfset myMock.verifyTimes(2).writeToLog('{string}') />


</cffunction>

{code}

In the above example, we use the keyword, {string}, instead of literal arguments.

What happens under the hood is that when the method is called by the component that is passing in any _single string argument_ as a parameter, the defined mock behavior is invoked.

Argument patterns support all common CFML data types. The intent is that it's identical to the typeattribute of CFARGUMENT : {numeric} , {any} , {query} , {struct} , {array} , etc.  See Argument Matching in the next section for more detail.

The above examples create _Fast Mocks_, that is mocks that can be created quickly but may not have the desired _type{_}you need; that is, what's specified in the first parameter. To create a _Type Safe_ mock, simply tell MightyMock that's what you want:

{code}
<cfset myMock=mock('MyOtherComponent',true) />
{code}

The second parameter  in the constructor tells MXUnit to return an object of the same type specified in the first parameter. If an object of that type cannot be found, and instantiation exception will be thrown.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341245</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828105</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374008</id>
    <property name="body"><![CDATA[h3. Mocking

If your dependency does not return any data, but rather _does{_}something (returns void), you will want to verify that it was called, but maybe you don't want to incur side-effects, such as emails or logging:

{code:title=MyComponentTest.cfc}
<cffunction name="myMethod">
    <cfargument name="foo" />

    <cfset myOtherComponent.writeToLog('Hello.') />

    <!--- do a bunch of other stuff ... --->
    <cfset myOtherComponent.writeToLog('Good bye.') />

</cffunction>
{code}


A mock for this would like something like :


{code:title=MyMockTest.cfc}
<cffunction name="testMyComponent">

<!--- Create the mock --->
<cfset myMock=mock('MyOtherComponent') />

<!--- Define Behavior --->

<cfset myMock.writeToLog ('Hello.') />

<cfset myMock.writeToLog ('Good Bye.') />

<cfset myComponent.setMyOtherComponent(mock) />

<!--- Exercise MyComponent --->

<cfset myComponent.myMethod('foo') />

<!--- Verify --->

<cfset myMock.verify().writeToLog ('Hello.') />

<cfset myMock.verify().writeToLog ('Good Bye.') />

</cffunction>
{code}
*Note{*}that there is no returns()method chained to the end of of the writeToLog()behavior definition. This is a shortcut and is the same as myMock.writeToLog ({color:#0000ff}...{color}).returns().It saves you 9 or so keystrokes. The reason being is that true "mocks" typically do not return data.

If you are not overly concerned with the literal details of the method calls, you could simplify this with{_}argument patterns_:

{code: title=MyMockTest.cfc}
<cffunction name="testMyComponent">

<!--- Create the mock --->

<cfset myMock=mock('MyOtherComponent') />

<!--- Define Behavior --->

<cfset myMock.writeToLog('{string}').returns() />

<cfset myComponent.setMyOtherComponent(mock) />

<!--- Exercise MyComponent --->

<cfset myComponent.myMethod('foo') />

<!--- Verify --->

<cfset myMock.verifyTimes(2).writeToLog('{string}') />


</cffunction>

{code}

In the above example, we use the keyword, {string}, instead of literal arguments.

What happens under the hood is that when the method is called by the component that is passing in any _single string argument_ as a parameter, the defined mock behavior is invoked.

Argument patterns support all common CFML data types. The intent is that it's identical to the typeattribute of CFARGUMENT : \{numeric\} , \{any\} , \{query\} , \{struct\} , \{array\} , etc.  See Argument Matching in the next section for more detail.

The above examples create _Fast Mocks_, that is mocks that can be created quickly but may not have the desired _type{_}you need; that is, what's specified in the first parameter. To create a _Type Safe_ mock, simply tell MightyMock that's what you want:

{code}
<cfset myMock=mock('MyOtherComponent',true) />
{code}

The second parameter  in the constructor tells MXUnit to return an object of the same type specified in the first parameter. If an object of that type cannot be found, and instantiation exception will be thrown.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341246</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828106</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:39:54.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:39:54.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828142</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374021</id>
    <property name="body"
      ><![CDATA[{rss:url=http://blog.mxunit.org/feeds/posts/default?alt=rss|max=5}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341265</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828141</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374020</id>
    <property name="body"><![CDATA[(Status:DRAFT as of 3.26.10- Note that this feature is available in MXUnit 2.x and later)

!http://i905.photobucket.com/albums/ac259/virtix/customLogo.png|align=left!

Formerly known as MightyMock, MXUnit offers a built-in, simple, lightweight framework for mocking component interactions. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the next section. 

*Prefer or already use another mocking framework like MockBox?* No problem! When using MXUnit's mocking syntax, you can tell it to use the mocking framework of your choice.

{pagetree: root=Mocking and Stubbing}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341264</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828140</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828139</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374018</id>
    <property name="body"><![CDATA[(Status:DRAFT as of 3.26.10- Note that this feature is available in MXUnit 2.x and later)

!http://i905.photobucket.com/albums/ac259/virtix/customLogo.png|align=left!

Formerly known as MightyMock, MXUnit offier a built-in, simple, lightweight framework for mocking component interactions. It provides you the ability to easily and quickly define behaviors for dependencies, including both mocking and stubbing. When mocking, selective verification is possible, and when stubbing you can define return data or throw exceptions.

One slick feature is the ability to match invocations by argument pattern. This gives you the flexibility to specify either literal arguments or patterns in your mock. More on this in the next section. 

*Prefer or already use another mocking framework like MockBox?* No problem! When using MXUnit's mocking syntax, you can tell it to use the mocking framework of your choice.

{pagetree: root=Mocking and Stubbing}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341262</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828146</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374017</id>
    <property name="body"><![CDATA[

As you've seen previously, you can match arguments by data type. The available types are those that are commonly available in ColdFusion:
{code}
\{string\}, \{any\}, \{object\}, \{struct\}, \{udf\}, \{numeric\}, \{array\}, \{query\}, \{xml\}, \{boolean\}, \{binary\}, \{image\}
{code}

Using type argument matching, you can specify mock behavior like so:

{code}
<cfset myMock.doSomething('\{struct\}','\{image\}').returns(true) />
{code}

When the mock is invoked, the value true will be returned to the calling component only when an invocation matches this patter ... doSomething with any structure as the first parameter followed by any image as the second parameter.

Make sure to check out the next section on Wildcard Pattern Matching!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341261</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828145</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828144</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828143</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828150</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374029</id>
    <property name="body"
      ><![CDATA[{html-include:url=http://mxunit.s3.amazonaws.com/video/mxunit_ant_automation_demo.html}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341273</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828149</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828148</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828147</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828154</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828153</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828152</id>
    <property name="destinationPageTitle"><![CDATA[//www.ukrolexreplica0.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374023</id>
    <property name="body"><![CDATA[{rss:url=http://blog.mxunit.org/feeds/posts/default?alt=rss}
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341267</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828151</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:42:11.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:42:11.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374022</id>
    <property name="body"><![CDATA[{rss:url=http://blog.mxunit.org/feeds/posts/default?alt=rss|showTitlesOnly=true}
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341266</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828125</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374036</id>
    <property name="body"><![CDATA[In this tutorial, you will learn how to create an Ant build file that       executes MXUnit tests and generates JUnit reports

First off, you should be familiar with [Ant|http://ant.apache.org/]. If not, visit the       site, [download       Ant|http://ant.apache.org/bindownload.cgi] and play around with it to develop a basic understanding of       projects and tasks.

Ok, now that you're an expert let's kick it. We'll use the MXUnit tests       that we use to build the framework. These are located in the MXUnit       Framework download in /mxunit/tests. We will use the minimal required       options in order to run the Ant task. All optional task attributes can be       found [here|http://mxunit.org/doc/mxunit-ant-doc.html].

This tutorial assumes installation of MXUnit directly in the webroot;       e.g., /mxunit/

These are the basic steps to create the build that runs tests and       generates a report
# Create ant Ant build project
# Define the MXUnit Ant Task
# Tell MXUnit Which Tests You Want to Run
# Define The JUnit Report Task
# Run it ...
# View the report

&nbsp;

*1. Create an Ant build&nbsp;project*
Type the folling into a text file and save it as       /mxunit/tutorial/ant/build.xml. [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# </project>&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">
</project>
If you run just this in Ant you should see the following: This is what we expect to see. The build fails because there is no      target main defined. We will define this task next.

*2. Define The MXUnit Ant Task* Add the following into the build.xml file: [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">
  <mkdir dir="testresults" />

  <target name="main" depends="runtests" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                outputdir="testresults"
                verbose="true">
  </mxunittask>
</target>
</project>

This instructs Ant to use the MXUnit Ant Task located in /mxunit/ant/lib/mxunit-ant.jar. It then tells the MXUnit Ant Task to use         the localhost as the target server and the HTTP port 8500. You should change         these values to point to any installation of the MXUnit Framework. The outputdir is the location to where the test results will be saved. The         verbose attribute instructs the task to print additional information to         stdout.
If you run this, you should see the following: This is good. We have made contact with the MXUnit Ant Task. The build fails with a  java.lang.NullPointerException         because the task expects some tests to run and none were provided.

*3. Tell MXUnit Which Tests You Want to Run*
&nbsp;
Add the following to the build.xml file: [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<directory&nbsp;path="C:\ColdFusion8\wwwroot\mxunit\tests\framework"&nbsp;recurse="false"&nbsp;componentPath="mxunit.tests.framework"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">

  <mkdir dir="testresults" />

  <target name="main" depends="runtests" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                 outputdir="testresults"
                 verbose="true">
      <directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
  </mxunittask>
</target>
</project>

We inserted the directory element to         instruct the MXUnit Ant Task to run all the tests in the directory         specified by the path attribute. Note,         make sure your path attribute points to         the location of the /mxunit/tests/framework directory. When you run this,         the HttpAntRunner.cfc is called by the task. This runner executes the         tests using the mxunit framework and save the results as JUnitXml to the         location specified by the outputdir attribute.
When run, you should see the following:
You should now have 2 files in /mxunit/tutorial/ant/testresults/tmp/ called mxunitdirectorytestsuite_1.xml and testresults.properties.          The first one will be used by JUnit in  the next step to generate a report. The second one          can be used to summarize all the test results run, as you can have multiple directory elements in the task.
*4. Define The JUnit Report Task*
Type the following into the build.xml: [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests,junitreport"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<directory&nbsp;path="C:\ColdFusion8\wwwroot\mxunit\tests\framework"&nbsp;recurse="false"&nbsp;componentPath="mxunit.tests.framework"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# <target&nbsp;name="junitreport"&nbsp;description="Create&nbsp;a&nbsp;report&nbsp;for&nbsp;the&nbsp;rest&nbsp;result">&nbsp;&nbsp;
# &nbsp;<mkdir&nbsp;dir="junithtml"/>&nbsp;&nbsp;
# &nbsp;<junitreport&nbsp;todir="junithtml">&nbsp;&nbsp;
# &nbsp;&nbsp;<fileset&nbsp;dir="testresults">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<include&nbsp;name="*.xml"/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;</fileset>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;<report&nbsp;format="frames"&nbsp;todir="junithtml"&nbsp;styledir="../../ant/xsl"/>&nbsp;&nbsp;
# &nbsp;&nbsp;</junitreport>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# &nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">

  <mkdir dir="testresults" />

  <target name="main" depends="runtests,junitreport" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                 outputdir="testresults"
                 verbose="true">
      <directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
  </mxunittask>
</target>



<target name="junitreport" description="Create a report for the rest result">
 <mkdir dir="junithtml"/>
 <junitreport todir="junithtml">
  <fileset dir="testresults">
     <include name="*.xml"/>
   </fileset>
   <report format="frames" todir="junithtml" styledir="../../ant/xsl"/>
  </junitreport>
</target>

</project>


     We've a couple of new things here:
1. Created a new target for Ant (junitreport). This target is responsible for         generating the JUnit-style report.
2. Instructed the main target to call the runtests target first, then          the junitreport task after that.
The junitreport task is looking for the XML         files we created with the runtests task. Hence, we use the fileset element         to tell JUnit where to go to find the XML test results.
You'll also notice that we point         to the /mxunit/ant/xsl directory for the formatting information.         This is optional, and you may use any stylesheet you wish or the default         one in Ant's JUnit Report Task path.

*5. Run it ...* you should see this:
*6. View the report*

You can now browse /mxunit/tutorial/ant/junithtml/ and open index.html in your web browser. You     should see the following: An live interactive version of this report is available [here|http://mxunit.org/testresults/index.html].

You can take this process further by adding additional directory elements that      contain tests. You may also execute individual test cases using the testcase element. Details on the MXUnit Ant Task can be found [here|http://mxunit.org/doc/mxunit-ant-doc.html]. var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));try { var pageTracker = _gat._getTracker("UA-3137017-1"); pageTracker._trackPageview(); } catch(err) {}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341280</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828126</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374037</id>
    <property name="body"><![CDATA[In this tutorial, you will learn how to create an Ant build file that       executes MXUnit tests and generates JUnit reports

First off, you should be familiar with [Ant|http://ant.apache.org/]. If not, visit the       site, [download       Ant|http://ant.apache.org/bindownload.cgi] and play around with it to develop a basic understanding of       projects and tasks.

Ok, now that you're an expert let's kick it. We'll use the MXUnit tests       that we use to build the framework. These are located in the MXUnit       Framework download in /mxunit/tests. We will use the minimal required       options in order to run the Ant task. All optional task attributes can be       found [here|http://mxunit.org/doc/mxunit-ant-doc.html].

This tutorial assumes installation of MXUnit directly in the webroot;       e.g., /mxunit/

These are the basic steps to create the build that runs tests and       generates a report
# Create ant Ant build project
# Define the MXUnit Ant Task
# Tell MXUnit Which Tests You Want to Run
# Define The JUnit Report Task
# Run it ...
# View the report

&nbsp;

*1. Create an Ant build&nbsp;project*
Type the folling into a text file and save it as       /mxunit/tutorial/ant/build.xml. [
|http://mxunit.org/doc/index.cfm?doc=antjunit#][|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# </project>&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">
</project>
If you run just this in Ant you should see the following: This is what we expect to see. The build fails because there is no      target main defined. We will define this task next.

*2. Define The MXUnit Ant Task* Add the following into the build.xml file:

<?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;&nbsp;
# &nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">
  <mkdir dir="testresults" />

  <target name="main" depends="runtests" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                outputdir="testresults"
                verbose="true">
  </mxunittask>
</target>
</project>

This instructs Ant to use the MXUnit Ant Task located in /mxunit/ant/lib/mxunit-ant.jar. It then tells the MXUnit Ant Task to use         the localhost as the target server and the HTTP port 8500. You should change         these values to point to any installation of the MXUnit Framework. The outputdir is the location to where the test results will be saved. The         verbose attribute instructs the task to print additional information to         stdout.
If you run this, you should see the following: This is good. We have made contact with the MXUnit Ant Task. The build fails with a  java.lang.NullPointerException         because the task expects some tests to run and none were provided.

*3. Tell MXUnit Which Tests You Want to Run*
&nbsp;
Add the following to the build.xml file:

<?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<directory&nbsp;path="C:\ColdFusion8\wwwroot\mxunit\tests\framework"&nbsp;recurse="false"&nbsp;componentPath="mxunit.tests.framework"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">

  <mkdir dir="testresults" />

  <target name="main" depends="runtests" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                 outputdir="testresults"
                 verbose="true">
      <directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
  </mxunittask>
</target>
</project>

We inserted the directory element to         instruct the MXUnit Ant Task to run all the tests in the directory         specified by the path attribute. Note,         make sure your path attribute points to         the location of the /mxunit/tests/framework directory. When you run this,         the HttpAntRunner.cfc is called by the task. This runner executes the         tests using the mxunit framework and save the results as JUnitXml to the         location specified by the outputdir attribute.
When run, you should see the following:
You should now have 2 files in /mxunit/tutorial/ant/testresults/tmp/ called mxunitdirectorytestsuite_1.xml and testresults.properties.          The first one will be used by JUnit in  the next step to generate a report. The second one          can be used to summarize all the test results run, as you can have multiple directory elements in the task.
*4. Define The JUnit Report Task*
Type the following into the build.xml: [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests,junitreport"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<directory&nbsp;path="C:\ColdFusion8\wwwroot\mxunit\tests\framework"&nbsp;recurse="false"&nbsp;componentPath="mxunit.tests.framework"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# <target&nbsp;name="junitreport"&nbsp;description="Create&nbsp;a&nbsp;report&nbsp;for&nbsp;the&nbsp;rest&nbsp;result">&nbsp;&nbsp;
# &nbsp;<mkdir&nbsp;dir="junithtml"/>&nbsp;&nbsp;
# &nbsp;<junitreport&nbsp;todir="junithtml">&nbsp;&nbsp;
# &nbsp;&nbsp;<fileset&nbsp;dir="testresults">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<include&nbsp;name="*.xml"/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;</fileset>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;<report&nbsp;format="frames"&nbsp;todir="junithtml"&nbsp;styledir="../../ant/xsl"/>&nbsp;&nbsp;
# &nbsp;&nbsp;</junitreport>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# &nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">

  <mkdir dir="testresults" />

  <target name="main" depends="runtests,junitreport" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                 outputdir="testresults"
                 verbose="true">
      <directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
  </mxunittask>
</target>



<target name="junitreport" description="Create a report for the rest result">
 <mkdir dir="junithtml"/>
 <junitreport todir="junithtml">
  <fileset dir="testresults">
     <include name="*.xml"/>
   </fileset>
   <report format="frames" todir="junithtml" styledir="../../ant/xsl"/>
  </junitreport>
</target>

</project>


     We've a couple of new things here:
1. Created a new target for Ant (junitreport). This target is responsible for         generating the JUnit-style report.
2. Instructed the main target to call the runtests target first, then          the junitreport task after that.
The junitreport task is looking for the XML         files we created with the runtests task. Hence, we use the fileset element         to tell JUnit where to go to find the XML test results.
You'll also notice that we point         to the /mxunit/ant/xsl directory for the formatting information.         This is optional, and you may use any stylesheet you wish or the default         one in Ant's JUnit Report Task path.

*5. Run it ...* you should see this:
*6. View the report*

You can now browse /mxunit/tutorial/ant/junithtml/ and open index.html in your web browser. You     should see the following: An live interactive version of this report is available [here|http://mxunit.org/testresults/index.html].

You can take this process further by adding additional directory elements that      contain tests. You may also execute individual test cases using the testcase element. Details on the MXUnit Ant Task can be found [here|http://mxunit.org/doc/mxunit-ant-doc.html].var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));try { var pageTracker = _gat._getTracker("UA-3137017-1"); pageTracker._trackPageview(); } catch(err) {}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341281</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828123</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374034</id>
    <property name="body"><![CDATA[In this tutorial, you will learn how to create an Ant build file that       executes MXUnit tests and generates JUnit reports

First off, you should be familiar with [Ant|http://ant.apache.org/]. If not, visit the       site, [download       Ant|http://ant.apache.org/bindownload.cgi] and play around with it to develop a basic understanding of       projects and tasks.

Ok, now that you're an expert let's kick it. We'll use the MXUnit tests       that we use to build the framework. These are located in the MXUnit       Framework download in /mxunit/tests. We will use the minimal required       options in order to run the Ant task. All optional task attributes can be       found [here|http://mxunit.org/doc/mxunit-ant-doc.html].

This tutorial assumes installation of MXUnit directly in the webroot;       e.g., /mxunit/

These are the basic steps to create the build that runs tests and       generates a report
# Create ant Ant build project
# Define the MXUnit Ant Task
# Tell MXUnit Which Tests You Want to Run
# Define The JUnit Report Task
# Run it ...
# View the report

&nbsp;

*1. Create an Ant build&nbsp;project*
Type the folling into a text file and save it as       /mxunit/tutorial/ant/build.xml. [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# </project>&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">
</project>
If you run just this in Ant you should see the following: This is what we expect to see. The build fails because there is no      target main defined. We will define this task next.

*2. Define The MXUnit Ant Task* Add the following into the build.xml file: [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">
  <mkdir dir="testresults" />

  <target name="main" depends="runtests" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                outputdir="testresults"
                verbose="true">
  </mxunittask>
</target>
</project>

This instructs Ant to use the MXUnit Ant Task located in /mxunit/ant/lib/mxunit-ant.jar. It then tells the MXUnit Ant Task to use         the localhost as the target server and the HTTP port 8500. You should change         these values to point to any installation of the MXUnit Framework. The outputdir is the location to where the test results will be saved. The         verbose attribute instructs the task to print additional information to         stdout.
If you run this, you should see the following: This is good. We have made contact with the MXUnit Ant Task. The build fails with a  java.lang.NullPointerException         because the task expects some tests to run and none were provided.

*3. Tell MXUnit Which Tests You Want to Run*
&nbsp;
Add the following to the build.xml file: [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<directory&nbsp;path="C:\ColdFusion8\wwwroot\mxunit\tests\framework"&nbsp;recurse="false"&nbsp;componentPath="mxunit.tests.framework"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">

  <mkdir dir="testresults" />

  <target name="main" depends="runtests" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                 outputdir="testresults"
                 verbose="true">
      <directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
  </mxunittask>
</target>
</project>

We inserted the directory element to         instruct the MXUnit Ant Task to run all the tests in the directory         specified by the path attribute. Note,         make sure your path attribute points to         the location of the /mxunit/tests/framework directory. When you run this,         the HttpAntRunner.cfc is called by the task. This runner executes the         tests using the mxunit framework and save the results as JUnitXml to the         location specified by the outputdir attribute.
When run, you should see the following:
You should now have 2 files in /mxunit/tutorial/ant/testresults/tmp/ called mxunitdirectorytestsuite_1.xml and testresults.properties.          The first one will be used by JUnit in  the next step to generate a report. The second one          can be used to summarize all the test results run, as you can have multiple directory elements in the task.
*4. Define The JUnit Report Task*
Type the following into the build.xml: [view plain|http://mxunit.org/doc/index.cfm?doc=antjunit#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=antjunit#][print|http://mxunit.org/doc/index.cfm?doc=antjunit#][?|http://mxunit.org/doc/index.cfm?doc=antjunit#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="ISO-8859-1"?>&nbsp;&nbsp;
# &nbsp;&nbsp;
# <project&nbsp;name="MXUnitTask"&nbsp;basedir="."&nbsp;default="main">&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<mkdir&nbsp;dir="testresults"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="main"&nbsp;depends="runtests,junitreport"&nbsp;description="Main&nbsp;target&nbsp;for&nbsp;running&nbsp;the&nbsp;tests."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<target&nbsp;name="runtests"&nbsp;description="Make&nbsp;output&nbsp;directories&nbsp;and&nbsp;run&nbsp;the&nbsp;MXUnit&nbsp;task">&nbsp;&nbsp;
# &nbsp;&nbsp;<taskdef&nbsp;name="mxunittask"&nbsp;classname="org.mxunit.ant.MXUnitAntTask"&nbsp;&nbsp;classpath="../../ant/lib/mxunit-ant.jar"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<mxunittask&nbsp;server="localhost"&nbsp;port="8500"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputdir="testresults"&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose="true">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<directory&nbsp;path="C:\ColdFusion8\wwwroot\mxunit\tests\framework"&nbsp;recurse="false"&nbsp;componentPath="mxunit.tests.framework"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;</mxunittask>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# <target&nbsp;name="junitreport"&nbsp;description="Create&nbsp;a&nbsp;report&nbsp;for&nbsp;the&nbsp;rest&nbsp;result">&nbsp;&nbsp;
# &nbsp;<mkdir&nbsp;dir="junithtml"/>&nbsp;&nbsp;
# &nbsp;<junitreport&nbsp;todir="junithtml">&nbsp;&nbsp;
# &nbsp;&nbsp;<fileset&nbsp;dir="testresults">&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<include&nbsp;name="*.xml"/>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;</fileset>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;<report&nbsp;format="frames"&nbsp;todir="junithtml"&nbsp;styledir="../../ant/xsl"/>&nbsp;&nbsp;
# &nbsp;&nbsp;</junitreport>&nbsp;&nbsp;
# </target>&nbsp;&nbsp;
# &nbsp;&nbsp;
# </project>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MXUnitTask" basedir="." default="main">

  <mkdir dir="testresults" />

  <target name="main" depends="runtests,junitreport" description="Main target for running the tests." />

  <target name="runtests" description="Make output directories and run the MXUnit task">
  <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask"  classpath="../../ant/lib/mxunit-ant.jar" />
  <mxunittask server="localhost" port="8500"
                 outputdir="testresults"
                 verbose="true">
      <directory path="C:\ColdFusion8\wwwroot\mxunit\tests\framework" recurse="false" componentPath="mxunit.tests.framework" />
  </mxunittask>
</target>



<target name="junitreport" description="Create a report for the rest result">
 <mkdir dir="junithtml"/>
 <junitreport todir="junithtml">
  <fileset dir="testresults">
     <include name="*.xml"/>
   </fileset>
   <report format="frames" todir="junithtml" styledir="../../ant/xsl"/>
  </junitreport>
</target>

</project>


     We've a couple of new things here:
1. Created a new target for Ant (junitreport). This target is responsible for         generating the JUnit-style report.
2. Instructed the main target to call the runtests target first, then          the junitreport task after that.
The junitreport task is looking for the XML         files we created with the runtests task. Hence, we use the fileset element         to tell JUnit where to go to find the XML test results.
You'll also notice that we point         to the /mxunit/ant/xsl directory for the formatting information.         This is optional, and you may use any stylesheet you wish or the default         one in Ant's JUnit Report Task path.

*5. Run it ...* you should see this:
*6. View the report*

You can now browse /mxunit/tutorial/ant/junithtml/ and open index.html in your web browser. You     should see the following: An live interactive version of this report is available [here|http://mxunit.org/testresults/index.html].

You can take this process further by adding additional directory elements that      contain tests. You may also execute individual test cases using the testcase element. Details on the MXUnit Ant Task can be found [here|http://mxunit.org/doc/mxunit-ant-doc.html].var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));try { var pageTracker = _gat._getTracker("UA-3137017-1"); pageTracker._trackPageview(); } catch(err) {}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341278</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828124</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828129</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828130</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828127</id>
    <property name="destinationPageTitle"><![CDATA[//www.rolex-replica-uk.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374030</id>
    <property name="body"
      ><![CDATA[{html-include:url=http://mxunit.s3.amazonaws.com/video/mxunit_ant_automation_demo.swf}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341274</id>
    </property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828128</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828133</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828134</id>
    <property name="destinationPageTitle"><![CDATA[//www.cheapsaleuk2.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828131</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:40:14.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:40:14.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828132</id>
    <property name="destinationPageTitle"><![CDATA[//www.gucci-replica-bags.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828137</id>
    <property name="destinationPageTitle"><![CDATA[//www.breitling1replica.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828138</id>
    <property name="destinationPageTitle"><![CDATA[//www.replicawatches0.co.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828135</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="OutgoingLink" package="com.atlassian.confluence.links">
    <id name="id">6828136</id>
    <property name="destinationPageTitle"><![CDATA[//www.louisvuitton-bags.org.uk/]]></property>
    <property name="destinationSpaceKey"><![CDATA[http]]></property>
    <property name="sourceContent" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
    <property name="creatorName"><![CDATA[helen]]></property>
    <property name="creationDate">2011-11-04 07:41:05.000</property>
    <property name="lastModifierName"><![CDATA[helen]]></property>
    <property name="lastModificationDate">2011-11-04 07:41:05.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5670833</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=%22%22the+url+for+your+project+has+not+been+defined%2C+edit+ithe+CFEclipse+properties+for+this+project+and+enter+the+URl+for+this+file&rls=com.microsoft:en-us:IE-SearchBox&ie=UTF-8&oe=UTF-8&sourceid=ie7&rlz=1I7GFRD_en]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-10-04 20:08:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-10-04 20:08:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783219</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}In the first installment, I showed how to get Jenkins set up and connected to your SVN  server. In this entry, I'll demonstrate how to run your MXUnit tests in a Jenkins  project.

h2. Assumptions


I'm assuming you successfully [completed the prior step|default:Continuous Integration -- ANT - The Glue between Jenkins and your Tests] and can run your tests from ANT, either within your IDE or at the command line. Don't bother proceeding until you've done so.

h2. Configuring ANT within Jenkins

Jenkins needs to know where your ANT install lives. If you haven't downloaded  ANT, do so now, unzip it, and put it somewhere. Then, copy the path to that  location.

From your main Jenkins screen, click on "Manage Jenkins", then "Configure  System". More quickly, type "configure" into the search box and it'll take you  to the same place. Go down to the "ANT" section, click "Add", and paste that  path to your ANT install. Note, this is NOT the "bin" directory... just the ANT  root. Give it a name, like "ANT 1.7" or whatever. Click Save

*Jenkins will not treat this ANT location as the default  location*. You must (at least, I did) have to explicitly choose this ANT  instance for every project setup. Just so you know. This tripped me up at  first.

h2. Configuring your project's test runner step

Navigate to your project, then click "Configure". More quickly, you can  search for your project by name, then search for "configure", and you'll get to  the same screen.

Find the "Build" section. click "Add build step". Select "Invoke ANT". Select  the ANT instance from the dropdown list of installed ANTs. In the "target"  field, type the name of the target in your ANT build file that you use to run  tests. For example, "runTests"

This *might* be all you need. So you could save this and try to do a  build now, and see what happens.

h2. Test Runner Step Configuration, Part 2: Properties

Now's a good time to talk about the weirdo nature of ColdFusion projects with  respect to CI. Remember, you checked out your project from Subversion into  Jenkins's workspace, but that's not the code you care about... your code already  lives on a DEV server and is updated by some other means. However, there is one  file that gets checked out that you do care about: Your ANT build file.

When Jenkins runs your ANT file, it'll be running the one from its workspace.  And then that build file will be executing its tests against the components you  specify on your DEV server. Got it? Good. Confused? I know.

It's possible that your build file's runTests target might need some  properties that are possibly set in a properties file that you don't keep in SVN  or which otherwise you need to override. For example, for MXUnit itself, our  build file looks at a file named "unames.properties" to get some configuration  information such as server name, port, usernames/passwords, webroot location,  and some other things. This is NOT kept in SVN b/c it's unique for each MXUnit  contributor. When MXUnit's runTests is run, it tries to read that properties  file and then set the server, port, and webroot properties. But since that file  isn't checked out from SVN, it's not visible in Jenkins's workspace and thus  those properties never get set. It's super easy to get around this though\!

In your ANT step's "Advanced" tab, you'll see a "properties" box. In here,  you can type in any properties in name=value format, linebreak-delimited, and  poof, properties problem solved. For example, here's what I put into the  properties box for the MXUnit job:

server=localhost port=80 webroot=c:/inetpub/wwwroot

h2. Configuring your project's JUnit XML Output

In that sample ANT build file above, you saw how easy it was for MXUnit to  spit out JUnit-compliant XML. Basically, no matter where your tests actually run  ([http://blah/whatever/HttpAntRunner.cfc|http://blah/whatever/HttpAntRunner.cfc]),  your JUnit XML files will go in a directory relative to the build file that is  running. Got that? That means that, as discussed above, your JUnit xml files  will go in your Jenkins workspace somewhere. This is perfect, because that's  where Jenkins wants them to be.

For example, with the MXUnit build, the build file is at mxunit/build.xml. It  specifies a location for the JUnit xml output as something that evaluates to  tests/testresults/tmp/. So in the Jenkins configuration for the MXUnit job, I  specify the JUnit XML location as:

*tests/testresults/tmp/*.xml\*

That's it. So wherever your xml files go relative to your workspace root,  simply go to the "Post Build Action" section of your job configuration, check  the "Publish JUnit XML" checkbox, and enter in the path to your xml files, with  \*.xml, as I did above. Click save

h2. Re-saving ant.bat

{note}The following was true when I first set up Hudson with MXUnit, in two-thousand-aught-something. I have not had these problems since then but am keeping this information here in the event that it helps someone with the same problem{note}


After I got the MXUnit project all set up, I ran the build; it executed the  tests; Hudson read the JUnit XML (all tests passed). And then.... Failed. Failed?\!  WTF? WTF was failing? The Hudson console output (thank you, Hudson\!) read: "The  system cannot find the batch label specified".

This wasn't a Hudson problem. It wasn't an MXUnit problem. Turns out, it was  the ant.bat file giving me grief. That's right... the ant.bat that ships with the  eclipse ANT install. Perhaps had I been using a "proper" install, this wouldn't  have been the case. Nonetheless, I wasn't. So, how to fix it? Simple

Open up ant.bat in Textpad. Notice that it's in Unix format. Change the  format to "PC". Click Save.

Rerun the Hudson build. Oh Joy. Oh Rapture. A fully functioning test run with  test results. Let the CI begin.

h2.


{column}
{column:width=5%}

{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750462</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783216</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}

h1. Why ANT?


You won't get far using Jenkins and ColdFusion without ANT. ANT is the Hub. It's the glue.

Your ANT build will run your MXUnit Tests. Jenkins will run your ANT build, record the results of the tests, and perform post-build actions (notifications, etc) based on the results of those tests.

h1. Assumptions

We assume you have some tests and can successfully run them via either the Eclipse plugin or your web browser

We assume that if you are not familiar with ANT that you're willing to learn enough of it to get your CI environment set up. If you're not up for that, perhaps [simpler automation is for you|default:Simple Test Scheduling].


h1. A thorough description of running your tests with ANT


Bill's [original walkthrough|default:Using the Ant Task to Generate JUnit Reports] is very thorough. In addition, please see Bill's fantastic [8-minute video|default:Screencast - Using MXUnit and Ant for Build,Test, and Integration Automation - 8 min.] showing exactly how to run your MXUnit tests with ANT.

If you are new to ANT, I&nbsp; implore you to visit those links, especially if you're the type who doesn't like flailing about trying to make sense of foreign things.

Even if you simply read Bill's instructions, and watch the video, you'll gain enough familiarity with ANT and MXUnit to move on ot the next step


h1. Once you're familiar with running your tests with ANT


...Or, if you're the type who likes to jump right in

h2. Directory Structure


Your final directory structure will look something like the following. If your tests live somewhere else inside your app, that's OK... just make sure to adjust the paths in the build file to account for their location.

In the example below, files demoted with an asterisk \(*) are files that do not yet exist but which will when we're finished

{code}/App
  *build.xml
  /lib
   *mxunit-ant.jar
   other-whatever.jar
  /test
    *HttpAntRunner.cfc
    /testdir1
      SomeTest.cfc
    /testdir2
      SomeOtherTest.cfc
{code}

h2. Copy files from MXUnit to your app

You need the following three files to start:
# mxunit-ant.jar \-\- ANT will use this to communicate with ColdFusion
# HttpAntRunner.cfc \-\- This is the "endpoint"... ANT will make HTTP requests to this CFC, and that CFC will in turn run the MXUnit framework code which runs your tests
# build.xml \-\- This is your new ANT build file{*}What to put where*\# Create a directory in your app called "lib"
# Copy mxunit/ant/lib/mxunit-ant.jar into that lib directory
# Copy mxunit/samples/build.xml into your app's root, such that you end up with /app/build.xml
# Copy mxunit/samples/HttpAntRunner.cfc into your app's test root, such that you end up with /app/test/HttpAntRunner.cfcOpen up that HttpAntRunner.cfc after you copy it. Notice that it simply extends the framework version. While you *could* point directly to the framework version, you almost always want to point to your custom version, especially if you're using ORM, testing framework controllers, or otherwise need access to your app's Application scope

h2. Modify build.xml

The sample build.xml file which you copied is meant to be a good-enough skeleton to get you running your tests from ANT. It also contains example "svn update" and "dist"  targets for updating a directory from SVN and creating a zip file, respectively. More on those later.

For now, we need to run tests. To do this, you'll modify several of the properties in the ANT file to point to the correct names and locations for your project

If you're using Eclipse or another IDE which shows the structure of an ANT file, open the ANT view and drag your build file into it. It'll look something like this: !ant_view.PNG|thumbnail!



*In build.xml:*

# In the top-level project element, change the project name to your project&nbsp;
# In the *init* target, change the *application.name* property to the directory name of your project
# Next line, if necessary change the *test.dir.name* property to be the name of your tests directory
# A few lines down, change the *test.server* and *test.port* properties to match your local setup (these can change later)

h2. Run the "init" target

Now, From the ANT view in Eclipse, run the "init" target. In the console view, you'll see a dump of all the properties that will drive your ANT build. Most of these will be file system locations

{warning} *Do not proceed* until test.cfcpath and test.dir.location look correct. If they're not correct, modify the build file and make them so. {warning}
Here's what the console view will look like when you run *init*:

!ant_run_init.PNG|thumbnail!

h2. Run the "runtests" target

Assuming your paths are correct, you have brought the mxunit-ant.jar into your app's "lib" directory, and you have some tests living in your test location, now's the time to run them from ANT.
# In the ANT view, run the "runtests" target
# Look at the console view for outputYou will see a log of what the ANT task is doing as it communicates with ColdFusion. When finished, you'll see the results of your test run. Here's an example: !ant_runtests.PNG|thumbnail!


h1. Next Steps

Now that you have ANT running your tests, you're ready to hook this into the Jenkins CI server



{column}
{column:width=5%}




{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750459</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783229</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}

h1. Communicating Build Results


All of the information Jenkins provides is lovely; however, we're not interested in  monitoring the Hudson interface every time a build runs. Instead, we want to get  notified when things change. That's it: *when build status  changes*. For me, continuous integration is as much about communicating  results as it is about providing an easy, scheduled mechanism for running your  tests (we don't care about compiling and linking in CF applications, so that  core benefit of CI doesn't apply to us either).

Ideally, only interested parties would be notified on a change in build  status. For example, let's say a build runs at 8:00 AM, and all tests pass. It  runs again at 8:15 AM, and tests fail. What I want to happen is:
# Hudson looks at source control for the users who have committed code since  the last build
# Hudson notifies \*just\* those people that the build is now failing.
# Hudson does this either via email, instant message (SMS), or both.

Fortunately, this is all possible. Let's set it up.

h1. Configuring Email Settings

From the main Hudson screen, type "configure" in the search box

Scroll down to the bottom and find the E-mail notification section.

I'm using gmail in this case, so I plugged in my gmail credentials, using  "smtp.gmail.com" as the server. I'm keeping "default email suffix" blank since  this can't be computed (this would be more for corporate email accounts where  you can trust that the email would end up as "firstname" + "lastname" + default  email suffix, for example).

In the Advanced settings, I checked "use smtp authentication", entered my  email address into the username field, added my password, checked "use ssl", and  specified the port as 465

h1. Configuring SMS (Jabber) via GTalk

From the "manage Hudson" screen, click on Manage Plugins

go to "Available Plugins", and find the "Hudson Jabber notifier plugin".  Click things and install it. Restart if necessary.

Now, back in your Manage Hudson screen, you'll have a new section, right  above the Email section, for Jabber.

I entered my gmail address and password, and "talk.google.com" as the server.  That's it\!

h1. Noise Control

At the project level, you can also configure how noisy you want this  communication to be. Here's what that looks like: 

!hudson_notificationconfig.png|thumbnail,align=left!

From that image, you'll see that I can configure *when* *I want to be notified*... every build, just on change, etc. Thus,  to substantially reduce the noise from your scheduled builds, go into the  project and configure it to only notify via IM on status change. *This,  in my humble opinion, is gold.*

h1. Configuring Users

Now that the communication mechanisms are set up, we have to associate email  addresses with the subversion users. Quite possibly there's an easier way to do  this via some batch process, but as I'm just getting started with my Hudson  investigation, I haven't looked into it. So please don't take this as "the only  way" or "best practice", because I do not know that to be true.

For my setup for MXUnit, I linked it to SVN and when it updated and there  were changes, it created new a new user for any user that was associated with a  change. So, I committed some code to MXUnit, ran a Hudson build, and Hudson  added me as a user, silently.

To give the "marc.esher" user notification details:
# from the main Hudson screen I clicked on "people" then on "marc.esher". (You  can also get here if you know the username you want to configure by typing that  username in the "Search" box at the top of the screen)
# click Configure
# enter my email address
# since I installed the Jabber plugin, it also has a space for jabber  credentials. I entered my gmail address again.

h1. So what's all this get me?

After this configuration was finished, here's what I get:

Emails on build failure that look like this: 

!hudsonbuildfailure_email.png|thumbnail,align=left!

GTalk notifications on build failure that look like this: 

!hudsonbuildfailure_gtalk.png|thumbnail,align=left!

And corresponding messages for when things go back to normal.

Importantly, *what I don't get*: noise. I don't get notified  on every build via email. I don't have to constantly go to a website to check  the build status. I get notifications when I care about them: when things go  bad, and when things go from bad back to good.

h1. Summary

Continuous Integration is about communication. It's about noise control. And  so far I'm discovering that Hudson is performing admirably. You can configure  different methods of communication, all hooked into source control, with  different "strategies" (on every build, on every change, etc). I appreciate this  level of configurability. In addition, I was able to get all of this going  without reading a single page of documentation. I think that speaks to Hudson's  ease of use.


h1.





{column}
{column:width=5%}

{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750472</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783227</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}

h1. Communicating Build Results


All of the information Jenkins provides is lovely; however, we're not interested in  monitoring the Hudson interface every time a build runs. Instead, we want to get  notified when things change. That's it: *when build status  changes*. For me, continuous integration is as much about communicating  results as it is about providing an easy, scheduled mechanism for running your  tests (we don't care about compiling and linking in CF applications, so that  core benefit of CI doesn't apply to us either).

Ideally, only interested parties would be notified on a change in build  status. For example, let's say a build runs at 8:00 AM, and all tests pass. It  runs again at 8:15 AM, and tests fail. What I want to happen is:
# Hudson looks at source control for the users who have committed code since  the last build
# Hudson notifies \*just\* those people that the build is now failing.
# Hudson does this either via email, instant message (SMS), or both.

Fortunately, this is all possible. Let's set it up.

h1. Configuring Email Settings

From the main Hudson screen, type "configure" in the search box

Scroll down to the bottom and find the E-mail notification section.

I'm using gmail in this case, so I plugged in my gmail credentials, using  "smtp.gmail.com" as the server. I'm keeping "default email suffix" blank since  this can't be computed (this would be more for corporate email accounts where  you can trust that the email would end up as "firstname" + "lastname" + default  email suffix, for example).

In the Advanced settings, I checked "use smtp authentication", entered my  email address into the username field, added my password, checked "use ssl", and  specified the port as 465

h1. Configuring SMS (Jabber) via GTalk

From the "manage Hudson" screen, click on Manage Plugins

go to "Available Plugins", and find the "Hudson Jabber notifier plugin".  Click things and install it. Restart if necessary.

Now, back in your Manage Hudson screen, you'll have a new section, right  above the Email section, for Jabber.

I entered my gmail address and password, and "talk.google.com" as the server.  That's it\!

h1. Noise Control

At the project level, you can also configure how noisy you want this  communication to be. Here's what that looks like: !hudson_notificationconfig[3].png|thumbnail!

From that image, you'll see that I can configure *when* *I want to be notified*... every build, just on change, etc. Thus,  to substantially reduce the noise from your scheduled builds, go into the  project and configure it to only notify via IM on status change. *This,  in my humble opinion, is gold.*

h1. Configuring Users

Now that the communication mechanisms are set up, we have to associate email  addresses with the subversion users. Quite possibly there's an easier way to do  this via some batch process, but as I'm just getting started with my Hudson  investigation, I haven't looked into it. So please don't take this as "the only  way" or "best practice", because I do not know that to be true.

For my setup for MXUnit, I linked it to SVN and when it updated and there  were changes, it created new a new user for any user that was associated with a  change. So, I committed some code to MXUnit, ran a Hudson build, and Hudson  added me as a user, silently.

To give the "marc.esher" user notification details:
# from the main Hudson screen I clicked on "people" then on "marc.esher". (You  can also get here if you know the username you want to configure by typing that  username in the "Search" box at the top of the screen)
# click Configure
# enter my email address
# since I installed the Jabber plugin, it also has a space for jabber  credentials. I entered my gmail address again.

h1. So what's all this get me?

After this configuration was finished, here's what I get:

Emails on build failure that look like this: !hudsonbuildfailure_email[3].png|thumbnail!

GTalk notifications on build failure that look like this: !hudsonbuildfailure_gtalk[2].png|thumbnail!

And corresponding messages for when things go back to normal.

Importantly, *what I don't get*: noise. I don't get notified  on every build via email. I don't have to constantly go to a website to check  the build status. I get notifications when I care about them: when things go  bad, and when things go from bad back to good.

h1. Summary

Continuous Integration is about communication. It's about noise control. And  so far I'm discovering that Hudson is performing admirably. You can configure  different methods of communication, all hooked into source control, with  different "strategies" (on every build, on every change, etc). I appreciate this  level of configurability. In addition, I was able to get all of this going  without reading a single page of documentation. I think that speaks to Hudson's  ease of use.


h1.




{column}
{column:width=5%}

{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750470</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783225</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}

h1. Communicating Build Results


All of the information Jenkins provides is lovely; however, we're not interested in  monitoring the Hudson interface every time a build runs. Instead, we want to get  notified when things change. That's it: *when build status  changes*. For me, continuous integration is as much about communicating  results as it is about providing an easy, scheduled mechanism for running your  tests (we don't care about compiling and linking in CF applications, so that  core benefit of CI doesn't apply to us either).

Ideally, only interested parties would be notified on a change in build  status. For example, let's say a build runs at 8:00 AM, and all tests pass. It  runs again at 8:15 AM, and tests fail. What I want to happen is:
# Hudson looks at source control for the users who have committed code since  the last build
# Hudson notifies \*just\* those people that the build is now failing.
# Hudson does this either via email, instant message (SMS), or both.

Fortunately, this is all possible. Let's set it up.

h1. Configuring Email Settings

From the main Hudson screen, type "configure" in the search box

Scroll down to the bottom and find the E-mail notification section.

I'm using gmail in this case, so I plugged in my gmail credentials, using  "smtp.gmail.com" as the server. I'm keeping "default email suffix" blank since  this can't be computed (this would be more for corporate email accounts where  you can trust that the email would end up as "firstname" + "lastname" + default  email suffix, for example).

In the Advanced settings, I checked "use smtp authentication", entered my  email address into the username field, added my password, checked "use ssl", and  specified the port as 465

h1. Configuring SMS (Jabber) via GTalk

From the "manage Hudson" screen, click on Manage Plugins

go to "Available Plugins", and find the "Hudson Jabber notifier plugin".  Click things and install it. Restart if necessary.

Now, back in your Manage Hudson screen, you'll have a new section, right  above the Email section, for Jabber.

I entered my gmail address and password, and "talk.google.com" as the server.  That's it\!

h1. Noise Control

At the project level, you can also configure how noisy you want this  communication to be. Here's what that looks like:

From that image, you'll see that I can configure *when* *I want to be notified*... every build, just on change, etc. Thus,  to substantially reduce the noise from your scheduled builds, go into the  project and configure it to only notify via IM on status change. *This,  in my humble opinion, is gold.*

h1. Configuring Users

Now that the communication mechanisms are set up, we have to associate email  addresses with the subversion users. Quite possibly there's an easier way to do  this via some batch process, but as I'm just getting started with my Hudson  investigation, I haven't looked into it. So please don't take this as "the only  way" or "best practice", because I do not know that to be true.

For my setup for MXUnit, I linked it to SVN and when it updated and there  were changes, it created new a new user for any user that was associated with a  change. So, I committed some code to MXUnit, ran a Hudson build, and Hudson  added me as a user, silently.

To give the "marc.esher" user notification details:
# from the main Hudson screen I clicked on "people" then on "marc.esher". (You  can also get here if you know the username you want to configure by typing that  username in the "Search" box at the top of the screen)
# click Configure
# enter my email address
# since I installed the Jabber plugin, it also has a space for jabber  credentials. I entered my gmail address again.

h1. So what's all this get me?

After this configuration was finished, here's what I get:

Emails on build failure that look like this:

GTalk notifications on build failure that look like this:

And corresponding messages for when things go back to normal.

Importantly, *what I don't get*: noise. I don't get notified  on every build via email. I don't have to constantly go to a website to check  the build status. I get notifications when I care about them: when things go  bad, and when things go from bad back to good.

h1. Summary

Continuous Integration is about communication. It's about noise control. And  so far I'm discovering that Hudson is performing admirably. You can configure  different methods of communication, all hooked into source control, with  different "strategies" (on every build, on every change, etc). I appreciate this  level of configurability. In addition, I was able to get all of this going  without reading a single page of documentation. I think that speaks to Hudson's  ease of use.


h1.



{column}
{column:width=5%}

{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750468</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783237</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}

h1. Introduction


In an earlier post, I wrote about configuring notifications with Jenkins. This  is a follow-up post to demonstrate how to set up even more fine-grained  notification control using the Jenkins [Email Extension Plugin|http://wiki.Jenkins-ci.org//display/Jenkins/Email-ext+plugin].

In a nutshell, this provides granular control over:
* Who receives notifications at any event: build instability, build failure,  return to stability, continuing failure, etc.
* The subject of the notifications that are sent
* The content of notifications that are sent

By default, as of this writing, Jenkins's email notifications are fairly  basic. It will notify either a specified list of recipients or "culprits" when a  build fails. It will contain a generic subject and message, basically indicating  that a build failed, but with no details.

h2. The Email Extension Plugin: What it gets you

The Email Extension Plugin will enable you to control the content of the  subject and message to make them more meaningful, in addition to the more  granular controls I mentioned above.

Here's what your "Configure Project" screen will look like once you install  the plugin: !hudson_editableemailnotification.png|thumbnail!

Notice from this screenshot how you can add notifications on different  triggers: "Unstable", "Still Failing", etc. You can specify who should receive  messages for all of the available events. You can add a new event by selecting  one of the available options in the "Add a trigger" Select list.

Once you do so, you get checkboxes for the recipients to select. In addition,  you get fields for controlling the subject and message. You can specify all  manner of variables in there. My current setup at work for message content  is:

$PROJECT_DEFAULT_CONTENT

$FAILED_TESTS

$CHANGES

With these variables, on the events I have specified, I get to see what tests  have failed and what code changes have happened since the last build. Other  variables are available to you. As per Jenkins's conventions, simply click on the  \(?) icon beside the configuration to get all the details for how to use the  plugin. Here's a sample of what you currently get in the Help: !hudson_editablenotification_help.png|thumbnail!

h1. My Take

I wrote before about how Jenkins can significantly aide in noise control. I  think this plugin gets you even further. Consider the "default case": you get a  notification that a build failed. Now you have to go research why it failed.  This means going to your Jenkins URL, checking the failed tests, and determining  responsibility. However, with the plugin, I believe determining responsibility  cuts out a few steps: it lets you see a) what tests failed and b) what code  changed in a single email. All the information you and your team need to assign  responsibility is, potentially, in a single communication.

*So what?* I think the answer to that question resides  squarely in the answer to another question: *how much do you value your  time?*

h1. How to Install

You install this plugin just like you install other Jenkins plugins, thank God  (I Love Jenkins. I wish all software I worked with were as easy to extend.)
# click the Jenkins link, "Manage Jenkins", "Manage Plugins"
# in the "available" tab, select "Jenkins Email Extension Plugin"
# select it, and click checkboxes and OK buttons until it's installed. Restart  Jenkins

Once it's installed, you go into your project configuration and now you have  more "Advanced" buttons and such in the Notifications area than you had before.  From there, it's a matter of selecting your triggers and what you want to happen  on those triggers.

h1. Conclusion

If you want even more noise control, and more meaningful communication, take  the few minutes to install the Jenkins Email Extension Plugin.






{column}
{column:width=5%}

{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750480</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783236</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}
h1.

In an earlier post, I wrote about configuring notifications with Hudson. This  is a follow-up post to demonstrate how to set up even more fine-grained  notification control using the Hudson [Email Extension Plugin|http://wiki.hudson-ci.org//display/HUDSON/Email-ext+plugin].

In a nutshell, this provides granular control over:
* Who receives notifications at any event: build instability, build failure,  return to stability, continuing failure, etc.
* The subject of the notifications that are sent
* The content of notifications that are sent

By default, as of this writing, Hudson's email notifications are fairly  basic. It will notify either a specified list of recipients or "culprits" when a  build fails. It will contain a generic subject and message, basically indicating  that a build failed, but with no details.

h2. The Email Extension Plugin: What it gets you

The Email Extension Plugin will enable you to control the content of the  subject and message to make them more meaningful, in addition to the more  granular controls I mentioned above.

Here's what your "Configure Project" screen will look like once you install  the plugin:

Notice from this screenshot how you can add notifications on different  triggers: "Unstable", "Still Failing", etc. You can specify who should receive  messages for all of the available events. You can add a new event by selecting  one of the available options in the "Add a trigger" Select list.

Once you do so, you get checkboxes for the recipients to select. In addition,  you get fields for controlling the subject and message. You can specify all  manner of variables in there. My current setup at work for message content  is:

$PROJECT_DEFAULT_CONTENT

$FAILED_TESTS

$CHANGES

With these variables, on the events I have specified, I get to see what tests  have failed and what code changes have happened since the last build. Other  variables are available to you. As per Hudson's conventions, simply click on the  \(?) icon beside the configuration to get all the details for how to use the  plugin. Here's a sample of what you currently get in the Help:

h2. My Take

I wrote before about how Hudson can significantly aide in noise control. I  think this plugin gets you even further. Consider the "default case": you get a  notification that a build failed. Now you have to go research why it failed.  This means going to your Hudson URL, checking the failed tests, and determining  responsibility. However, with the plugin, I believe determining responsibility  cuts out a few steps: it lets you see a) what tests failed and b) what code  changed in a single email. All the information you and your team need to assign  responsibility is, potentially, in a single communication.

*So what?* I think the answer to that question resides  squarely in the answer to another question: *how much do you value your  time?*

h2. How to Install

You install this plugin just like you install other Hudson plugins, thank God  (I Love Hudson. I wish all software I worked with were as easy to extend.)
# click the Hudson link, "Manage Hudson", "Manage Plugins"
# in the "available" tab, select "Hudson Email Extension Plugin"
# select it, and click checkboxes and OK buttons until it's installed. Restart  Hudson

Once it's installed, you go into your project configuration and now you have  more "Advanced" buttons and such in the Notifications area than you had before.  From there, it's a matter of selecting your triggers and what you want to happen  on those triggers.

h2. Conclusion

If you want even more noise control, and more meaningful communication, take  the few minutes to install the Hudson Email Extension Plugin.

h1.


{column}
{column:width=5%}

{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750479</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783230</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}
h1. Communicating Build Results


All of the information Jenkins provides is lovely; however, we're not interested in  monitoring the Hudson interface every time a build runs. Instead, we want to get  notified when things change. That's it: *when build status  changes*. For me, continuous integration is as much about communicating  results as it is about providing an easy, scheduled mechanism for running your  tests (we don't care about compiling and linking in CF applications, so that  core benefit of CI doesn't apply to us either).

Ideally, only interested parties would be notified on a change in build  status. For example, let's say a build runs at 8:00 AM, and all tests pass. It  runs again at 8:15 AM, and tests fail. What I want to happen is:
# Hudson looks at source control for the users who have committed code since  the last build
# Hudson notifies \*just\* those people that the build is now failing.
# Hudson does this either via email, instant message (SMS), or both.

Fortunately, this is all possible. Let's set it up.

h1. Configuring Email Settings

From the main Hudson screen, type "configure" in the search box

Scroll down to the bottom and find the E-mail notification section.

I'm using gmail in this case, so I plugged in my gmail credentials, using  "smtp.gmail.com" as the server. I'm keeping "default email suffix" blank since  this can't be computed (this would be more for corporate email accounts where  you can trust that the email would end up as "firstname" + "lastname" + default  email suffix, for example).

In the Advanced settings, I checked "use smtp authentication", entered my  email address into the username field, added my password, checked "use ssl", and  specified the port as 465

h1. Configuring SMS (Jabber) via GTalk

From the "manage Hudson" screen, click on Manage Plugins

go to "Available Plugins", and find the "Hudson Jabber notifier plugin".  Click things and install it. Restart if necessary.

Now, back in your Manage Hudson screen, you'll have a new section, right  above the Email section, for Jabber.

I entered my gmail address and password, and "talk.google.com" as the server.  That's it\!

h1. Noise Control

At the project level, you can also configure how noisy you want this  communication to be. Here's what that looks like:

!hudson_notificationconfig.png|thumbnail!

From that image, you'll see that I can configure *when* *I want to be notified*... every build, just on change, etc. Thus,  to substantially reduce the noise from your scheduled builds, go into the  project and configure it to only notify via IM on status change. *This,  in my humble opinion, is gold.*

h1. Configuring Users

Now that the communication mechanisms are set up, we have to associate email  addresses with the subversion users. Quite possibly there's an easier way to do  this via some batch process, but as I'm just getting started with my Hudson  investigation, I haven't looked into it. So please don't take this as "the only  way" or "best practice", because I do not know that to be true.

For my setup for MXUnit, I linked it to SVN and when it updated and there  were changes, it created new a new user for any user that was associated with a  change. So, I committed some code to MXUnit, ran a Hudson build, and Hudson  added me as a user, silently.

To give the "marc.esher" user notification details:
# from the main Hudson screen I clicked on "people" then on "marc.esher". (You  can also get here if you know the username you want to configure by typing that  username in the "Search" box at the top of the screen)
# click Configure
# enter my email address
# since I installed the Jabber plugin, it also has a space for jabber  credentials. I entered my gmail address again.

h1. So what's all this get me?

After this configuration was finished, here's what I get:

Emails on build failure that look like this:

!hudsonbuildfailure_email.png|thumbnail!

GTalk notifications on build failure that look like this:

!hudsonbuildfailure_gtalk.png|thumbnail!

And corresponding messages for when things go back to normal.

Importantly, *what I don't get*: noise. I don't get notified  on every build via email. I don't have to constantly go to a website to check  the build status. I get notifications when I care about them: when things go  bad, and when things go from bad back to good.

h1. Summary

Continuous Integration is about communication. It's about noise control. And  so far I'm discovering that Hudson is performing admirably. You can configure  different methods of communication, all hooked into source control, with  different "strategies" (on every build, on every change, etc). I appreciate this  level of configurability. In addition, I was able to get all of this going  without reading a single page of documentation. I think that speaks to Hudson's  ease of use.


h1.







{column}
{column:width=5%}


{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750473</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783232</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}

h1. Communicating Build Results


All of the information Jenkins provides is lovely; however, we're not interested in  monitoring the Hudson interface every time a build runs. Instead, we want to get  notified when things change. That's it: *when build status  changes*. For me, continuous integration is as much about communicating  results as it is about providing an easy, scheduled mechanism for running your  tests (we don't care about compiling and linking in CF applications, so that  core benefit of CI doesn't apply to us either).

Ideally, only interested parties would be notified on a change in build  status. For example, let's say a build runs at 8:00 AM, and all tests pass. It  runs again at 8:15 AM, and tests fail. What I want to happen is:
# Hudson looks at source control for the users who have committed code since  the last build
# Hudson notifies \*just\* those people that the build is now failing.
# Hudson does this either via email, instant message (SMS), or both.

Fortunately, this is all possible. Let's set it up.

h1. Configuring Email Settings

From the main Hudson screen, type "configure" in the search box

Scroll down to the bottom and find the E-mail notification section.

I'm using gmail in this case, so I plugged in my gmail credentials, using  "smtp.gmail.com" as the server. I'm keeping "default email suffix" blank since  this can't be computed (this would be more for corporate email accounts where  you can trust that the email would end up as "firstname" + "lastname" + default  email suffix, for example).

In the Advanced settings, I checked "use smtp authentication", entered my  email address into the username field, added my password, checked "use ssl", and  specified the port as 465

h1. Configuring SMS (Jabber) via GTalk

From the "manage Hudson" screen, click on Manage Plugins

go to "Available Plugins", and find the "Hudson Jabber notifier plugin".  Click things and install it. Restart if necessary.

Now, back in your Manage Hudson screen, you'll have a new section, right  above the Email section, for Jabber.

I entered my gmail address and password, and "talk.google.com" as the server.  That's it\!

h1. Noise Control

At the project level, you can also configure how noisy you want this  communication to be. Here's what that looks like:

!hudson_notificationconfig.png|thumbnail!

From that image, you'll see that I can configure *when* *I want to be notified*... every build, just on change, etc. Thus,  to substantially reduce the noise from your scheduled builds, go into the  project and configure it to only notify via IM on status change. *This,  in my humble opinion, is gold.*

h1. Configuring Users

Now that the communication mechanisms are set up, we have to associate email  addresses with the subversion users. Quite possibly there's an easier way to do  this via some batch process, but as I'm just getting started with my Hudson  investigation, I haven't looked into it. So please don't take this as "the only  way" or "best practice", because I do not know that to be true.

For my setup for MXUnit, I linked it to SVN and when it updated and there  were changes, it created new a new user for any user that was associated with a  change. So, I committed some code to MXUnit, ran a Hudson build, and Hudson  added me as a user, silently.

To give the "marc.esher" user notification details:
# from the main Hudson screen I clicked on "people" then on "marc.esher". (You  can also get here if you know the username you want to configure by typing that  username in the "Search" box at the top of the screen)
# click Configure
# enter my email address
# since I installed the Jabber plugin, it also has a space for jabber  credentials. I entered my gmail address again.

h1. So what's all this get me?

After this configuration was finished, here's what I get:

Emails on build failure that look like this:

!hudsonbuildfailure_email.png|thumbnail!

GTalk notifications on build failure that look like this:

!hudsonbuildfailure_gtalk.png|thumbnail!

And corresponding messages for when things go back to normal.

Importantly, *what I don't get*: noise. I don't get notified  on every build via email. I don't have to constantly go to a website to check  the build status. I get notifications when I care about them: when things go  bad, and when things go from bad back to good.

h1. Summary

Continuous Integration is about communication. It's about noise control. And  so far I'm discovering that Hudson is performing admirably. You can configure  different methods of communication, all hooked into source control, with  different "strategies" (on every build, on every change, etc). I appreciate this  level of configurability. In addition, I was able to get all of this going  without reading a single page of documentation. I think that speaks to Hudson's  ease of use.




{column}
{column:width=5%}


{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750475</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783306</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}
h1. topic

blah

h2. topic 2

blah


{column}
{column:width=5%}

{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750552</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783308</id>
    <property name="body"><![CDATA[{section}

h1. {column:width=60%}

{toc:maxLevel=5}







h1. Introduction

For [CFMongoDB|https://github.com/marcesher/cfmongodb] , I wanted to run all tests on a schedule, either when a source code change was detected on github, or every day. I didn't want to have Mongo running all the time \-\- just when the tests needed to run. Ideally, my CI process would start Mongo, run the tests, and stop Mongo when finished.&nbsp;

Here's how I accomplished that.


h1. Installing MongoDB as a service


It was easiest for me to achieve this workflow by starting MongoDB as&nbsp; a Windows service because then I could simply use NET START and NET STOP commands rather than spinning up Mongod.exe and killing it.

Installing mongod as a service is as simple as:

{code}
mongod --install --logpath c:\path\to\some\logfile.log

{code}

h1. How you will be able to run this service in Jenkins, but can't quite yet

Long heading, I know. In Jenkins, configuring the "Build Steps" *should* look like this:
# Invoke Windows Batch Command \--&nbsp; "NET START 'Mongo DB'"
# ANT \-\- runtests
# Invoke Windows Batch Command \-\- "NET STOP 'Mongo DB'"

However, [due to this bug|https://jira.mongodb.org/browse/SERVER-1434] , stopping the mongo service throws an error which will cause the Jenkins build to fail. And that won't do.

h1. How to use ANT to start and stop the MongoDB Windows Service

asdfaf
{column}
{column:width=5%}

{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750554</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783310</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}
h1. Introduction

blah

h1. Prerequisites

blah

h1. Installing and configuring the git plugin in Jenkins


h1. Configuring your Jenkins job



{column}
{column:width=5%}

{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750556</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783311</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}
h1. Introduction

blah

h1. Prerequisites

blah

h1. Installing and configuring the git plugin in Jenkins


h1. Configuring your Jenkins job




{column}
{column:width=5%}


{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750557</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783077</id>
    <property name="body"><![CDATA[{toc}
h1. Executive Summary

*How changing a cfloop from a query loop to an index loop eliminated this application's memory problem*

A process in one of our internal tools takes a while to run. In this case, a specific instance was crashing due to Java Heap Space errors. The image on the top shows the heap \-\- with a snapshot taken while the application was in its death throes \-\- prior to fixing the problem. The image on the bottom shows the heap \-\- with a snapshot taken at roughly the same time during the application's run \-\- after making 2 small code changes. One server is dead; the other is alive. This is our story.

!https://s3.amazonaws.com/marc.esher/blogimages/deadserver_1.png!

h1. The code, before

This particular process works in two parts that both do the same kind of thing
# Query another database and fetch around 350k rows. Loop over those rows and "do stuff"
# Query another database and fetch around 950k rows. Loop over those rows and "do other stuff"

The app was crashing in that second part, right around 770k rows. Here's a snippet:
{code:title=The Killing Code}<cfloop query="records" startrow="#startRow#" endrow="#endRow#">
	<cfset recCount++ />
	<cfset row = doStuff(records, records.currentrow, recCount)>
	<cfset arrayAppend( rows, row )>
</cfloop>
{code}It's your standard cfloop over a query.

h1. Heap memory, before

Here's what it looked like in Eclipse MAT

As the app was dying, I took a heap dump (*[described here... it's easy|http://blog.mxunit.org/2010/01/using-eclipse-mat-to-track-down.html]*) and saw that a thing called coldfusion.runtime.CFDummyComponent was consuming over 800MB of Ram. Drilling down a few levels, I saw thousands of "coldfusion.tagext.lang.LoopTag". Drilling into one of those, I saw that for each loop tag, there were 5000 coldfusion.sql.imq.Row objects. 5000 because that's how many records we were looping over in that cfloop.

!https://s3.amazonaws.com/marc.esher/blogimages/deadserver_looptags.png!

h1. The code, after

After seeing that all of the memory was being consumed inside of loop tags, I looked at the two cfloops that were running. My thought process was something like, "If we're doing a cfloop query='', and if the memory analyzer is telling me that each loop is retaining thousands of objects related to that query, then how can I perform the same loop without giving the query to the loop?" It should come as no surprise that the answer was:

{code:language=cf|title=PartnerMigrationCommand.cfc|controls=true|linenumbers=true}<cfloop from="#startRow#" to="#endRow#" index="i">
	<cfset recCount++ />
	<cfset row = doStuff(records, i, recCount)>
	<cfset arrayAppend( rows, row )>
</cfloop>
{code}


h1. Heap memory, after

As proof that this code change had the intended effect, I ran the app again and took a heap snapshot at roughly the same point. The results were not surprising... not a single "looptag" in sight.

What's more, during the running of the application, *retained heap dropped from 882 MB to 52 MB*, simply by changing the cfloop style.

!https://s3.amazonaws.com/marc.esher/blogimages/deadserver_No_looptags.png!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750312</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783074</id>
    <property name="body"><![CDATA[{toc}

h1. Executive Summary

*How changing a cfloop from a query loop to an index loop completely this application's memory problem*

A process in one of our internal tools takes a while to run. In this case, a specific instance was crashing due to Java Heap Space errors. The image on the top shows the heap \-\- with a snapshot taken while the application was in its death throes \-\- prior to fixing the problem. The image on the bottom shows the heap \-\- with a snapshot taken at roughly the same time during the application's run \-\- after making 2 small code changes. One server is dead; the other is alive. This is our story.

!https://s3.amazonaws.com/marc.esher/blogimages/deadserver_1.png!

h1. The code, before

This particular process works in two parts that both do the same kind of thing
# Query another database and fetch around 350k rows. Loop over those rows and "do stuff"
# Query another database and fetch around 950k rows. Loop over those rows and "do other stuff"

The app was crashing in that second part, right around 770k rows. Here's a snippet:
{code:title=The Killing Code}
<cfloop query="records" startrow="#startRow#" endrow="#endRow#">
	<cfset recCount++ />
	<cfset row = doStuff(records, records.currentrow, recCount)>
	<cfset arrayAppend( rows, row )>
</cfloop>
{code}
It's your standard cfloop over a query.

h1. Heap memory, before

Here's what it looked like in Eclipse MAT

As the app was dying, I took a heap dump (*[described here... it's easy|http://blog.mxunit.org/2010/01/using-eclipse-mat-to-track-down.html]*) and saw that a thing called coldfusion.runtime.CFDummyComponent was consuming over 800MB of Ram. Drilling down a few levels, I saw thousands of "coldfusion.tagext.lang.LoopTag". Drilling into one of those, I saw that for each loop tag, there were 5000 coldfusion.sql.imq.Row objects. 5000 because that's how many records we were looping over in that cfloop.

!https://s3.amazonaws.com/marc.esher/blogimages/deadserver_looptags.png!

h1. The code, after

After seeing that all of the memory was being consumed inside of loop tags, I looked at the two cfloops that were running. My thought process was something like, "If we're doing a cfloop query='', and if the memory analyzer is telling me that each loop is retaining thousands of objects related to that query, then how can I perform the same loop without giving the query to the loop?" It should come as no surprise that the answer was:

{code:language=cf|title=PartnerMigrationCommand.cfc|controls=true|linenumbers=true}
<cfloop from="#startRow#" to="#endRow#" index="i">
	<cfset recCount++ />
	<cfset row = doStuff(records, i, recCount)>
	<cfset arrayAppend( rows, row )>
</cfloop>
{code}



h1. Heap memory, after

As proof that this code change had the intended effect, I ran the app again and took a heap snapshot at roughly the same point. The results were not surprising... not a single "looptag" in sight.

What's more, during the running of the application, *retained heap dropped from 882 MB to 52 MB*, simply by changing the cfloop style.

!https://s3.amazonaws.com/marc.esher/blogimages/deadserver_No_looptags.png!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750309</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783075</id>
    <property name="body"><![CDATA[{toc}

h1. Executive Summary

*How changing a cfloop from a query loop to an index loop completely this application's memory problem*

A process in one of our internal tools takes a while to run. In this case, a specific instance was crashing due to Java Heap Space errors. The image on the top shows the heap \-\- with a snapshot taken while the application was in its death throes \-\- prior to fixing the problem. The image on the bottom shows the heap \-\- with a snapshot taken at roughly the same time during the application's run \-\- after making 2 small code changes. One server is dead; the other is alive. This is our story.

!https://s3.amazonaws.com/marc.esher/blogimages/deadserver_1.png!

h1. The code, before

This particular process works in two parts that both do the same kind of thing
# Query another database and fetch around 350k rows. Loop over those rows and "do stuff"
# Query another database and fetch around 950k rows. Loop over those rows and "do other stuff"

The app was crashing in that second part, right around 770k rows. Here's a snippet:
{code:title=The Killing Code}
<cfloop query="records" startrow="#startRow#" endrow="#endRow#">
	<cfset recCount++ />
	<cfset row = doStuff(records, records.currentrow, recCount)>
	<cfset arrayAppend( rows, row )>
</cfloop>
{code}
It's your standard cfloop over a query.

h1. Heap memory, before

Here's what it looked like in Eclipse MAT

As the app was dying, I took a heap dump (*[described here... it's easy|http://blog.mxunit.org/2010/01/using-eclipse-mat-to-track-down.html]*) and saw that a thing called coldfusion.runtime.CFDummyComponent was consuming over 800MB of Ram. Drilling down a few levels, I saw thousands of "coldfusion.tagext.lang.LoopTag". Drilling into one of those, I saw that for each loop tag, there were 5000 coldfusion.sql.imq.Row objects. 5000 because that's how many records we were looping over in that cfloop.

!https://s3.amazonaws.com/marc.esher/blogimages/deadserver_looptags.png!

h1. The code, after

After seeing that all of the memory was being consumed inside of loop tags, I looked at the two cfloops that were running. My thought process was something like, "If we're doing a cfloop query='', and if the memory analyzer is telling me that each loop is retaining thousands of objects related to that query, then how can I perform the same loop without giving the query to the loop?" It should come as no surprise that the answer was:

{code:language=cf|title=PartnerMigrationCommand.cfc|controls=true|linenumbers=true}
<cfloop from="#startRow#" to="#endRow#" index="i">
	<cfset recCount++ />
	<cfset row = doStuff(records, i, recCount)>
	<cfset arrayAppend( rows, row )>
</cfloop>
{code}



h1. Heap memory, after

As proof that this code change had the intended effect, I ran the app again and took a heap snapshot at roughly the same point. The results were not surprising... not a single "looptag" in sight.

What's more, during the running of the application, *retained heap dropped from 882 MB to 52 MB*, simply by changing the cfloop style.

!https://s3.amazonaws.com/marc.esher/blogimages/deadserver_No_looptags.png!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750310</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783072</id>
    <property name="body"><![CDATA[[Running Adobe ColdFusion on Amazon EC2|Running Adobe ColdFusion on Amazon EC2]

[How cfcomponent output="true"  can affect memory consumption|How cfcomponent output=true  can affect memory consumption]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750307</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783073</id>
    <property name="body"><![CDATA[[Running Adobe ColdFusion on Amazon EC2|Running Adobe ColdFusion on Amazon EC2]

[How cfcomponent output="true"  can affect memory consumption|How cfcomponent output=true  can affect memory consumption]

[How cfloop query="" killed a ColdFusion server|default:How cfloop query="" killed a ColdFusion server]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750308</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783070</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750305</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783132</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750370</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783128</id>
    <property name="body"><![CDATA[This series will demonstrate how to set up a continuous integration (CI) environment for ColdFusion projects using [Jenkins|http://jenkins-ci.org/] CI and MXUnit. We'll cover Jenkins setup, MXUnit test runs and JUnit XML output, and a few notification mechanisms (email, IM).

h2. Installing Jenkins

This  will cover the simple way to run Jenkins, which is to use its built-in Winstone container, which is fine for testing and has served me well in a medium-load production environment. If you already have Tomcat set up, then you  know how to install war files so follow that procedure instead (i.e.  drop the war where you put your war files, or use the admin to deploy  the war. It's that simple)
# Download the Jenkins war file and put it somewhere
# Open a command line and navigate to the war file location
# type "java \--jar jenkins.war"
# This will launch Jenkins. You can navigate to [http://localhost:8080|http://localhost:8080/] and from there, you're ready to start

h2. Pulling your project from Subversion (SVN)

# Click "create a new job"
# Give your job a name, and then select Freestyle Software Project
# Under Source Code Management, select SVN, and then plug in your project's SVN location, eg [http://svn.myproject/whatever/trunk|http://svn.myproject/whatever/trunk]
# In the "Local Module Directory" field, I typicaly use the name of the directory as it will be deployed onto some production server. So if I'm checking out myproject/trunk, I'll use&nbsp; "myproject". The reason is that I'll often check out from multiple places in a single Job, and giving each module directory a proper name helps with organization.
# From  here, you can click "Save" and then perform a build by clicking  "Build". This will check out your code into the Jenkins workspace for  your project

*But this code isn't where I need the code to be\!* Good point. We'll talk more about that later


h2. What's Next?

See how easy that was? Next up, configuring ANT, running your tests, and recording results]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750364</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783145</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}

h1. Why ANT?


You won't get far using Jenkins and ColdFusion without ANT. ANT is the Hub. It's the glue.

Your ANT build will run your MXUnit Tests. Jenkins will run your ANT build, record the results of the tests, and perform post-build actions (notifications, etc) based on the results of those tests.

h1. Assumptions

We assume you have some tests and can successfully run them via either the Eclipse plugin or your web browser

We assume that if you are not familiar with ANT that you're willing to learn enough of it to get your CI environment set up. If you're not up for that, perhaps [simpler automation is for you|default:Simple Test Scheduling].


h1. A thorough description of running your tests with ANT


Bill's [original walkthrough|default:Using the Ant Task to Generate JUnit Reports] is very thorough. In addition, please see Bill's fantastic [8-minute video|default:Screencast - Using MXUnit and Ant for Build,Test, and Integration Automation - 8 min.] showing exactly how to run your MXUnit tests with ANT.

If you are new to ANT, I&nbsp; implore you to visit those links, especially if you're the type who doesn't like flailing about trying to make sense of foreign things.

Even if you simply read Bill's instructions, and watch the video, you'll gain enough familiarity with ANT and MXUnit to move on ot the next step


h1. Once you're familiar with running your tests with ANT


...Or, if you're the type who likes to jump right in

h2. Directory Structure


Your final directory structure will look something like the following. If your tests live somewhere else inside your app, that's OK... just make sure to adjust the paths in the build file to account for their location.

In the example below, files demoted with an asterisk \(*) are files that do not yet exist but which will when we're finished

{code}/App
  *build.xml
  /lib
   *mxunit-ant.jar
   other-whatever.jar
  /test
    *HttpAntRunner.cfc
    /testdir1
      SomeTest.cfc
    /testdir2
      SomeOtherTest.cfc
{code}

h2. Copy files from MXUnit to your app

You need the following three files to start:
# mxunit-ant.jar \-\- ANT will use this to communicate with ColdFusion
# HttpAntRunner.cfc \-\- This is the "endpoint"... ANT will make HTTP requests to this CFC, and that CFC will in turn run the MXUnit framework code which runs your tests
# build.xml \-\- This is your new ANT build file{*}What to put where*\# Create a directory in your app called "lib"
# Copy mxunit/ant/lib/mxunit-ant.jar into that lib directory
# Copy mxunit/samples/build.xml into your app's root, such that you end up with /app/build.xml
# Copy mxunit/samples/HttpAntRunner.cfc into your app's test root, such that you end up with /app/test/HttpAntRunner.cfcOpen up that HttpAntRunner.cfc after you copy it. Notice that it simply extends the framework version. While you *could* point directly to the framework version, you almost always want to point to your custom version, especially if you're using ORM, testing framework controllers, or otherwise need access to your app's Application scope

h2. Modify build.xml

The sample build.xml file which you copied is meant to be a good-enough skeleton to get you running your tests from ANT. It also contains example "svn update" and "dist"  targets for updating a directory from SVN and creating a zip file, respectively. More on those later.

For now, we need to run tests. To do this, you'll modify several of the properties in the ANT file to point to the correct names and locations for your project

If you're using Eclipse or another IDE which shows the structure of an ANT file, open the ANT view and drag your build file into it. It'll look something like this: !ant_view.PNG|thumbnail!



*In build.xml:*

# In the top-level project element, change the project name to your project&nbsp;
# In the *init* target, change the *application.name* property to the directory name of your project
# Next line, if necessary change the *test.dir.name* property to be the name of your tests directory
# A few lines down, change the *test.server* and *test.port* properties to match your local setup (these can change later)Now, From the ANT view in Eclipse, run the "init" target. In the console view, you'll see a dump of all the properties that will drive your ANT build. Most of these will be file system locations{*}Do not proceed* until test.cfcpath and test.dir.location look correct. If they're not correct, modify the build file and make them so.



{column}
{column:width=5%}



{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750383</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783143</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}
h1. Why ANT?


You won't get far using Jenkins and ColdFusion without ANT. ANT is the Hub. It's the glue.

Your ANT build will run your MXUnit Tests. Jenkins will run your ANT build, record the results of the tests, and perform post-build actions (notifications, etc) based on the results of those tests.

h1. Assumptions

We assume you have some tests and can successfully run them via either the Eclipse plugin or your web browser

We assume that if you are not familiar with ANT that you're willing to learn enough of it to get your CI environment set up. If you're not up for that, perhaps [simpler automation is for you|default:Simple Test Scheduling].


h1. A thorough description of running your tests with ANT


Bill's [original walkthrough|default:Using the Ant Task to Generate JUnit Reports] is very thorough. In addition, please see Bill's fantastic [8-minute video|default:Screencast - Using MXUnit and Ant for Build,Test, and Integration Automation - 8 min.] showing exactly how to run your MXUnit tests with ANT.

If you are new to ANT, I&nbsp; implore you to visit those links, especially if you're the type who doesn't like flailing about trying to make sense of foreign things.

Even if you simply read Bill's instructions, and watch the video, you'll gain enough familiarity with ANT and MXUnit to move on ot the next step


h1. Once you're familiar with running your tests with ANT


...Or, if you're the type who likes to jump right in

h2. Directory Structure


Your final directory structure will look something like the following. If your tests live somewhere else inside your app, that's OK... just make sure to adjust the paths in the build file to account for their location.

In the example below, files demoted with an asterisk \(*) are files that do not yet exist but which will when we're finished

{code}/App
  *build.xml
  /lib
   *mxunit-ant.jar
   other-whatever.jar
  /tests
    *HttpAntRunner.cfc
    /testdir1
      SomeTest.cfc
    /testdir2
      SomeOtherTest.cfc
{code}
h2. Copy files from MXUnit to your app

You need the following three files to start:
# mxunit-ant.jar \-\- ANT will use this to communicate with ColdFusion
# HttpAntRunner.cfc \-\- This is the "endpoint"... ANT will make HTTP requests to this CFC, and that CFC will in turn run the MXUnit framework code which runs your tests
# build.xml \-\- This is your new ANT build file{*}What to put where*\# Create a directory in your app called "lib"
# Copy mxunit/ant/lib/mxunit-ant.jar into that lib directory
# Copy mxunit/samples/build.xml into your app's root, such that you end up with /app/build.xml
# Copy mxunit/samples/HttpAntRunner.cfc into your app's test root, such that you end up with /app/tests/HttpAntRunner.cfcOpen up that HttpAntRunner.cfc after you copy it. Notice that it simply extends the framework version. While you *could* point directly to the framework version, you almost always want to point to your custom version, especially if you're using ORM, testing framework controllers, or otherwise need access to your app's Application scope

h2. Modify build.xml

The sample build.xml file which you copied is meant to be a good-enough skeleton to get you running your tests from ANT. It also contains example "svn update" and "dist"  targets for updating a directory from SVN and creating a zip file, respectively. More on those later.

For now, we need to run tests. To do this, you'll modify several of the properties in the ANT file to point to the correct names and locations for your project

If you're using Eclipse or another IDE which shows the structure of an ANT file, open the ANT view and drag your build file into it. It'll look something like this:



Change the project name to your project



{column}
{column:width=5%}



{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750381</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783149</id>
    <property name="body"><![CDATA[Data driven testing allows you to execute tests with a wide variety of input data. This can make creating and executing certain kinds of tests&nbsp; efficient and very powerful. Essentially, you provide a reference to a collection of data and MXUnit will iterate over that data and execute the test for each item in the collection.

Here it is in action:
{code:title=Basic Array Dataprovider Example}<cffunction name="setUp">
  <cfset name_data = ['joe','taj','mary','juan','hans', 'bjork','chaksa'] />
  <cfset myObject =&nbsp; createObject('component','com.foo.MyObject').init() />
</cffunction>

<cffunction name="testNameValidation" mxunit:dataprovider="name_data">
  <cfargument name="name" hint="Each name item in the name_data array" />
  <cfset assertTrue( myObject.validateName(name), "#name# not valid" ) />
</cffunction>
{code}
To use data to drive tests, tell MXUnit about it using the mxunit:dataprovider annotation. This accepts a string name of some data that exists in the variables scope of the test. The mxunit:dataprovider annotation accepts the following types of data: array, query, list, and a CSV or Excel file. What's unique about these types of tests is that they accept parameters. The parameters represent the data you are using in your tests and may vary depending upon the type of the dataprovider. Note that this is invalid in ColdFusion: mxunit:dataprovider="#my_variable#" - this value must be a string.
Consider the following examples:

{code:title=Query Dataprovider Example}<!--------------------------------------------------------------------
           Example using a query:
    query_data = queryNew('name');
    query.addRow(1);
    query.setCell('name','ed');
   Note query name as a parameter
-------------------------------------------------------------------->
<cffunction name="testSomethingWithQuery" mxunit:dataprovider="query_data">
  <cfargument name="q" hint="A query object" />
  <cfset assertTrue( myObject.validateName(q.name), "#q.name# not valid." ) />
</cffunction>
{code}
In this example we specify the name of a query that's in the variables scope of the test. We use this query name for the mxunit:dataprovider value. This test will be run once for each row in the query, and the value of "arguments.q" in this case will be the current row of the query.

{code:title=Basic List Dataprovider Example}
<!-----------------------------------------------------------------
    Example using a list (identical to array)
    list_data = 'ed,joe,mary,jeff';
    Note list item name as a parameter
-------------------------------------------------------------------->

<cffunction name="testSomethingWithList" mxunit:dataprovider="list_data">
  <cfargument name="list_item" hint="Item in the list" />
  <cfset assertTrue( myObject.validateName(list_item), "#list_item# not valid." ) />
</cffunction>
{code}
Iterating over a list is essentially the same as an array. The data here is provided as a list of values. As in all mxunit:dataprovider types, pass in the _name_ of the data to the dataprovider.

{code:title=Basic Excel/CSV Dataprovider}
<!----------------------------------------------------------------
               Example using an Excel file
             Note query name as a parameter
------------------------------------------------------------------>
<cfset names_excel = getDirectoryFromPath(getCurrentTemplatePath()) & "/dataproviders/names.xls">
<cffunction name="testSomethingWithExcel" mxunit:dataprovider="names_excel">
  <cfargument name="name_query" hint="Default behavior is to convert Excel with header names to query object.">
  <cfset debug(myQuery)>
  <cfset assertTrue( myObject.validateName(name_query.name), "#name_query.name# not valid." ) />
</cffunction>
{code}
For the basic default excel behavior where you have an Excel file with named row headers, pass the name of the file reference to the mxunit:dataprovider. Then, treat the data as a query object, using the row headings as column names.

{code:title=Basic Iterator Dataprovider}
<!----------------------------------------------------------------
   Fuzzy Goodness
 ------------------------------------------------------------------>
<cffunction name="testRandomPasswordGenerator" mxunit:dataprovider="1000">
  <cfargument name="count" />
  <cfset pwd = myObject.generateRandomPassword(seed=count) />
  <cfset assert( myObject.isValidPassword(pwd), "#pwd# not valid. Occurred at iteration #count#" ) />
</cffunction>
{code}
Sometimes it's useful to just iterate a number of times over some computation. You can do this with MXUnit simply by specify a positive integer to the mxunit:dataprovider.

To Do: Advanced Dataproviders (2D Arrays and Excel and CSVs with or without header rows).]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750388</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783147</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}

h1. Why ANT?


You won't get far using Jenkins and ColdFusion without ANT. ANT is the Hub. It's the glue.

Your ANT build will run your MXUnit Tests. Jenkins will run your ANT build, record the results of the tests, and perform post-build actions (notifications, etc) based on the results of those tests.

h1. Assumptions

We assume you have some tests and can successfully run them via either the Eclipse plugin or your web browser

We assume that if you are not familiar with ANT that you're willing to learn enough of it to get your CI environment set up. If you're not up for that, perhaps [simpler automation is for you|default:Simple Test Scheduling].


h1. A thorough description of running your tests with ANT


Bill's [original walkthrough|default:Using the Ant Task to Generate JUnit Reports] is very thorough. In addition, please see Bill's fantastic [8-minute video|default:Screencast - Using MXUnit and Ant for Build,Test, and Integration Automation - 8 min.] showing exactly how to run your MXUnit tests with ANT.

If you are new to ANT, I&nbsp; implore you to visit those links, especially if you're the type who doesn't like flailing about trying to make sense of foreign things.

Even if you simply read Bill's instructions, and watch the video, you'll gain enough familiarity with ANT and MXUnit to move on ot the next step


h1. Once you're familiar with running your tests with ANT


...Or, if you're the type who likes to jump right in

h2. Directory Structure


Your final directory structure will look something like the following. If your tests live somewhere else inside your app, that's OK... just make sure to adjust the paths in the build file to account for their location.

In the example below, files demoted with an asterisk \(*) are files that do not yet exist but which will when we're finished

{code}/App
  *build.xml
  /lib
   *mxunit-ant.jar
   other-whatever.jar
  /test
    *HttpAntRunner.cfc
    /testdir1
      SomeTest.cfc
    /testdir2
      SomeOtherTest.cfc
{code}

h2. Copy files from MXUnit to your app

You need the following three files to start:
# mxunit-ant.jar \-\- ANT will use this to communicate with ColdFusion
# HttpAntRunner.cfc \-\- This is the "endpoint"... ANT will make HTTP requests to this CFC, and that CFC will in turn run the MXUnit framework code which runs your tests
# build.xml \-\- This is your new ANT build file{*}What to put where*\# Create a directory in your app called "lib"
# Copy mxunit/ant/lib/mxunit-ant.jar into that lib directory
# Copy mxunit/samples/build.xml into your app's root, such that you end up with /app/build.xml
# Copy mxunit/samples/HttpAntRunner.cfc into your app's test root, such that you end up with /app/test/HttpAntRunner.cfcOpen up that HttpAntRunner.cfc after you copy it. Notice that it simply extends the framework version. While you *could* point directly to the framework version, you almost always want to point to your custom version, especially if you're using ORM, testing framework controllers, or otherwise need access to your app's Application scope

h2. Modify build.xml

The sample build.xml file which you copied is meant to be a good-enough skeleton to get you running your tests from ANT. It also contains example "svn update" and "dist"  targets for updating a directory from SVN and creating a zip file, respectively. More on those later.

For now, we need to run tests. To do this, you'll modify several of the properties in the ANT file to point to the correct names and locations for your project

If you're using Eclipse or another IDE which shows the structure of an ANT file, open the ANT view and drag your build file into it. It'll look something like this: !ant_view.PNG|thumbnail!



*In build.xml:*

# In the top-level project element, change the project name to your project&nbsp;
# In the *init* target, change the *application.name* property to the directory name of your project
# Next line, if necessary change the *test.dir.name* property to be the name of your tests directory
# A few lines down, change the *test.server* and *test.port* properties to match your local setup (these can change later)Now, From the ANT view in Eclipse, run the "init" target. In the console view, you'll see a dump of all the properties that will drive your ANT build. Most of these will be file system locations

{warning} *Do not proceed* until test.cfcpath and test.dir.location look correct. If they're not correct, modify the build file and make them so. {warning}

Here's what the console view will look like when you run *init*:
!ant_run_init.PNG|thumbnail!



{column}
{column:width=5%}



{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750385</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783136</id>
    <property name="body"><![CDATA[{toc}

h1. Why ANT?


You won't get far using Jenkins and ColdFusion without ANT. ANT is the Hub. It's the glue.

Your ANT build will run your MXUnit Tests. Jenkins will run your ANT build, record the results of the tests, and perform post-build actions (notifications, etc) based on the results of those tests.

h2. Assumptions

We assume you have some tests and can successfully run them via either the Eclipse plugin or your web browser

We assume that if you are not familiar with ANT that you're willing to learn enough of it to get your CI environment set up. If you're not up for that, perhaps [simpler automation is for you|default:Simple Test Scheduling].


h2. A thorough treatment

Bill's [original walkthrough|default:Using the Ant Task to Generate JUnit Reports] is very thorough. In addition, please see Bill's fantastic [8-minute video|default:Screencast - Using MXUnit and Ant for Build,Test, and Integration Automation - 8 min.] showing exactly how to run your MXUnit tests with ANT]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750374</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783137</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}

h1. Why ANT?


You won't get far using Jenkins and ColdFusion without ANT. ANT is the Hub. It's the glue.

Your ANT build will run your MXUnit Tests. Jenkins will run your ANT build, record the results of the tests, and perform post-build actions (notifications, etc) based on the results of those tests.

h1. Assumptions

We assume you have some tests and can successfully run them via either the Eclipse plugin or your web browser

We assume that if you are not familiar with ANT that you're willing to learn enough of it to get your CI environment set up. If you're not up for that, perhaps [simpler automation is for you|default:Simple Test Scheduling].


h1. A thorough treatment

Bill's [original walkthrough|default:Using the Ant Task to Generate JUnit Reports] is very thorough. In addition, please see Bill's fantastic [8-minute video|default:Screencast - Using MXUnit and Ant for Build,Test, and Integration Automation - 8 min.] showing exactly how to run your MXUnit tests with ANT
{column}

{column:width=5%}
{column}

{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=2}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750375</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783134</id>
    <property name="body"><![CDATA[{toc}

You won't get far using Jenkins and ColdFusion without ANT. ANT is the Hub. It's the glue.

Your ANT build will run your MXUnit Tests. Jenkins will run your ANT build, record the results of the tests, and perform post-build actions (notifications, etc) based on the results of those tests.

h2. A thorough treatment

Bill's [original walkthrough|default:Using the Ant Task to Generate JUnit Reports] is very thorough. In addition, please see Bill's fantastic [8-minute video|default:Screencast - Using MXUnit and Ant for Build,Test, and Integration Automation - 8 min.] showing exactly how to run your MXUnit tests with ANT]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750372</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783141</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}
h1. Why ANT?


You won't get far using Jenkins and ColdFusion without ANT. ANT is the Hub. It's the glue.

Your ANT build will run your MXUnit Tests. Jenkins will run your ANT build, record the results of the tests, and perform post-build actions (notifications, etc) based on the results of those tests.

h1. Assumptions

We assume you have some tests and can successfully run them via either the Eclipse plugin or your web browser

We assume that if you are not familiar with ANT that you're willing to learn enough of it to get your CI environment set up. If you're not up for that, perhaps [simpler automation is for you|default:Simple Test Scheduling].


h1. A thorough description of running your tests with ANT


Bill's [original walkthrough|default:Using the Ant Task to Generate JUnit Reports] is very thorough. In addition, please see Bill's fantastic [8-minute video|default:Screencast - Using MXUnit and Ant for Build,Test, and Integration Automation - 8 min.] showing exactly how to run your MXUnit tests with ANT.

If you are new to ANT, I&nbsp; implore you to visit those links, especially if you're the type who doesn't like flailing about trying to make sense of foreign things.

Even if you simply read Bill's instructions, and watch the video, you'll gain enough familiarity with ANT and MXUnit to move on ot the next step


h1. Once you're familiar with running your tests with ANT


...Or, if you're the type who likes to jump right in

h2. Directory Structure


Your final directory structure will look something like the following. If your tests live somewhere else inside your app, that's OK... just make sure to adjust the paths in the build file to account for their location.

In the example below, files demoted with an asterisk \(*) are files that do not yet exist but which will when we're finished

{code}/App
  *build.xml
  /lib
   *mxunit-ant.jar
   other-whatever.jar
  /tests
    *HttpAntRunner.cfc
    /testdir1
      SomeTest.cfc
    /testdir2
      SomeOtherTest.cfc
{code}
h2. Copy files from MXUnit to your app

You need the following three files to start:
# mxunit-ant.jar \-\- ANT will use this to communicate with ColdFusion
# HttpAntRunner.cfc \-\- This is the "endpoint"... ANT will make HTTP requests to this CFC, and that CFC will in turn run the MXUnit framework code which runs your tests
# build.xml \-\- This is your new ANT build file{*}What to put where*\# Create a directory in your app called "lib"
# Copy mxunit/ant/lib/mxunit-ant.jar into that lib directory
# Copy mxunit/samples/build.xml into your app's root, such that you end up with /app/build.xml
# Copy mxunit/samples/HttpAntRunner.cfc into your app's test root, such that you end up with /app/tests/HttpAntRunner.cfcOpen up that HttpAntRunner.cfc after you copy it. Notice that it simply extends the framework version. While you *could* point directly to the framework version, you almost always want to point to your custom version, especially if you're using ORM, testing framework controllers, or otherwise need access to your app's Application scope

h2. Modify build.xml

The sample build.xml file which you copied is meant to be a good-enough skeleton to get you running your tests from ANT. It also contains example "svn update" and "dist"  targets for updating a directory from SVN and creating a zip file, respectively. More on those later.

For now, we need to run tests. To do this, you'll modify several of the properties in the ANT file to point to the correct names and locations for your project

If you're using Eclipse or another IDE which shows the structure of an ANT file, open the ANT view and drag your build file into it. It'll look something like this:



Change the project name to your project


{column}
{column:width=5%}


{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750379</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783139</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}
h1. Why ANT?


You won't get far using Jenkins and ColdFusion without ANT. ANT is the Hub. It's the glue.

Your ANT build will run your MXUnit Tests. Jenkins will run your ANT build, record the results of the tests, and perform post-build actions (notifications, etc) based on the results of those tests.

h1. Assumptions

We assume you have some tests and can successfully run them via either the Eclipse plugin or your web browser

We assume that if you are not familiar with ANT that you're willing to learn enough of it to get your CI environment set up. If you're not up for that, perhaps [simpler automation is for you|default:Simple Test Scheduling].


h1. A thorough treatment

Bill's [original walkthrough|default:Using the Ant Task to Generate JUnit Reports] is very thorough. In addition, please see Bill's fantastic [8-minute video|default:Screencast - Using MXUnit and Ant for Build,Test, and Integration Automation - 8 min.] showing exactly how to run your MXUnit tests with ANT
{column}
{column:width=5%}

{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750377</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783158</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* [RIAUnleashed 2010 -- Introduction to MongoDB for CFML Developers|RIAUnleashed 2010 -- Introduction to MongoDB for CFML Developers] \-\- November 12, 2010 \-\- What is Mongo, Why it's awesome, and how to use it
* [Adobe MAX 2010 \-\- ColdFusion Skunkworks with Joe Rinehart and Marc Esher|Adobe MAX 2010 -- ColdFusion Skunkworks] \-\- October 27, 2010&nbsp; \-\- Experimentation, learning, and finding joy in what you do
* [CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit|CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit] \-\- April 22, 2010 \-\- An ungentle introduction to Continuous Integration for CFMLers
* [April 2010 -- Online ColdFusion  Meetup -- Know your tools: Productivity Tips-n-Tricks for ColdFusion Builder / CFEclipse|CFMeetupEclipseProductivity|Master your tool]
* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14, 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14, 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16, 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/CFU2008ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.

{tip}Just getting started with unit testing? John C Bland II gave a fantastic overview... [watch it here|http://experts.na3.acrobat.com/p76614762/] .{tip}{tip}Want to learn more about ANT? Watch [Jim Priest's CFMeetup presentation|http://experts.acrobat.com/p53858056/] {tip}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750397</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783162</id>
    <property name="body"><![CDATA[Mocking is a tough concept to get your brain around the first time you encounter it. I still struggle, conceptually. This is example shows mocking quite well, but there are enough distractions that it's a little hard to see, especially for Googlers who might lack context. If I might be so bold as to offer suggested edits which might allow the illustration of the core concept to show through the code more clearly:

The first stumbling block is the hint. "My component to mock" is a little misleading. That's the code for MyComponent, which people like me who skip straight to code without bothering to read the very instructive header just above will get to first, so a more instructive hint might be "Depends on data from myOtherComponent, so we'll need to provide a mock to stub it out for testing."

The next distraction is that the method always returns true, so we don't understand as well why we're mocking, maybe if it just returned the result of myOtherComponent('foo'), or multiplied it by two or something, we'd see the interactions better?

And <cfargument name="aCollaborator" could even be confusing since "aCollaborator" is never seen again, it's only one line, so maybe replacing the ellipsis with <cfset myOtherComponent = arguments.aCollaborator> would even help keep the example more tightly focussed?

And it looks like either kpenny is right and you meant to use assertTrue, or you're using the "Red, Green, Refactor" approach in the assert, and have stopped at "Red." While the latter is excellent TDD methodology, it would be a little too confusing in this example. An assert statement that showed the dependence on the mock's data might help to illustrate the core concept more clearly, like myOtherComponent.doSomething('foo') might return 2, and myComponent.myMethod('foo') might return 4, then the assert could be assertEquals(actual,4,'cool and bad-ass') - leaving the mock object method creation line the only confusing thing in the example, the way it should be :)

And for my own edification, it seems like the mock object method creation won't work under CFMX 7 because it seems like it must rely on the CF8 onMissingMethod event handler? Is this true? Should I have looked that up elsewhere and not cluttered up this post with it?
Thanks!

B)]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6750402</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783152</id>
    <property name="body"><![CDATA[Data driven testing allows you to execute tests with a wide variety of input data. This can make creating and executing certain kinds of tests&nbsp; efficient and very powerful. Essentially, you provide a reference to a collection of data and MXUnit will iterate over that data and execute the test for each item in the collection.

Here it is in action:
{code:title=Basic Array Dataprovider Example}<cffunction name="setUp">
  <cfset name_data = ['joe','taj','mary','juan','hans', 'bjork','chaksa'] />
  <cfset myObject =&nbsp; createObject('component','com.foo.MyObject').init() />
</cffunction>

<cffunction name="testNameValidation" mxunit:dataprovider="name_data">
  <cfargument name="name" hint="Each name item in the name_data array" />
  <cfset assertTrue( myObject.validateName(name), "#name# not valid" ) />
</cffunction>
{code}
To use data to drive tests, tell MXUnit about it using the mxunit:dataprovider annotation. This accepts a string name of some data that exists in the variables scope of the test. The mxunit:dataprovider annotation accepts the following types of data: array, query, list, and a CSV or Excel file. What's unique about these types of tests is that they accept parameters. The parameters represent the data you are using in your tests and may vary depending upon the type of the dataprovider. Note that this is invalid in ColdFusion: mxunit:dataprovider="#my_variable#" - this value must be a string.
Consider the following examples:

{code:title=Query Dataprovider Example}<!--------------------------------------------------------------------
           Example using a query:
    query_data = queryNew('name');
    query.addRow(1);
    query.setCell('name','ed');
   Note query name as a parameter
-------------------------------------------------------------------->
<cffunction name="testSomethingWithQuery" mxunit:dataprovider="query_data">
  <cfargument name="q" hint="A query object" />
  <cfset assertTrue( myObject.validateName(q.name), "#q.name# not valid." ) />
</cffunction>
{code}
In this example we specify the name of a query that's in the variables scope of the test. We use this query name for the mxunit:dataprovider value. This test will be run once for each row in the query, and the value of "arguments.q" in this case will be the current row of the query.

{code:title=Basic List Dataprovider Example}
<!-----------------------------------------------------------------
    Example using a list (identical to array)
    list_data = 'ed,joe,mary,jeff';
    Note list item name as a parameter
-------------------------------------------------------------------->

<cffunction name="testSomethingWithList" mxunit:dataprovider="list_data">
  <cfargument name="list_item" hint="Item in the list" />
  <cfset assertTrue( myObject.validateName(list_item), "#list_item# not valid." ) />
</cffunction>
{code}
Iterating over a list is essentially the same as an array. The data here is provided as a list of values. As in all mxunit:dataprovider types, pass in the _name_ of the data to the dataprovider.

{code:title=Basic Excel/CSV Dataprovider}
<!----------------------------------------------------------------
               Example using an Excel file
             Note query name as a parameter
------------------------------------------------------------------>
<cfset names_excel = getDirectoryFromPath(getCurrentTemplatePath()) & "/dataproviders/names.xls">
<cffunction name="testSomethingWithExcel" mxunit:dataprovider="names_excel">
  <cfargument name="name_query" hint="Default behavior is to convert Excel with header names to query object.">
  <cfset debug(myQuery)>
  <cfset assertTrue( myObject.validateName(name_query.name), "#name_query.name# not valid." ) />
</cffunction>
{code}
For the basic default excel behavior where you have an Excel file with named row headers, pass the name of the file reference to the mxunit:dataprovider. Then, treat the data as a query object, using the row headings as column names.

{code:title=Basic Iterator Dataprovider}
<!----------------------------------------------------------------
   Fuzzy Goodness
 ------------------------------------------------------------------>
<cffunction name="testRandomPasswordGenerator" mxunit:dataprovider="1000">
  <cfargument name="count" />
  <cfset pwd = myObject.generateRandomPassword(seed=count) />
  <cfset assert( myObject.isValidPassword(pwd), "#pwd# not valid. Occurred at iteration #count#" ) />
</cffunction>
{code}
Sometimes it's useful to just iterate a number of times over some computation. You can do this with MXUnit simply by specify a positive integer to the mxunit:dataprovider.

To Do: Advanced Dataproviders (2D Arrays and Excel and CSVs with or without header rows).]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750391</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783150</id>
    <property name="body"><![CDATA[Data driven testing allows you to execute tests with a wide variety of input data. This can make creating and executing certain kinds of tests&nbsp; efficient and very powerful. Essentially, you provide a reference to a collection of data and MXUnit will iterate over that data and execute the test for each item in the collection.

Here it is in action:
{code:title=Basic Array Dataprovider Example}<cffunction name="setUp">
  <cfset name_data = ['joe','taj','mary','juan','hans', 'bjork','chaksa'] />
  <cfset myObject =&nbsp; createObject('component','com.foo.MyObject').init() />
</cffunction>

<cffunction name="testNameValidation" mxunit:dataprovider="name_data">
  <cfargument name="name" hint="Each name item in the name_data array" />
  <cfset assertTrue( myObject.validateName(name), "#name# not valid" ) />
</cffunction>
{code}To use data to drive tests, tell MXUnit about it using the mxunit:dataprovider annotation. This accepts a string name of some data that exists in the variables scope of the test. The mxunit:dataprovider annotation accepts the following types of data: array, query, list, and a CSV or Excel file. What's unique about these types of tests is that they accept parameters. The parameters represent the data you are using in your tests and may vary depending upon the type of the dataprovider. Note that this is invalid in ColdFusion: mxunit:dataprovider="#my_variable#" - this value must be a string.
Consider the following examples:

{code:title=Query Dataprovider Example}<!--------------------------------------------------------------------
           Example using a query:
    query_data = queryNew('name');
    query_data.addRow(1);
    query_data.setCell('name','ed');
   Note query name as a parameter
-------------------------------------------------------------------->
<cffunction name="testSomethingWithQuery" mxunit:dataprovider="query_data">
  <cfargument name="q" hint="A query object" />
  <cfset assertTrue( myObject.validateName(q.name), "#q.name# not valid." ) />
</cffunction>
{code}In this example we specify the name of a query that's in the variables scope of the test. We use this query name for the mxunit:dataprovider value. This test will be run once for each row in the query, and the value of "arguments.q" in this case will be the current row of the query.

{code:title=Basic List Dataprovider Example}<!-----------------------------------------------------------------
    Example using a list (identical to array)
    list_data = 'ed,joe,mary,jeff';
    Note list item name as a parameter
-------------------------------------------------------------------->

<cffunction name="testSomethingWithList" mxunit:dataprovider="list_data">
  <cfargument name="list_item" hint="Item in the list" />
  <cfset assertTrue( myObject.validateName(list_item), "#list_item# not valid." ) />
</cffunction>
{code}Iterating over a list is essentially the same as an array. The data here is provided as a list of values. As in all mxunit:dataprovider types, pass in the _name_ of the data to the dataprovider.

{code:title=Basic Excel/CSV Dataprovider}<!----------------------------------------------------------------
               Example using an Excel file
             Note query name as a parameter
------------------------------------------------------------------>
<cfset names_excel = getDirectoryFromPath(getCurrentTemplatePath()) & "/dataproviders/names.xls">
<cffunction name="testSomethingWithExcel" mxunit:dataprovider="names_excel">
  <cfargument name="name_query" hint="Default behavior is to convert Excel with header names to query object.">
  <cfset debug(myQuery)>
  <cfset assertTrue( myObject.validateName(name_query.name), "#name_query.name# not valid." ) />
</cffunction>
{code}For the basic default excel behavior where you have an Excel file with named row headers, pass the name of the file reference to the mxunit:dataprovider. Then, treat the data as a query object, using the row headings as column names.

{code:title=Basic Iterator Dataprovider}<!----------------------------------------------------------------
   Fuzzy Goodness
 ------------------------------------------------------------------>
<cffunction name="testRandomPasswordGenerator" mxunit:dataprovider="1000">
  <cfargument name="count" />
  <cfset pwd = myObject.generateRandomPassword(seed=count) />
  <cfset assert( myObject.isValidPassword(pwd), "#pwd# not valid. Occurred at iteration #count#" ) />
</cffunction>
{code}Sometimes it's useful to just iterate a number of times over some computation. You can do this with MXUnit simply by specify a positive integer to the mxunit:dataprovider.

To Do: Advanced Dataproviders (2D Arrays and Excel and CSVs with or without header rows).]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750389</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783155</id>
    <property name="body"><![CDATA[This series will demonstrate how to set up a continuous integration (CI) environment for ColdFusion projects using [Jenkins|http://jenkins-ci.org/] CI and MXUnit. We'll cover Jenkins setup, MXUnit test runs and JUnit XML output, and a few notification mechanisms (email, IM).

I will not attempt to duplicate the quite thorough documentation available for Jenkins. Rather, I intend to cover enough "getting started" material, and then focus on instructions specific to MXUnit and Jenkins


h2. Installing Jenkins

This  will cover the simple way to run Jenkins, which is to use its built-in Winstone container, which is fine for testing and has served me well in a medium-load production environment. If you already have Tomcat set up, then you  know how to install war files so follow that procedure instead (i.e.  drop the war where you put your war files, or use the admin to deploy  the war. It's that simple)
# Download the Jenkins war file and put it somewhere
# Open a command line and navigate to the war file location
# type "java \--jar jenkins.war"
# This will launch Jenkins. You can navigate to [http://localhost:8080|http://localhost:8080/] and from there, you're ready to start
# If you're on Windows, you can install Jenkins as a Windows service from inside "Manage Jenkins".

h2. Pulling your project from Subversion (SVN)

# Click "create a new job"
# Give your job a name, and then select Freestyle Software Project
# Under Source Code Management, select SVN, and then plug in your project's SVN location, eg [http://svn.myproject/whatever/trunk|http://svn.myproject/whatever/trunk]
# In the "Local Module Directory" field, I typicaly use the name of the directory as it will be deployed onto some production server. So if I'm checking out myproject/trunk, I'll use&nbsp; "myproject". The reason is that I'll often check out from multiple places in a single Job, and giving each module directory a proper name helps with organization.
# From  here, you can click "Save" and then perform a build by clicking  "Build". This will check out your code into the Jenkins workspace for  your project

*But this code isn't where I need the code to be\!* Good point. We'll talk more about that later


h2. What's Next?

See how easy that was? Next up, configuring ANT, running your tests, and recording results]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750394</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783166</id>
    <property name="body"><![CDATA[Data driven testing allows you to execute tests with a wide variety of input data. This can make creating and executing certain kinds of tests&nbsp; efficient and very powerful. Essentially, you provide a reference to a collection of data and MXUnit will iterate over that data and execute the test for each item in the collection.

Here it is in action:
{code:title=Basic Array Dataprovider Example}<cffunction name="setUp">
  <cfset name_data = ['joe','taj','mary','juan','hans', 'bjork','chaksa'] />
  <cfset myObject =&nbsp; createObject('component','com.foo.MyObject').init() />
</cffunction>

<cffunction name="testNameValidation" mxunit:dataprovider="name_data">
  <cfargument name="name" hint="Each name item in the name_data array" />
  <cfset assertTrue( myObject.validateName(name), "#name# not valid" ) />
</cffunction>
{code}To use data to drive tests, tell MXUnit about it using the mxunit:dataprovider annotation. This accepts a string name of some data that exists in the variables scope of the test. The mxunit:dataprovider annotation accepts the following types of data: array, query, list, and a CSV or Excel file. What's unique about these types of tests is that they accept parameters. The parameters represent the data you are using in your tests and may vary depending upon the type of the dataprovider. Note that this is invalid in ColdFusion: mxunit:dataprovider="#my_variable#" - this value must be a string.
Consider the following examples:

{code:title=Query Dataprovider Example}<!--------------------------------------------------------------------
           Example using a query:
    query_data = queryNew('name');
    queryAddRow(query_data,1);
    querySetCell(query_data,'name','ed');
   Note query name as a parameter
-------------------------------------------------------------------->
<cffunction name="testSomethingWithQuery" mxunit:dataprovider="query_data">
  <cfargument name="q" hint="A query object" />
  <cfset assertTrue( myObject.validateName(q.name), "#q.name# not valid." ) />
</cffunction>
{code}In this example we specify the name of a query that's in the variables scope of the test. We use this query name for the mxunit:dataprovider value. This test will be run once for each row in the query, and the value of "arguments.q" in this case will be the current row of the query.

{code:title=Basic List Dataprovider Example}<!-----------------------------------------------------------------
    Example using a list (identical to array)
    list_data = 'ed,joe,mary,jeff';
    Note list item name as a parameter
-------------------------------------------------------------------->

<cffunction name="testSomethingWithList" mxunit:dataprovider="list_data">
  <cfargument name="list_item" hint="Item in the list" />
  <cfset assertTrue( myObject.validateName(list_item), "#list_item# not valid." ) />
</cffunction>
{code}Iterating over a list is essentially the same as an array. The data here is provided as a list of values. As in all mxunit:dataprovider types, pass in the _name_ of the data to the dataprovider.

{code:title=Basic Excel/CSV Dataprovider}<!----------------------------------------------------------------
               Example using an Excel file
             Note query name as a parameter
------------------------------------------------------------------>
<cfset names_excel = getDirectoryFromPath(getCurrentTemplatePath()) & "/dataproviders/names.xls">
<cffunction name="testSomethingWithExcel" mxunit:dataprovider="names_excel">
  <cfargument name="name_query" hint="Default behavior is to convert Excel with header names to query object.">
  <cfset debug(myQuery)>
  <cfset assertTrue( myObject.validateName(name_query.name), "#name_query.name# not valid." ) />
</cffunction>
{code}For the basic default excel behavior where you have an Excel file with named row headers, pass the name of the file reference to the mxunit:dataprovider. Then, treat the data as a query object, using the row headings as column names.

{code:title=Basic Iterator Dataprovider}<!----------------------------------------------------------------
   Fuzzy Goodness
 ------------------------------------------------------------------>
<cffunction name="testRandomPasswordGenerator" mxunit:dataprovider="1000">
  <cfargument name="count" />
  <cfset pwd = myObject.generateRandomPassword(seed=count) />
  <cfset assert( myObject.isValidPassword(pwd), "#pwd# not valid. Occurred at iteration #count#" ) />
</cffunction>
{code}Sometimes it's useful to just iterate a number of times over some computation. You can do this with MXUnit simply by specify a positive integer to the mxunit:dataprovider.

To Do: Advanced Dataproviders (2D Arrays and Excel and CSVs with or without header rows).]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750406</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783190</id>
    <property name="body"><![CDATA[{toc}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]
{tip}

h2. Eclipse Plugin \-\- 1.4.1

* Added "Run MXUnit Tests" to the "Run As" menu. Default keybinding is alt-shift-x, m (you can change that in preferences)
* Added support for opening files from the "Tag Context" panel when those files are not in projects, i.e. opens from the file system.
* Thanks Denny for these contributions\!

h2. Framework \-\- 2.0.2


h3. Enhancements

* added restoreMethod() for undoing method overwrites from injectMethod(). This is particularly useful when using ColdSpring-managed objects in your tests. Inspired by [this post|http://www.silverwareconsulting.com/index.cfm/2009/7/14/Using-MXUnits-injectMethod-to-Reverse-an-injectMethod-call#c82B9BFA8-0DE7-8E6D-2C4C1BC85072A908]&nbsp;
* HTML Result tweaks... mostly code cleanup. Also, no need to specify a result type any longer as it defaults to the new HTML output introduced in MXUnit 2.0

h3. Bug Fixes

* User-supplied patch to JUnitXMLTestResult to properly encode "special characters". Thanks\!




h2. Framework \-\- 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and [request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5, label="some label"); This is particularly important when debugging ORM objects
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Core features should now be CF7 compatible.
* MightyMock behavioral inconsistency on CF8 fixed
* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in MightyMock on Adobe ColdFusion

h3. Backwards Compatibility

* debug() will be backwards compatible IF for calls not using named arguments
* debug() will now fail if the old (removed) "debugdata" argument was passed like so: debug(debugdata=someStruct); to fix, either change debugdata to "var" or remove the named argument]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750431</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783189</id>
    <property name="body"><![CDATA[{toc}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]
{tip}

h2. 2.0.2


h3. Enhancements

* added restoreMethod() for undoing method overwrites from injectMethod(). This is particularly useful when using ColdSpring-managed objects in your tests. Inspired by [this post|http://www.silverwareconsulting.com/index.cfm/2009/7/14/Using-MXUnits-injectMethod-to-Reverse-an-injectMethod-call#c82B9BFA8-0DE7-8E6D-2C4C1BC85072A908]&nbsp;
* HTML Result tweaks... mostly code cleanup. Also, no need to specify a result type any longer as it defaults to the new HTML output introduced in MXUnit 2.0

h3. Bug Fixes

* User-supplied patch to JUnitXMLTestResult to properly encode "special characters". Thanks\!




h2. 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and [request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5, label="some label"); This is particularly important when debugging ORM objects
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Core features should now be CF7 compatible.
* MightyMock behavioral inconsistency on CF8 fixed
* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in MightyMock on Adobe ColdFusion

h3. Backwards Compatibility

* debug() will be backwards compatible IF for calls not using named arguments
* debug() will now fail if the old (removed) "debugdata" argument was passed like so: debug(debugdata=someStruct); to fix, either change debugdata to "var" or remove the named argument]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750430</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783475</id>
    <property name="body"><![CDATA[h2. Running entire directories of Tests with one line of code

When you have a multiple tests  all residing in a directory and subdirectories,    it's very conventient to run everything contained in those directories.  In   this context, a directory of tests _implies_ a test suite, and MXUnit enables   you to run directories as test suites.

Running directories of tests can be done with a single line of code:

{code}
<cfinvoke component="mxunit.runner.DirectoryTestSuite"
	      method="run"
	      directory="#expandPath('/mxunit/PluginDemoTests')#"
	      recurse="true"
	      excludes="InvalidMarkupTest,FiveSecondTest"
	      returnvariable="results" />
{code}

*Explanation:*


* component: The MXUnit runner component responsible for running all the tests.
* method: The component's method being invoked.
* directory: A physical path to the directory containing your tests.
* recurse: A flag to indicate whether or not to run tests in all subdirectories.
* excludes: A list of component names to exclude.
* returnvariable: The variable name of the TestResult object returned
* componentPath: (Not listed above) Optional parameter that increases performance.    This is the component name prefix; e.g., com.foo.bar.        If not specified, MXUnit will locate the full component name using the ColdFusion server       cache of components.
* This will pick up any file that *starts or ends with the word "Test"*, but excluding anything in your "excludes" attribute

Once this is exectuted you can easily output the results to the screen:

{code}
<cfinvoke component="mxunit.runner.DirectoryTestSuite"
	      method="run"
	      directory="#expandPath('/mxunit/PluginDemoTests')#"
	      recurse="true"
	      excludes="InvalidMarkupTest,FiveSecondTest"
	      returnvariable="results" />

<cfoutput> #results.getResultsOutput('extjs')# </cfoutput>
{code}


Copy the above to a file called /mxunit/doc/tutorial/directoryRunner.cfm and   run it: [http://localhost:8500/mxunit/doc/tutorial/directoryRunner.cfm|http://localhost:8500/mxunit/doc/tutorial/directoryRunner.cfm] You should see this:

!dir-runner-1.png!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750730</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783476</id>
    <property name="body"><![CDATA[h2. Running entire directories of Tests with one line of code

When you have a multiple tests  all residing in a directory and subdirectories,    it's very conventient to run everything contained in those directories.  In   this context, a directory of tests _implies_ a test suite, and MXUnit enables   you to run directories as test suites.

Running directories of tests can be done with a single line of code:

{code}
<cfinvoke component="mxunit.runner.DirectoryTestSuite"
	      method="run"
	      directory="#expandPath('/mxunit/PluginDemoTests')#"
	      recurse="true"
	      excludes="InvalidMarkupTest,FiveSecondTest"
	      returnvariable="results" />
{code}

*Explanation:*


* component: The MXUnit runner component responsible for running all the tests.
* method: The component's method being invoked.
* directory: A physical path to the directory containing your tests.
* recurse: A flag to indicate whether or not to run tests in all subdirectories.
* excludes: A list of component names to exclude.
* componentPath: A class path to the directory containing your tests. This gives MXUnit the needed hint to how your web server and engine sees 
your tests. Without it, MXUnit attempts to use an Adobe CF component.
* returnvariable: The variable name of the TestResult object returned
* componentPath: (Not listed above) Optional parameter that increases performance.    This is the component name prefix; e.g., com.foo.bar.        If not specified, MXUnit will locate the full component name using the ColdFusion server       cache of components.
* This will pick up any file that *starts or ends with the word "Test"*, but excluding anything in your "excludes" attribute

Once this is exectuted you can easily output the results to the screen:

{code}
<cfinvoke component="mxunit.runner.DirectoryTestSuite"
	      method="run"
	      directory="#expandPath('/mxunit/PluginDemoTests')#"
	      componentPath="[classpath.to.install.location.]mxunit.pluginDemoTests"
	      recurse="true"
	      excludes="InvalidMarkupTest,FiveSecondTest"
	      returnvariable="results" />

<cfoutput> #results.getResultsOutput('extjs')# </cfoutput>
{code}


Copy the above to a file called /mxunit/doc/tutorial/directoryRunner.cfm and   run it: [http://localhost:8500/mxunit/doc/tutorial/directoryRunner.cfm|http://localhost:8500/mxunit/doc/tutorial/directoryRunner.cfm] You should see this:

!dir-runner-1.png!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750731</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5670588</id>
    <property name="viewCount">2</property>
    <property name="url"
      ><![CDATA[http://trac.fuseboxframework.org/pages/viewpage.action?pageId=786480]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786480</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-09-21 06:47:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-09-28 00:50:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783454</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [What is MXUnit and Why should you use it?|default:Why MXUnit?]
* [Getting Started|default:Getting Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|default:Install the Eclipse Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github|http://https://github.com/mxunit/]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
* John Whish ([blog|http://www.aliaspooryorik.com/], Twitter: [@aliaspooryorik|http://twitter.com/aliaspooryorik]
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-cell}
*MXUnit Office Hours*

Every few weeks we [get together on Adobe Connect|http://experts.na3.acrobat.com/mxunit-office-hours/] to chat about testing. Meetups start at Noon EST ([convert|http://www.timeanddate.com/worldclock/converter.html]). You're automatically promoted to presenter so bring a microphone. Here's the schedule:

{google-calendar:mode=agenda|width=300|height=300}[http://www.google.com/calendar/ical/h5eh6m4iirte5b7u3r997ul5q0%40group.calendar.google.com/public/basic.ics]{google-calendar}



{table-row}
{table}
{column}
{column:width=3%}




{column}
{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750703</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783457</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}

h1. Introduction

If you're using git as your SCM, you'll need to install the Jenkins [git plugin|https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin] , potentially configure it, and properly configure your git projects.


h1. Prerequisites

I'm assuming you know what git is, and that you have a git environment installed. If you're on Windows, this means either msysgit or cygwin with git installed. Bottom line: from a command line, you should be able to type "git" and get something other than "unrecognized command". If you have git installed, and your cmd doesn't recognize it, it should simply be a matter of adding the path to the "bin" directory to your system's path variable. If you don't have a clue about what I just said, send a note to the mxunit google group and we'll walk you through it.


h1. Installing and configuring the git plugin in Jenkins

In the Jenkins plugin section, find the "git plugin" and install it. This is NOT the github plugin, which is merely a decorator. You need the git plugin to communicate with your git projects regardless of where you host them.

Once installed, and you've restarted Jenkins, head to "Manage Jenkins" and find the config section for git. By default it'll show something like "git.exe" in the git path. This may or may not work for you. In addition, *if you don't have git installed, it'll give you an option to download it*.

In that field, I entered the full path to my git.exe, which on windows was "C:\cygwin\bin\git.exe"



h1. Configuring your Jenkins job




{column}
{column:width=5%}


{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750706</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5670621</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com.au/search?q=mxunit+tutorial&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-09-22 03:33:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-09-22 03:33:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5670654</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunit+advanced+install+root+appmapping&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-GB:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341213</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-09-23 11:17:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-09-23 11:17:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193158</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [What is MXUnit and Why should you use it?|default:Why MXUnit?]
* [Getting Started|default:Getting Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|default:Install the Eclipse Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-cell}

*MXUnit Office Hours*

Every few weeks we [get together on Adobe Connect|http://experts.na3.acrobat.com/mxunit-office-hours/] to chat about testing. Meetups start at Noon EST ([convert|http://www.timeanddate.com/worldclock/converter.html]). You're automatically promoted to presenter so bring a microphone. Here's the schedule:

{google-calendar:mode=agenda|width=300|height=300}[http://www.google.com/calendar/ical/h5eh6m4iirte5b7u3r997ul5q0%40group.calendar.google.com/public/basic.ics]{google-calendar}



{table-row}
{table}
{column}
{column:width=3%}



{column}
{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160391</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193165</id>
    <property name="body"><![CDATA[{toc}

h1. Creating an AWS Account


To get started with EC2, you'll need an Amazon Web Services (AWS) account. Don't worry... you can play around for a while without spending much money at all. Get out a credit card b/c you'll need it, but as you're configuring your first instances and doing some testing, you'll be paying pennies.

\*First, go here: [http://aws.amazon.com/about-aws/|http://aws.amazon.com/about-aws/*]

You will go through an account signup. If you are prompted to download any files, do it. Save them somewhere you won't forget them. Do not publish them on your blog. Do not put them in your public Dropbox share. Keep them secret. Keep them safe. I keep all AWS-related files in my private DropBox so that I can access them on multiple machines.

{note}You will not be charged anything until you create instances and run them. There is no charge for creating an account{note}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160398</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193164</id>
    <property name="body"><![CDATA[{toc}

h1. Creating an AWS Account


To get started with EC2, you'll need an Amazon Web Services (AWS) account. Don't worry... you can play around for a while without spending much money at all. Get out a credit card b/c you'll need it, but as you're configuring your first instances and doing some testing, you'll be paying pennies.

*First, go here: http://aws.amazon.com/about-aws/*

You will go through an account signup. If you are prompted to download any files, do it. Save them somewhere you won't forget them. Do not publish them on your blog. Do not put them in your public Dropbox share. Keep them secret. Keep them safe. I keep all AWS-related files in my private DropBox so that I can access them on multiple machines.

{note}You will not be charged anything until you create instances and run them. There is no charge for creating an account{note}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160397</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193163</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160396</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193156</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [What is MXUnit and Why should you use it?|default:Why MXUnit?]
* [Getting Started|default:Getting Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|default:Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-cell}

*MXUnit Office Hours*

Every few weeks we [get together on Adobe Connect|http://experts.na3.acrobat.com/mxunit-office-hours/] to chat about testing. Meetups start at Noon EST ([convert|http://www.timeanddate.com/worldclock/converter.html]). You're automatically promoted to presenter so bring a microphone. Here's the schedule:

{google-calendar:mode=agenda|width=300|height=300}[http://www.google.com/calendar/ical/h5eh6m4iirte5b7u3r997ul5q0%40group.calendar.google.com/public/basic.ics]{google-calendar}



{table-row}
{table}
{column}
{column:width=3%}



{column}
{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160389</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193154</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [What is MXUnit and Why should you use it?|default:Why MXUnit?]
* [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-cell}

*MXUnit Office Hours*

Every few weeks we [get together on Adobe Connect|http://experts.na3.acrobat.com/mxunit-office-hours/] to chat about testing. Meetups start at Noon EST ([convert|http://www.timeanddate.com/worldclock/converter.html]). You're automatically promoted to presenter so bring a microphone. Here's the schedule:

{google-calendar:mode=agenda|width=300|height=300}[http://www.google.com/calendar/ical/h5eh6m4iirte5b7u3r997ul5q0%40group.calendar.google.com/public/basic.ics]{google-calendar}



{table-row}
{table}
{column}
{column:width=3%}



{column}
{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160386</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193176</id>
    <property name="body"><![CDATA[{toc}

h1. Launching your first EC2 Instance

Once you've signed up, you'll go to your AWS Console: [https://console.aws.amazon.com/ec2/home]

It'll be empty to start. You should have some tabs at the top of the screen. Click the EC2 tab. If it's not available, or if it gives you a screen indicating you haven't signed up for EC2 yet, go through the steps to sign up. Again, don't fret: you're not signing away your mortgage or jeopardizing your family's supper.

Once signed up for EC2, you'll have some links in your AWS Console to "Launch Instance". Clicking that will take you to the "Request Instances" Wizard.

h2. Request Instances Wizard


h3. 32bit or 64 bit, Linux or Windows?


Here's your first "real" decision, and you needn't labor over it. Essentially, you're choosing a "base" platform on which to build your first ColdFusion AMI. This may seem daunting at first, considering just how many AMIs are available. My advice is to not sweat it. If you're familiar with Windows, use Windows. If you're familiar with Linux, use linux. If all you know is "I want Windows", or "I want Linux", then choose one of the Win or Linux AMIs that appears on the initial "Quick Start" screen. These are generally either 32 or 64 bit.

*If you choose 64 bit, you're going to pay more.* The reason is that EC2 comes in a variety of "sizes", from "small" to humongous. Obviously, 32 bit doesn't do humongous because 32 bit can only address so much memory.

{tip}My advice: don't expect to make the best decision right away. You'll most likely end up configuring a different kind of server eventually. For now, concentrate on getting started, not getting it right{tip}

h3. Launch or Spot?

* to get started, choose "Launch Instances" as opposed to Spot instances. Spot instances are a way to save money, but they may add a bit of time onto your Getting Started experience. If you're choosing Windows, it doesn't matter anyway because the price is the same.

In the Instance Details screen, keep the defaults. Click through.

In the next screen, you'll be prompted for some key-value pairs. These are only meaningful to you. For example, you get prompted with a "Name" key... give it a name that's meaningful to you... "Windows Attempt #1", or "Linux Attempt #1", or something like that. Click through.

h3. Key Pairs

On the next screen, you'll be prompted about Key Pairs. These are critical. Presumably this is your first time through, so click "Create a new KeyPair" and give it a name. Click to download the file. Again, keep it secret, keep it safe. This will be a ".pem" file.

h3. Security Group

On the next screen you'll be prompted to create a Security Group for this new instance. Think of a Security Group as a firewall. Once you assign a SG to an instance, that's it. You live with it forever. This does NOT mean you can't change the configuration of this group\! You can.

At the very least, to start, you'll want to *Add* "SSH" as a rule. No, Windows servers don't have SSH, but you're going to install it, so add the rule now.

{tip}Give this Security Group a meaningful name, like "Win2k8" or some such thing.{tip}

h3. The Meter is now running

Once you launch an instance, the meter starts running. So don't launch an instance and forget about it for 3 months. You're now being billed until you stop this instance.


h3. Almost there


Congratulations. You've launched your first AWS EC2 instance. It's going to take a while to spin up, perhaps 15 minutes or more, so go grab a beer.

h3. Connecting to your instance

If you go back to your AWS Console, you'll see your instances in the Instances tab. It'll be marked as "Running", and my experience is that it takes 15-30 minutes for it to become available for you to connect to it. If you right click on that instance, you'll have a number of options. Right now, click on the "Get System Log" option. It'll pop up a window, and you'll probably see something like "Gathering metadata" or "Rebooting" or some such thing. After a while, it'll indicate that it's "ready", which means you can connect to it.

If you're running a Windows Instance, you'll need to get the initial Windows password, via the "Get Windows password" option in the menu. This will prompt you for the contents of your keypair file that you downloaded earlier. Open that file in a text editor, and copy the entire contents. Paste that chunk into this window, and it'll take you through the process of getting the admin password. This, too, might take some time. Be patient. Beer #2 doesn't hurt. I'd be remiss if I didn't suggest a Terrapin Big Hoppy Monster. I'd also be remiss if I didn't at this point direct you to Pintley.com, a ColdFusion-powered site for beer lovers. (Noooo, I don't have a problem. I just love great beer. And ColdFusion). Now, then...


Once you have that, select "Connect", and you'll get an option to "download a shortcut file". This is a typical windows ".rdp" file, which should be familiar to you if you've RDP''d into a windows server before.

Go through the RDP connection screens, and use "administrator" as the username, and that password as the password.

h3. You're in

You're in. You now have a brand new server (a virtual one, albeit). Now it's time to turn this thing into a ColdFusion server. It's way beyond the scope of this document to explain how to install and configure most of this software. I trust that you know how to create a CF server and that, if you don't, you know how to find the resources to teach you. From now on, I'll explain the important things you'll need to do as you install and configure this server.

h2. The Software you need

At this point, I'm going to describe how to set up a Windows server. If you're on Linux, you know how to do all of this already.

{note} I hope, at some point, Adobe will either provide supported AMIs or allow us to publish our own AMIs. As of this writing, neither are true. This means you need to start from scratch.{note}


Download the following:

*Required*
* firefox or chrome. You'll need to change the permissions on IE to download files. Do it once, to give you permission to download a decent browser. Then go drink another Big Hoppy Monster to eradicate the memory of dealing with IE for the night. Once you have a suitable browser installed:
* Apache web server. Or, if you like, stick with IIS that's already on the server. If you prefer IIS, I still respect you, though I do fear for your sanity.
* ColdFusion
* The latest CF updater
* Any CF hotfixes
* A respectable text editor, like Notepad+\+ or Notepad2 or Textpad. This is listed as required because Notepad sucks. Period.
* [WinSSH|http://www.bitvise.com/winsshd] by bitvise. I tried FreeSSH and it didn't work on Windows 2008. YMMV. WinSSH licensing seemed reasonable to me, and it worked flawlessly.

*Optional*
* [Launchy|http://blog.mxunit.org/2009/04/timesavers-launchy.html] . Because a man without a key launcher just ain't livin'.
* Tortoise SVN
* [Git Bash|http://en.kioskea.net/faq/499-git-for-windows]&nbsp;
* BareTail if you want to sanely read log files

h2. Installation

Install the above just as you would on your own server. Essentially, you're now on your own server, except you're renting it. Start with the webserver (apache), then go to CF and all the hotfixes. You'll likely need to restart a few times... it is Windows, after all. If you're on Linux, you won't have read this far so no worries.

h2. Secure CFAdmin

By now, 4 beers or so in, you should have CF running and be able to connect to CFAdmin (localhost/CFIDE/administrator). Guess what... everyone else can get to it, too, publicly. No, they don't know your password, but you'll want to lock it down. If you've installed apache, here's how to do it (thanks [Jason Dean|http://www.12robots.com] \!)


h2. Windows Firewall

When you created a Security Group, it already had Port 80 open for web traffic, and you added Port 22 for SSH. That's on the AWS side, but you'll also need to configure it in Windows. This is easy:
* Start \--> Windows Firewall \-->Change settings
* Exceptions Tab
* Add Port
** Add port 80
** Add port 22

h2. EC2 Windows user account

Create a new user account&nbsp; named "EC2-user". Password-protect that account. I chose the name "EC2" because the official Amazon Linux distros use that name, and the Eclipse tools don't make it easy (if possible) to use different users for different servers (more on the Eclipse tools later).

Log out of that RDP session and log in as ec2-user, with the password you chose, to ensure that everything is correctly configured.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160410</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193174</id>
    <property name="body"><![CDATA[{toc}

h1. Launching your first EC2 Instance

Once you've signed up, you'll go to your AWS Console: [https://console.aws.amazon.com/ec2/home]

It'll be empty to start. You should have some tabs at the top of the screen. Click the EC2 tab. If it's not available, or if it gives you a screen indicating you haven't signed up for EC2 yet, go through the steps to sign up. Again, don't fret: you're not signing away your mortgage or jeopardizing your family's supper.

Once signed up for EC2, you'll have some links in your AWS Console to "Launch Instance". Clicking that will take you to the "Request Instances" Wizard.

h2. Request Instances Wizard


h3. 32bit or 64 bit, Linux or Windows?


Here's your first "real" decision, and you needn't labor over it. Essentially, you're choosing a "base" platform on which to build your first ColdFusion AMI. This may seem daunting at first, considering just how many AMIs are available. My advice is to not sweat it. If you're familiar with Windows, use Windows. If you're familiar with Linux, use linux. If all you know is "I want Windows", or "I want Linux", then choose one of the Win or Linux AMIs that appears on the initial "Quick Start" screen. These are generally either 32 or 64 bit.

*If you choose 64 bit, you're going to pay more.* The reason is that EC2 comes in a variety of "sizes", from "small" to humongous. Obviously, 32 bit doesn't do humongous because 32 bit can only address so much memory.

{tip}My advice: don't expect to make the best decision right away. You'll most likely end up configuring a different kind of server eventually. For now, concentrate on getting started, not getting it right{tip}

h3. Launch or Spot?

to get started, choose "Launch Instances" as opposed to Spot instances. Spot instances are a way to save money, but they may add a bit of time onto your Getting Started experience. If you're choosing Windows, it doesn't matter anyway because the price is the same.

In the Instance Details screen, keep the defaults. Click through.

In the next screen, you'll be prompted for some key-value pairs. These are only meaningful to you. For example, you get prompted with a "Name" key... give it a name that's meaningful to you... "Windows Attempt #1", or "Linux Attempt #1", or something like that. Click through.

h3. Key Pairs

On the next screen, you'll be prompted about Key Pairs. These are critical. Presumably this is your first time through, so click "Create a new KeyPair" and give it a name. Click to download the file. Again, keep it secret, keep it safe. This will be a ".pem" file.

h3. Security Group

On the next screen you'll be prompted to create a Security Group for this new instance. Think of a Security Group as a firewall. Once you assign a SG to an instance, that's it. You live with it forever. This does NOT mean you can't change the configuration of this group\! You can.

At the very least, to start, you'll want to *Add* "SSH" as a rule. No, Windows servers don't have SSH, but you're going to install it, so add the rule now.

{tip}Give this Security Group a meaningful name, like "Win2k8" or some such thing.{tip}

h3. The Meter is now running

Once you launch an instance, the meter starts running. So don't launch an instance and forget about it for 3 months. You're now being billed until you stop this instance.


h3. That's it\!

Congratulations. You've launched your first AWS EC2 instance. It's going to take a while to spin up, perhaps 15 minutes or more, so go grab a beer.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160408</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193180</id>
    <property name="body"><![CDATA[{toc}

h1. Launching your first EC2 Instance

Once you've signed up, you'll go to your AWS Console: [https://console.aws.amazon.com/ec2/home]

It'll be empty to start. You should have some tabs at the top of the screen. Click the EC2 tab. If it's not available, or if it gives you a screen indicating you haven't signed up for EC2 yet, go through the steps to sign up. Again, don't fret: you're not signing away your mortgage or jeopardizing your family's supper.

Once signed up for EC2, you'll have some links in your AWS Console to "Launch Instance". Clicking that will take you to the "Request Instances" Wizard.

h2. Request Instances Wizard


h3. 32bit or 64 bit, Linux or Windows?


Here's your first "real" decision, and you needn't labor over it. Essentially, you're choosing a "base" platform on which to build your first ColdFusion AMI. This may seem daunting at first, considering just how many AMIs are available. My advice is to not sweat it. If you're familiar with Windows, use Windows. If you're familiar with Linux, use linux. If all you know is "I want Windows", or "I want Linux", then choose one of the Win or Linux AMIs that appears on the initial "Quick Start" screen. These are generally either 32 or 64 bit.

*If you choose 64 bit, you're going to pay more.* The reason is that EC2 comes in a variety of "sizes", from "small" to humongous. Obviously, 32 bit doesn't do humongous because 32 bit can only address so much memory.

{tip}My advice: don't expect to make the best decision right away. You'll most likely end up configuring a different kind of server eventually. For now, concentrate on getting started, not getting it right{tip}

h3. Launch or Spot?

* to get started, choose "Launch Instances" as opposed to Spot instances. Spot instances are a way to save money, but they may add a bit of time onto your Getting Started experience. If you're choosing Windows, it doesn't matter anyway because the price is the same.

In the Instance Details screen, keep the defaults. Click through.

In the next screen, you'll be prompted for some key-value pairs. These are only meaningful to you. For example, you get prompted with a "Name" key... give it a name that's meaningful to you... "Windows Attempt #1", or "Linux Attempt #1", or something like that. Click through.

h3. Key Pairs

On the next screen, you'll be prompted about Key Pairs. These are critical. Presumably this is your first time through, so click "Create a new KeyPair" and give it a name. Click to download the file. Again, keep it secret, keep it safe. This will be a ".pem" file.

h3. Security Group

On the next screen you'll be prompted to create a Security Group for this new instance. Think of a Security Group as a firewall. Once you assign a SG to an instance, that's it. You live with it forever. This does NOT mean you can't change the configuration of this group\! You can.

At the very least, to start, you'll want to *Add* "SSH" as a rule. No, Windows servers don't have SSH, but you're going to install it, so add the rule now.

{tip}Give this Security Group a meaningful name, like "Win2k8" or some such thing.{tip}

h3. The Meter is now running

Once you launch an instance, the meter starts running. So don't launch an instance and forget about it for 3 months. You're now being billed until you stop this instance.


h3. Almost there


Congratulations. You've launched your first AWS EC2 instance. It's going to take a while to spin up, perhaps 15 minutes or more, so go grab a beer.

h3. Connecting to your instance

If you go back to your AWS Console, you'll see your instances in the Instances tab. It'll be marked as "Running", and my experience is that it takes 15-30 minutes for it to become available for you to connect to it. If you right click on that instance, you'll have a number of options. Right now, click on the "Get System Log" option. It'll pop up a window, and you'll probably see something like "Gathering metadata" or "Rebooting" or some such thing. After a while, it'll indicate that it's "ready", which means you can connect to it.

If you're running a Windows Instance, you'll need to get the initial Windows password, via the "Get Windows password" option in the menu. This will prompt you for the contents of your keypair file that you downloaded earlier. Open that file in a text editor, and copy the entire contents. Paste that chunk into this window, and it'll take you through the process of getting the admin password. This, too, might take some time. Be patient. Beer #2 doesn't hurt. I'd be remiss if I didn't suggest a Terrapin Big Hoppy Monster. I'd also be remiss if I didn't at this point direct you to Pintley.com, a ColdFusion-powered site for beer lovers. (Noooo, I don't have a problem. I just love great beer. And ColdFusion). Now, then...


Once you have that, select "Connect", and you'll get an option to "download a shortcut file". This is a typical windows ".rdp" file, which should be familiar to you if you've RDP''d into a windows server before.

Go through the RDP connection screens, and use "administrator" as the username, and that password as the password.

h3. You're in

You're in. You now have a brand new server (a virtual one, albeit). Now it's time to turn this thing into a ColdFusion server. It's way beyond the scope of this document to explain how to install and configure most of this software. I trust that you know how to create a CF server and that, if you don't, you know how to find the resources to teach you. From now on, I'll explain the important things you'll need to do as you install and configure this server.

h2. The Software you need

At this point, I'm going to describe how to set up a Windows server. If you're on Linux, you know how to do all of this already.

{note} I hope, at some point, Adobe will either provide supported AMIs or allow us to publish our own AMIs. As of this writing, neither are true. This means you need to start from scratch.{note}


Download the following:

*Required*
* firefox or chrome. You'll need to change the permissions on IE to download files. Do it once, to give you permission to download a decent browser. Then go drink another Big Hoppy Monster to eradicate the memory of dealing with IE for the night. Once you have a suitable browser installed:
* Apache web server. Or, if you like, stick with IIS that's already on the server. If you prefer IIS, I still respect you, though I do fear for your sanity.
* ColdFusion
* The latest CF updater
* Any CF hotfixes
* A respectable text editor, like Notepad+\+ or Notepad2 or Textpad. This is listed as required because Notepad sucks. Period.
* [WinSSH|http://www.bitvise.com/winsshd] by bitvise. I tried FreeSSH and it didn't work on Windows 2008. YMMV. WinSSH licensing seemed reasonable to me, and it worked flawlessly.

*Optional*
* [Launchy|http://blog.mxunit.org/2009/04/timesavers-launchy.html] . Because a man without a key launcher just ain't livin'.
* Tortoise SVN
* [Git Bash|http://en.kioskea.net/faq/499-git-for-windows]&nbsp;
* BareTail if you want to sanely read log files

h2. Installation

Install the above just as you would on your own server. Essentially, you're now on your own server, except you're renting it. Start with the webserver (apache), then go to CF and all the hotfixes. You'll likely need to restart a few times... it is Windows, after all. If you're on Linux, you won't have read this far so no worries.

h2. Secure CFAdmin

By now, 4 beers or so in, you should have CF running and be able to connect to CFAdmin (localhost/CFIDE/administrator). Guess what... everyone else can get to it, too, publicly. No, they don't know your password, but you'll want to lock it down. If you've installed apache, here's how to do it (thanks [Jason Dean|http://www.12robots.com] \!)

In your Apache httpd.conf, add these lines:# Prevent external CFIDE access
<Location /CFIDE>
Order Deny,Allow
Deny from all
Allow from 127.0.0.1
</Location>

# Allow CFIDE access for scripts (ajaxy goodness, etc)
<Location /CFIDE/scripts>
Order Allow,Deny
Allow from all
</Location>


h2. Windows Firewall

When you created a Security Group, it already had Port 80 open for web traffic, and you added Port 22 for SSH. That's on the AWS side, but you'll also need to configure it in Windows. This is easy:
* Start \--> Windows Firewall \-->Change settings
* Exceptions Tab
* Add Port
** Add port 80
** Add port 22

h2. EC2 Windows user account

Create a new user account&nbsp; named "EC2-user". Password-protect that account. I chose the name "EC2" because the official Amazon Linux distros use that name, and the Eclipse tools don't make it easy (if possible) to use different users for different servers (more on the Eclipse tools later).

Log out of that RDP session and log in as ec2-user, with the password you chose, to ensure that everything is correctly configured.

h2. Configure SSH

If you want to more easily deploy code to Windows, you'll probably do so over SSH. This means you need an SSHd server and at least one account with permisions.


Assuming you've installed the WinSSH software linked above, you can now associate this ec2-user with SSH. To do so, open WinSSH, click the "settings" link, Click the Windows Accounts tab, and add the Windows ec2-user.

h2. Whew\!

Who knew that setting up a server would be *the same amount of work as building you own CF Server?* Well... that's what you're doing, so it shouldn't be a surprise, Just because you're paying by the hour doesn't mean you get any work for free (until Adobe provides AMIs...)

h2. Let's test

Assuming you have set up your web server, installed ColdFusion, and opened the ports in both Amazon Security Group and Windows Firewall, your server is now online. Put a test.cfm file in your web root (wherever you have that configured in your webserver), give it contents like <cfoutput>#now()#</cfoutput>.

From within that server (i.e. RDP'd into it), load that file at http://localhost/test.cfm. If you see the current date and time, you're almost there.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160414</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193178</id>
    <property name="body"><![CDATA[{toc}

h1. Launching your first EC2 Instance

Once you've signed up, you'll go to your AWS Console: [https://console.aws.amazon.com/ec2/home]

It'll be empty to start. You should have some tabs at the top of the screen. Click the EC2 tab. If it's not available, or if it gives you a screen indicating you haven't signed up for EC2 yet, go through the steps to sign up. Again, don't fret: you're not signing away your mortgage or jeopardizing your family's supper.

Once signed up for EC2, you'll have some links in your AWS Console to "Launch Instance". Clicking that will take you to the "Request Instances" Wizard.

h2. Request Instances Wizard


h3. 32bit or 64 bit, Linux or Windows?


Here's your first "real" decision, and you needn't labor over it. Essentially, you're choosing a "base" platform on which to build your first ColdFusion AMI. This may seem daunting at first, considering just how many AMIs are available. My advice is to not sweat it. If you're familiar with Windows, use Windows. If you're familiar with Linux, use linux. If all you know is "I want Windows", or "I want Linux", then choose one of the Win or Linux AMIs that appears on the initial "Quick Start" screen. These are generally either 32 or 64 bit.

*If you choose 64 bit, you're going to pay more.* The reason is that EC2 comes in a variety of "sizes", from "small" to humongous. Obviously, 32 bit doesn't do humongous because 32 bit can only address so much memory.

{tip}My advice: don't expect to make the best decision right away. You'll most likely end up configuring a different kind of server eventually. For now, concentrate on getting started, not getting it right{tip}

h3. Launch or Spot?

* to get started, choose "Launch Instances" as opposed to Spot instances. Spot instances are a way to save money, but they may add a bit of time onto your Getting Started experience. If you're choosing Windows, it doesn't matter anyway because the price is the same.

In the Instance Details screen, keep the defaults. Click through.

In the next screen, you'll be prompted for some key-value pairs. These are only meaningful to you. For example, you get prompted with a "Name" key... give it a name that's meaningful to you... "Windows Attempt #1", or "Linux Attempt #1", or something like that. Click through.

h3. Key Pairs

On the next screen, you'll be prompted about Key Pairs. These are critical. Presumably this is your first time through, so click "Create a new KeyPair" and give it a name. Click to download the file. Again, keep it secret, keep it safe. This will be a ".pem" file.

h3. Security Group

On the next screen you'll be prompted to create a Security Group for this new instance. Think of a Security Group as a firewall. Once you assign a SG to an instance, that's it. You live with it forever. This does NOT mean you can't change the configuration of this group\! You can.

At the very least, to start, you'll want to *Add* "SSH" as a rule. No, Windows servers don't have SSH, but you're going to install it, so add the rule now.

{tip}Give this Security Group a meaningful name, like "Win2k8" or some such thing.{tip}

h3. The Meter is now running

Once you launch an instance, the meter starts running. So don't launch an instance and forget about it for 3 months. You're now being billed until you stop this instance.


h3. Almost there


Congratulations. You've launched your first AWS EC2 instance. It's going to take a while to spin up, perhaps 15 minutes or more, so go grab a beer.

h3. Connecting to your instance

If you go back to your AWS Console, you'll see your instances in the Instances tab. It'll be marked as "Running", and my experience is that it takes 15-30 minutes for it to become available for you to connect to it. If you right click on that instance, you'll have a number of options. Right now, click on the "Get System Log" option. It'll pop up a window, and you'll probably see something like "Gathering metadata" or "Rebooting" or some such thing. After a while, it'll indicate that it's "ready", which means you can connect to it.

If you're running a Windows Instance, you'll need to get the initial Windows password, via the "Get Windows password" option in the menu. This will prompt you for the contents of your keypair file that you downloaded earlier. Open that file in a text editor, and copy the entire contents. Paste that chunk into this window, and it'll take you through the process of getting the admin password. This, too, might take some time. Be patient. Beer #2 doesn't hurt. I'd be remiss if I didn't suggest a Terrapin Big Hoppy Monster. I'd also be remiss if I didn't at this point direct you to Pintley.com, a ColdFusion-powered site for beer lovers. (Noooo, I don't have a problem. I just love great beer. And ColdFusion). Now, then...


Once you have that, select "Connect", and you'll get an option to "download a shortcut file". This is a typical windows ".rdp" file, which should be familiar to you if you've RDP''d into a windows server before.

Go through the RDP connection screens, and use "administrator" as the username, and that password as the password.

h3. You're in

You're in. You now have a brand new server (a virtual one, albeit). Now it's time to turn this thing into a ColdFusion server. It's way beyond the scope of this document to explain how to install and configure most of this software. I trust that you know how to create a CF server and that, if you don't, you know how to find the resources to teach you. From now on, I'll explain the important things you'll need to do as you install and configure this server.

h2. The Software you need

At this point, I'm going to describe how to set up a Windows server. If you're on Linux, you know how to do all of this already.

{note} I hope, at some point, Adobe will either provide supported AMIs or allow us to publish our own AMIs. As of this writing, neither are true. This means you need to start from scratch.{note}


Download the following:

*Required*
* firefox or chrome. You'll need to change the permissions on IE to download files. Do it once, to give you permission to download a decent browser. Then go drink another Big Hoppy Monster to eradicate the memory of dealing with IE for the night. Once you have a suitable browser installed:
* Apache web server. Or, if you like, stick with IIS that's already on the server. If you prefer IIS, I still respect you, though I do fear for your sanity.
* ColdFusion
* The latest CF updater
* Any CF hotfixes
* A respectable text editor, like Notepad+\+ or Notepad2 or Textpad. This is listed as required because Notepad sucks. Period.
* [WinSSH|http://www.bitvise.com/winsshd] by bitvise. I tried FreeSSH and it didn't work on Windows 2008. YMMV. WinSSH licensing seemed reasonable to me, and it worked flawlessly.

*Optional*
* [Launchy|http://blog.mxunit.org/2009/04/timesavers-launchy.html] . Because a man without a key launcher just ain't livin'.
* Tortoise SVN
* [Git Bash|http://en.kioskea.net/faq/499-git-for-windows]&nbsp;
* BareTail if you want to sanely read log files

h2. Installation

Install the above just as you would on your own server. Essentially, you're now on your own server, except you're renting it. Start with the webserver (apache), then go to CF and all the hotfixes. You'll likely need to restart a few times... it is Windows, after all. If you're on Linux, you won't have read this far so no worries.

h2. Secure CFAdmin

By now, 4 beers or so in, you should have CF running and be able to connect to CFAdmin (localhost/CFIDE/administrator). Guess what... everyone else can get to it, too, publicly. No, they don't know your password, but you'll want to lock it down. If you've installed apache, here's how to do it (thanks [Jason Dean|http://www.12robots.com] \!)

In your Apache httpd.conf, add these lines:# Prevent external CFIDE access
<Location /CFIDE>
    Order Deny,Allow
    Deny from all
    Allow from 127.0.0.1
</Location>

# Allow CFIDE access for scripts (ajaxy goodness, etc)
<Location /CFIDE/scripts>
    Order Allow,Deny
    Allow from all
</Location>


h2. Windows Firewall

When you created a Security Group, it already had Port 80 open for web traffic, and you added Port 22 for SSH. That's on the AWS side, but you'll also need to configure it in Windows. This is easy:
* Start --> Windows Firewall -->Change settings
* Exceptions Tab
* Add Port
** Add port 80
** Add port 22

h2. EC2 Windows user account

Create a new user account&nbsp; named "EC2-user". Password-protect that account. I chose the name "EC2" because the official Amazon Linux distros use that name, and the Eclipse tools don't make it easy (if possible) to use different users for different servers (more on the Eclipse tools later).

Log out of that RDP session and log in as ec2-user, with the password you chose, to ensure that everything is correctly configured.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160412</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193167</id>
    <property name="body"><![CDATA[[Creating an account|Creating an AWS Account]

Launching your first instance

Creating your first ColdFusion AMI

Launching your ColdFusion AMI as a new Instance

Deploying to multiple instances

Managing Configuration Changes

Spot Requests]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160400</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193172</id>
    <property name="body"><![CDATA[{toc}

h1. Launching your first EC2 Instance

Once you've signed up, you'll go to your AWS Console: https://console.aws.amazon.com/ec2/home

It'll be empty to start. You should have some tabs at the top of the screen. Click the EC2 tab. If it's not available, or if it gives you a screen indicating you haven't signed up for EC2 yet, go through the steps to sign up. Again, don't fret: you're not signing away your mortgage or jeopardizing your family's supper.

Once signed up for EC2, you'll have some links in your AWS Console to "Launch Instance". Clicking that will take you to the "Request Instances" Wizard.

h2. Request Instances Wizard


h3. 32bit or 64 bit, Linux or Windows?


Here's your first "real" decision, and you needn't labor over it. Essentially, you're choosing a "base" platform on which to build your first ColdFusion AMI. This may seem daunting at first, considering just how many AMIs are available. My advice is to not sweat it. If you're familiar with Windows, use Windows. If you're familiar with Linux, use linux. If all you know is "I want Windows", or "I want Linux", then choose one of the Win or Linux AMIs that appears on the initial "Quick Start" screen. These are generally either 32 or 64 bit.

*If you choose 64 bit, you're going to pay more.* The reason is that EC2 comes in a variety of "sizes", from "small" to humongous. Obviously, 32 bit doesn't do humongous because 32 bit can only address so much memory.

{tip}My advice: don't expect to make the best decision right away. You'll most likely end up configuring a different kind of server eventually. For now, concentrate on getting started, not getting it right{tip}

h3. Launch or Spot?

to get started, choose "Launch Instances" as opposed to Spot instances. Spot instances are a way to save money, but they may add a bit of time onto your Getting Started experience. If you're choosing Windows, it doesn't matter anyway because the price is the same.

In the Instance Details screen, keep the defaults. Click through.

In the next screen, you'll be prompted for some key-value pairs. These are only meaningful to you. For example, you get prompted with a "Name" key... give it a name that's meaningful to you... "Windows Attempt #1", or "Linux Attempt #1", or something like that. Click through.

h3. Key Pairs

On the next screen, you'll be prompted about Key Pairs. These are critical. Presumably this is your first time through, so click "Create a new KeyPair" and give it a name. Click to download the file. Again, keep it secret, keep it safe. This will be a ".pem" file.

h3. Security Group

On the next screen you'll be prompted to create a Security Group for this new instance. Think of a Security Group as a firewall. Once you assign a SG to an instance, that's it. You live with it forever. This does NOT mean you can't change the configuration of this group\! You can.

At the very least, to start, you'll want to *Add* "SSH" as a rule. No, Windows servers don't have SSH, but you're going to install it, so add the rule now.

{tip}Give this Security Group a meaningful name, like "Win2k8" or some such thing.{tip}

h3. That's it\!

Congratulations. You've launched your first AWS EC2 instance. It's going to take a while to spin up, perhaps 15 minutes or more, so go grab a beer.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160406</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5670502</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/m/search?source=android-home&client=ms-android-verizon&q=mylyn+context+button+on+project+explorer&start=20&sa=N]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341213</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-09-16 23:11:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-09-16 23:11:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5670488</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?ie=UTF-8&oe=UTF-8&sourceid=navclient&gfns=1&q=mxunit+mylyn]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341213</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-09-16 19:35:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-09-16 19:35:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783415</id>
    <property name="body"><![CDATA[{toc}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]

You can get the latest version of the Eclipse plugin by pointing at this update site: http://mxunit.org/update

{tip}

h2. Eclipse Plugin \-\- 1.4.1

* Added "Run MXUnit Tests" to the "Run As" menu. Default keybinding is alt-shift-x, m (you can change that in preferences)
* Added support for opening files from the "Tag Context" panel when those files are not in projects, i.e. opens from the file system.
* Thanks Denny for these contributions\!

h2. Framework \-\- 2.0.2


h3. Enhancements

* added restoreMethod() for undoing method overwrites from injectMethod(). This is particularly useful when using ColdSpring-managed objects in your tests. Inspired by [this post|http://www.silverwareconsulting.com/index.cfm/2009/7/14/Using-MXUnits-injectMethod-to-Reverse-an-injectMethod-call#c82B9BFA8-0DE7-8E6D-2C4C1BC85072A908]&nbsp;
* HTML Result tweaks... mostly code cleanup. Also, no need to specify a result type any longer as it defaults to the new HTML output introduced in MXUnit 2.0

h3. Bug Fixes

* User-supplied patch to JUnitXMLTestResult to properly encode "special characters". Thanks\!




h2. Framework \-\- 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and [request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5, label="some label"); This is particularly important when debugging ORM objects
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Core features should now be CF7 compatible.
* MightyMock behavioral inconsistency on CF8 fixed
* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in MightyMock on Adobe ColdFusion

h3. Backwards Compatibility

* debug() will be backwards compatible IF for calls not using named arguments
* debug() will now fail if the old (removed) "debugdata" argument was passed like so: debug(debugdata=someStruct); to fix, either change debugdata to "var" or remove the named argument]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750662</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783417</id>
    <property name="body"><![CDATA[{toc}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]

You can get the latest version of the Eclipse plugin by pointing at this update site: [http://mxunit.org/update]
{tip}

h2. Eclipse Plugin \-\- 1.4.1

* Added "Run MXUnit Tests" to the "Run As" menu. Default keybinding is alt-shift-x, m (you can change that in preferences)
* Added support for opening files from the "Tag Context" panel when those files are not in projects, i.e. opens from the file system.
* Thanks Denny for these contributions\!

h2. Framework \-\- 2.0.3


h3. Enhancements

* User-contributed "assertEqualsWithTolerance()" function which adds a tolerance parameter to equality assertions
* Updated samples/build.xml with hints for using with Jenkins
* Updated mxunit-ant.jar to log the entire html response to the console if the test run bombs (i.e. 500 error)

h2. Framework \-\- 2.0.2


h3. Enhancements

* added restoreMethod() for undoing method overwrites from injectMethod(). This is particularly useful when using ColdSpring-managed objects in your tests. Inspired by [this post|http://www.silverwareconsulting.com/index.cfm/2009/7/14/Using-MXUnits-injectMethod-to-Reverse-an-injectMethod-call#c82B9BFA8-0DE7-8E6D-2C4C1BC85072A908]&nbsp;
* HTML Result tweaks... mostly code cleanup. Also, no need to specify a result type any longer as it defaults to the new HTML output introduced in MXUnit 2.0

h3. Bug Fixes

* User-supplied patch to JUnitXMLTestResult to properly encode "special characters". Thanks\!




h2. Framework \-\- 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and [request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5, label="some label"); This is particularly important when debugging ORM objects
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Core features should now be CF7 compatible.
* MightyMock behavioral inconsistency on CF8 fixed
* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in MightyMock on Adobe ColdFusion

h3. Backwards Compatibility

* debug() will be backwards compatible IF for calls not using named arguments
* debug() will now fail if the old (removed) "debugdata" argument was passed like so: debug(debugdata=someStruct); to fix, either change debugdata to "var" or remove the named argument]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750664</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783418</id>
    <property name="body"><![CDATA[{toc}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]

You can get the latest version of the Eclipse plugin by pointing at this update site: [http://mxunit.org/update]
{tip}
h2. Eclipse Plugin \-\- 1.4.1

* Added "Run MXUnit Tests" to the "Run As" menu. Default keybinding is alt-shift-x, m (you can change that in preferences)
* Added support for opening files from the "Tag Context" panel when those files are not in projects, i.e. opens from the file system.
* Thanks Denny for these contributions\!

h2. Framework \-\- 2.0.3


h3. Enhancements

* User-contributed "assertEqualsWithTolerance()" function which adds a tolerance parameter to equality assertions
* Updated samples/build.xml with hints for using with Jenkins
* Updated mxunit-ant.jar to log the entire html response to the console if the test run bombs (i.e. 500 error)

h2. Framework \-\- 2.0.2


h3. Enhancements

* added restoreMethod() for undoing method overwrites from injectMethod(). This is particularly useful when using ColdSpring-managed objects in your tests. Inspired by [this post|http://www.silverwareconsulting.com/index.cfm/2009/7/14/Using-MXUnits-injectMethod-to-Reverse-an-injectMethod-call#c82B9BFA8-0DE7-8E6D-2C4C1BC85072A908]&nbsp;
* HTML Result tweaks... mostly code cleanup. Also, no need to specify a result type any longer as it defaults to the new HTML output introduced in MXUnit 2.0

h3. Bug Fixes

* User-supplied patch to JUnitXMLTestResult to properly encode "special characters". Thanks\!




h2. Framework \-\- 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and [request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5, label="some label"); This is particularly important when debugging ORM objects
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Core features should now be CF7 compatible.
* MightyMock behavioral inconsistency on CF8 fixed
* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in MightyMock on Adobe ColdFusion

h3. Backwards Compatibility

* debug() will be backwards compatible IF for calls not using named arguments
* debug() will now fail if the old (removed) "debugdata" argument was passed like so: debug(debugdata=someStruct); to fix, either change debugdata to "var" or remove the named argument]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750665</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783420</id>
    <property name="body"><![CDATA[{toc}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]

You can get the latest version of the Eclipse plugin by pointing at this update site: [http://mxunit.org/update]
{tip}

h2. Eclipse Plugin \-\- 1.4.1

* Added "Run MXUnit Tests" to the "Run As" menu. Default keybinding is alt-shift-x, m (you can change that in preferences)
* Added support for opening files from the "Tag Context" panel when those files are not in projects, i.e. opens from the file system.
* Thanks Denny for these contributions\!

h2. Framework \-\- 2.0.3 \-\- May 5, 2011



h3. Enhancements

* User-contributed "assertEqualsWithTolerance()" function which adds a tolerance parameter to equality assertions
* Updated samples/build.xml with hints for using with Jenkins
* Updated mxunit-ant.jar to log the entire html response to the console if the test run bombs (i.e. 500 error)

h2. Framework \-\- 2.0.2


h3. Enhancements

* added restoreMethod() for undoing method overwrites from injectMethod(). This is particularly useful when using ColdSpring-managed objects in your tests. Inspired by [this post|http://www.silverwareconsulting.com/index.cfm/2009/7/14/Using-MXUnits-injectMethod-to-Reverse-an-injectMethod-call#c82B9BFA8-0DE7-8E6D-2C4C1BC85072A908]&nbsp;
* HTML Result tweaks... mostly code cleanup. Also, no need to specify a result type any longer as it defaults to the new HTML output introduced in MXUnit 2.0

h3. Bug Fixes

* User-supplied patch to JUnitXMLTestResult to properly encode "special characters". Thanks\!




h2. Framework \-\- 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and [request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5, label="some label"); This is particularly important when debugging ORM objects
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Core features should now be CF7 compatible.
* MightyMock behavioral inconsistency on CF8 fixed
* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in MightyMock on Adobe ColdFusion

h3. Backwards Compatibility

* debug() will be backwards compatible IF for calls not using named arguments
* debug() will now fail if the old (removed) "debugdata" argument was passed like so: debug(debugdata=someStruct); to fix, either change debugdata to "var" or remove the named argument]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750668</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193214</id>
    <property name="body"><![CDATA[Wouldn't the result of myComponent.myMethod('foo') return 'true' in any case?
The last assertion is doing an AssertEquals(actual,'cool and bad-ass') however 'actual' should return true, which should not equal 'cool and bad-ass' correct?
If it was an AssertTrue I could see it passing - but not with AssertEquals.

?

kpenny]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6160449</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193195</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160429</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193197</id>
    <property name="body"><![CDATA[[Creating an account|Creating an AWS Account]

[Launching your first instance|Launching your first EC2 Instance]

[Creating your first ColdFusion AMI|Creating an EC2 ColdFusion AMI]

Launching your ColdFusion AMI as a new Instance

Deploying to multiple instances

Managing Configuration Changes

Spot Requests]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160431</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783452</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [What is MXUnit and Why should you use it?|default:Why MXUnit?]
* [Getting Started|default:Getting Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|default:Install the Eclipse Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Fork|http://github.com/virtix/mxunit]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
* John Whish ([blog|http://www.aliaspooryorik.com/], Twitter: [@aliaspooryorik|http://twitter.com/aliaspooryorik]
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-cell}
*MXUnit Office Hours*

Every few weeks we [get together on Adobe Connect|http://experts.na3.acrobat.com/mxunit-office-hours/] to chat about testing. Meetups start at Noon EST ([convert|http://www.timeanddate.com/worldclock/converter.html]). You're automatically promoted to presenter so bring a microphone. Here's the schedule:

{google-calendar:mode=agenda|width=300|height=300}[http://www.google.com/calendar/ical/h5eh6m4iirte5b7u3r997ul5q0%40group.calendar.google.com/public/basic.ics]{google-calendar}



{table-row}
{table}
{column}
{column:width=3%}




{column}
{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750701</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193190</id>
    <property name="body"><![CDATA[{toc}

h1. Expectations

Adjust your expectations. Make no mistake: you are configuring a naked server just as you would if you were configuring a brand new instance in your own environment. You are merely renting space and compute power from Amazon, nothing more.


{warning}From the moment you start creating an  account to the time you have your first live, web-accessible, ColdFusion  instance, give yourself at least *3 hours*. It's not that it's  complicated, it's that you'll do a lot of waiting... waiting on your  first EC2 instance to boot, waiting for software to download, and  waiting for software to install.&nbsp; {warning}

h2. Stop vs. Terminate

These terms will have no meaning to you... yet.

If you are blessed, as I am, with a loving spouse and beautiful children, you know that all chairs \-\- especially ones facing computing devices \-\- are equipped with sensors that, upon ass hitting seat, send out warning signals indicating that you are about to engage in illicit bit fiddling which must at all costs be interrupted. "Daddy\!\!\!\!1\!\!1\!\!\! I need milk\!", and its ilk. Take heart. Amazon's instances are not necessarily throwaway VMs that turn to rags upon the stroke of midnight.

You have two choices with any VMs you create during this session: "*stop*" and "*terminate*". It's quite simple. Stop means "shut down, as I wish to use ye later". Terminate means "Yer dead ta me". A stopped instance can be rebooted. A terminated instance can only be mourned and forgotten.&nbsp;

{tip}When creating your first intstance, don't Terminate anything. Choose "Stop" instead. *You will not pay any more for stopped instances{*}{tip}


h1. Launching your first EC2 Instance

Once you've signed up, you'll go to your AWS Console: [https://console.aws.amazon.com/ec2/home]

It'll be empty to start. You should have some tabs at the top of the screen. Click the EC2 tab. If it's not available, or if it gives you a screen indicating you haven't signed up for EC2 yet, go through the steps to sign up. Again, don't fret: you're not signing away your mortgage or jeopardizing your family's supper.

Once signed up for EC2, you'll have some links in your AWS Console to "Launch Instance". Clicking that will take you to the "Request Instances" Wizard.

h2. Request Instances Wizard


h3. 32bit or 64 bit, Linux or Windows?


Here's your first "real" decision, and you needn't labor over it. Essentially, you're choosing a "base" platform on which to build your first ColdFusion AMI. This may seem daunting at first, considering just how many AMIs are available. My advice is to not sweat it. If you're familiar with Windows, use Windows. If you're familiar with Linux, use linux. If all you know is "I want Windows", or "I want Linux", then choose one of the Win or Linux AMIs that appears on the initial "Quick Start" screen. These are generally either 32 or 64 bit.

*If you choose 64 bit, you're going to pay more.* The reason is that EC2 comes in a variety of "sizes", from "small" to humongous. Obviously, 32 bit doesn't do humongous because 32 bit can only address so much memory.

{tip}My advice: don't expect to make the best decision right away. You'll most likely end up configuring a different kind of server eventually. For now, concentrate on getting started, not getting it right{tip}

h3. Launch or Spot?

* to get started, choose "Launch Instances" as opposed to Spot instances. Spot instances are a way to save money, but they may add a bit of time onto your Getting Started experience. If you're choosing Windows, it doesn't matter anyway because the price is the same.

In the Instance Details screen, keep the defaults. Click through.

In the next screen, you'll be prompted for some key-value pairs. These are only meaningful to you. For example, you get prompted with a "Name" key... give it a name that's meaningful to you... "Windows Attempt #1", or "Linux Attempt #1", or something like that. Click through.

h3. Key Pairs

On the next screen, you'll be prompted about Key Pairs. These are critical. Presumably this is your first time through, so click "Create a new KeyPair" and give it a name. Click to download the file. Again, keep it secret, keep it safe. This will be a ".pem" file.

h3. Security Group

On the next screen you'll be prompted to create a Security Group for this new instance. Think of a Security Group as a firewall. Once you assign a SG to an instance, that's it. You live with it forever. This does NOT mean you can't change the configuration of this group\! You can.

At the very least, to start, you'll want to *Add* "SSH" as a rule. No, Windows servers don't have SSH, but you're going to install it, so add the rule now.

{tip}Give this Security Group a meaningful name, like "Win2k8" or some such thing.{tip}

h3. The Meter is now running

Once you launch an instance, the meter starts running. So don't launch an instance and forget about it for 3 months. You're now being billed until you stop this instance.


h3. Almost there


Congratulations. You've launched your first AWS EC2 instance. It's going to take a while to spin up, perhaps 15 minutes or more, so go grab a beer.

h3. Connecting to your instance

If you go back to your AWS Console, you'll see your instances in the Instances tab. It'll be marked as "Running", and my experience is that it takes 15-30 minutes for it to become available for you to connect to it. If you right click on that instance, you'll have a number of options. Right now, click on the "Get System Log" option. It'll pop up a window, and you'll probably see something like "Gathering metadata" or "Rebooting" or some such thing. After a while, it'll indicate that it's "ready", which means you can connect to it.

If you're running a Windows Instance, you'll need to get the initial Windows password, via the "Get Windows password" option in the menu. This will prompt you for the contents of your keypair file that you downloaded earlier. Open that file in a text editor, and copy the entire contents. Paste that chunk into this window, and it'll take you through the process of getting the admin password. This, too, might take some time. Be patient. Beer #2 doesn't hurt. I'd be remiss if I didn't suggest a Terrapin Big Hoppy Monster. I'd also be remiss if I didn't at this point direct you to Pintley.com, a ColdFusion-powered site for beer lovers. (Noooo, I don't have a problem. I just love great beer. And ColdFusion). Now, then...


Once you have that, select "Connect", and you'll get an option to "download a shortcut file". This is a typical windows ".rdp" file, which should be familiar to you if you've RDP''d into a windows server before.

Go through the RDP connection screens, and use "administrator" as the username, and that password as the password.

h3. You're in

You're in. You now have a brand new server (a virtual one, albeit). Now it's time to turn this thing into a ColdFusion server. It's way beyond the scope of this document to explain how to install and configure most of this software. I trust that you know how to create a CF server and that, if you don't, you know how to find the resources to teach you. From now on, I'll explain the important things you'll need to do as you install and configure this server.

h2. The Software you need

At this point, I'm going to describe how to set up a Windows server. If you're on Linux, you know how to do all of this already.

{note} I hope, at some point, Adobe will either provide supported AMIs or allow us to publish our own AMIs. As of this writing, neither are true. This means you need to start from scratch.{note}


Download the following:

*Required*
* firefox or chrome. You'll need to change the permissions on IE to download files. Do it once, to give you permission to download a decent browser. Then go drink another Big Hoppy Monster to eradicate the memory of dealing with IE for the night. Once you have a suitable browser installed:
* Apache web server. Or, if you like, stick with IIS that's already on the server. If you prefer IIS, I still respect you, though I do fear for your sanity.
* ColdFusion
* The latest CF updater
* Any CF hotfixes
* A respectable text editor, like Notepad+\+ or Notepad2 or Textpad. This is listed as required because Notepad sucks. Period.
* [WinSSH|http://www.bitvise.com/winsshd] by bitvise. I tried FreeSSH and it didn't work on Windows 2008. YMMV. WinSSH licensing seemed reasonable to me, and it worked flawlessly.

*Optional*
* [Launchy|http://blog.mxunit.org/2009/04/timesavers-launchy.html] . Because a man without a key launcher just ain't livin'.
* Tortoise SVN
* [Git Bash|http://en.kioskea.net/faq/499-git-for-windows]&nbsp;
* BareTail if you want to sanely read log files

h2. Installation

Install the above just as you would on your own server. Essentially, you're now on your own server, except you're renting it. Start with the webserver (apache), then go to CF and all the hotfixes. You'll likely need to restart a few times... it is Windows, after all. If you're on Linux, you won't have read this far so no worries.

h2. Secure CFAdmin

By now, 4 beers or so in, you should have CF running and be able to connect to CFAdmin (localhost/CFIDE/administrator). Guess what... everyone else can get to it, too, publicly. No, they don't know your password, but you'll want to lock it down. If you've installed apache, here's how to do it (thanks [Jason Dean|http://www.12robots.com] \!)

In your Apache httpd.conf, add these lines:# Prevent external CFIDE access
<Location /CFIDE>
Order Deny,Allow
Deny from all
Allow from 127.0.0.1
</Location>

# Allow CFIDE access for scripts (ajaxy goodness, etc)
<Location /CFIDE/scripts>
Order Allow,Deny
Allow from all
</Location>


h2. Windows Firewall

When you created a Security Group, it already had Port 80 open for web traffic, and you added Port 22 for SSH. That's on the AWS side, but you'll also need to configure it in Windows. This is easy:
* Start \--> Windows Firewall \-->Change settings
* Exceptions Tab
* Add Port
** Add port 80
** Add port 22

h2. EC2 Windows user account

Create a new user account&nbsp; named "EC2-user". Password-protect that account. I chose the name "EC2" because the official Amazon Linux distros use that name, and the Eclipse tools don't make it easy (if possible) to use different users for different servers (more on the Eclipse tools later).

Log out of that RDP session and log in as ec2-user, with the password you chose, to ensure that everything is correctly configured.

h2. Configure SSH

If you want to more easily deploy code to Windows, you'll probably do so over SSH. This means you need an SSHd server and at least one account with permisions.


Assuming you've installed the WinSSH software linked above, you can now associate this ec2-user with SSH. To do so, open WinSSH, click the "settings" link, Click the Windows Accounts tab, and add the Windows ec2-user.

h2. Whew\!

Who knew that setting up a server would be *the same amount of work as building you own CF Server?* Well... that's what you're doing, so it shouldn't be a surprise, Just because you're paying by the hour doesn't mean you get any work for free (until Adobe provides AMIs...)

h2. Let's test

Assuming you have set up your web server, installed ColdFusion, and opened the ports in both Amazon Security Group and Windows Firewall, your server is now online. Put a test.cfm file in your web root (wherever you have that configured in your webserver), give it contents like <cfoutput>#now()#</cfoutput>.

From within that server (i.e. RDP'd into it), load that file at [http://localhost/test.cfm]. If you see the current date and time, you're almost there.

h2. What's the public URL?

If you've followed all of the above, a test .cfm page loads correctly at localhost. Now we need to ensure it's available publicly. On your AWS console, click on your instance. In the bottom frame, you'll see 2 URLs, a "private" and a "public". The private will be a 10.xxx address, and the public will be an "ec2-xxx" domain. Right now, we're interested in that public domain. Copy it. It'll be something inscrutable like "ec2-174-129-164-113.compute-1.amazonaws.com". From your machine \-\- NOT in your RDP screen but your "this is where I pay my bills and search for recipes and play Elmo games with my kids" machine,&nbsp; Paste that into your browser. It'll be something like "\[http://ec2-174-129-164-113.compute-1.amazonaws.com/test.cfm\]".

You should get the current date and time, similar to what you saw when running from localhost a few minutes ago

{warning}If it spins and you get a timeout, or you get a "connection dropped" error, your firewall is most likely misconfigured.{warning}


h2. Next steps

At this point, you have ColdFusion installed. It's accessible externally. This instance is configured with useful software.

You now ask yourself: is this a good "source" from which to build future servers?

*Do I need to install additional software? What software am I missing?*

Grab another Big Hoppy Monster, go kiss your spouse, and sleep on it. You're building a server. You want the right tools. You've earned some cred. Go kiss the kids and tell them that Daddy/Mommy kicked some ass tonight.

*Next up: we bundle this server into an AMI*. This is the magic \-\- and the terror \-\- of cloud computing. You can now spin up 1, or a 1000+, servers. In a few clicks.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160424</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193193</id>
    <property name="body"><![CDATA[{toc}

h1. Expectations

Adjust your expectations. Make no mistake: you are configuring a naked server just as you would if you were configuring a brand new instance in your own environment. You are renting space and compute power from Amazon. Eventually, we should see preconfigured ColdFusion instances once licensing issues are resolved. Until then, you're on your own.



{warning}From the moment you start creating an  account to the time you have your first live, web-accessible, ColdFusion  instance, give yourself at least *3 hours*. It's not that it's  complicated, it's that you'll do a lot of waiting... waiting on your  first EC2 instance to boot, waiting for software to download, and  waiting for software to install.&nbsp; {warning}

h1. Stop vs. Terminate

These terms will have no meaning to you... yet.

If you are blessed, as I am, with a loving spouse and beautiful children, you know that all chairs \-\- especially ones facing computing devices \-\- are equipped with sensors that, upon ass hitting seat, send out warning signals indicating that you are about to engage in illicit bit fiddling which must at all costs be interrupted. "Daddy\!\!\!\!1\!\!1\!\!\! I need milk\!", and its ilk. Take heart. Amazon's instances are not necessarily throwaway VMs that turn to rags upon the stroke of midnight.

You have two choices with any VMs you create during this session: "*stop*" and "*terminate*". It's quite simple. Stop means "shut down, as I wish to use ye later". Terminate means "Yer dead ta me". A stopped instance can be rebooted. A terminated instance can only be mourned and forgotten.&nbsp;

{tip}When creating your first intstance, don't Terminate anything. Choose "Stop" instead. *You will not pay any more for stopped instances{*}{tip}


h1. Launching your first EC2 Instance

Once you've signed up, you'll go to your AWS Console: [https://console.aws.amazon.com/ec2/home]

It'll be empty to start. You should have some tabs at the top of the screen. Click the EC2 tab. If it's not available, or if it gives you a screen indicating you haven't signed up for EC2 yet, go through the steps to sign up. Again, don't fret: you're not signing away your mortgage or jeopardizing your family's supper.

Once signed up for EC2, you'll have some links in your AWS Console to "Launch Instance". Clicking that will take you to the "Request Instances" Wizard.

h2. Request Instances Wizard


h3. 32bit or 64 bit, Linux or Windows?


Here's your first "real" decision, and you needn't labor over it. Essentially, you're choosing a "base" platform on which to build your first ColdFusion AMI. This may seem daunting at first, considering just how many AMIs are available. My advice is to not sweat it. If you're familiar with Windows, use Windows. If you're familiar with Linux, use linux. If all you know is "I want Windows", or "I want Linux", then choose one of the Win or Linux AMIs that appears on the initial "Quick Start" screen. These are generally either 32 or 64 bit.

*If you choose 64 bit, you're going to pay more.* The reason is that EC2 comes in a variety of "sizes", from "small" to humongous. Obviously, 32 bit doesn't do humongous because 32 bit can only address so much memory.

{tip}My advice: don't expect to make the best decision right away. You'll most likely end up configuring a different kind of server eventually. For now, concentrate on getting started, not getting it right{tip}

h3. Launch or Spot?

* to get started, choose "Launch Instances" as opposed to Spot instances. Spot instances are a way to save money, but they may add a bit of time onto your Getting Started experience. If you're choosing Windows, it doesn't matter anyway because the price is the same.

In the Instance Details screen, keep the defaults. Click through.

In the next screen, you'll be prompted for some key-value pairs. These are only meaningful to you. For example, you get prompted with a "Name" key... give it a name that's meaningful to you... "Windows Attempt #1", or "Linux Attempt #1", or something like that. Click through.

h3. Key Pairs

On the next screen, you'll be prompted about Key Pairs. These are critical. Presumably this is your first time through, so click "Create a new KeyPair" and give it a name. Click to download the file. Again, keep it secret, keep it safe. This will be a ".pem" file.

h3. Security Group

On the next screen you'll be prompted to create a Security Group for this new instance. Think of a Security Group as a firewall. Once you assign a SG to an instance, that's it. You live with it forever. This does NOT mean you can't change the configuration of this group\! You can.

At the very least, to start, you'll want to *Add* "SSH" as a rule. No, Windows servers don't have SSH, but you're going to install it, so add the rule now.

{tip}Give this Security Group a meaningful name, like "Win2k8" or some such thing.{tip}

h3. The Meter is now running

Once you launch an instance, the meter starts running. So don't launch an instance and forget about it for 3 months. You're now being billed until you stop this instance.


h3. Almost there


Congratulations. You've launched your first AWS EC2 instance. It's going to take a while to spin up, perhaps 15 minutes or more, so go grab a beer.

h3. Connecting to your instance

If you go back to your AWS Console, you'll see your instances in the Instances tab. It'll be marked as "Running", and my experience is that it takes 15-30 minutes for it to become available for you to connect to it. If you right click on that instance, you'll have a number of options. Right now, click on the "Get System Log" option. It'll pop up a window, and you'll probably see something like "Gathering metadata" or "Rebooting" or some such thing. After a while, it'll indicate that it's "ready", which means you can connect to it.

If you're running a Windows Instance, you'll need to get the initial Windows password, via the "Get Windows password" option in the menu. This will prompt you for the contents of your keypair file that you downloaded earlier. Open that file in a text editor, and copy the entire contents. Paste that chunk into this window, and it'll take you through the process of getting the admin password. This, too, might take some time. Be patient. Beer #2 doesn't hurt. I'd be remiss if I didn't suggest a Terrapin Big Hoppy Monster. I'd also be remiss if I didn't at this point direct you to Pintley.com, a ColdFusion-powered site for beer lovers. (Noooo, I don't have a problem. I just love great beer. And ColdFusion). Now, then...


Once you have that, select "Connect", and you'll get an option to "download a shortcut file". This is a typical windows ".rdp" file, which should be familiar to you if you've RDP''d into a windows server before.

Go through the RDP connection screens, and use "administrator" as the username, and that password as the password.

h3. You're in

You're in. You now have a brand new server (a virtual one, albeit). Now it's time to turn this thing into a ColdFusion server. It's way beyond the scope of this document to explain how to install and configure most of this software. I trust that you know how to create a CF server and that, if you don't, you know how to find the resources to teach you. From now on, I'll explain the important things you'll need to do as you install and configure this server.

h2. The Software you need

At this point, I'm going to describe how to set up a Windows server. If you're on Linux, you know how to do all of this already.

{note} I hope, at some point, Adobe will either provide supported AMIs or allow us to publish our own AMIs. As of this writing, neither are true. This means you need to start from scratch.{note}


Download the following:

*Required*
* firefox or chrome. You'll need to change the permissions on IE to download files. Do it once, to give you permission to download a decent browser. Then go drink another Big Hoppy Monster to eradicate the memory of dealing with IE for the night. Once you have a suitable browser installed:
* Apache web server. Or, if you like, stick with IIS that's already on the server. If you prefer IIS, I still respect you, though I do fear for your sanity.
* ColdFusion
* The latest CF updater
* Any CF hotfixes
* A respectable text editor, like Notepad+\+ or Notepad2 or Textpad. This is listed as required because Notepad sucks. Period.
* [WinSSH|http://www.bitvise.com/winsshd] by bitvise. I tried FreeSSH and it didn't work on Windows 2008. YMMV. WinSSH licensing seemed reasonable to me, and it worked flawlessly.

*Optional*
* [Launchy|http://blog.mxunit.org/2009/04/timesavers-launchy.html] . Because a man without a key launcher just ain't livin'.
* Tortoise SVN
* [Git Bash|http://en.kioskea.net/faq/499-git-for-windows]&nbsp;
* BareTail if you want to sanely read log files

h2. Installation

Install the above just as you would on your own server. Essentially, you're now on your own server, except you're renting it. Start with the webserver (apache), then go to CF and all the hotfixes. You'll likely need to restart a few times... it is Windows, after all. If you're on Linux, you won't have read this far so no worries.

h2. Secure CFAdmin

By now, 4 beers or so in, you should have CF running and be able to connect to CFAdmin (localhost/CFIDE/administrator). Guess what... everyone else can get to it, too, publicly. No, they don't know your password, but you'll want to lock it down. If you've installed apache, here's how to do it (thanks [Jason Dean|http://www.12robots.com] \!)

In your Apache httpd.conf, add these lines:# Prevent external CFIDE access
<Location /CFIDE>
Order Deny,Allow
Deny from all
Allow from 127.0.0.1
</Location>

# Allow CFIDE access for scripts (ajaxy goodness, etc)
<Location /CFIDE/scripts>
Order Allow,Deny
Allow from all
</Location>


h2. Windows Firewall

When you created a Security Group, it already had Port 80 open for web traffic, and you added Port 22 for SSH. That's on the AWS side, but you'll also need to configure it in Windows. This is easy:
* Start \--> Windows Firewall \-->Change settings
* Exceptions Tab
* Add Port
** Add port 80
** Add port 22

h2. EC2 Windows user account

Create a new user account&nbsp; named "EC2-user". Password-protect that account. I chose the name "EC2" because the official Amazon Linux distros use that name, and the Eclipse tools don't make it easy (if possible) to use different users for different servers (more on the Eclipse tools later).

Log out of that RDP session and log in as ec2-user, with the password you chose, to ensure that everything is correctly configured.

h2. Configure SSH

If you want to more easily deploy code to Windows, you'll probably do so over SSH. This means you need an SSHd server and at least one account with permisions.


Assuming you've installed the WinSSH software linked above, you can now associate this ec2-user with SSH. To do so, open WinSSH, click the "settings" link, Click the Windows Accounts tab, and add the Windows ec2-user.

h2. Whew\!

Who knew that setting up a server would be *the same amount of work as building you own CF Server?* Well... that's what you're doing, so it shouldn't be a surprise, Just because you're paying by the hour doesn't mean you get any work for free (until Adobe provides AMIs...)

h2. Let's test

Assuming you have set up your web server, installed ColdFusion, and opened the ports in both Amazon Security Group and Windows Firewall, your server is now online. Put a test.cfm file in your web root (wherever you have that configured in your webserver), give it contents like <cfoutput>#now()#</cfoutput>.

From within that server (i.e. RDP'd into it), load that file at [http://localhost/test.cfm]. If you see the current date and time, you're almost there.

h2. What's the public URL?

If you've followed all of the above, a test .cfm page loads correctly at localhost. Now we need to ensure it's available publicly. On your AWS console, click on your instance. In the bottom frame, you'll see 2 URLs, a "private" and a "public". The private will be a 10.xxx address, and the public will be an "ec2-xxx" domain. Right now, we're interested in that public domain. Copy it. It'll be something inscrutable like "ec2-174-129-164-113.compute-1.amazonaws.com". From your machine \-\- NOT in your RDP screen but your "this is where I pay my bills and search for recipes and play Elmo games with my kids" machine,&nbsp; Paste that into your browser. It'll be something like "\[http://ec2-174-129-164-113.compute-1.amazonaws.com/test.cfm\]".

You should get the current date and time, similar to what you saw when running from localhost a few minutes ago

{warning}If it spins and you get a timeout, or you get a "connection dropped" error, your firewall is most likely misconfigured.{warning}


h2. Next steps

At this point, you have ColdFusion installed. It's accessible externally. This instance is configured with useful software.

You now ask yourself: is this a good "source" from which to build future servers?

*Do I need to install additional software? What software am I missing?*

Grab another Big Hoppy Monster, go kiss your spouse, and sleep on it. You're building a server. You want the right tools. You've earned some cred. Go kiss the kids and tell them that Daddy/Mommy kicked some ass tonight.

*Next up: we bundle this server into an AMI*. This is the magic \-\- and the terror \-\- of cloud computing. You can now spin up 1, or a 1000+, servers. In a few clicks.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160427</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193192</id>
    <property name="body"><![CDATA[{toc}

h1. Expectations

Adjust your expectations. Make no mistake: you are configuring a naked server just as you would if you were configuring a brand new instance in your own environment. You are merely renting space and compute power from Amazon, nothing more.


{warning}From the moment you start creating an  account to the time you have your first live, web-accessible, ColdFusion  instance, give yourself at least *3 hours*. It's not that it's  complicated, it's that you'll do a lot of waiting... waiting on your  first EC2 instance to boot, waiting for software to download, and  waiting for software to install.&nbsp; {warning}

h1. Stop vs. Terminate

These terms will have no meaning to you... yet.

If you are blessed, as I am, with a loving spouse and beautiful children, you know that all chairs \-\- especially ones facing computing devices \-\- are equipped with sensors that, upon ass hitting seat, send out warning signals indicating that you are about to engage in illicit bit fiddling which must at all costs be interrupted. "Daddy\!\!\!\!1\!\!1\!\!\! I need milk\!", and its ilk. Take heart. Amazon's instances are not necessarily throwaway VMs that turn to rags upon the stroke of midnight.

You have two choices with any VMs you create during this session: "*stop*" and "*terminate*". It's quite simple. Stop means "shut down, as I wish to use ye later". Terminate means "Yer dead ta me". A stopped instance can be rebooted. A terminated instance can only be mourned and forgotten.&nbsp;

{tip}When creating your first intstance, don't Terminate anything. Choose "Stop" instead. *You will not pay any more for stopped instances{*}{tip}


h1. Launching your first EC2 Instance

Once you've signed up, you'll go to your AWS Console: [https://console.aws.amazon.com/ec2/home]

It'll be empty to start. You should have some tabs at the top of the screen. Click the EC2 tab. If it's not available, or if it gives you a screen indicating you haven't signed up for EC2 yet, go through the steps to sign up. Again, don't fret: you're not signing away your mortgage or jeopardizing your family's supper.

Once signed up for EC2, you'll have some links in your AWS Console to "Launch Instance". Clicking that will take you to the "Request Instances" Wizard.

h2. Request Instances Wizard


h3. 32bit or 64 bit, Linux or Windows?


Here's your first "real" decision, and you needn't labor over it. Essentially, you're choosing a "base" platform on which to build your first ColdFusion AMI. This may seem daunting at first, considering just how many AMIs are available. My advice is to not sweat it. If you're familiar with Windows, use Windows. If you're familiar with Linux, use linux. If all you know is "I want Windows", or "I want Linux", then choose one of the Win or Linux AMIs that appears on the initial "Quick Start" screen. These are generally either 32 or 64 bit.

*If you choose 64 bit, you're going to pay more.* The reason is that EC2 comes in a variety of "sizes", from "small" to humongous. Obviously, 32 bit doesn't do humongous because 32 bit can only address so much memory.

{tip}My advice: don't expect to make the best decision right away. You'll most likely end up configuring a different kind of server eventually. For now, concentrate on getting started, not getting it right{tip}

h3. Launch or Spot?

* to get started, choose "Launch Instances" as opposed to Spot instances. Spot instances are a way to save money, but they may add a bit of time onto your Getting Started experience. If you're choosing Windows, it doesn't matter anyway because the price is the same.

In the Instance Details screen, keep the defaults. Click through.

In the next screen, you'll be prompted for some key-value pairs. These are only meaningful to you. For example, you get prompted with a "Name" key... give it a name that's meaningful to you... "Windows Attempt #1", or "Linux Attempt #1", or something like that. Click through.

h3. Key Pairs

On the next screen, you'll be prompted about Key Pairs. These are critical. Presumably this is your first time through, so click "Create a new KeyPair" and give it a name. Click to download the file. Again, keep it secret, keep it safe. This will be a ".pem" file.

h3. Security Group

On the next screen you'll be prompted to create a Security Group for this new instance. Think of a Security Group as a firewall. Once you assign a SG to an instance, that's it. You live with it forever. This does NOT mean you can't change the configuration of this group\! You can.

At the very least, to start, you'll want to *Add* "SSH" as a rule. No, Windows servers don't have SSH, but you're going to install it, so add the rule now.

{tip}Give this Security Group a meaningful name, like "Win2k8" or some such thing.{tip}

h3. The Meter is now running

Once you launch an instance, the meter starts running. So don't launch an instance and forget about it for 3 months. You're now being billed until you stop this instance.


h3. Almost there


Congratulations. You've launched your first AWS EC2 instance. It's going to take a while to spin up, perhaps 15 minutes or more, so go grab a beer.

h3. Connecting to your instance

If you go back to your AWS Console, you'll see your instances in the Instances tab. It'll be marked as "Running", and my experience is that it takes 15-30 minutes for it to become available for you to connect to it. If you right click on that instance, you'll have a number of options. Right now, click on the "Get System Log" option. It'll pop up a window, and you'll probably see something like "Gathering metadata" or "Rebooting" or some such thing. After a while, it'll indicate that it's "ready", which means you can connect to it.

If you're running a Windows Instance, you'll need to get the initial Windows password, via the "Get Windows password" option in the menu. This will prompt you for the contents of your keypair file that you downloaded earlier. Open that file in a text editor, and copy the entire contents. Paste that chunk into this window, and it'll take you through the process of getting the admin password. This, too, might take some time. Be patient. Beer #2 doesn't hurt. I'd be remiss if I didn't suggest a Terrapin Big Hoppy Monster. I'd also be remiss if I didn't at this point direct you to Pintley.com, a ColdFusion-powered site for beer lovers. (Noooo, I don't have a problem. I just love great beer. And ColdFusion). Now, then...


Once you have that, select "Connect", and you'll get an option to "download a shortcut file". This is a typical windows ".rdp" file, which should be familiar to you if you've RDP''d into a windows server before.

Go through the RDP connection screens, and use "administrator" as the username, and that password as the password.

h3. You're in

You're in. You now have a brand new server (a virtual one, albeit). Now it's time to turn this thing into a ColdFusion server. It's way beyond the scope of this document to explain how to install and configure most of this software. I trust that you know how to create a CF server and that, if you don't, you know how to find the resources to teach you. From now on, I'll explain the important things you'll need to do as you install and configure this server.

h2. The Software you need

At this point, I'm going to describe how to set up a Windows server. If you're on Linux, you know how to do all of this already.

{note} I hope, at some point, Adobe will either provide supported AMIs or allow us to publish our own AMIs. As of this writing, neither are true. This means you need to start from scratch.{note}


Download the following:

*Required*
* firefox or chrome. You'll need to change the permissions on IE to download files. Do it once, to give you permission to download a decent browser. Then go drink another Big Hoppy Monster to eradicate the memory of dealing with IE for the night. Once you have a suitable browser installed:
* Apache web server. Or, if you like, stick with IIS that's already on the server. If you prefer IIS, I still respect you, though I do fear for your sanity.
* ColdFusion
* The latest CF updater
* Any CF hotfixes
* A respectable text editor, like Notepad+\+ or Notepad2 or Textpad. This is listed as required because Notepad sucks. Period.
* [WinSSH|http://www.bitvise.com/winsshd] by bitvise. I tried FreeSSH and it didn't work on Windows 2008. YMMV. WinSSH licensing seemed reasonable to me, and it worked flawlessly.

*Optional*
* [Launchy|http://blog.mxunit.org/2009/04/timesavers-launchy.html] . Because a man without a key launcher just ain't livin'.
* Tortoise SVN
* [Git Bash|http://en.kioskea.net/faq/499-git-for-windows]&nbsp;
* BareTail if you want to sanely read log files

h2. Installation

Install the above just as you would on your own server. Essentially, you're now on your own server, except you're renting it. Start with the webserver (apache), then go to CF and all the hotfixes. You'll likely need to restart a few times... it is Windows, after all. If you're on Linux, you won't have read this far so no worries.

h2. Secure CFAdmin

By now, 4 beers or so in, you should have CF running and be able to connect to CFAdmin (localhost/CFIDE/administrator). Guess what... everyone else can get to it, too, publicly. No, they don't know your password, but you'll want to lock it down. If you've installed apache, here's how to do it (thanks [Jason Dean|http://www.12robots.com] \!)

In your Apache httpd.conf, add these lines:# Prevent external CFIDE access
<Location /CFIDE>
Order Deny,Allow
Deny from all
Allow from 127.0.0.1
</Location>

# Allow CFIDE access for scripts (ajaxy goodness, etc)
<Location /CFIDE/scripts>
Order Allow,Deny
Allow from all
</Location>


h2. Windows Firewall

When you created a Security Group, it already had Port 80 open for web traffic, and you added Port 22 for SSH. That's on the AWS side, but you'll also need to configure it in Windows. This is easy:
* Start --> Windows Firewall -->Change settings
* Exceptions Tab
* Add Port
** Add port 80
** Add port 22

h2. EC2 Windows user account

Create a new user account&nbsp; named "EC2-user". Password-protect that account. I chose the name "EC2" because the official Amazon Linux distros use that name, and the Eclipse tools don't make it easy (if possible) to use different users for different servers (more on the Eclipse tools later).

Log out of that RDP session and log in as ec2-user, with the password you chose, to ensure that everything is correctly configured.

h2. Configure SSH

If you want to more easily deploy code to Windows, you'll probably do so over SSH. This means you need an SSHd server and at least one account with permisions.


Assuming you've installed the WinSSH software linked above, you can now associate this ec2-user with SSH. To do so, open WinSSH, click the "settings" link, Click the Windows Accounts tab, and add the Windows ec2-user.

h2. Whew\!

Who knew that setting up a server would be *the same amount of work as building you own CF Server?* Well... that's what you're doing, so it shouldn't be a surprise, Just because you're paying by the hour doesn't mean you get any work for free (until Adobe provides AMIs...)

h2. Let's test

Assuming you have set up your web server, installed ColdFusion, and opened the ports in both Amazon Security Group and Windows Firewall, your server is now online. Put a test.cfm file in your web root (wherever you have that configured in your webserver), give it contents like <cfoutput>#now()#</cfoutput>.

From within that server (i.e. RDP'd into it), load that file at [http://localhost/test.cfm]. If you see the current date and time, you're almost there.

h2. What's the public URL?

If you've followed all of the above, a test .cfm page loads correctly at localhost. Now we need to ensure it's available publicly. On your AWS console, click on your instance. In the bottom frame, you'll see 2 URLs, a "private" and a "public". The private will be a 10.xxx address, and the public will be an "ec2-xxx" domain. Right now, we're interested in that public domain. Copy it. It'll be something inscrutable like "ec2-174-129-164-113.compute-1.amazonaws.com". From your machine \-\- NOT in your RDP screen but your "this is where I pay my bills and search for recipes and play Elmo games with my kids" machine,&nbsp; Paste that into your browser. It'll be something like "\[http://ec2-174-129-164-113.compute-1.amazonaws.com/test.cfm\]".

You should get the current date and time, similar to what you saw when running from localhost a few minutes ago

{warning}If it spins and you get a timeout, or you get a "connection dropped" error, your firewall is most likely misconfigured.{warning}


h2. Next steps

At this point, you have ColdFusion installed. It's accessible externally. This instance is configured with useful software.

You now ask yourself: is this a good "source" from which to build future servers?

*Do I need to install additional software? What software am I missing?*

Grab another Big Hoppy Monster, go kiss your spouse, and sleep on it. You're building a server. You want the right tools. You've earned some cred. Go kiss the kids and tell them that Daddy/Mommy kicked some ass tonight.

*Next up: we bundle this server into an AMI*. This is the magic \-\- and the terror \-\- of cloud computing. You can now spin up 1, or a 1000+, servers. In a few clicks.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160426</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193187</id>
    <property name="body"><![CDATA[{toc}

h1. Expectations

Adjust your expectations. Make no mistake: you are configuring a naked server just as you would if you were configuring a brand new instance in your own environment. You are merely renting space and compute power from Amazon, nothing more.


{warning}From the moment you start creating an  account to the time you have your first live, web-accessible, ColdFusion  instance, give yourself at least *3 hours*. It's not that it's  complicated, it's that you'll do a lot of waiting... waiting on your  first EC2 instance to boot, waiting for software to download, and  waiting for software to install.&nbsp; {warning}

h1. Launching your first EC2 Instance

Once you've signed up, you'll go to your AWS Console: [https://console.aws.amazon.com/ec2/home]

It'll be empty to start. You should have some tabs at the top of the screen. Click the EC2 tab. If it's not available, or if it gives you a screen indicating you haven't signed up for EC2 yet, go through the steps to sign up. Again, don't fret: you're not signing away your mortgage or jeopardizing your family's supper.

Once signed up for EC2, you'll have some links in your AWS Console to "Launch Instance". Clicking that will take you to the "Request Instances" Wizard.

h2. Request Instances Wizard


h3. 32bit or 64 bit, Linux or Windows?


Here's your first "real" decision, and you needn't labor over it. Essentially, you're choosing a "base" platform on which to build your first ColdFusion AMI. This may seem daunting at first, considering just how many AMIs are available. My advice is to not sweat it. If you're familiar with Windows, use Windows. If you're familiar with Linux, use linux. If all you know is "I want Windows", or "I want Linux", then choose one of the Win or Linux AMIs that appears on the initial "Quick Start" screen. These are generally either 32 or 64 bit.

*If you choose 64 bit, you're going to pay more.* The reason is that EC2 comes in a variety of "sizes", from "small" to humongous. Obviously, 32 bit doesn't do humongous because 32 bit can only address so much memory.

{tip}My advice: don't expect to make the best decision right away. You'll most likely end up configuring a different kind of server eventually. For now, concentrate on getting started, not getting it right{tip}

h3. Launch or Spot?

* to get started, choose "Launch Instances" as opposed to Spot instances. Spot instances are a way to save money, but they may add a bit of time onto your Getting Started experience. If you're choosing Windows, it doesn't matter anyway because the price is the same.

In the Instance Details screen, keep the defaults. Click through.

In the next screen, you'll be prompted for some key-value pairs. These are only meaningful to you. For example, you get prompted with a "Name" key... give it a name that's meaningful to you... "Windows Attempt #1", or "Linux Attempt #1", or something like that. Click through.

h3. Key Pairs

On the next screen, you'll be prompted about Key Pairs. These are critical. Presumably this is your first time through, so click "Create a new KeyPair" and give it a name. Click to download the file. Again, keep it secret, keep it safe. This will be a ".pem" file.

h3. Security Group

On the next screen you'll be prompted to create a Security Group for this new instance. Think of a Security Group as a firewall. Once you assign a SG to an instance, that's it. You live with it forever. This does NOT mean you can't change the configuration of this group\! You can.

At the very least, to start, you'll want to *Add* "SSH" as a rule. No, Windows servers don't have SSH, but you're going to install it, so add the rule now.

{tip}Give this Security Group a meaningful name, like "Win2k8" or some such thing.{tip}

h3. The Meter is now running

Once you launch an instance, the meter starts running. So don't launch an instance and forget about it for 3 months. You're now being billed until you stop this instance.


h3. Almost there


Congratulations. You've launched your first AWS EC2 instance. It's going to take a while to spin up, perhaps 15 minutes or more, so go grab a beer.

h3. Connecting to your instance

If you go back to your AWS Console, you'll see your instances in the Instances tab. It'll be marked as "Running", and my experience is that it takes 15-30 minutes for it to become available for you to connect to it. If you right click on that instance, you'll have a number of options. Right now, click on the "Get System Log" option. It'll pop up a window, and you'll probably see something like "Gathering metadata" or "Rebooting" or some such thing. After a while, it'll indicate that it's "ready", which means you can connect to it.

If you're running a Windows Instance, you'll need to get the initial Windows password, via the "Get Windows password" option in the menu. This will prompt you for the contents of your keypair file that you downloaded earlier. Open that file in a text editor, and copy the entire contents. Paste that chunk into this window, and it'll take you through the process of getting the admin password. This, too, might take some time. Be patient. Beer #2 doesn't hurt. I'd be remiss if I didn't suggest a Terrapin Big Hoppy Monster. I'd also be remiss if I didn't at this point direct you to Pintley.com, a ColdFusion-powered site for beer lovers. (Noooo, I don't have a problem. I just love great beer. And ColdFusion). Now, then...


Once you have that, select "Connect", and you'll get an option to "download a shortcut file". This is a typical windows ".rdp" file, which should be familiar to you if you've RDP''d into a windows server before.

Go through the RDP connection screens, and use "administrator" as the username, and that password as the password.

h3. You're in

You're in. You now have a brand new server (a virtual one, albeit). Now it's time to turn this thing into a ColdFusion server. It's way beyond the scope of this document to explain how to install and configure most of this software. I trust that you know how to create a CF server and that, if you don't, you know how to find the resources to teach you. From now on, I'll explain the important things you'll need to do as you install and configure this server.

h2. The Software you need

At this point, I'm going to describe how to set up a Windows server. If you're on Linux, you know how to do all of this already.

{note} I hope, at some point, Adobe will either provide supported AMIs or allow us to publish our own AMIs. As of this writing, neither are true. This means you need to start from scratch.{note}


Download the following:

*Required*
* firefox or chrome. You'll need to change the permissions on IE to download files. Do it once, to give you permission to download a decent browser. Then go drink another Big Hoppy Monster to eradicate the memory of dealing with IE for the night. Once you have a suitable browser installed:
* Apache web server. Or, if you like, stick with IIS that's already on the server. If you prefer IIS, I still respect you, though I do fear for your sanity.
* ColdFusion
* The latest CF updater
* Any CF hotfixes
* A respectable text editor, like Notepad+\+ or Notepad2 or Textpad. This is listed as required because Notepad sucks. Period.
* [WinSSH|http://www.bitvise.com/winsshd] by bitvise. I tried FreeSSH and it didn't work on Windows 2008. YMMV. WinSSH licensing seemed reasonable to me, and it worked flawlessly.

*Optional*
* [Launchy|http://blog.mxunit.org/2009/04/timesavers-launchy.html] . Because a man without a key launcher just ain't livin'.
* Tortoise SVN
* [Git Bash|http://en.kioskea.net/faq/499-git-for-windows]&nbsp;
* BareTail if you want to sanely read log files

h2. Installation

Install the above just as you would on your own server. Essentially, you're now on your own server, except you're renting it. Start with the webserver (apache), then go to CF and all the hotfixes. You'll likely need to restart a few times... it is Windows, after all. If you're on Linux, you won't have read this far so no worries.

h2. Secure CFAdmin

By now, 4 beers or so in, you should have CF running and be able to connect to CFAdmin (localhost/CFIDE/administrator). Guess what... everyone else can get to it, too, publicly. No, they don't know your password, but you'll want to lock it down. If you've installed apache, here's how to do it (thanks [Jason Dean|http://www.12robots.com] \!)

In your Apache httpd.conf, add these lines:# Prevent external CFIDE access
<Location /CFIDE>
Order Deny,Allow
Deny from all
Allow from 127.0.0.1
</Location>

# Allow CFIDE access for scripts (ajaxy goodness, etc)
<Location /CFIDE/scripts>
Order Allow,Deny
Allow from all
</Location>


h2. Windows Firewall

When you created a Security Group, it already had Port 80 open for web traffic, and you added Port 22 for SSH. That's on the AWS side, but you'll also need to configure it in Windows. This is easy:
* Start \--> Windows Firewall \-->Change settings
* Exceptions Tab
* Add Port
** Add port 80
** Add port 22

h2. EC2 Windows user account

Create a new user account&nbsp; named "EC2-user". Password-protect that account. I chose the name "EC2" because the official Amazon Linux distros use that name, and the Eclipse tools don't make it easy (if possible) to use different users for different servers (more on the Eclipse tools later).

Log out of that RDP session and log in as ec2-user, with the password you chose, to ensure that everything is correctly configured.

h2. Configure SSH

If you want to more easily deploy code to Windows, you'll probably do so over SSH. This means you need an SSHd server and at least one account with permisions.


Assuming you've installed the WinSSH software linked above, you can now associate this ec2-user with SSH. To do so, open WinSSH, click the "settings" link, Click the Windows Accounts tab, and add the Windows ec2-user.

h2. Whew\!

Who knew that setting up a server would be *the same amount of work as building you own CF Server?* Well... that's what you're doing, so it shouldn't be a surprise, Just because you're paying by the hour doesn't mean you get any work for free (until Adobe provides AMIs...)

h2. Let's test

Assuming you have set up your web server, installed ColdFusion, and opened the ports in both Amazon Security Group and Windows Firewall, your server is now online. Put a test.cfm file in your web root (wherever you have that configured in your webserver), give it contents like <cfoutput>#now()#</cfoutput>.

From within that server (i.e. RDP'd into it), load that file at [http://localhost/test.cfm]. If you see the current date and time, you're almost there.

h2. What's the public URL?

If you've followed all of the above, a test .cfm page loads correctly at localhost. Now we need to ensure it's available publicly. On your AWS console, click on your instance. In the bottom frame, you'll see 2 URLs, a "private" and a "public". The private will be a 10.xxx address, and the public will be an "ec2-xxx" domain. Right now, we're interested in that public domain. Copy it. It'll be something inscrutable like "ec2-174-129-164-113.compute-1.amazonaws.com". From your machine \-\- NOT in your RDP screen but your "this is where I pay my bills and search for recipes and play Elmo games with my kids" machine,&nbsp; Paste that into your browser. It'll be something like "\http://ec2-174-129-164-113.compute-1.amazonaws.com/test.cfm".

You should get the current date and time, similar to what you saw when running from localhost a few minutes ago

{warning}If it spins and you get a timeout, or you get a "connection dropped" error, your firewall is most likely misconfigured.{warning}


h2. Next steps

At this point, you have ColdFusion installed. It's accessible externally. This instance is configured with useful software.

You now ask yourself: is this a good "source" from which to build future servers?

*Do I need to install additional software? What software am I missing?*

Grab another Big Hoppy Monster, go kiss your spouse, and sleep on it. You're building a server. You want the right tools. You've earned some cred. Go kiss the kids and tell them that Daddy/Mommy kicked some ass tonight.

*Next up: we bundle this server into an AMI*. This is the magic \-\- and the terror \-\- of cloud computing. You can now spin up 1, or a 1000+, servers. In a few clicks.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160421</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193189</id>
    <property name="body"><![CDATA[{toc}

h1. Expectations

Adjust your expectations. Make no mistake: you are configuring a naked server just as you would if you were configuring a brand new instance in your own environment. You are merely renting space and compute power from Amazon, nothing more.


{warning}From the moment you start creating an  account to the time you have your first live, web-accessible, ColdFusion  instance, give yourself at least *3 hours*. It's not that it's  complicated, it's that you'll do a lot of waiting... waiting on your  first EC2 instance to boot, waiting for software to download, and  waiting for software to install.&nbsp; {warning}

h2. Stop vs. Terminate

These terms will have no meaning to you... yet.

If you are blessed, as I am, with a loving spouse and beautiful children, you know that all chairs \-\- especially ones facing computing devices \-\- are equipped with sensors that, upon ass hitting seat, send out warning signals indicating that you are about to engage in illicit bit fiddling which must at all costs be interrupted. "Daddy\!\!\!\!1\!\!1\!\!\! I need milk\!", and its ilk. Take heart. Amazon's instances are not necessarily throwaway VMs that turn to rags upon the stroke of midnight.

You have two choices with any VMs you create during this session: "*stop*" and "*terminate*". It's quite simple. Stop means "shut down, as I wish to use ye later". Terminate means "Yer dead ta me". A stopped instance can be rebooted. A terminated instance can only be mourned and forgotten.&nbsp;

{tip}When creating your first intstance, don't Terminate anything. Choose "Stop" instead. *You will not pay any more for stopped instances{*}{tip}


h1. Launching your first EC2 Instance

Once you've signed up, you'll go to your AWS Console: [https://console.aws.amazon.com/ec2/home]

It'll be empty to start. You should have some tabs at the top of the screen. Click the EC2 tab. If it's not available, or if it gives you a screen indicating you haven't signed up for EC2 yet, go through the steps to sign up. Again, don't fret: you're not signing away your mortgage or jeopardizing your family's supper.

Once signed up for EC2, you'll have some links in your AWS Console to "Launch Instance". Clicking that will take you to the "Request Instances" Wizard.

h2. Request Instances Wizard


h3. 32bit or 64 bit, Linux or Windows?


Here's your first "real" decision, and you needn't labor over it. Essentially, you're choosing a "base" platform on which to build your first ColdFusion AMI. This may seem daunting at first, considering just how many AMIs are available. My advice is to not sweat it. If you're familiar with Windows, use Windows. If you're familiar with Linux, use linux. If all you know is "I want Windows", or "I want Linux", then choose one of the Win or Linux AMIs that appears on the initial "Quick Start" screen. These are generally either 32 or 64 bit.

*If you choose 64 bit, you're going to pay more.* The reason is that EC2 comes in a variety of "sizes", from "small" to humongous. Obviously, 32 bit doesn't do humongous because 32 bit can only address so much memory.

{tip}My advice: don't expect to make the best decision right away. You'll most likely end up configuring a different kind of server eventually. For now, concentrate on getting started, not getting it right{tip}

h3. Launch or Spot?

* to get started, choose "Launch Instances" as opposed to Spot instances. Spot instances are a way to save money, but they may add a bit of time onto your Getting Started experience. If you're choosing Windows, it doesn't matter anyway because the price is the same.

In the Instance Details screen, keep the defaults. Click through.

In the next screen, you'll be prompted for some key-value pairs. These are only meaningful to you. For example, you get prompted with a "Name" key... give it a name that's meaningful to you... "Windows Attempt #1", or "Linux Attempt #1", or something like that. Click through.

h3. Key Pairs

On the next screen, you'll be prompted about Key Pairs. These are critical. Presumably this is your first time through, so click "Create a new KeyPair" and give it a name. Click to download the file. Again, keep it secret, keep it safe. This will be a ".pem" file.

h3. Security Group

On the next screen you'll be prompted to create a Security Group for this new instance. Think of a Security Group as a firewall. Once you assign a SG to an instance, that's it. You live with it forever. This does NOT mean you can't change the configuration of this group\! You can.

At the very least, to start, you'll want to *Add* "SSH" as a rule. No, Windows servers don't have SSH, but you're going to install it, so add the rule now.

{tip}Give this Security Group a meaningful name, like "Win2k8" or some such thing.{tip}

h3. The Meter is now running

Once you launch an instance, the meter starts running. So don't launch an instance and forget about it for 3 months. You're now being billed until you stop this instance.


h3. Almost there


Congratulations. You've launched your first AWS EC2 instance. It's going to take a while to spin up, perhaps 15 minutes or more, so go grab a beer.

h3. Connecting to your instance

If you go back to your AWS Console, you'll see your instances in the Instances tab. It'll be marked as "Running", and my experience is that it takes 15-30 minutes for it to become available for you to connect to it. If you right click on that instance, you'll have a number of options. Right now, click on the "Get System Log" option. It'll pop up a window, and you'll probably see something like "Gathering metadata" or "Rebooting" or some such thing. After a while, it'll indicate that it's "ready", which means you can connect to it.

If you're running a Windows Instance, you'll need to get the initial Windows password, via the "Get Windows password" option in the menu. This will prompt you for the contents of your keypair file that you downloaded earlier. Open that file in a text editor, and copy the entire contents. Paste that chunk into this window, and it'll take you through the process of getting the admin password. This, too, might take some time. Be patient. Beer #2 doesn't hurt. I'd be remiss if I didn't suggest a Terrapin Big Hoppy Monster. I'd also be remiss if I didn't at this point direct you to Pintley.com, a ColdFusion-powered site for beer lovers. (Noooo, I don't have a problem. I just love great beer. And ColdFusion). Now, then...


Once you have that, select "Connect", and you'll get an option to "download a shortcut file". This is a typical windows ".rdp" file, which should be familiar to you if you've RDP''d into a windows server before.

Go through the RDP connection screens, and use "administrator" as the username, and that password as the password.

h3. You're in

You're in. You now have a brand new server (a virtual one, albeit). Now it's time to turn this thing into a ColdFusion server. It's way beyond the scope of this document to explain how to install and configure most of this software. I trust that you know how to create a CF server and that, if you don't, you know how to find the resources to teach you. From now on, I'll explain the important things you'll need to do as you install and configure this server.

h2. The Software you need

At this point, I'm going to describe how to set up a Windows server. If you're on Linux, you know how to do all of this already.

{note} I hope, at some point, Adobe will either provide supported AMIs or allow us to publish our own AMIs. As of this writing, neither are true. This means you need to start from scratch.{note}


Download the following:

*Required*
* firefox or chrome. You'll need to change the permissions on IE to download files. Do it once, to give you permission to download a decent browser. Then go drink another Big Hoppy Monster to eradicate the memory of dealing with IE for the night. Once you have a suitable browser installed:
* Apache web server. Or, if you like, stick with IIS that's already on the server. If you prefer IIS, I still respect you, though I do fear for your sanity.
* ColdFusion
* The latest CF updater
* Any CF hotfixes
* A respectable text editor, like Notepad+\+ or Notepad2 or Textpad. This is listed as required because Notepad sucks. Period.
* [WinSSH|http://www.bitvise.com/winsshd] by bitvise. I tried FreeSSH and it didn't work on Windows 2008. YMMV. WinSSH licensing seemed reasonable to me, and it worked flawlessly.

*Optional*
* [Launchy|http://blog.mxunit.org/2009/04/timesavers-launchy.html] . Because a man without a key launcher just ain't livin'.
* Tortoise SVN
* [Git Bash|http://en.kioskea.net/faq/499-git-for-windows]&nbsp;
* BareTail if you want to sanely read log files

h2. Installation

Install the above just as you would on your own server. Essentially, you're now on your own server, except you're renting it. Start with the webserver (apache), then go to CF and all the hotfixes. You'll likely need to restart a few times... it is Windows, after all. If you're on Linux, you won't have read this far so no worries.

h2. Secure CFAdmin

By now, 4 beers or so in, you should have CF running and be able to connect to CFAdmin (localhost/CFIDE/administrator). Guess what... everyone else can get to it, too, publicly. No, they don't know your password, but you'll want to lock it down. If you've installed apache, here's how to do it (thanks [Jason Dean|http://www.12robots.com] \!)

In your Apache httpd.conf, add these lines:# Prevent external CFIDE access
<Location /CFIDE>
Order Deny,Allow
Deny from all
Allow from 127.0.0.1
</Location>

# Allow CFIDE access for scripts (ajaxy goodness, etc)
<Location /CFIDE/scripts>
Order Allow,Deny
Allow from all
</Location>


h2. Windows Firewall

When you created a Security Group, it already had Port 80 open for web traffic, and you added Port 22 for SSH. That's on the AWS side, but you'll also need to configure it in Windows. This is easy:
* Start --> Windows Firewall -->Change settings
* Exceptions Tab
* Add Port
** Add port 80
** Add port 22

h2. EC2 Windows user account

Create a new user account&nbsp; named "EC2-user". Password-protect that account. I chose the name "EC2" because the official Amazon Linux distros use that name, and the Eclipse tools don't make it easy (if possible) to use different users for different servers (more on the Eclipse tools later).

Log out of that RDP session and log in as ec2-user, with the password you chose, to ensure that everything is correctly configured.

h2. Configure SSH

If you want to more easily deploy code to Windows, you'll probably do so over SSH. This means you need an SSHd server and at least one account with permisions.


Assuming you've installed the WinSSH software linked above, you can now associate this ec2-user with SSH. To do so, open WinSSH, click the "settings" link, Click the Windows Accounts tab, and add the Windows ec2-user.

h2. Whew\!

Who knew that setting up a server would be *the same amount of work as building you own CF Server?* Well... that's what you're doing, so it shouldn't be a surprise, Just because you're paying by the hour doesn't mean you get any work for free (until Adobe provides AMIs...)

h2. Let's test

Assuming you have set up your web server, installed ColdFusion, and opened the ports in both Amazon Security Group and Windows Firewall, your server is now online. Put a test.cfm file in your web root (wherever you have that configured in your webserver), give it contents like <cfoutput>#now()#</cfoutput>.

From within that server (i.e. RDP'd into it), load that file at [http://localhost/test.cfm]. If you see the current date and time, you're almost there.

h2. What's the public URL?

If you've followed all of the above, a test .cfm page loads correctly at localhost. Now we need to ensure it's available publicly. On your AWS console, click on your instance. In the bottom frame, you'll see 2 URLs, a "private" and a "public". The private will be a 10.xxx address, and the public will be an "ec2-xxx" domain. Right now, we're interested in that public domain. Copy it. It'll be something inscrutable like "ec2-174-129-164-113.compute-1.amazonaws.com". From your machine \-\- NOT in your RDP screen but your "this is where I pay my bills and search for recipes and play Elmo games with my kids" machine,&nbsp; Paste that into your browser. It'll be something like "\[http://ec2-174-129-164-113.compute-1.amazonaws.com/test.cfm]".

You should get the current date and time, similar to what you saw when running from localhost a few minutes ago

{warning}If it spins and you get a timeout, or you get a "connection dropped" error, your firewall is most likely misconfigured.{warning}


h2. Next steps

At this point, you have ColdFusion installed. It's accessible externally. This instance is configured with useful software.

You now ask yourself: is this a good "source" from which to build future servers?

*Do I need to install additional software? What software am I missing?*

Grab another Big Hoppy Monster, go kiss your spouse, and sleep on it. You're building a server. You want the right tools. You've earned some cred. Go kiss the kids and tell them that Daddy/Mommy kicked some ass tonight.

*Next up: we bundle this server into an AMI*. This is the magic \-\- and the terror \-\- of cloud computing. You can now spin up 1, or a 1000+, servers. In a few clicks.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160423</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193188</id>
    <property name="body"><![CDATA[[Creating an account|Creating an AWS Account]

[Launching your first instance|Launching you first EC2 Instance]

[Creating your first ColdFusion AMI|Creating an EC2 ColdFusion AMI]

Launching your ColdFusion AMI as a new Instance

Deploying to multiple instances

Managing Configuration Changes

Spot Requests]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160422</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783445</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}
h1. Session Description

Perhaps you have some unit tests. Maybe even an ANT build file that runs your tests. And maybe even a build file that packages or deploys your application. But how do you orchestrate those separate pieces into a symphony of automation? Continuous Integration, of course.

Imagine: you have tests. A Teammate commits code to source control. Minutes later, you and your teammate get an email indicating that tests are now failing.

Imagine: you commit code. Minutes later, all tests run. All tests pass. Zip files are built and are ready for deployment. Or code was automatically pushed to any accessible environment. All without your intervention.

In this session, I'll demonstrate how to use the open source Jenkins Continuous Integration server, together with ANT and MXUnit, to create a top-notch automated test and build system for your ColdFusion applications.

h1. Download

[Here you go|^presentation.zip]





{column}
{column:width=5%}



{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750694</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193183</id>
    <property name="body"><![CDATA[{toc}

h1. Expectations

Adjust your expectations. Make no mistake: you are configuring a naked server just as you would if you were configuring a brand new instance in your own environment. You are merely renting space and compute power from Amazon, nothing more.


{warning}From the moment you start creating an  account to the time you have your first live, web-accessible, ColdFusion  instance, give yourself at least *2 hours*. It's not that it's  complicated, it's that you'll do a lot of waiting... waiting on your  first EC2 instance to boot, waiting for software to download, and  waiting for software to install.&nbsp; {warning}

h1. Launching your first EC2 Instance

Once you've signed up, you'll go to your AWS Console: [https://console.aws.amazon.com/ec2/home]

It'll be empty to start. You should have some tabs at the top of the screen. Click the EC2 tab. If it's not available, or if it gives you a screen indicating you haven't signed up for EC2 yet, go through the steps to sign up. Again, don't fret: you're not signing away your mortgage or jeopardizing your family's supper.

Once signed up for EC2, you'll have some links in your AWS Console to "Launch Instance". Clicking that will take you to the "Request Instances" Wizard.

h2. Request Instances Wizard


h3. 32bit or 64 bit, Linux or Windows?


Here's your first "real" decision, and you needn't labor over it. Essentially, you're choosing a "base" platform on which to build your first ColdFusion AMI. This may seem daunting at first, considering just how many AMIs are available. My advice is to not sweat it. If you're familiar with Windows, use Windows. If you're familiar with Linux, use linux. If all you know is "I want Windows", or "I want Linux", then choose one of the Win or Linux AMIs that appears on the initial "Quick Start" screen. These are generally either 32 or 64 bit.

*If you choose 64 bit, you're going to pay more.* The reason is that EC2 comes in a variety of "sizes", from "small" to humongous. Obviously, 32 bit doesn't do humongous because 32 bit can only address so much memory.

{tip}My advice: don't expect to make the best decision right away. You'll most likely end up configuring a different kind of server eventually. For now, concentrate on getting started, not getting it right{tip}

h3. Launch or Spot?

* to get started, choose "Launch Instances" as opposed to Spot instances. Spot instances are a way to save money, but they may add a bit of time onto your Getting Started experience. If you're choosing Windows, it doesn't matter anyway because the price is the same.

In the Instance Details screen, keep the defaults. Click through.

In the next screen, you'll be prompted for some key-value pairs. These are only meaningful to you. For example, you get prompted with a "Name" key... give it a name that's meaningful to you... "Windows Attempt #1", or "Linux Attempt #1", or something like that. Click through.

h3. Key Pairs

On the next screen, you'll be prompted about Key Pairs. These are critical. Presumably this is your first time through, so click "Create a new KeyPair" and give it a name. Click to download the file. Again, keep it secret, keep it safe. This will be a ".pem" file.

h3. Security Group

On the next screen you'll be prompted to create a Security Group for this new instance. Think of a Security Group as a firewall. Once you assign a SG to an instance, that's it. You live with it forever. This does NOT mean you can't change the configuration of this group\! You can.

At the very least, to start, you'll want to *Add* "SSH" as a rule. No, Windows servers don't have SSH, but you're going to install it, so add the rule now.

{tip}Give this Security Group a meaningful name, like "Win2k8" or some such thing.{tip}

h3. The Meter is now running

Once you launch an instance, the meter starts running. So don't launch an instance and forget about it for 3 months. You're now being billed until you stop this instance.


h3. Almost there


Congratulations. You've launched your first AWS EC2 instance. It's going to take a while to spin up, perhaps 15 minutes or more, so go grab a beer.

h3. Connecting to your instance

If you go back to your AWS Console, you'll see your instances in the Instances tab. It'll be marked as "Running", and my experience is that it takes 15-30 minutes for it to become available for you to connect to it. If you right click on that instance, you'll have a number of options. Right now, click on the "Get System Log" option. It'll pop up a window, and you'll probably see something like "Gathering metadata" or "Rebooting" or some such thing. After a while, it'll indicate that it's "ready", which means you can connect to it.

If you're running a Windows Instance, you'll need to get the initial Windows password, via the "Get Windows password" option in the menu. This will prompt you for the contents of your keypair file that you downloaded earlier. Open that file in a text editor, and copy the entire contents. Paste that chunk into this window, and it'll take you through the process of getting the admin password. This, too, might take some time. Be patient. Beer #2 doesn't hurt. I'd be remiss if I didn't suggest a Terrapin Big Hoppy Monster. I'd also be remiss if I didn't at this point direct you to Pintley.com, a ColdFusion-powered site for beer lovers. (Noooo, I don't have a problem. I just love great beer. And ColdFusion). Now, then...


Once you have that, select "Connect", and you'll get an option to "download a shortcut file". This is a typical windows ".rdp" file, which should be familiar to you if you've RDP''d into a windows server before.

Go through the RDP connection screens, and use "administrator" as the username, and that password as the password.

h3. You're in

You're in. You now have a brand new server (a virtual one, albeit). Now it's time to turn this thing into a ColdFusion server. It's way beyond the scope of this document to explain how to install and configure most of this software. I trust that you know how to create a CF server and that, if you don't, you know how to find the resources to teach you. From now on, I'll explain the important things you'll need to do as you install and configure this server.

h2. The Software you need

At this point, I'm going to describe how to set up a Windows server. If you're on Linux, you know how to do all of this already.

{note} I hope, at some point, Adobe will either provide supported AMIs or allow us to publish our own AMIs. As of this writing, neither are true. This means you need to start from scratch.{note}


Download the following:

*Required*
* firefox or chrome. You'll need to change the permissions on IE to download files. Do it once, to give you permission to download a decent browser. Then go drink another Big Hoppy Monster to eradicate the memory of dealing with IE for the night. Once you have a suitable browser installed:
* Apache web server. Or, if you like, stick with IIS that's already on the server. If you prefer IIS, I still respect you, though I do fear for your sanity.
* ColdFusion
* The latest CF updater
* Any CF hotfixes
* A respectable text editor, like Notepad+\+ or Notepad2 or Textpad. This is listed as required because Notepad sucks. Period.
* [WinSSH|http://www.bitvise.com/winsshd] by bitvise. I tried FreeSSH and it didn't work on Windows 2008. YMMV. WinSSH licensing seemed reasonable to me, and it worked flawlessly.

*Optional*
* [Launchy|http://blog.mxunit.org/2009/04/timesavers-launchy.html] . Because a man without a key launcher just ain't livin'.
* Tortoise SVN
* [Git Bash|http://en.kioskea.net/faq/499-git-for-windows]&nbsp;
* BareTail if you want to sanely read log files

h2. Installation

Install the above just as you would on your own server. Essentially, you're now on your own server, except you're renting it. Start with the webserver (apache), then go to CF and all the hotfixes. You'll likely need to restart a few times... it is Windows, after all. If you're on Linux, you won't have read this far so no worries.

h2. Secure CFAdmin

By now, 4 beers or so in, you should have CF running and be able to connect to CFAdmin (localhost/CFIDE/administrator). Guess what... everyone else can get to it, too, publicly. No, they don't know your password, but you'll want to lock it down. If you've installed apache, here's how to do it (thanks [Jason Dean|http://www.12robots.com] \!)

In your Apache httpd.conf, add these lines:# Prevent external CFIDE access
<Location /CFIDE>
Order Deny,Allow
Deny from all
Allow from 127.0.0.1
</Location>

# Allow CFIDE access for scripts (ajaxy goodness, etc)
<Location /CFIDE/scripts>
Order Allow,Deny
Allow from all
</Location>


h2. Windows Firewall

When you created a Security Group, it already had Port 80 open for web traffic, and you added Port 22 for SSH. That's on the AWS side, but you'll also need to configure it in Windows. This is easy:
* Start \--> Windows Firewall \-->Change settings
* Exceptions Tab
* Add Port
** Add port 80
** Add port 22

h2. EC2 Windows user account

Create a new user account&nbsp; named "EC2-user". Password-protect that account. I chose the name "EC2" because the official Amazon Linux distros use that name, and the Eclipse tools don't make it easy (if possible) to use different users for different servers (more on the Eclipse tools later).

Log out of that RDP session and log in as ec2-user, with the password you chose, to ensure that everything is correctly configured.

h2. Configure SSH

If you want to more easily deploy code to Windows, you'll probably do so over SSH. This means you need an SSHd server and at least one account with permisions.


Assuming you've installed the WinSSH software linked above, you can now associate this ec2-user with SSH. To do so, open WinSSH, click the "settings" link, Click the Windows Accounts tab, and add the Windows ec2-user.

h2. Whew\!

Who knew that setting up a server would be *the same amount of work as building you own CF Server?* Well... that's what you're doing, so it shouldn't be a surprise, Just because you're paying by the hour doesn't mean you get any work for free (until Adobe provides AMIs...)

h2. Let's test

Assuming you have set up your web server, installed ColdFusion, and opened the ports in both Amazon Security Group and Windows Firewall, your server is now online. Put a test.cfm file in your web root (wherever you have that configured in your webserver), give it contents like <cfoutput>#now()#</cfoutput>.

From within that server (i.e. RDP'd into it), load that file at [http://localhost/test.cfm]. If you see the current date and time, you're almost there.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160417</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193182</id>
    <property name="body"><![CDATA[{toc}

h1. Expectations

{warning}From the moment you start creating an  account to the time you have your first live, web-accessible, ColdFusion  instance, give yourself at least *2 hours*. It's not that it's  complicated, it's that you'll do a lot of waiting... waiting on your  first EC2 instance to boot, waiting for software to download, and  waiting for software to install.&nbsp; {warning}

h1. Launching your first EC2 Instance

Once you've signed up, you'll go to your AWS Console: [https://console.aws.amazon.com/ec2/home]

It'll be empty to start. You should have some tabs at the top of the screen. Click the EC2 tab. If it's not available, or if it gives you a screen indicating you haven't signed up for EC2 yet, go through the steps to sign up. Again, don't fret: you're not signing away your mortgage or jeopardizing your family's supper.

Once signed up for EC2, you'll have some links in your AWS Console to "Launch Instance". Clicking that will take you to the "Request Instances" Wizard.

h2. Request Instances Wizard


h3. 32bit or 64 bit, Linux or Windows?


Here's your first "real" decision, and you needn't labor over it. Essentially, you're choosing a "base" platform on which to build your first ColdFusion AMI. This may seem daunting at first, considering just how many AMIs are available. My advice is to not sweat it. If you're familiar with Windows, use Windows. If you're familiar with Linux, use linux. If all you know is "I want Windows", or "I want Linux", then choose one of the Win or Linux AMIs that appears on the initial "Quick Start" screen. These are generally either 32 or 64 bit.

*If you choose 64 bit, you're going to pay more.* The reason is that EC2 comes in a variety of "sizes", from "small" to humongous. Obviously, 32 bit doesn't do humongous because 32 bit can only address so much memory.

{tip}My advice: don't expect to make the best decision right away. You'll most likely end up configuring a different kind of server eventually. For now, concentrate on getting started, not getting it right{tip}

h3. Launch or Spot?

* to get started, choose "Launch Instances" as opposed to Spot instances. Spot instances are a way to save money, but they may add a bit of time onto your Getting Started experience. If you're choosing Windows, it doesn't matter anyway because the price is the same.

In the Instance Details screen, keep the defaults. Click through.

In the next screen, you'll be prompted for some key-value pairs. These are only meaningful to you. For example, you get prompted with a "Name" key... give it a name that's meaningful to you... "Windows Attempt #1", or "Linux Attempt #1", or something like that. Click through.

h3. Key Pairs

On the next screen, you'll be prompted about Key Pairs. These are critical. Presumably this is your first time through, so click "Create a new KeyPair" and give it a name. Click to download the file. Again, keep it secret, keep it safe. This will be a ".pem" file.

h3. Security Group

On the next screen you'll be prompted to create a Security Group for this new instance. Think of a Security Group as a firewall. Once you assign a SG to an instance, that's it. You live with it forever. This does NOT mean you can't change the configuration of this group\! You can.

At the very least, to start, you'll want to *Add* "SSH" as a rule. No, Windows servers don't have SSH, but you're going to install it, so add the rule now.

{tip}Give this Security Group a meaningful name, like "Win2k8" or some such thing.{tip}

h3. The Meter is now running

Once you launch an instance, the meter starts running. So don't launch an instance and forget about it for 3 months. You're now being billed until you stop this instance.


h3. Almost there


Congratulations. You've launched your first AWS EC2 instance. It's going to take a while to spin up, perhaps 15 minutes or more, so go grab a beer.

h3. Connecting to your instance

If you go back to your AWS Console, you'll see your instances in the Instances tab. It'll be marked as "Running", and my experience is that it takes 15-30 minutes for it to become available for you to connect to it. If you right click on that instance, you'll have a number of options. Right now, click on the "Get System Log" option. It'll pop up a window, and you'll probably see something like "Gathering metadata" or "Rebooting" or some such thing. After a while, it'll indicate that it's "ready", which means you can connect to it.

If you're running a Windows Instance, you'll need to get the initial Windows password, via the "Get Windows password" option in the menu. This will prompt you for the contents of your keypair file that you downloaded earlier. Open that file in a text editor, and copy the entire contents. Paste that chunk into this window, and it'll take you through the process of getting the admin password. This, too, might take some time. Be patient. Beer #2 doesn't hurt. I'd be remiss if I didn't suggest a Terrapin Big Hoppy Monster. I'd also be remiss if I didn't at this point direct you to Pintley.com, a ColdFusion-powered site for beer lovers. (Noooo, I don't have a problem. I just love great beer. And ColdFusion). Now, then...


Once you have that, select "Connect", and you'll get an option to "download a shortcut file". This is a typical windows ".rdp" file, which should be familiar to you if you've RDP''d into a windows server before.

Go through the RDP connection screens, and use "administrator" as the username, and that password as the password.

h3. You're in

You're in. You now have a brand new server (a virtual one, albeit). Now it's time to turn this thing into a ColdFusion server. It's way beyond the scope of this document to explain how to install and configure most of this software. I trust that you know how to create a CF server and that, if you don't, you know how to find the resources to teach you. From now on, I'll explain the important things you'll need to do as you install and configure this server.

h2. The Software you need

At this point, I'm going to describe how to set up a Windows server. If you're on Linux, you know how to do all of this already.

{note} I hope, at some point, Adobe will either provide supported AMIs or allow us to publish our own AMIs. As of this writing, neither are true. This means you need to start from scratch.{note}


Download the following:

*Required*
* firefox or chrome. You'll need to change the permissions on IE to download files. Do it once, to give you permission to download a decent browser. Then go drink another Big Hoppy Monster to eradicate the memory of dealing with IE for the night. Once you have a suitable browser installed:
* Apache web server. Or, if you like, stick with IIS that's already on the server. If you prefer IIS, I still respect you, though I do fear for your sanity.
* ColdFusion
* The latest CF updater
* Any CF hotfixes
* A respectable text editor, like Notepad+\+ or Notepad2 or Textpad. This is listed as required because Notepad sucks. Period.
* [WinSSH|http://www.bitvise.com/winsshd] by bitvise. I tried FreeSSH and it didn't work on Windows 2008. YMMV. WinSSH licensing seemed reasonable to me, and it worked flawlessly.

*Optional*
* [Launchy|http://blog.mxunit.org/2009/04/timesavers-launchy.html] . Because a man without a key launcher just ain't livin'.
* Tortoise SVN
* [Git Bash|http://en.kioskea.net/faq/499-git-for-windows]&nbsp;
* BareTail if you want to sanely read log files

h2. Installation

Install the above just as you would on your own server. Essentially, you're now on your own server, except you're renting it. Start with the webserver (apache), then go to CF and all the hotfixes. You'll likely need to restart a few times... it is Windows, after all. If you're on Linux, you won't have read this far so no worries.

h2. Secure CFAdmin

By now, 4 beers or so in, you should have CF running and be able to connect to CFAdmin (localhost/CFIDE/administrator). Guess what... everyone else can get to it, too, publicly. No, they don't know your password, but you'll want to lock it down. If you've installed apache, here's how to do it (thanks [Jason Dean|http://www.12robots.com] \!)

In your Apache httpd.conf, add these lines:# Prevent external CFIDE access
<Location /CFIDE>
Order Deny,Allow
Deny from all
Allow from 127.0.0.1
</Location>

# Allow CFIDE access for scripts (ajaxy goodness, etc)
<Location /CFIDE/scripts>
Order Allow,Deny
Allow from all
</Location>


h2. Windows Firewall

When you created a Security Group, it already had Port 80 open for web traffic, and you added Port 22 for SSH. That's on the AWS side, but you'll also need to configure it in Windows. This is easy:
* Start --> Windows Firewall -->Change settings
* Exceptions Tab
* Add Port
** Add port 80
** Add port 22

h2. EC2 Windows user account

Create a new user account&nbsp; named "EC2-user". Password-protect that account. I chose the name "EC2" because the official Amazon Linux distros use that name, and the Eclipse tools don't make it easy (if possible) to use different users for different servers (more on the Eclipse tools later).

Log out of that RDP session and log in as ec2-user, with the password you chose, to ensure that everything is correctly configured.

h2. Configure SSH

If you want to more easily deploy code to Windows, you'll probably do so over SSH. This means you need an SSHd server and at least one account with permisions.


Assuming you've installed the WinSSH software linked above, you can now associate this ec2-user with SSH. To do so, open WinSSH, click the "settings" link, Click the Windows Accounts tab, and add the Windows ec2-user.

h2. Whew\!

Who knew that setting up a server would be *the same amount of work as building you own CF Server?* Well... that's what you're doing, so it shouldn't be a surprise, Just because you're paying by the hour doesn't mean you get any work for free (until Adobe provides AMIs...)

h2. Let's test

Assuming you have set up your web server, installed ColdFusion, and opened the ports in both Amazon Security Group and Windows Firewall, your server is now online. Put a test.cfm file in your web root (wherever you have that configured in your webserver), give it contents like <cfoutput>#now()#</cfoutput>.

From within that server (i.e. RDP'd into it), load that file at [http://localhost/test.cfm]. If you see the current date and time, you're almost there.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160416</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783443</id>
    <property name="body"><![CDATA[h2. CFObjective 2011 \-\- ORM Zen \-\- Marc Esher

A presentation about suffering and enlightenment

h3. Description

{color:#000000}The month: June. The weather: hot. Brewfests: too far away. My job:{color}
{color:#000000}brand new. My issue tracker: overflowing. Deadlines: looming. My{color}
{color:#000000}spirits: sunken.{color}

{color:#000000}Why? I had met my nemesis, and it was ORM. Got Artists, got Art? Easy.{color}
{color:#000000}Got real-world stuff to do... hey, wait a minute\!{color}

{color:#000000}We'll explore entity relationship problems in depth, as they are the{color}
{color:#000000}heart of ORM and consequently the most frequent source of ORM pain. In{color}
{color:#000000}addition, we'll cover strategies for taming the Hibernate session and{color}
{color:#000000}general "how do I do this in ORM?" problems that all programmers new{color}
{color:#000000}to ORM need to know.{color}

{color:#000000}This presentation is my story of suffering through the initial ORM{color}
{color:#000000}learning curve and how I finally achieved ORM enlightenment.{color}

h3. Download

[Here you go|^marc_esher_cfobjective_2011_orm_zen.zip]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750692</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193185</id>
    <property name="body"><![CDATA[{toc}

h1. Expectations

Adjust your expectations. Make no mistake: you are configuring a naked server just as you would if you were configuring a brand new instance in your own environment. You are merely renting space and compute power from Amazon, nothing more.


{warning}From the moment you start creating an  account to the time you have your first live, web-accessible, ColdFusion  instance, give yourself at least *3 hours*. It's not that it's  complicated, it's that you'll do a lot of waiting... waiting on your  first EC2 instance to boot, waiting for software to download, and  waiting for software to install.&nbsp; {warning}

h1. Launching your first EC2 Instance

Once you've signed up, you'll go to your AWS Console: [https://console.aws.amazon.com/ec2/home]

It'll be empty to start. You should have some tabs at the top of the screen. Click the EC2 tab. If it's not available, or if it gives you a screen indicating you haven't signed up for EC2 yet, go through the steps to sign up. Again, don't fret: you're not signing away your mortgage or jeopardizing your family's supper.

Once signed up for EC2, you'll have some links in your AWS Console to "Launch Instance". Clicking that will take you to the "Request Instances" Wizard.

h2. Request Instances Wizard


h3. 32bit or 64 bit, Linux or Windows?


Here's your first "real" decision, and you needn't labor over it. Essentially, you're choosing a "base" platform on which to build your first ColdFusion AMI. This may seem daunting at first, considering just how many AMIs are available. My advice is to not sweat it. If you're familiar with Windows, use Windows. If you're familiar with Linux, use linux. If all you know is "I want Windows", or "I want Linux", then choose one of the Win or Linux AMIs that appears on the initial "Quick Start" screen. These are generally either 32 or 64 bit.

*If you choose 64 bit, you're going to pay more.* The reason is that EC2 comes in a variety of "sizes", from "small" to humongous. Obviously, 32 bit doesn't do humongous because 32 bit can only address so much memory.

{tip}My advice: don't expect to make the best decision right away. You'll most likely end up configuring a different kind of server eventually. For now, concentrate on getting started, not getting it right{tip}

h3. Launch or Spot?

* to get started, choose "Launch Instances" as opposed to Spot instances. Spot instances are a way to save money, but they may add a bit of time onto your Getting Started experience. If you're choosing Windows, it doesn't matter anyway because the price is the same.

In the Instance Details screen, keep the defaults. Click through.

In the next screen, you'll be prompted for some key-value pairs. These are only meaningful to you. For example, you get prompted with a "Name" key... give it a name that's meaningful to you... "Windows Attempt #1", or "Linux Attempt #1", or something like that. Click through.

h3. Key Pairs

On the next screen, you'll be prompted about Key Pairs. These are critical. Presumably this is your first time through, so click "Create a new KeyPair" and give it a name. Click to download the file. Again, keep it secret, keep it safe. This will be a ".pem" file.

h3. Security Group

On the next screen you'll be prompted to create a Security Group for this new instance. Think of a Security Group as a firewall. Once you assign a SG to an instance, that's it. You live with it forever. This does NOT mean you can't change the configuration of this group\! You can.

At the very least, to start, you'll want to *Add* "SSH" as a rule. No, Windows servers don't have SSH, but you're going to install it, so add the rule now.

{tip}Give this Security Group a meaningful name, like "Win2k8" or some such thing.{tip}

h3. The Meter is now running

Once you launch an instance, the meter starts running. So don't launch an instance and forget about it for 3 months. You're now being billed until you stop this instance.


h3. Almost there


Congratulations. You've launched your first AWS EC2 instance. It's going to take a while to spin up, perhaps 15 minutes or more, so go grab a beer.

h3. Connecting to your instance

If you go back to your AWS Console, you'll see your instances in the Instances tab. It'll be marked as "Running", and my experience is that it takes 15-30 minutes for it to become available for you to connect to it. If you right click on that instance, you'll have a number of options. Right now, click on the "Get System Log" option. It'll pop up a window, and you'll probably see something like "Gathering metadata" or "Rebooting" or some such thing. After a while, it'll indicate that it's "ready", which means you can connect to it.

If you're running a Windows Instance, you'll need to get the initial Windows password, via the "Get Windows password" option in the menu. This will prompt you for the contents of your keypair file that you downloaded earlier. Open that file in a text editor, and copy the entire contents. Paste that chunk into this window, and it'll take you through the process of getting the admin password. This, too, might take some time. Be patient. Beer #2 doesn't hurt. I'd be remiss if I didn't suggest a Terrapin Big Hoppy Monster. I'd also be remiss if I didn't at this point direct you to Pintley.com, a ColdFusion-powered site for beer lovers. (Noooo, I don't have a problem. I just love great beer. And ColdFusion). Now, then...


Once you have that, select "Connect", and you'll get an option to "download a shortcut file". This is a typical windows ".rdp" file, which should be familiar to you if you've RDP''d into a windows server before.

Go through the RDP connection screens, and use "administrator" as the username, and that password as the password.

h3. You're in

You're in. You now have a brand new server (a virtual one, albeit). Now it's time to turn this thing into a ColdFusion server. It's way beyond the scope of this document to explain how to install and configure most of this software. I trust that you know how to create a CF server and that, if you don't, you know how to find the resources to teach you. From now on, I'll explain the important things you'll need to do as you install and configure this server.

h2. The Software you need

At this point, I'm going to describe how to set up a Windows server. If you're on Linux, you know how to do all of this already.

{note} I hope, at some point, Adobe will either provide supported AMIs or allow us to publish our own AMIs. As of this writing, neither are true. This means you need to start from scratch.{note}


Download the following:

*Required*
* firefox or chrome. You'll need to change the permissions on IE to download files. Do it once, to give you permission to download a decent browser. Then go drink another Big Hoppy Monster to eradicate the memory of dealing with IE for the night. Once you have a suitable browser installed:
* Apache web server. Or, if you like, stick with IIS that's already on the server. If you prefer IIS, I still respect you, though I do fear for your sanity.
* ColdFusion
* The latest CF updater
* Any CF hotfixes
* A respectable text editor, like Notepad+\+ or Notepad2 or Textpad. This is listed as required because Notepad sucks. Period.
* [WinSSH|http://www.bitvise.com/winsshd] by bitvise. I tried FreeSSH and it didn't work on Windows 2008. YMMV. WinSSH licensing seemed reasonable to me, and it worked flawlessly.

*Optional*
* [Launchy|http://blog.mxunit.org/2009/04/timesavers-launchy.html] . Because a man without a key launcher just ain't livin'.
* Tortoise SVN
* [Git Bash|http://en.kioskea.net/faq/499-git-for-windows]&nbsp;
* BareTail if you want to sanely read log files

h2. Installation

Install the above just as you would on your own server. Essentially, you're now on your own server, except you're renting it. Start with the webserver (apache), then go to CF and all the hotfixes. You'll likely need to restart a few times... it is Windows, after all. If you're on Linux, you won't have read this far so no worries.

h2. Secure CFAdmin

By now, 4 beers or so in, you should have CF running and be able to connect to CFAdmin (localhost/CFIDE/administrator). Guess what... everyone else can get to it, too, publicly. No, they don't know your password, but you'll want to lock it down. If you've installed apache, here's how to do it (thanks [Jason Dean|http://www.12robots.com] \!)

In your Apache httpd.conf, add these lines:# Prevent external CFIDE access
<Location /CFIDE>
Order Deny,Allow
Deny from all
Allow from 127.0.0.1
</Location>

# Allow CFIDE access for scripts (ajaxy goodness, etc)
<Location /CFIDE/scripts>
Order Allow,Deny
Allow from all
</Location>


h2. Windows Firewall

When you created a Security Group, it already had Port 80 open for web traffic, and you added Port 22 for SSH. That's on the AWS side, but you'll also need to configure it in Windows. This is easy:
* Start --> Windows Firewall -->Change settings
* Exceptions Tab
* Add Port
** Add port 80
** Add port 22

h2. EC2 Windows user account

Create a new user account&nbsp; named "EC2-user". Password-protect that account. I chose the name "EC2" because the official Amazon Linux distros use that name, and the Eclipse tools don't make it easy (if possible) to use different users for different servers (more on the Eclipse tools later).

Log out of that RDP session and log in as ec2-user, with the password you chose, to ensure that everything is correctly configured.

h2. Configure SSH

If you want to more easily deploy code to Windows, you'll probably do so over SSH. This means you need an SSHd server and at least one account with permisions.


Assuming you've installed the WinSSH software linked above, you can now associate this ec2-user with SSH. To do so, open WinSSH, click the "settings" link, Click the Windows Accounts tab, and add the Windows ec2-user.

h2. Whew\!

Who knew that setting up a server would be *the same amount of work as building you own CF Server?* Well... that's what you're doing, so it shouldn't be a surprise, Just because you're paying by the hour doesn't mean you get any work for free (until Adobe provides AMIs...)

h2. Let's test

Assuming you have set up your web server, installed ColdFusion, and opened the ports in both Amazon Security Group and Windows Firewall, your server is now online. Put a test.cfm file in your web root (wherever you have that configured in your webserver), give it contents like <cfoutput>#now()#</cfoutput>.

From within that server (i.e. RDP'd into it), load that file at [http://localhost/test.cfm]. If you see the current date and time, you're almost there.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160419</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783432</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}
h1. Session Description

Perhaps you have some unit tests. Maybe even an ANT build file that runs your tests. And maybe even a build file that packages or deploys your application. But how do you orchestrate those separate pieces into a symphony of automation? Continuous Integration, of course.
 
Imagine: you have tests. A Teammate commits code to source control. Minutes later, you and your teammate get an email indicating that tests are now failing.
 
Imagine: you commit code. Minutes later, all tests run. All tests pass. Zip files are built and are ready for deployment. Or code was automatically pushed to any accessible environment. All without your intervention.
 
In this session, I'll demonstrate how to use the open source Jenkins Continuous Integration server, together with ANT and MXUnit, to create a top-notch automated test and build system for your ColdFusion applications.

h2. Download

blah


{column}
{column:width=5%}

{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750680</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783430</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* [CFObjective 2011 -- ORM Zen|CFObjective 2011 -- ORM Zen] \-\- May 12, 2011 \-\- A presentation about ORM suffering and eventual enlightenment
* [RIAUnleashed 2010 -- Introduction to MongoDB for CFML Developers|RIAUnleashed 2010 -- Introduction to MongoDB for CFML Developers] \-\- November 12, 2010 \-\- What is Mongo, Why it's awesome, and how to use it
* [Adobe MAX 2010 \-\- ColdFusion Skunkworks with Joe Rinehart and Marc Esher|Adobe MAX 2010 -- ColdFusion Skunkworks] \-\- October 27, 2010&nbsp; \-\- Experimentation, learning, and finding joy in what you do
* [CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit|CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit] \-\- April 22, 2010 \-\- An ungentle introduction to Continuous Integration for CFMLers
* [April 2010 -- Online ColdFusion  Meetup -- Know your tools: Productivity Tips-n-Tricks for ColdFusion Builder / CFEclipse|CFMeetupEclipseProductivity|Master your tool]
* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14, 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14, 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16, 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/CFU2008ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.

{tip}Just getting started with unit testing? John C Bland II gave a fantastic overview... [watch it here|http://experts.na3.acrobat.com/p76614762/] .{tip}{tip}Want to learn more about ANT? Watch [Jim Priest's CFMeetup presentation|http://experts.acrobat.com/p53858056/] {tip}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750678</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193212</id>
    <property name="body"><![CDATA[[Creating an account|Creating an AWS Account]

[Launching your first instance|Launching your first EC2 Instance]

[Creating your first ColdFusion AMI|Creating an EC2 ColdFusion AMI]

[Launching your ColdFusion AMI as a new Instance|Launching your ColdFusion AMI as a new Instance]

[A quick tip for Security Groups|Amazon EC2 Security Groups]

Using the Amazon Tools for Eclipse


[Deploying to multiple instances|Deploying code to multiple ColdFusion EC2 instances]

Managing Configuration Changes

Spot Requests]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160446</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193206</id>
    <property name="body"><![CDATA[I keep my tests in a folder that is part of my project and part of my SVN code base. This make it easy to maintain and deploy as required. I then setup a virtual directory in my web server so I can address my tests directly. Finally I place an empty application.cfc in the root of my test directory, which stops the tests accessing stuff it shouldn't like session information. 

CHeers for the site
jlamp]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6160440</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783434</id>
    <property name="body"><![CDATA[{section}
{column:width=60%}

{toc:maxLevel=5}
h1. Session Description

Perhaps you have some unit tests. Maybe even an ANT build file that runs your tests. And maybe even a build file that packages or deploys your application. But how do you orchestrate those separate pieces into a symphony of automation? Continuous Integration, of course.

Imagine: you have tests. A Teammate commits code to source control. Minutes later, you and your teammate get an email indicating that tests are now failing.

Imagine: you commit code. Minutes later, all tests run. All tests pass. Zip files are built and are ready for deployment. Or code was automatically pushed to any accessible environment. All without your intervention.

In this session, I'll demonstrate how to use the open source Jenkins Continuous Integration server, together with ANT and MXUnit, to create a top-notch automated test and build system for your ColdFusion applications.

h1. Download

blah



{column}
{column:width=5%}


{column}
{column:width=35%}

h6. Navigate space
{pagetree:searchBox=true|expandCollapseAll=true|startDepth=1}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750682</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193208</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* [CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit|CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit] \-\- April 22, 2010 \-\- An ungentle introduction to Continuous Integration for CFMLers
* [April 2010 -- Online ColdFusion  Meetup -- Know your tools: Productivity Tips-n-Tricks for ColdFusion Builder / CFEclipse|CFMeetupEclipseProductivity|Master your tool]
* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14, 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14, 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16, 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/CFU2008ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.

{tip}Just getting started with unit testing? John C Bland II gave a fantastic overview... [watch it here|http://experts.na3.acrobat.com/p76614762/] .{tip}{tip}Want to learn more about ANT? Watch [Jim Priest's CFMeetup presentation|http://experts.acrobat.com/p53858056/] {tip} ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160442</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783424</id>
    <property name="body"><![CDATA[{toc:maxLevel=2}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]

You can get the latest version of the Eclipse plugin by pointing at this update site: [http://mxunit.org/update]
{tip}
{section}

{column:width=50%}

h2. Framework \-\- 2.0.3 \-\- May 5, 2011



h3. Enhancements

* User-contributed "assertEqualsWithTolerance()" function which adds a tolerance parameter to equality assertions
* Updated samples/build.xml with hints for using with Jenkins
* Updated mxunit-ant.jar to log the entire html response to the console if the test run bombs (i.e. 500 error)

h2. Framework \-\- 2.0.2


h3. Enhancements

* added restoreMethod() for undoing method overwrites from injectMethod(). This is particularly useful when using ColdSpring-managed objects in your tests. Inspired by [this post|http://www.silverwareconsulting.com/index.cfm/2009/7/14/Using-MXUnits-injectMethod-to-Reverse-an-injectMethod-call#c82B9BFA8-0DE7-8E6D-2C4C1BC85072A908]&nbsp;
* HTML Result tweaks... mostly code cleanup. Also, no need to specify a result type any longer as it defaults to the new HTML output introduced in MXUnit 2.0

h3. Bug Fixes

* User-supplied patch to JUnitXMLTestResult to properly encode "special characters". Thanks\!




h2. Framework \-\- 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and [request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5, label="some label"); This is particularly important when debugging ORM objects
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Core features should now be CF7 compatible.
* MightyMock behavioral inconsistency on CF8 fixed
* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in MightyMock on Adobe ColdFusion

h3. Backwards Compatibility

* debug() will be backwards compatible IF for calls not using named arguments
* debug() will now fail if the old (removed) "debugdata" argument was passed like so: debug(debugdata=someStruct); to fix, either change debugdata to "var" or remove the named argument


{column}
{column:width=5%}


{column}
{column:width=45%}

h2. Eclipse Plugin \-\- 1.4.1 \-\- March 23, 2011


* Added "Run MXUnit Tests" to the "Run As" menu. Default keybinding is alt-shift-x, m (you can change that in preferences)
* Added support for opening files from the "Tag Context" panel when those files are not in projects, i.e. opens from the file system.
* Thanks Denny for these contributions\!



{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750672</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783422</id>
    <property name="body"><![CDATA[{toc}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]

You can get the latest version of the Eclipse plugin by pointing at this update site: [http://mxunit.org/update]
{tip}
{section:border=true}

{column:width=50%}

h2. Framework \-\- 2.0.3 \-\- May 5, 2011



h3. Enhancements

* User-contributed "assertEqualsWithTolerance()" function which adds a tolerance parameter to equality assertions
* Updated samples/build.xml with hints for using with Jenkins
* Updated mxunit-ant.jar to log the entire html response to the console if the test run bombs (i.e. 500 error)

h2. Framework \-\- 2.0.2


h3. Enhancements

* added restoreMethod() for undoing method overwrites from injectMethod(). This is particularly useful when using ColdSpring-managed objects in your tests. Inspired by [this post|http://www.silverwareconsulting.com/index.cfm/2009/7/14/Using-MXUnits-injectMethod-to-Reverse-an-injectMethod-call#c82B9BFA8-0DE7-8E6D-2C4C1BC85072A908]&nbsp;
* HTML Result tweaks... mostly code cleanup. Also, no need to specify a result type any longer as it defaults to the new HTML output introduced in MXUnit 2.0

h3. Bug Fixes

* User-supplied patch to JUnitXMLTestResult to properly encode "special characters". Thanks\!




h2. Framework \-\- 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and [request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5, label="some label"); This is particularly important when debugging ORM objects
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Core features should now be CF7 compatible.
* MightyMock behavioral inconsistency on CF8 fixed
* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in MightyMock on Adobe ColdFusion

h3. Backwards Compatibility

* debug() will be backwards compatible IF for calls not using named arguments
* debug() will now fail if the old (removed) "debugdata" argument was passed like so: debug(debugdata=someStruct); to fix, either change debugdata to "var" or remove the named argument


{column}
{column:width=5%}


{column}
{column:width=45%}

h2. Eclipse Plugin \-\- 1.4.1 \-\- March 23, 2011


* Added "Run MXUnit Tests" to the "Run As" menu. Default keybinding is alt-shift-x, m (you can change that in preferences)
* Added support for opening files from the "Tag Context" panel when those files are not in projects, i.e. opens from the file system.
* Thanks Denny for these contributions\!



{column}

{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750670</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783423</id>
    <property name="body"><![CDATA[{toc:maxLevel=1}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]

You can get the latest version of the Eclipse plugin by pointing at this update site: [http://mxunit.org/update]
{tip}
{section}

{column:width=50%}

h2. Framework \-\- 2.0.3 \-\- May 5, 2011



h3. Enhancements

* User-contributed "assertEqualsWithTolerance()" function which adds a tolerance parameter to equality assertions
* Updated samples/build.xml with hints for using with Jenkins
* Updated mxunit-ant.jar to log the entire html response to the console if the test run bombs (i.e. 500 error)

h2. Framework \-\- 2.0.2


h3. Enhancements

* added restoreMethod() for undoing method overwrites from injectMethod(). This is particularly useful when using ColdSpring-managed objects in your tests. Inspired by [this post|http://www.silverwareconsulting.com/index.cfm/2009/7/14/Using-MXUnits-injectMethod-to-Reverse-an-injectMethod-call#c82B9BFA8-0DE7-8E6D-2C4C1BC85072A908]&nbsp;
* HTML Result tweaks... mostly code cleanup. Also, no need to specify a result type any longer as it defaults to the new HTML output introduced in MXUnit 2.0

h3. Bug Fixes

* User-supplied patch to JUnitXMLTestResult to properly encode "special characters". Thanks\!




h2. Framework \-\- 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and [request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5, label="some label"); This is particularly important when debugging ORM objects
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Core features should now be CF7 compatible.
* MightyMock behavioral inconsistency on CF8 fixed
* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in MightyMock on Adobe ColdFusion

h3. Backwards Compatibility

* debug() will be backwards compatible IF for calls not using named arguments
* debug() will now fail if the old (removed) "debugdata" argument was passed like so: debug(debugdata=someStruct); to fix, either change debugdata to "var" or remove the named argument


{column}
{column:width=5%}


{column}
{column:width=45%}

h2. Eclipse Plugin \-\- 1.4.1 \-\- March 23, 2011


* Added "Run MXUnit Tests" to the "Run As" menu. Default keybinding is alt-shift-x, m (you can change that in preferences)
* Added support for opening files from the "Tag Context" panel when those files are not in projects, i.e. opens from the file system.
* Thanks Denny for these contributions\!



{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750671</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193205</id>
    <property name="body"><![CDATA[[Creating an account|Creating an AWS Account]

[Launching your first instance|Launching your first EC2 Instance]

[Creating your first ColdFusion AMI|Creating an EC2 ColdFusion AMI]

[Launching your ColdFusion AMI as a new Instance|Launching your ColdFusion AMI as a new Instance]

[Some notes on Security Groups|Amazon EC2 Security Groups]

Using the Amazon Tools for Eclipse


[Deploying to multiple instances|Deploying code to multiple ColdFusion EC2 instances]

Managing Configuration Changes

Spot Requests]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160439</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783428</id>
    <property name="body"><![CDATA[h2. CFObjective 2011 \-\- ORM Zen \-\- Marc Esher

A presentation about suffering and enlightenment

h3. Description

{color:#000000}The month: June. The weather: hot. Brewfests: too far away. My job:{color}
{color:#000000}brand new. My issue tracker: overflowing. Deadlines: looming. My{color}
{color:#000000}spirits: sunken.{color}

{color:#000000}Why? I had met my nemesis, and it was ORM. Got Artists, got Art? Easy.{color}
{color:#000000}Got real-world stuff to do... hey, wait a minute\!{color}

{color:#000000}We'll explore entity relationship problems in depth, as they are the{color}
{color:#000000}heart of ORM and consequently the most frequent source of ORM pain. In{color}
{color:#000000}addition, we'll cover strategies for taming the Hibernate session and{color}
{color:#000000}general "how do I do this in ORM?" problems that all programmers new{color}
{color:#000000}to ORM need to know.{color}

{color:#000000}This presentation is my story of suffering through the initial ORM{color}
{color:#000000}learning curve and how I finally achieved ORM enlightenment.{color}

h3. Download

[Here you go|download/attachments/6750399/marc_esher_cfobjective_2011_orm_zen.zip?version=1&modificationDate=1305140090316] [|#]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750676</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783426</id>
    <property name="body"><![CDATA[h2. CFObjective 2011 \-\- ORM Zen \-\- Marc Esher

A presentation about suffering and enlightenment

h3. Description

{color:#000000}The month: June. The weather: hot. Brewfests: too far away. My job:{color}
{color:#000000}brand new. My issue tracker: overflowing. Deadlines: looming. My{color}
{color:#000000}spirits: sunken.{color}
{color:#000000}Why? I had met my nemesis, and it was ORM. Got Artists, got Art? Easy.{color}
{color:#000000}Got real-world stuff to do... hey, wait a minute\!{color}
{color:#000000}We'll explore entity relationship problems in depth, as they are the{color}
{color:#000000}heart of ORM and consequently the most frequent source of ORM pain. In{color}
{color:#000000}addition, we'll cover strategies for taming the Hibernate session and{color}
{color:#000000}general "how do I do this in ORM?" problems that all programmers new{color}
{color:#000000}to ORM need to know.{color}
{color:#000000}This presentation is my story of suffering through the initial ORM{color}
{color:#000000}learning curve and how I finally achieved ORM enlightenment.{color}

h3. Download

When the bits are ready, they'll be here]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750674</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6193201</id>
    <property name="body"><![CDATA[[Creating an account|Creating an AWS Account]

[Launching your first instance|Launching your first EC2 Instance]

[Creating your first ColdFusion AMI|Creating an EC2 ColdFusion AMI]

[Launching your ColdFusion AMI as a new Instance|Launching your ColdFusion AMI as a new Instance]

[Deploying to multiple instances|Deploying code to multiple ColdFusion EC2 instances]

Managing Configuration Changes

Spot Requests]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6160435</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5670227</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&client=firefox-a&hs=wFV&rls=org.mozilla%3Aen-GB%3Aofficial&q=mxunit+cfbuilder+standalone&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-09-01 15:31:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-09-01 15:31:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5670213</id>
    <property name="viewCount">2</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=cffunction+tutorial&rls=com.microsoft:en-us&ie=UTF-8&oe=UTF-8&startIndex=&startPage=1]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-08-31 22:45:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-08-31 22:47:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5670209</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?url=http://wiki.mxunit.org/pages/viewpage.action%3FpageId%3D786560&rct=j&sa=X&ei=Zld9TOPqC4zSngeUm52dCw&ved=0CBUQzgQoADAA&q=mxunit+tutorial&usg=AFQjCNEB3y6kJVJ19gcKLf6S8t9ugT4msw&cad=rja]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-08-31 19:27:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-08-31 19:27:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6782977</id>
    <property name="body"
      ><![CDATA[Looks like each of the functions in your code examples has been pasted in twice, although with the first ones having all spaces stripped out.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6750209</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6782980</id>
    <property name="body"><![CDATA[thanks. should be fixed now.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6750212</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6782979</id>
    <property name="body"><![CDATA[h2. Custom Assertions - How To

Sometimes you need complex and/or repetitive assertions. This can put a damper on any TDD effort. So, we provide you an easy way to add custom assertions to your tests without having to change the mxunit core.

The steps for creating your custom assertion are as follows:
# Write a test for your assertion
# Write the assertion
# Decide how you want to load it: Always or only on selected tests.

Assertion Rules:

# Your assertion will need to throw mxunit.exception.AssertionFailedError or use an existing     assertion that throws this exception.
# If you want to have optional first or last parameter message, you will need to call normalizeArguments(arguments) in your code.

*Custom Assertion Example:* Say you need to frequently validate email addresses. You can do this with a pretty regular expression such as this :
{noformat}
^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$

{noformat}

The code for this might look like:
{code}
 <cffunctionname="testValidEmailAddress">
 <cfscript>
 varemailRegEx="^\[A-Za-z0-9\]((\[_\.\-\]?\[a-zA-Z0-9\]+)*)@(\[A-Za-z0-9\]+)((\[\.\-\]?\[a-zA-Z0-9\]+)*)\.(\[A-Za-z\]{2,})$";
 varemailAddress="somebody@somewhere.com";
 assertTrue(refind(emailRegEx,emailAddress)lt1,"Invalidemailaddressformat");
 </cfscript>
 </cffunction><cffunction name="testValidEmailAddress">
  <cfscript>
   var emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   var emailAddress = "somebody@somewhere.com";
   assertTrue(refind(emailRegEx,emailAddress) lt 1,"Invalid email address format");
  </cfscript>
</cffunction>
{code}
This is fine, but you could save yourself some typing and some Ctrl+C/Ctrl+V errors.  How about something that looks like this instead?

{code}
 <cffunctionname="testValidEmailAddress">
 <cfscript>
 varemailAddress="somebody@somewhere.com";
 assertIsValidEmail(emailAddress);
 </cfscript>
 </cffunction><cffunction name="testValidEmailAddress">
  <cfscript>
   var emailAddress = "somebody@somewhere.com";
   assertIsValidEmail(emailAddress);
  </cfscript>
</cffunction>
{code}

Much better\! And this has the added bonus of _not_ having to find a replace hundreds of complex regular expressions in your code; you would just do that in one place.
Here's how:


1. Write a test for your assertion:

{code}
 <cfscript>
 vargoodEmailAddress="somebody@somewhere.com";
 varbadEmailAddress="so~~/\/\/\/\/\~~m=+ebod$y@someplace.zombie";
 addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
 assertIsValidEmail(goodEmailAddress);
 try{
 //expectfailure
 assertIsValidEmail(badEmailAddress);
 }
 catch(mxunit.exception.AssertionFailedErrore){}
 </cfscript>
 </cffunction>

 </cfcomponent>
<cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >


<cffunction name="testAssertIsValidEmail">
  <cfscript>
    var goodEmailAddress = "somebody@somewhere.com";
    var badEmailAddress = "so ~~/\/\/\/\/\~~ m=+ebod$y@someplace.zombie";
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
    assertIsValidEmail(goodEmailAddress);
    try{
      //expect failure
      assertIsValidEmail(badEmailAddress);
    }
    catch(mxunit.exception.AssertionFailedError e){}
  </cfscript>
</cffunction>

</cfcomponent>
{code}

The above fails because we do not yet have ValidEmailAssertion written. *Note{*}the addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion") statement. This tells the MXUnit framework to load your assertion at runtime.

2. Write the assertion

{code}
 <cfcomponentname="ValidEmailAssertion">

 <cffunctionname="assertIsValidEmail"returntype="boolean">
 <cfargumentname="email"type="string"/>
 <cfargumentname="message"type="string"required="false"default="Emailaddressdoesnotappearvalid."/>

 <cfscript>
 arguments=normalizeArguments(arguments);
 emailRegEx="^\[A-Za-z0-9\]((\[_\.\-\]?\[a-zA-Z0-9\]+)*)@(\[A-Za-z0-9\]+)((\[\.\-\]?\[a-zA-Z0-9\]+)*)\.(\[A-Za-z\]{2,})$";
 actual=refind(emailRegEx,arguments.email);
 </cfscript>

 <cfifactuallt1>
 <cfthrowtype="mxunit.exception.AssertionFailedError"message="arguments.message"/>
 </cfif>
 <cfreturntrue/>
 </cffunction>

 </cfcomponent><cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   </cfscript>

  <cfif actual lt 1>
  <cfthrow type="mxunit.exception.AssertionFailedError" message="arguments.message" />
  </cfif>
  <cfreturn true />
</cffunction>

</cfcomponent>
{code}


You could also leverage existing assertions and write the following instead:

{code}
 <cfcomponentname="ValidEmailAssertion">

 <cffunctionname="assertIsValidEmail"returntype="boolean">
 <cfargumentname="email"type="string"/>
 <cfargumentname="message"type="string"required="false"default="Emailaddressdoesnotappearvalid."/>

 <cfscript>
 arguments=normalizeArguments(arguments);
 emailRegEx="^\[A-Za-z0-9\]((\[_\.\-\]?\[a-zA-Z0-9\]+)*)@(\[A-Za-z0-9\]+)((\[\.\-\]?\[a-zA-Z0-9\]+)*)\.(\[A-Za-z\]{2,})$";
 actual=refind(emailRegEx,arguments.email);
 assertTrue(refind(emailRegEx,arguments.email)lt1,arguments.message);
 </cfscript>

 <cfreturntrue/>
 </cffunction>

 </cfcomponent><cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   assertTrue(refind(emailRegEx,arguments.email) lt 1, arguments.message);
  </cfscript>

   <cfreturn true />
</cffunction>

</cfcomponent>
{code}

Note the arguments = normalizeArguments(arguments) statement. This allows for the flexibility if you want to be able to pass the message parameter first or last.

Ok. Now when we run our test, we're in the green. Our new assertion works as expected. Wahoo\!

3. Decide how you want to load the new code. The options are for each test or for{_}all_ tests. You've already seen how to load custom assertions in your code. This can also be done in setUp().

{code}
 <cfcomponentname="ValidEmailAssertionTest"extends="mxunit.framework.TestCase">
 ...
 <cffunctionname="setUp">
 <cfscript>
 addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
 </cfscript>
 </cffunction>

 </cfcomponent><cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >
 ...
<cffunction name="setUp">
  <cfscript>
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
  </cfscript>
</cffunction>
{code}

What if you want your new assertion to _always_ be available? Edit the mxunit-config.xml file located in \{mxunit install\}/mxunit/framework/ Add the following line :

{code}
<?xmlversion="1.0"encoding="UTF-8"?>
<mxunit-config>
...
<config-elementtype="assertionExtension"path="mxunit.framework.ext.ValidEmailAssertion"autoload="true"override="false"/>
...
</mxunit-config> 
{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750211</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5670067</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunit+cfscript+fail&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-08-23 21:56:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-08-23 21:56:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783060</id>
    <property name="body"><![CDATA[h2. MXUnitAntTask - Version: 1.0.5


h3. Description

Runs MXUnit tests and saves the output to the directory specified by the outputdir parameter.

This version uses HTTP to connect to the MXUnit test runner running on a CFML serv (Adobe ColdFusion, Railo, Blue Dragon).

This supports the following HTTP authentication mechanisms - BASIC, DIGEST, and NTLM.

The default testrunner (/mxunit/runner/HttpAntRunner.cfc) accepts either individual test cases or directories of tests to run. This runner returns only JUnitReport formated XML. These XML files{_}may_ optionally be used by the JUnitReport Ant task to generate nice HTML reports. Example usage:

{code}<junitreport todir="${junit.out.dir.html}">
  <fileset dir="${output.dir}">
    <include name="*.xml"/>
   </fileset>
   <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>
  </junitreport>
{code}
Note that the mxunit-ant.jar must be in Ant's class path. This can be done by specifying the taskdef tag like this:

{code}<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}" />
{code}
and then coding the rest of the MXunit Ant task ...

{code}<mxunittask server="localhost"
            port="8500"
            defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
            outputdir="${output.dir}"
            verbose="true" haltonerror="true"> ...
{code}
In theory, one should be able to run multiple tests across multiple domains, as long as those tests are accessible via Http.

h3. Parameters

| *Attribute* | *Description* | *Required* | *Default* |
| server | The Http server name where MXUnit is located. | Yes | |
| port | The port the Http server is listening on. | No | 80 |
| outputdir | A directory in which to save JUnit XML test results. | No | |
| haltonerror | Instructs the task to stop executing when an _ERROR_ is detected. \\
This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| haltonfailure | Instructs the task to stop executing when a _FAILURE_ is detected. \\
This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| errorproperty | The name of a property to set in the event of an error. | No | |
| failureproperty | The name of a property to set in the event of a failure (errors are considered failures as well). | No | |
| defaultrunner | The testrunner responsible for accepting requests. \\  {tip:title="v1.0.5"}You can append arbitrary URL parameters (for custom runners) to the {{defaultrunner}} {tip} Example:{code}defaultrunner="/foo/bar/my_runner.cfc?param1=123&param2=abc"{code} \\ | No | /mxunit/runner/HttpAntRunner.cfc |
| verbose | Flag to indicate to output additional information. | No | false |
| testResultsSummary | Name of the properties file the task creates. This file is a Java      Properties file that records a summary of all the tests the task      has executed and is saved to the location specified in      the $\{outputdir\} attribute.      This can be useful in automated deployments, for example,      if you wish inspect the results of all the tests run prior to deployment.      This offers a deeper level of granularity than the haltonerror or haltonfailure offers. \\
The task generates the following properties that can be read by Ant using      the following syntax: \\
<br><property file="$\{outputdir}/testresults.properties" /><br>testresults.properties looks something like:#Sat Mar 01 22:20:25 EST 2008 \\
success.ratio=.99 \\
total.failures=2 \\
failure.ratio=.01 \\
total.errors=0 \\
error.ratio=.00 \\
total.time=8016 \\
total.runs=151 \\
error.ratio is the number of errors to the total number of tests runs. \\
failure.ratio is the number of failures to the total number of tests runs. \\
success.ratio is the total number of tests run to the total number of errors and failures combined. \\ | No | testresults.properties |

h3. Parameters specified as nested elements


h3. directory

<directory ... >s are used to specify groups of tests to run.

| *Attribute* | *Description* | *Required* | *Default* |
| path | Directory of tests to run. | Yes | |
| componentPath | A prefix to the components being tested. This is a performance         attribute. If specified, directory tests will run faster. Otherwise, the framework         will discover the componentPath using built in Adobe ColdFusion functions. \\
Example: componentPath="mxunit.tests.framework". \\
MXUnit will correctly prepend this to all the         tests in the specified directory. | No \\ |

 *Optionallity is deprecated. Future release will require this attribute to be       specified.* \| \|
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
| recurse | Flag to indicate to run all tests in sub directories. | No | false |
| excludes | Comma-delimitted list of files not to include in the test suite. | No | none |
----
h3. testcase

A <testcase> allows you to specify one or more individual test cases to run.
| *Attribute* | *Description* | *Required* | *Default* |
| name | The fully qualified ColdFusion component name (com.foo.bar.MyCFC) | Yes | |
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc" |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
----
h3. Examples

This example illustrates a minimal amount of code required to run one directory of tests.  Note that this example does not save any results. This may be useful for automated deployments.

{code}<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="runtests">

  <target name="runtests" description="Run a dir of tests recursively">

   <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />
   <mxunittask server="localhost" >
     <directory path="C:\CFusionMX7\wwwroot\mxunit\tests\framework" recurse="true" componentPath="mxunit.tests.framework" />
   </mxunittask>

  </target>
</project>
{code}This example runs both directories of and individual tests, saves the output to $\{output.dir}, generates a JUnit report, and  opens a web browser with the JUnit report.

{code}<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">

    <property name="mxunit.jar" value="../ant/lib/mxunit-ant.jar" />
    <property name="junit.out.dir.xml" value="testresults" />
    <property name="junit.out.dir.html" value="testresults/html" />
    <property name="output.dir" value="tmp" />
    <property name="style.dir" value="../ant/xsl/" />



   <target name="main" depends="browse" />


   <target name="runtests" description="Make output directories and run the MXUnit task">
     <mkdir dir="${junit.out.dir.html}" />
     <mkdir dir="${output.dir}" />
     <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />

       <mxunittask server="localhost" port="8500"
                   defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
                   connectionMethod="http"
                   outputdir="${output.dir}"
                   authmethod="basic"
                   username="foo"
                   password="bar"
                   verbose="true">

          <testcase name="mxunit.tests.framework.AssertTest" packageName="mxunit.asserttests" />
          <testcase name="mxunit.tests.framework.AssertDecoratorTest" packageName="mxunit.assertdecoratortests" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                     packageName="mxunit.framework"
                     recurse="false"
                     componentPath="mxunit.tests.framework"
                     excludes="none" />

           <!-- This has a bad componentPath and should fail -->
           <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                      remoteMethod="run"
                      path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                      packageName="mxunit.bad.framework"
                      recurse="false"
                      componentPath="mxunit.foo.bar"
                      excludes="none" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\samples"
                     packageName="mxunit.tests.samples"
                     recurse="false"
                     excludes="" />


      </mxunittask>
  </target>




  <target name="junitreport" depends="runtests" description="Create a report for the rest result">
     <mkdir dir="${junit.out.dir.html}"/>
     <junitreport todir="${junit.out.dir.html}">
        <fileset dir="${output.dir}">
           <include name="*.xml"/>
         </fileset>
         <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>
      </junitreport>
      <delete dir="${output.dir}" />
    </target>


  <!-- To fire up a browser with the test results. May not work on your machine -->

  <target name="browse" depends="junitreport">
    <exec executable="C:\Program Files\Internet Explorer\iexplore.exe">
      <arg value="C:\CFusionMX7\wwwroot\mxunit\tests\testresults\html\index.html"/>
    </exec>
  </target>



</project>

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750294</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783061</id>
    <property name="body"><![CDATA[h2. MXUnitAntTask - Version: 1.0.5


h3. Description

Runs MXUnit tests and saves the output to the directory specified by the outputdir parameter.

This version uses HTTP to connect to the MXUnit test runner running on a CFML serv (Adobe ColdFusion, Railo, Blue Dragon).

This supports the following HTTP authentication mechanisms - BASIC, DIGEST, and NTLM.

The default testrunner (/mxunit/runner/HttpAntRunner.cfc) accepts either individual test cases or directories of tests to run. This runner returns only JUnitReport formated XML. These XML files{_}may_ optionally be used by the JUnitReport Ant task to generate nice HTML reports. Example usage:

{code}<junitreport todir="${junit.out.dir.html}">
  <fileset dir="${output.dir}">
    <include name="*.xml"/>
   </fileset>
   <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>
  </junitreport>
{code}
Note that the mxunit-ant.jar must be in Ant's class path. This can be done by specifying the taskdef tag like this:

{code}<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}" />
{code}
and then coding the rest of the MXunit Ant task ...

{code}<mxunittask server="localhost"
            port="8500"
            defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
            outputdir="${output.dir}"
            verbose="true" haltonerror="true"> ...
{code}
In theory, one should be able to run multiple tests across multiple domains, as long as those tests are accessible via Http.

h3. Parameters

| *Attribute* | *Description* | *Required* | *Default* |
| protocol | The HTTP protocol to use. Valid values are 'http' or 'https' | no | http |
| server | The Http server name where MXUnit is located. | Yes | |
| port | The port the Http server is listening on. | No | 80 |
| outputdir | A directory in which to save JUnit XML test results. | No | |
| haltonerror | Instructs the task to stop executing when an _ERROR_ is detected. \\
This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| haltonfailure | Instructs the task to stop executing when a _FAILURE_ is detected. \\
This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| errorproperty | The name of a property to set in the event of an error. | No | |
| failureproperty | The name of a property to set in the event of a failure (errors are considered failures as well). | No | |
| defaultrunner | The testrunner responsible for accepting requests. \\  {tip:title="v1.0.5"}You can append arbitrary URL parameters (for custom runners) to the {{defaultrunner}} {tip} Example:{code}defaultrunner="/foo/bar/my_runner.cfc?param1=123&param2=abc"{code} \\ | No | /mxunit/runner/HttpAntRunner.cfc |
| verbose | Flag to indicate to output additional information. | No | false |
| testResultsSummary | Name of the properties file the task creates. This file is a Java      Properties file that records a summary of all the tests the task      has executed and is saved to the location specified in      the $\{outputdir\} attribute.      This can be useful in automated deployments, for example,      if you wish inspect the results of all the tests run prior to deployment.      This offers a deeper level of granularity than the haltonerror or haltonfailure offers. \\
The task generates the following properties that can be read by Ant using      the following syntax: \\
<br><property file="$\{outputdir}/testresults.properties" /><br>testresults.properties looks something like:#Sat Mar 01 22:20:25 EST 2008 \\
success.ratio=.99 \\
total.failures=2 \\
failure.ratio=.01 \\
total.errors=0 \\
error.ratio=.00 \\
total.time=8016 \\
total.runs=151 \\
error.ratio is the number of errors to the total number of tests runs. \\
failure.ratio is the number of failures to the total number of tests runs. \\
success.ratio is the total number of tests run to the total number of errors and failures combined. \\ | No | testresults.properties |

h3. Parameters specified as nested elements


h3. directory

<directory ... >s are used to specify groups of tests to run.

| *Attribute* | *Description* | *Required* | *Default* |
| path | Directory of tests to run. | Yes | |
| componentPath | A prefix to the components being tested. This is a performance         attribute. If specified, directory tests will run faster. Otherwise, the framework         will discover the componentPath using built in Adobe ColdFusion functions. \\
Example: componentPath="mxunit.tests.framework". \\
MXUnit will correctly prepend this to all the         tests in the specified directory. | No \\ |

 *Optionallity is deprecated. Future release will require this attribute to be       specified.* \| \|
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
| recurse | Flag to indicate to run all tests in sub directories. | No | false |
| excludes | Comma-delimitted list of files not to include in the test suite. | No | none |
----
h3. testcase

A <testcase> allows you to specify one or more individual test cases to run.
| *Attribute* | *Description* | *Required* | *Default* |
| name | The fully qualified ColdFusion component name (com.foo.bar.MyCFC) | Yes | |
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc" |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
----
h3. Examples

This example illustrates a minimal amount of code required to run one directory of tests.  Note that this example does not save any results. This may be useful for automated deployments.

{code}<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="runtests">

  <target name="runtests" description="Run a dir of tests recursively">

   <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />
   <mxunittask server="localhost" >
     <directory path="C:\CFusionMX7\wwwroot\mxunit\tests\framework" recurse="true" componentPath="mxunit.tests.framework" />
   </mxunittask>

  </target>
</project>
{code}This example runs both directories of and individual tests, saves the output to $\{output.dir}, generates a JUnit report, and  opens a web browser with the JUnit report.

{code}<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">

    <property name="mxunit.jar" value="../ant/lib/mxunit-ant.jar" />
    <property name="junit.out.dir.xml" value="testresults" />
    <property name="junit.out.dir.html" value="testresults/html" />
    <property name="output.dir" value="tmp" />
    <property name="style.dir" value="../ant/xsl/" />



   <target name="main" depends="browse" />


   <target name="runtests" description="Make output directories and run the MXUnit task">
     <mkdir dir="${junit.out.dir.html}" />
     <mkdir dir="${output.dir}" />
     <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />

       <mxunittask server="localhost" port="8500"
                   defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
                   protocol="http"
                   outputdir="${output.dir}"
                   authmethod="basic"
                   username="foo"
                   password="bar"
                   verbose="true">

          <testcase name="mxunit.tests.framework.AssertTest" packageName="mxunit.asserttests" />
          <testcase name="mxunit.tests.framework.AssertDecoratorTest" packageName="mxunit.assertdecoratortests" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                     packageName="mxunit.framework"
                     recurse="false"
                     componentPath="mxunit.tests.framework"
                     excludes="none" />

           <!-- This has a bad componentPath and should fail -->
           <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                      remoteMethod="run"
                      path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                      packageName="mxunit.bad.framework"
                      recurse="false"
                      componentPath="mxunit.foo.bar"
                      excludes="none" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\samples"
                     packageName="mxunit.tests.samples"
                     recurse="false"
                     excludes="" />


      </mxunittask>
  </target>




  <target name="junitreport" depends="runtests" description="Create a report for the rest result">
     <mkdir dir="${junit.out.dir.html}"/>
     <junitreport todir="${junit.out.dir.html}">
        <fileset dir="${output.dir}">
           <include name="*.xml"/>
         </fileset>
         <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>
      </junitreport>
      <delete dir="${output.dir}" />
    </target>


  <!-- To fire up a browser with the test results. May not work on your machine -->

  <target name="browse" depends="junitreport">
    <exec executable="C:\Program Files\Internet Explorer\iexplore.exe">
      <arg value="C:\CFusionMX7\wwwroot\mxunit\tests\testresults\html\index.html"/>
    </exec>
  </target>



</project>

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750295</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5670185</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunit+cfbuilder+memory+errors&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341213</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-08-30 20:48:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-08-30 20:48:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783058</id>
    <property name="body"><![CDATA[!mxunit-install3.swf|height=400,width=400,id=media!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750292</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783057</id>
    <property name="body"><![CDATA[!mxunit-install3.swf!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750291</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783055</id>
    <property name="body"
      ><![CDATA[!http://mxunit.s3.amazonaws.com/video/mxunit-install3.swf!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750289</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5670180</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&safe=off&client=firefox-a&hs=sIB&rls=org.mozilla%3Aen-US%3Aofficial&q=mxunit+beforetests&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-08-30 20:07:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-08-30 20:07:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783066</id>
    <property name="body"><![CDATA[*Eclipse Update Site URL for Eclipse 3.4 and later:* [http://mxunit.org/update]

*Eclipse Update site for Eclipse 3.3 and earlier:* [http://mxunit.org/update33|http://mxunit.org/update33]


h2. Detailed Instructions

Doesn't get much easier\! Install, Configure, Run ...

# Make sure the [MXUnit Framework|Install MXUnit] is installed.
# Get [Eclipse|http://www.eclipse.org/] if you haven't already
# In Eclipse, go to {{Help > Software Updates > Find and Install}}
!plugin-install-1.png!
# Select the {{Search for new features}} radio button. Click Next
!plugin-install-2.png!
# Click the {{New Remote Site}} button.
!plugin-install-3.png!
# Add the url [http://mxunit.org/update] to the URL field. Give it any Name; e.g, MXUnit Plugin. Click OK.
!plugin-install-4.png!
# Select All features to be installed. Click Next.
!plugin-install-5.png!
# Accept License Agreement. Click Next.
!plugin-install-6.png!
# Click Finish on the Install Dialogue.
!plugin-install-7.png!
# The plugin will download ...
!plugin-install-8.png!
# Click Install All.
!plugin-install-9.png!
# Allow the plugin to install ...
!plugin-install-10.png!
# Click Yes when prompted to restart Eclipse ...
!plugin-install-11.png!

*Next -* *[Configure and Test the Plugin|Configure and Test the Plugin]*]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750300</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783065</id>
    <property name="body"><![CDATA[{toc}
h1. Introduction


A while back, I (Marc) wrote about using coldfusion's "mix-in" functionality to achieve simple mocking. The usefulness here is where you have a function that "does something", but you want to change the thing that it does for the purpose of a test. This is particularly handy when you're testing functionA(), and functionA() calls functionB() and functionC(). Maybe functionA() depends on the results of functionB() to do certain work, and then it calls functionC() to do other work. In code, it might look like:

{code}	<cfcomponent name=MyComponent>
		<cffunction name="functionA">
			<cfargument name="someArg" required="true">
			<cfif listlen(functionB(someArg) GTE 1)>
				<cfreturn functionC(someArg)>
			</cfif>
			<cfreturn false>
		</cffunction>

		<cffunction name="functionB">
			.... maybe i'll return a number ... or a list of numbers
		</cffunction>

		<cffunction name="functionC">
			.... i think i'll go and run a bunch of database updates
			<cfreturn true>
		</cffunction>
	</cfcomponent>
{code}And here might be some tests for functionA:

{code}	<cfcomponent extends="mxunit.framework.TestCase">

		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>

		<cffunction name="functionAShouldReturnFalseForASingleListElement">
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertFalse(ret,"a single list should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnFalseForMultipleListElements">
			<cfset ret = obj.functionA(SomeOtherID)>
			<cfset assertFalse(ret,"multiple list elements should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnTrueForNoElements">
			<cfset ret = obj.functionA(AndYetAnotherID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>
	</cfcomponent>
{code}
h1. Using injectMethod()


Now, let's say functionB() queries the database or whatever, based on the passed-in someArg argument. The problem is obvious: your database is in an unknown state, because data change all day long. And you want to do a number of tests: you want to test the condition where functionB() returns a single list element, and also when it returns more than 1 list element. Which means you need at least two known inputs for someArg: one that will ensure functionB() returns a single element, and one that ensures it'll return more than one. What a pain\! Wouldn't it be great if you could say "for the purposes of this test, I want functionB() to return a single list element". and then in another test, say "And for this test, I want it to return 2 list elements"? Or, to put it another way, wouldn't it be nice to override functionB for this test, but without a lot of work?

This is why injectMethod() was born. To make it a little easier to override functions for the purpose of testing. Now, you're not overriding the function under test\! You're overriding functions that the function under test calls, in order to make it easier to test the function under test.

Here's the method signature for injectMethod():
{code}<cffunction name="injectMethod" output="false" access="public" returntype="void" hint="injects the method from giver into receiver. This is helpful for quick and dirty mocking">
	<cfargument name="Receiver" type="any" required="true" hint="the object receiving the method"/>
	<cfargument name="Giver" type="any" required="true" hint="the object giving the method"/>
	<cfargument name="FunctionName" type="string" required="true" hint="the function to be injected from the giver into the receiver"/>
	<cfargument name="FunctionNameInReceiver" type="string" required="false" default="#arguments.functionName#" hint="the function name that you will call. this is useful when you want to inject giver.someFunctionXXX but have it be called as someFunction in your receiver object">

</cffunction>{code}{*}Almost always:*
* "Receiver" is your component under test
* "Giver" is your test itself since that's where the overriding function will be declared, so you'll use "this"
* "functionName" will the name of the overriding function you've defined in your test that will be used to overwrite the function in the component under test
* "functionNameInReceiver" is the function you're overriding

Let's have a look at our new set of tests:
{code}	<cfcomponent extends="mxunit.framework.TestCase">

		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>

		<!---  DEFINE PRIVATE METHODS TO OVERRIDE FUNCTIONB AND FUNCTIONC  --->

		<cffunction name="returnsSingleListElement" access="private">
			<cfreturn "1">
		</cffunction>

		<cffunction name="returnsMultipleListElements" access="private">
			<cfreturn "1,2,3">
		</cffunction>

		<cffunction name="returnsNoListElement" access="private">
			<cfreturn "">
		</cffunction>

		<!---  and our tests, again  --->
		<cffunction name="functionAShouldReturnFalseForASingleListElement">
			<!--- pass in our returnSingleListElement function into the object and name it functionB (i.e., override functionB) inside the object under test --->
			<cfset injectMethod(obj, this, "returnSingleListElement", "functionB")>
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertFalse(ret,"a single list should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnFalseForMultipleListElements">
			<!--- pass in our returnMultipleListElements function into the object and name it functionB --->
			<cfset injectMethod(obj, this, "returnMultipleListElements", "functionB")>
			<cfset ret = obj.functionA(SomeOtherID)>
			<cfset assertFalse(ret,"multiple list elements should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnTrueForNoElements">
			<!--- pass in our returnNoListElement function into the object and name it functionB --->
			<cfset injectMethod(obj, this, "returnNoListElement", "functionB")>
			<cfset ret = obj.functionA(AndYetAnotherID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>
	</cfcomponent>
{code}As this illustrates, we've now created a very easy way to test functionA with the 3 cases we need to happen with functionB: a single list, multiple list, and no-element returns. Now, to take this one step further, you could override functionC -- which, if you remember, updates the database -- with a simple function that simply returns "true". Remember, we're not testing functionC so ideally we wouldn't touch the database at all in this case

{code}	<cfcomponent extends="mxunit.framework.TestCase">

		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>

		<!---  DEFINE PRIVATE METHODS TO OVERRIDE FUNCTIONB AND FUNCTIONC  --->

		....

		<cffunction name="functionC_Replacement" access="private">
			<cfreturn true>
		</cffunction>

		<!---  and our tests, again  --->
		<cffunction name="functionAShouldReturnTrueForNoElements">
			<!--- pass in our returnNoListElement function into the object and name it functionB
					in addition, overwrite functionC with our new, spoof functionC	 --->
			<cfset injectMethod(obj, this, "returnNoListElement", "functionB")>
			<cfset injectMethod(obj, this, "functionC_Replacement", "functionC")>
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>

		....

	</cfcomponent>

{code}There you go: you can pass in functions to achieve exactly the conditions you want to achieve in order to fully test your logic. And you pass in functions that "spoof" the DB-updating function that would slow down your test and potentially corrupt your data.

h1. Difference from Mocking


I can't stress enough that this solves a different than mock objects solve. Mocks solve the problem of spoofing collaborator objects. But in this case, we're not spoofing functions in a dependent component. We're spoofing functions in the same component we're trying to test.

h1. Using restoreMethod()

{warning}We *strongly* encourage you to write tests that use freshly-created instances in your setUp() method.{warning}
If you have tests that reuse the same component instance, injectMethod() can wreak havoc. Usually you wind up in this situation if you're using coldspring-managed objects inside your TestCase. To undo a method overwrite resulting from injectMethod(), you can use *restoreMethod( object, "functionName" )*. This will restore the original function back into the component.

MXUnit will NOT automatically restore methods for you. You must do so deliberately. I advise doing it in tearDown, like so:

{code}<cffunction name="tearDown">

   <cfset restoreMethod( someObject, "someFunction" )>

</cffunction>

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750299</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5670181</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunit+beforetests&hl=en&safe=off&client=firefox-a&hs=yIB&rls=org.mozilla:en-US:official&ei=9Q58TMq7Ko7QsAPO_sWCBw&start=10&sa=N]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341213</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-08-30 20:08:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-08-30 20:08:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783062</id>
    <property name="body"><![CDATA[h2. MXUnitAntTask - Version: 1.0.7


h3. Description

Runs MXUnit tests and saves the output to the directory specified by the outputdir parameter.

This version uses HTTP to connect to the MXUnit test runner running on a CFML serv (Adobe ColdFusion, Railo, Blue Dragon).

This supports the following HTTP authentication mechanisms - BASIC, DIGEST, and NTLM.

The default testrunner (/mxunit/runner/HttpAntRunner.cfc) accepts either individual test cases or directories of tests to run. This runner returns only JUnitReport formated XML. These XML files{_}may_ optionally be used by the JUnitReport Ant task to generate nice HTML reports. Example usage:

{code}<junitreport todir="${junit.out.dir.html}">
  <fileset dir="${output.dir}">
    <include name="*.xml"/>
   </fileset>
   <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>
  </junitreport>
{code}
Note that the mxunit-ant.jar must be in Ant's class path. This can be done by specifying the taskdef tag like this:

{code}<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}" />
{code}
and then coding the rest of the MXunit Ant task ...

{code}<mxunittask server="localhost"
            port="8500"
            defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
            outputdir="${output.dir}"
            verbose="true" haltonerror="true"> ...
{code}
In theory, one should be able to run multiple tests across multiple domains, as long as those tests are accessible via Http.

h3. Parameters

| *Attribute* | *Description* | *Required* | *Default* |
| protocol | The HTTP protocol to use. Valid values are 'http' or 'https' | no | http |
| server | The Http server name where MXUnit is located. | Yes | |
| port | The port the Http server is listening on. | No | 80 |
| outputdir | A directory in which to save JUnit XML test results. | No | |
| haltonerror | Instructs the task to stop executing when an _ERROR_ is detected. \\
This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| haltonfailure | Instructs the task to stop executing when a _FAILURE_ is detected. \\
This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| errorproperty | The name of a property to set in the event of an error. | No | |
| failureproperty | The name of a property to set in the event of a failure (errors are considered failures as well). | No | |
| defaultrunner | The testrunner responsible for accepting requests. \\  {tip:title="v1.0.5"}You can append arbitrary URL parameters (for custom runners) to the {{defaultrunner}} {tip} Example:{code}defaultrunner="/foo/bar/my_runner.cfc?param1=123&param2=abc"{code} \\ | No | /mxunit/runner/HttpAntRunner.cfc |
| verbose | Flag to indicate to output additional information. | No | false |
| testResultsSummary | Name of the properties file the task creates. This file is a Java      Properties file that records a summary of all the tests the task      has executed and is saved to the location specified in      the $\{outputdir\} attribute.      This can be useful in automated deployments, for example,      if you wish inspect the results of all the tests run prior to deployment.      This offers a deeper level of granularity than the haltonerror or haltonfailure offers. \\
The task generates the following properties that can be read by Ant using      the following syntax: \\
<br><property file="$\{outputdir}/testresults.properties" /><br>testresults.properties looks something like:#Sat Mar 01 22:20:25 EST 2008 \\
success.ratio=.99 \\
total.failures=2 \\
failure.ratio=.01 \\
total.errors=0 \\
error.ratio=.00 \\
total.time=8016 \\
total.runs=151 \\
error.ratio is the number of errors to the total number of tests runs. \\
failure.ratio is the number of failures to the total number of tests runs. \\
success.ratio is the total number of tests run to the total number of errors and failures combined. \\ | No | testresults.properties |

h3. Parameters specified as nested elements


h3. directory

<directory ... >s are used to specify groups of tests to run.

| *Attribute* | *Description* | *Required* | *Default* |
| path | Directory of tests to run. | Yes | |
| componentPath | A prefix to the components being tested. This is a performance         attribute. If specified, directory tests will run faster. Otherwise, the framework         will discover the componentPath using built in Adobe ColdFusion functions. \\
Example: componentPath="mxunit.tests.framework". \\
MXUnit will correctly prepend this to all the         tests in the specified directory. | No \\ |

 *Optionallity is deprecated. Future release will require this attribute to be       specified.* \| \|
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
| recurse | Flag to indicate to run all tests in sub directories. | No | false |
| excludes | Comma-delimitted list of files not to include in the test suite. | No | none |
----
h3. testcase

A <testcase> allows you to specify one or more individual test cases to run.
| *Attribute* | *Description* | *Required* | *Default* |
| name | The fully qualified ColdFusion component name (com.foo.bar.MyCFC) | Yes | |
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc" |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
----
h3. Examples

This example illustrates a minimal amount of code required to run one directory of tests.  Note that this example does not save any results. This may be useful for automated deployments.

{code}<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="runtests">

  <target name="runtests" description="Run a dir of tests recursively">

   <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />
   <mxunittask server="localhost" >
     <directory path="C:\CFusionMX7\wwwroot\mxunit\tests\framework" recurse="true" componentPath="mxunit.tests.framework" />
   </mxunittask>

  </target>
</project>
{code}This example runs both directories of and individual tests, saves the output to $\{output.dir}, generates a JUnit report, and  opens a web browser with the JUnit report.

{code}<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">

    <property name="mxunit.jar" value="../ant/lib/mxunit-ant.jar" />
    <property name="junit.out.dir.xml" value="testresults" />
    <property name="junit.out.dir.html" value="testresults/html" />
    <property name="output.dir" value="tmp" />
    <property name="style.dir" value="../ant/xsl/" />



   <target name="main" depends="browse" />


   <target name="runtests" description="Make output directories and run the MXUnit task">
     <mkdir dir="${junit.out.dir.html}" />
     <mkdir dir="${output.dir}" />
     <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />

       <mxunittask server="localhost" port="8500"
                   defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
                   protocol="http"
                   outputdir="${output.dir}"
                   authmethod="basic"
                   username="foo"
                   password="bar"
                   verbose="true">

          <testcase name="mxunit.tests.framework.AssertTest" packageName="mxunit.asserttests" />
          <testcase name="mxunit.tests.framework.AssertDecoratorTest" packageName="mxunit.assertdecoratortests" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                     packageName="mxunit.framework"
                     recurse="false"
                     componentPath="mxunit.tests.framework"
                     excludes="none" />

           <!-- This has a bad componentPath and should fail -->
           <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                      remoteMethod="run"
                      path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                      packageName="mxunit.bad.framework"
                      recurse="false"
                      componentPath="mxunit.foo.bar"
                      excludes="none" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\samples"
                     packageName="mxunit.tests.samples"
                     recurse="false"
                     excludes="" />


      </mxunittask>
  </target>




  <target name="junitreport" depends="runtests" description="Create a report for the rest result">
     <mkdir dir="${junit.out.dir.html}"/>
     <junitreport todir="${junit.out.dir.html}">
        <fileset dir="${output.dir}">
           <include name="*.xml"/>
         </fileset>
         <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>
      </junitreport>
      <delete dir="${output.dir}" />
    </target>


  <!-- To fire up a browser with the test results. May not work on your machine -->

  <target name="browse" depends="junitreport">
    <exec executable="C:\Program Files\Internet Explorer\iexplore.exe">
      <arg value="C:\CFusionMX7\wwwroot\mxunit\tests\testresults\html\index.html"/>
    </exec>
  </target>



</project>

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750296</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783053</id>
    <property name="body"><![CDATA[{html}
<center>

	<!-- the comment and script is used to workaround the KB912945 patch -->
	<!--[if gte IE 6]> <comment id="to_be_rewritten"> <![endif]-->
	<OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" WIDTH="718" HEIGHT="541" id="movie">
	<PARAM NAME=movie VALUE="mxunit-install3.swf"> 
	<PARAM NAME=quality VALUE=high>
	<PARAM NAME=bgcolor VALUE=#FFFFFF>
	<EMBED src="http://mxunit.s3.amazonaws.com/video/mxunit-install3.swf" quality=high bgcolor=#FFFFFF WIDTH="718" HEIGHT="541" NAME="movie" ALIGN="" TYPE="application/x-shockwave-flash" PLUGINSPAGE="http://www.macromedia.com/go/getflashplayer"></EMBED>
	</OBJECT>
	</comment><script language="Javascript" src="ieupdate.js"></script>

</center> 
{html}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750287</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783034</id>
    <property name="body"><![CDATA[h2. MXUnitAntTask - Version: 1.0.5


h3. Description

Runs MXUnit tests and saves the output to the directory specified by the outputdir parameter.

This version uses HTTP to connect to the MXUnit test runner running on a CFML serv (Adobe ColdFusion, Railo, Blue Dragon). 

This supports the following HTTP authentication mechanisms - BASIC, DIGEST, and NTLM.

The default testrunner (/mxunit/runner/HttpAntRunner.cfc) accepts either individual test cases or directories of tests to run. This runner returns only JUnitReport formated XML. These XML files{_}may_ optionally be used by the JUnitReport Ant task to generate nice HTML reports. Example usage:

{code}
<junitreport todir="${junit.out.dir.html}">
  <fileset dir="${output.dir}">
    <include name="*.xml"/>
   </fileset>
   <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>
  </junitreport>
{code}

Note that the mxunit-ant.jar must be in Ant's class path. This can be done by specifying the taskdef tag like this:

{code}
<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}" />
{code}

and then coding the rest of the MXunit Ant task ...

{code}
<mxunittask server="localhost"
            port="8500"
            defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
            outputdir="${output.dir}"
            verbose="true" haltonerror="true"> ...
{code}

In theory, one should be able to run multiple tests across multiple domains, as long as those tests are accessible via Http.

h3. Parameters

| *Attribute* | *Description* | *Required* | *Default* |
| server | The Http server name where MXUnit is located. | Yes | |
| port | The port the Http server is listening on. | No | 80 |
| outputdir | A directory in which to save JUnit XML test results. | No | |
| haltonerror | Instructs the task to stop executing when an _ERROR_ is detected. \\
This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| haltonfailure | Instructs the task to stop executing when a _FAILURE_ is detected. \\
This occurs _after_ all the tests in the DIRECTORY or TESTCASE task have been run. | No | false |
| errorproperty | The name of a property to set in the event of an error. | No | |
| failureproperty | The name of a property to set in the event of a failure (errors are considered failures as well). | No | |
| defaultrunner | The testrunner responsible for accepting requests. \\ {tip:title="v1.0.5"}You can append arbitrary URL parameters (for custom runners) to the {{defaultrunner}} {tip} Ecample:{code}defaultrunner="/foo/bar/my_runner.cfc?param1=123&param2-abc"{code} \\ | No | /mxunit/runner/HttpAntRunner.cfc |
| verbose | Flag to indicate to output additional information. | No | false |
| testResultsSummary | Name of the properties file the task creates. This file is a Java      Properties file that records a summary of all the tests the task      has executed and is saved to the location specified in      the $\{outputdir\} attribute.      This can be useful in automated deployments, for example,      if you wish inspect the results of all the tests run prior to deployment.      This offers a deeper level of granularity than the haltonerror or haltonfailure offers. \\
The task generates the following properties that can be read by Ant using      the following syntax: \\
<br>&lt;property file="$\{outputdir}/testresults.properties" /&gt;<br>testresults.properties looks something like:#Sat Mar 01 22:20:25 EST 2008 \\
success.ratio=.99 \\
total.failures=2 \\
failure.ratio=.01 \\
total.errors=0 \\
error.ratio=.00 \\
total.time=8016 \\
total.runs=151 \\
error.ratio is the number of errors to the total number of tests runs. \\
failure.ratio is the number of failures to the total number of tests runs. \\
success.ratio is the total number of tests run to the total number of errors and failures combined. \\ | No | testresults.properties |

h3. Parameters specified as nested elements


h3. directory

<directory ... >s are used to specify groups of tests to run.

| *Attribute* | *Description* | *Required* | *Default* |
| path | Directory of tests to run. | Yes | |
| componentPath | A prefix to the components being tested. This is a performance         attribute. If specified, directory tests will run faster. Otherwise, the framework         will discover the componentPath using built in Adobe ColdFusion functions. \\
Example: componentPath="mxunit.tests.framework". \\
MXUnit will correctly prepend this to all the         tests in the specified directory. | No \\ |

 *Optionallity is deprecated. Future release will require this attribute to be       specified.* \| \|
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
| recurse | Flag to indicate to run all tests in sub directories. | No | false |
| excludes | Comma-delimitted list of files not to include in the test suite. | No | none |
----
h3. testcase

A <testcase> allows you to specify one or more individual test cases to run.
| *Attribute* | *Description* | *Required* | *Default* |
| name | The fully qualified ColdFusion component name (com.foo.bar.MyCFC) | Yes | |
| runner | The ColdFusion component runner responsible for running the tests, | No | /mxunit/runner/HttpAntRunner.cfc" |
| remoteMethod | The remote method in the ColdFusion component that will be called. | No | run |
| packageName | The name used by the JUnitReport task to print the main and child packages in the       test result report. | No | mxunit.testresult |
----
h3. Examples

This example illustrates a minimal amount of code required to run one directory of tests.  Note that this example does not save any results. This may be useful for automated deployments.

{code}
<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="runtests">

  <target name="runtests" description="Run a dir of tests recursively">

   <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />
   <mxunittask server="localhost" >
     <directory path="C:\CFusionMX7\wwwroot\mxunit\tests\framework" recurse="true" componentPath="mxunit.tests.framework" />
   </mxunittask>

  </target>
</project>
{code}
This example runs both directories of and individual tests, saves the output to $\{output.dir}, generates a JUnit report, and  opens a web browser with the JUnit report.

{code}
<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="MXUnitTask" basedir="." default="main">

    <property name="mxunit.jar" value="../ant/lib/mxunit-ant.jar" />
    <property name="junit.out.dir.xml" value="testresults" />
    <property name="junit.out.dir.html" value="testresults/html" />
    <property name="output.dir" value="tmp" />
    <property name="style.dir" value="../ant/xsl/" />



   <target name="main" depends="browse" />


   <target name="runtests" description="Make output directories and run the MXUnit task">
     <mkdir dir="${junit.out.dir.html}" />
     <mkdir dir="${output.dir}" />
     <taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${mxunit.jar}"   />

       <mxunittask server="localhost" port="8500"
                   defaultrunner="/mxunit/runner/HttpAntRunner.cfc"
                   connectionMethod="http"
                   outputdir="${output.dir}"
                   authmethod="basic"
                   username="foo"
                   password="bar"
                   verbose="true">

          <testcase name="mxunit.tests.framework.AssertTest" packageName="mxunit.asserttests" />
          <testcase name="mxunit.tests.framework.AssertDecoratorTest" packageName="mxunit.assertdecoratortests" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                     packageName="mxunit.framework"
                     recurse="false"
                     componentPath="mxunit.tests.framework"
                     excludes="none" />

           <!-- This has a bad componentPath and should fail -->
           <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                      remoteMethod="run"
                      path="C:\CFusionMX7\wwwroot\mxunit\tests\framework"
                      packageName="mxunit.bad.framework"
                      recurse="false"
                      componentPath="mxunit.foo.bar"
                      excludes="none" />

          <directory runner="/mxunit/runner/HttpAntRunner.cfc"
                     remoteMethod="run"
                     path="C:\CFusionMX7\wwwroot\mxunit\samples"
                     packageName="mxunit.tests.samples"
                     recurse="false"
                     excludes="" />


      </mxunittask>
  </target>




  <target name="junitreport" depends="runtests" description="Create a report for the rest result">
     <mkdir dir="${junit.out.dir.html}"/>
     <junitreport todir="${junit.out.dir.html}">
        <fileset dir="${output.dir}">
           <include name="*.xml"/>
         </fileset>
         <report format="frames" todir="${junit.out.dir.html}" styledir="${style.dir}"/>
      </junitreport>
      <delete dir="${output.dir}" />
    </target>


  <!-- To fire up a browser with the test results. May not work on your machine -->

  <target name="browse" depends="junitreport">
    <exec executable="C:\Program Files\Internet Explorer\iexplore.exe">
      <arg value="C:\CFusionMX7\wwwroot\mxunit\tests\testresults\html\index.html"/>
    </exec>
  </target>



</project>

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750268</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783019</id>
    <property name="body"><![CDATA[
When implementing new functionality or fixing a bug in an existing component, you often want to focus exclusively on that task. You may want to code what you need to code, see what you need to see, without the noise of your other tests in the same test case. Typically, this is tough when unit testing CF if the framework doesn't support method-level testing.

MXUnit makes testing at the method level a core concept. The eclipse plugin for MXUnit and the browser runners all make it easy to test single methods.

h4. Eclipse Plugin

Using the eclipse plugin is documented elsewhere very thoroughly. In addition, there is a help icon in the MXUnit view that will take you to the appropriate documentation. So I don't want to repeat all that.

In a nutshell, in the plugin, browse to any test (hit CTRL-F to search for tests). The test and its test methods will load. Select any combination of methods and hit Enter. Voila... method-level tests.

!http://mxunit.s3.amazonaws.com/images/mx_screenshots/EclipseRunnerSingleMethod.png!

h4. Browser Runner

Run any test in the browser runner. All tests will run and you'll get a list of test methods.

!https://mxunit.s3.amazonaws.com/images/mx_screenshots/BrowserRunnerWithTestLinks.png!

When the results load, click the link for any test method. This is what you'll see:

!https://mxunit.s3.amazonaws.com/images/mx_screenshots/BrowserRunnerWithTestLinks_SingleRun.png!
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750251</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783015</id>
    <property name="body"><![CDATA[{toc:minLevel=4}I have tried to anticipate the most common problems and address them in the Help that comes with the MXUnit Eclipse plugin. You should always consult the Help first\! (The help is the Question Mark icon in the plugin view)


h4. Q: What version of Eclipse will the plugin work in?

A: As of right now, Eclipse 3.4 and later. If you need a version that works on Eclipse 3.3, use [http://mxunit.org/update33] as the update site


h4. Q: Why won't the plugin see "MyFile.cfc" as a test?

A: Because the file doesn't start or end with the word "Test".

h4. Q: The plugin seems to be ignoring my custom RemoteFacade.cfc URL

A: Try restarting Eclipse. Also, it only honors that URL when it's set at the project level, not in a subdirectory of a project

h4. Q: The plugin can't figure out my "cfc path" (dot notation)

A: Read the plugin help. If you still can't figure it out from reading the help, please email the [Google Group|http://groups.google.com/group/mxunit]

h4. Q: The plugin won't do anything with a TestSuite I created

A: The plugin doesn't do test suites. Read the Help for an explanation

h4. Q: Why doesn't the plugin support NTLMv2?

A: Because neither Apache Axis nor commons HTTPClient doesn't support it. There does not, as of this writing, appear to be a free java client for NTLMv2

h4. Q: When I run the tests in the plugin, my Application scope variables aren't present

A: You'll need a custom RemoteFacade.cfc (very easy\!). See the Plugin Help.

h4. Q: When I run the tests in the plugin, I get "Variable FORM is undefined". Why?


A: The plugin runs the tests via SOAP. The form scope is not available to ColdFusion components during webservice calls. My advice: Don't use the form scope in your CFCs

h4. Q: When I add certain variables to a "debug()" call, the plugin hangs. Why?

A: debug() duplicates and then cfdumps whatever variables are passed into it. Depending on the content of the variable you're trying to debug, this could kill ColdFusion.



h4. Q: What are the differences between how the plugin runs tests and how the tests run when I run them in the browser?

A: The plugin runs test test one test at a time, one request at a time. This means there is zero chance for "bleed" from one test method run to another. When you run them in the browser, they're run as a single request.

In addition, since the plugin runs the tests via SOAP, the FORM scope is not available.

h4. Q: What do you call a snail in a ship?

A: A Snailor\!

h4. Q: Does the Plugin work in ColdFusion Builder?

A: Of course

h4. Q: Do I need to do something special to test ColdFusion ORM apps?

A: Yes, you need to set a custom RemoteFacade URL on the project. On the MXUnit view, click the Green Help Icon (or hit F1), and click "Talking to ColdFusion: The RemoteFacade.cfc URL". From there, click the link at the bottom of the page, which takes you to the "Project-Specific RemoteFacade URL" page. This has all the instructions you should need.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750247</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669991</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=5341651&navigatingVersions=true]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734420</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-08-18 18:29:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-08-18 18:29:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669994</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=5341649]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341651</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-08-18 18:29:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-08-18 18:29:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669993</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?sourceid=chrome&ie=UTF-8&q=site%3Ahttp%3A%2F%2Fwiki.mxunit.org+teardown]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341649</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-08-18 18:29:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-08-18 18:29:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669815</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mylyn+screenshots+rad&hl=en&ei=DFJgTNeRMIL_8AbK25G0DQ&start=30&sa=N]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-08-09 19:21:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-08-09 19:21:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669814</id>
    <property name="viewCount">3</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?sourceid=chrome&ie=UTF-8&q=mxunit+installation]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341216</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-08-09 18:39:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-08-09 18:48:13.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669830</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunit+snippets&hl=en&ei=mNBgTPqhAcL58AbXys3MCg&start=10&sa=N]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734402</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-08-10 04:08:16.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-08-10 04:08:16.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669646</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=5734434&navigatingVersions=true]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734438</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-29 14:31:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-29 14:31:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669647</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=5734418]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734434</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-29 14:31:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-29 14:31:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669648</id>
    <property name="viewCount">2</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpreviousversions.action?pageId=786457]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734438</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-29 14:31:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-29 14:31:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669572</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&q=mxunit+script+dataprovider&aq=f&aqi=m1&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-27 15:28:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-27 15:28:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669595</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunit+remote+facade+orm&ie=utf-8&oe=utf-8&aq=t&client=firefox-a&rlz=1R1GGLL_en___US376]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-27 22:35:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-27 22:35:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669533</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?sourceid=chrome&ie=UTF-8&q=coldfusion+builder+helios]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-25 17:19:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-25 17:19:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669470</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&q=mxunit+beforetests+not+firing&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-21 21:59:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-21 21:59:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669400</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&q=mxunit+accessing+CFC&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-19 22:05:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-19 22:05:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669364</id>
    <property name="viewCount">1</property>
    <property name="url"><![CDATA[http://www.google.ca/]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-16 13:35:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-16 13:35:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669368</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&q=coldfusion+builder+%22Format%22+did+not+complete+normally.+Please+see+the+log+for+more+information.java.lang.NullPointerException&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-16 17:56:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-16 17:56:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669307</id>
    <property name="viewCount">2</property>
    <property name="url"
      ><![CDATA[http://www.google.com.hk/search?q=win7+javaw+spike&hl=zh-CN&newwindow=1&safe=strict&ei=now8TPD2A82HkAWDipigAQ&start=10&sa=N]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341267</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-13 16:01:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-14 12:02:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669325</id>
    <property name="viewCount">3</property>
    <property name="url"
      ><![CDATA[http://www.google.de/search?hl=de&q=confluence+%22HTML+inclusion+denied+because+the+page+at%22+is+not+an+HTML+page.&meta=&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341274</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-14 06:07:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-14 06:10:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669326</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.fuseboxframework.org/pages/viewpage.action?pageId=5341274]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341300</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-14 06:10:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-14 06:10:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669287</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&as_q=selenium+attach_file+moving+file+AppData%5CLocal&as_epq=&as_oq=&as_eq=&num=10&lr=&as_filetype=&ft=i&as_sitesearch=&as_qdr=all&as_rights=&as_occt=any&cr=&as_nlo=&as_nhi=&safe=images]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-13 00:09:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-13 00:09:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669172</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com.my/search?hl=en&client=firefox-a&hs=VAM&rls=org.mozilla%3Aen-GB%3Aofficial&q=tutorial+for+cfcomponent+displayname&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-08 01:46:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-08 01:46:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669195</id>
    <property name="viewCount">2</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?source=ig&hl=en&rlz=&q=+Investigate+and+define+an+approach+to+incorporate+MXUnit+for+unit+testing+all+Cold+Fusion+applications&btnG=Google+Search&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-08 17:34:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-08 17:37:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669114</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.fr/search?hl=fr&client=firefox-a&rls=org.mozilla:fr:official&&sa=X&ei=vjwzTNLqIJSWsQb2zbTOBA&ved=0CCIQBSgA&q=CFCOMPONENT+tutorial&spell=1]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-06 14:26:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-06 14:26:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5669006</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.co.uk/search?q=mxunit+webdriver+video&ie=UTF-8&oe=UTF-8&hl=en&client=safari]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-07-01 21:40:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-07-01 21:40:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">4360506</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpreviousversions.action?pageId=2195464]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292719</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2009-12-07 21:36:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2009-12-07 21:36:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">4361055</id>
    <property name="viewCount">5</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpreviousversions.action?pageId=4292775]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292778</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2009-12-28 01:56:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-07-22 17:42:13.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784160</id>
    <property name="body"
      ><![CDATA[due to the very first reality --- the truth that  they're produced from high quality supplies --- how the custom purses are  apt to have higher vi [swiss replica watches|http://www.replicawatches0.co.uk/] gst the very best designs and therefore are noticed because the various  classes of imitation Rolex watches. These replicated watches have all  of the indi [breitling uk|http://www.breitling1replica.co.uk/] The examples of Inexpensive Replica watch are replica Cartier Balloon  Blue, Replica Rolex Match Grasp watch, Replica Hublot large bang purple  carat and l [replica watches uk|http://www.cheapsaleuk2.org.uk/] tified documents. The majority of custom wrist watches include  certified documents and when you discover that the watch you are looking  at is actuall [rolex replica|http://www.rolex-replica-uk.co.uk/] Relatively talking, replica wrist watches could be considerably less  costly compared to custom wrist watches and may frequently imply the  main dife [rolex replica|http://www.ukrolexreplica0.org.uk/] such as Bergeon. The finesse of this bezel remover from Bergeon is the  fact that it extracts these costly and spectacular searching from  watches complet [swiss rolex|http://www.rolex-replica-uk.co.uk/] e most typical issues with replica wrist watches. Most are kept  collectively just with really affordable hooks. Following simply small  put on, the ac [replica rolex|http://www.rolex-replica-uk.co.uk/] s you to definitely appear your very best with out emptying your bank  account on the watch. Replica wrist watches look wonderful, but when  these peopl [lv bags|http://www.louisvuitton-bags.org.uk/] tough complete might instantly symbolize the footwear tend to be  associated with inexpensive high quality. Well the same for that dark  material. Getting dark gowns [replica watches|http://www.replicawatches0.co.uk/] nsist of novelty watches with styles inspired by well-liked movies this  kind of as Star Wars or even the Indiana Jones sequence. Other people  function st [gucci replica|http://www.gucci-replica-bags.co.uk/] will purchase as much as you prefer instead of conserve for a long time  to possess a single item. Replica footwear associated with large  creative designers  e actual Little princess title was adopted in order  to relabel the actual Dior purse, simply because your woman had been  known as Woman Di through the [replica watches|http://www.replicawatches0.co.uk/] sed storage. The actual reflection representation obtained exactly the  same understanding in the bazaar using a difficult wonderful  perspective. The cost is way  ated with replica wrist watches is very  remarkable. Among the best methods to ensure that you aren't becoming  cheated would be to turn out to be rea [rolex replicas|http://www.rolexreplicasstore.co.uk/] of this "counterfeit" in louis vuitton bag. Nadia was not impressed,  and she thinks the package deal is really a image, is really a a part of  her style [gucci replica handbags|http://www.gucci-replica-bags.co.uk/] fifteen, Nadia obtained a louis vuitton the company's attorney's  letter. They asked her to instantly quit utilizing the louis vuitton bag  styles for lou [fake breitling|http://www.breitling1replica.co.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751442</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784158</id>
    <property name="body"
      ><![CDATA[are ranging from thousands of dollars. We can  find it worth at all considering that supplies utilized is truly  exceptional and also the finish is remarkable. But what [gucci handbags|http://www.gucci-replica-bags.co.uk/] is the best option for those. Whilst they appear similar to the unique  Rolex watch however in relation to costs they're a lot more inexpensive.  For thi [gucci replica|http://www.gucci-replica-bags.co.uk/] and in shops traditional effortlessly these days\!hhhhInexpensive and  simple to obtainRegardless of whether you possess an typical income or  perhaps a big [swiss replica watches|http://www.cheapsaleuk2.org.uk/] s. Additional particulars consist of the nude leather lining and  footbed, signature red leather sole, one.five inch double platform,  towering six inch self-co [louis vuitton replica|http://www.louisvuitton-bags.org.uk/] e most typical issues with replica wrist watches. Most are kept  collectively just with really affordable hooks. Following simply small  put on, the ac [lv handbags|http://www.louisvuitton-bags.org.uk/] of wrist watches very popular amongst women and men. Here are a few  factors which make these types of watches this is the greatest add-ons  for those: [breitling uk|http://www.breitling1replica.co.uk/] thin unique versions constantly. All of them keep exactly the same  design title 'LV'however with various design amounts. The actual amounts  is availab [replica watches|http://www.replicawatches0.co.uk/] erely have to type out issues having a small work and these who  consider the preliminary actions within the journey of work usually are  victorious. Wh [lv bags|http://www.louisvuitton-bags.org.uk/] 1 it is certain you will get the very best there's on the market if you  opt to purchase one of those slinky replica footwear. Along with best  manufactu [rolex replica|http://www.rolex-replica-uk.co.uk/] to spend larger amounts of cash. Additionally, to allow them to sign up  for the larger production requirements, the manufacturers associate [rolex replica|http://www.rolex-replica-uk.co.uk/] dark shoes.If a person ought to begin acquiring the dark shoes, may it  be the actual replicas from the custom things or even it may be from the  nearby style [swiss replica watches|http://www.cheapsaleuk2.org.uk/] his yr, February thirteen, Nadia obtained a letter in the louis vuitton  company's Paris workplace, by which they asked her to instantly quit  using photos [rolex replicas|http://www.rolex-replica-uk.co.uk/] deal watch for youths these days. If you're stressing concerning the  significant cost this arm watch demands, don't let yourself be disrupted  since [replica louis vuitton|http://www.louisvuitton-bags.org.uk/] pear such as the "real deal" but they are really constructed in a  different way in a reduced price. As well as here is a replica watch  solution.... [replica watches uk|http://www.replicawatches0.co.uk/] Becoming therefore pricey as well as virtually inaccessible for an  person with average skills, Cartier wrist watches have their own superb  alternatives in sever [gucci replica|http://www.gucci-replica-bags.co.uk/] Arrive as well as see the special moment associated with Baume &  Mercier replica watches and allow your globe be a fairy tale for other  people in order to jealous [replica watches|http://www.replicawatches0.co.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751440</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784159</id>
    <property name="body"
      ><![CDATA[are ranging from thousands of dollars. We can  find it worth at all considering that supplies utilized is truly  exceptional and also the finish is remarkable. But what [gucci handbags|http://www.gucci-replica-bags.co.uk/] is the best option for those. Whilst they appear similar to the unique  Rolex watch however in relation to costs they're a lot more inexpensive.  For thi [gucci replica|http://www.gucci-replica-bags.co.uk/] and in shops traditional effortlessly these days\!hhhhInexpensive and  simple to obtainRegardless of whether you possess an typical income or  perhaps a big [swiss replica watches|http://www.cheapsaleuk2.org.uk/] s. Additional particulars consist of the nude leather lining and  footbed, signature red leather sole, one.five inch double platform,  towering six inch self-co [louis vuitton replica|http://www.louisvuitton-bags.org.uk/] e most typical issues with replica wrist watches. Most are kept  collectively just with really affordable hooks. Following simply small  put on, the ac [lv handbags|http://www.louisvuitton-bags.org.uk/] of wrist watches very popular amongst women and men. Here are a few  factors which make these types of watches this is the greatest add-ons  for those: [breitling uk|http://www.breitling1replica.co.uk/] thin unique versions constantly. All of them keep exactly the same  design title 'LV'however with various design amounts. The actual amounts  is availab [replica watches|http://www.replicawatches0.co.uk/] erely have to type out issues having a small work and these who  consider the preliminary actions within the journey of work usually are  victorious. Wh [lv bags|http://www.louisvuitton-bags.org.uk/] 1 it is certain you will get the very best there's on the market if you  opt to purchase one of those slinky replica footwear. Along with best  manufactu [rolex replica|http://www.rolex-replica-uk.co.uk/] to spend larger amounts of cash. Additionally, to allow them to sign up  for the larger production requirements, the manufacturers associate [rolex replica|http://www.rolex-replica-uk.co.uk/] dark shoes.If a person ought to begin acquiring the dark shoes, may it  be the actual replicas from the custom things or even it may be from the  nearby style [swiss replica watches|http://www.cheapsaleuk2.org.uk/] his yr, February thirteen, Nadia obtained a letter in the louis vuitton  company's Paris workplace, by which they asked her to instantly quit  using photos [rolex replicas|http://www.rolex-replica-uk.co.uk/] deal watch for youths these days. If you're stressing concerning the  significant cost this arm watch demands, don't let yourself be disrupted  since [replica louis vuitton|http://www.louisvuitton-bags.org.uk/] pear such as the "real deal" but they are really constructed in a  different way in a reduced price. As well as here is a replica watch  solution.... [replica watches uk|http://www.replicawatches0.co.uk/] Becoming therefore pricey as well as virtually inaccessible for an  person with average skills, Cartier wrist watches have their own superb  alternatives in sever [gucci replica|http://www.gucci-replica-bags.co.uk/] Arrive as well as see the special moment associated with Baume &  Mercier replica watches and allow your globe be a fairy tale for other  people in order to jealous [replica watches|http://www.replicawatches0.co.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751441</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784164</id>
    <property name="body"
      ><![CDATA[due to the very first reality --- the truth that  they're produced from high quality supplies --- how the custom purses are  apt to have higher vi [swiss replica watches|http://www.replicawatches0.co.uk/] gst the very best designs and therefore are noticed because the various  classes of imitation Rolex watches. These replicated watches have all  of the indi [breitling uk|http://www.breitling1replica.co.uk/] The examples of Inexpensive Replica watch are replica Cartier Balloon  Blue, Replica Rolex Match Grasp watch, Replica Hublot large bang purple  carat and l [replica watches uk|http://www.cheapsaleuk2.org.uk/] tified documents. The majority of custom wrist watches include  certified documents and when you discover that the watch you are looking  at is actuall [rolex replica|http://www.rolex-replica-uk.co.uk/] Relatively talking, replica wrist watches could be considerably less  costly compared to custom wrist watches and may frequently imply the  main dife [rolex replica|http://www.ukrolexreplica0.org.uk/] such as Bergeon. The finesse of this bezel remover from Bergeon is the  fact that it extracts these costly and spectacular searching from  watches complet [swiss rolex|http://www.rolex-replica-uk.co.uk/] e most typical issues with replica wrist watches. Most are kept  collectively just with really affordable hooks. Following simply small  put on, the ac [replica rolex|http://www.rolex-replica-uk.co.uk/] s you to definitely appear your very best with out emptying your bank  account on the watch. Replica wrist watches look wonderful, but when  these peopl [lv bags|http://www.louisvuitton-bags.org.uk/] tough complete might instantly symbolize the footwear tend to be  associated with inexpensive high quality. Well the same for that dark  material. Getting dark gowns [replica watches|http://www.replicawatches0.co.uk/] nsist of novelty watches with styles inspired by well-liked movies this  kind of as Star Wars or even the Indiana Jones sequence. Other people  function st [gucci replica|http://www.gucci-replica-bags.co.uk/] will purchase as much as you prefer instead of conserve for a long time  to possess a single item. Replica footwear associated with large  creative designers  e actual Little princess title was adopted in order  to relabel the actual Dior purse, simply because your woman had been  known as Woman Di through the [replica watches|http://www.replicawatches0.co.uk/] sed storage. The actual reflection representation obtained exactly the  same understanding in the bazaar using a difficult wonderful  perspective. The cost is way  ated with replica wrist watches is very  remarkable. Among the best methods to ensure that you aren't becoming  cheated would be to turn out to be rea [rolex replicas|http://www.rolexreplicasstore.co.uk/] of this "counterfeit" in louis vuitton bag. Nadia was not impressed,  and she thinks the package deal is really a image, is really a a part of  her style [gucci replica handbags|http://www.gucci-replica-bags.co.uk/] fifteen, Nadia obtained a louis vuitton the company's attorney's  letter. They asked her to instantly quit utilizing the louis vuitton bag  styles for lou [fake breitling|http://www.breitling1replica.co.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751446</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784165</id>
    <property name="body"
      ><![CDATA[versial locations. The brand new louis vuitton  bag will probably be Richard Prince the most recent development: Nurses  Paintings theme, that is a sequence o [rolex replica|http://www.rolexreplicasstore.co.uk/] e emotional intentions, it's feasible to neglect the truth that she may  be infringing. Actually, in accordance to knowledgeable counsel  disclose, Nadia might [louis vuitton handbags|http://www.louisvuitton-bags.org.uk/] obtained in the imitation Rolex watches obtainable in the on-line shop  that is the very best supply for the charming sporting. The imitation  watches b [rolex replica|http://www.rolexreplicasstore.co.uk/] ariety of functions. Some put on it due to the standard appear from the  watches and other people put on it as being a jewellery merchandise.  What ever could be [rolex replica|http://www.ukrolexreplica0.org.uk/] reat\! Nevertheless. this really is no magic. The polish dissolves the  plastic glass from the watch whilst rubbing and successfully will get  the dissolved glass [swiss replica watches|http://www.replicawatches0.co.uk/] of failure of their very own qualifications, will be the so-called  Buddha by gold, individuals depend on costume, this sentence was reduce  around the prop [louis vuitton replica|http://www.louisvuitton-bags.org.uk/] First of all, Rolex watch Replica Wrist watches are recognized for  their own limitless elegance as well as stylish. In spite of to be the  actual fake as [breitling watches|http://www.breitling1replica.co.uk/] ately this type of watch may be worth a lot more than $550K) --- you can  aquire a replica Girard-Perregaux watch for any discount as well. [lv handbags|http://www.louisvuitton-bags.org.uk/] the liberty of an artist created, and can carry on her actions to help  these individuals struggling in Darfur. Before the picture as being a  representativ [fake breitling|http://www.breitling1replica.co.uk/] hich is most prone to harm and scratches. It's pretty typical to  unintentionally brush this watch glass in opposition to a strong object.  thus creating thes [breitling uk|http://www.breitling1replica.co.uk/] ervation from the automobile.I stated in the jars, the individuals of  Shanghai to determine a posted create (actually he didn't specify the  Shanghai individual [swiss rolex|http://www.rolexreplicasstore.co.uk/] dy searching for the right present for that guy inside your existence  or perhaps a guy thinking about selecting among the numerous around the  marketplace [breitling watches|http://www.breitling1replica.co.uk/] e to put lower for any watch that's in the end, merely a replica; but  it is vital that you remember that when you are referring to the replica  of the [swiss rolex|http://www.rolexreplicasstore.co.uk/] ven though there are lots of individuals who think before using the  problem, as well as who covers the cost the larger costs related to  custom t [lv bags|http://www.louisvuitton-bags.org.uk/] dy searching for the right present for that guy inside your existence  or perhaps a guy thinking about selecting among the numerous around the  marketplace [rolex replica|http://www.rolex-replica-uk.co.uk/] a lot more than that like to find the unique Rolex watch. No-one can  write out if you're putting on a good fake watch. This kind of may be  the excelle [louis vuitton replica|http://www.louisvuitton-bags.org.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751447</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784162</id>
    <property name="body"
      ><![CDATA[due to the very first reality --- the truth that  they're produced from high quality supplies --- how the custom purses are  apt to have higher vi [swiss replica watches|http://www.replicawatches0.co.uk/] gst the very best designs and therefore are noticed because the various  classes of imitation Rolex watches. These replicated watches have all  of the indi [breitling uk|http://www.breitling1replica.co.uk/] The examples of Inexpensive Replica watch are replica Cartier Balloon  Blue, Replica Rolex Match Grasp watch, Replica Hublot large bang purple  carat and l [replica watches uk|http://www.cheapsaleuk2.org.uk/] tified documents. The majority of custom wrist watches include  certified documents and when you discover that the watch you are looking  at is actuall [rolex replica|http://www.rolex-replica-uk.co.uk/] Relatively talking, replica wrist watches could be considerably less  costly compared to custom wrist watches and may frequently imply the  main dife [rolex replica|http://www.ukrolexreplica0.org.uk/] such as Bergeon. The finesse of this bezel remover from Bergeon is the  fact that it extracts these costly and spectacular searching from  watches complet [swiss rolex|http://www.rolex-replica-uk.co.uk/] e most typical issues with replica wrist watches. Most are kept  collectively just with really affordable hooks. Following simply small  put on, the ac [replica rolex|http://www.rolex-replica-uk.co.uk/] s you to definitely appear your very best with out emptying your bank  account on the watch. Replica wrist watches look wonderful, but when  these peopl [lv bags|http://www.louisvuitton-bags.org.uk/] tough complete might instantly symbolize the footwear tend to be  associated with inexpensive high quality. Well the same for that dark  material. Getting dark gowns [replica watches|http://www.replicawatches0.co.uk/] nsist of novelty watches with styles inspired by well-liked movies this  kind of as Star Wars or even the Indiana Jones sequence. Other people  function st [gucci replica|http://www.gucci-replica-bags.co.uk/] will purchase as much as you prefer instead of conserve for a long time  to possess a single item. Replica footwear associated with large  creative designers  e actual Little princess title was adopted in order  to relabel the actual Dior purse, simply because your woman had been  known as Woman Di through the [replica watches|http://www.replicawatches0.co.uk/] sed storage. The actual reflection representation obtained exactly the  same understanding in the bazaar using a difficult wonderful  perspective. The cost is way  ated with replica wrist watches is very  remarkable. Among the best methods to ensure that you aren't becoming  cheated would be to turn out to be rea [rolex replicas|http://www.rolexreplicasstore.co.uk/] of this "counterfeit" in louis vuitton bag. Nadia was not impressed,  and she thinks the package deal is really a image, is really a a part of  her style [gucci replica handbags|http://www.gucci-replica-bags.co.uk/] fifteen, Nadia obtained a louis vuitton the company's attorney's  letter. They asked her to instantly quit utilizing the louis vuitton bag  styles for lou [fake breitling|http://www.breitling1replica.co.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751444</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784163</id>
    <property name="body"
      ><![CDATA[due to the very first reality --- the truth that  they're produced from high quality supplies --- how the custom purses are  apt to have higher vi [swiss replica watches|http://www.replicawatches0.co.uk/] gst the very best designs and therefore are noticed because the various  classes of imitation Rolex watches. These replicated watches have all  of the indi [breitling uk|http://www.breitling1replica.co.uk/] The examples of Inexpensive Replica watch are replica Cartier Balloon  Blue, Replica Rolex Match Grasp watch, Replica Hublot large bang purple  carat and l [replica watches uk|http://www.cheapsaleuk2.org.uk/] tified documents. The majority of custom wrist watches include  certified documents and when you discover that the watch you are looking  at is actuall [rolex replica|http://www.rolex-replica-uk.co.uk/] Relatively talking, replica wrist watches could be considerably less  costly compared to custom wrist watches and may frequently imply the  main dife [rolex replica|http://www.ukrolexreplica0.org.uk/] such as Bergeon. The finesse of this bezel remover from Bergeon is the  fact that it extracts these costly and spectacular searching from  watches complet [swiss rolex|http://www.rolex-replica-uk.co.uk/] e most typical issues with replica wrist watches. Most are kept  collectively just with really affordable hooks. Following simply small  put on, the ac [replica rolex|http://www.rolex-replica-uk.co.uk/] s you to definitely appear your very best with out emptying your bank  account on the watch. Replica wrist watches look wonderful, but when  these peopl [lv bags|http://www.louisvuitton-bags.org.uk/] tough complete might instantly symbolize the footwear tend to be  associated with inexpensive high quality. Well the same for that dark  material. Getting dark gowns [replica watches|http://www.replicawatches0.co.uk/] nsist of novelty watches with styles inspired by well-liked movies this  kind of as Star Wars or even the Indiana Jones sequence. Other people  function st [gucci replica|http://www.gucci-replica-bags.co.uk/] will purchase as much as you prefer instead of conserve for a long time  to possess a single item. Replica footwear associated with large  creative designers  e actual Little princess title was adopted in order  to relabel the actual Dior purse, simply because your woman had been  known as Woman Di through the [replica watches|http://www.replicawatches0.co.uk/] sed storage. The actual reflection representation obtained exactly the  same understanding in the bazaar using a difficult wonderful  perspective. The cost is way  ated with replica wrist watches is very  remarkable. Among the best methods to ensure that you aren't becoming  cheated would be to turn out to be rea [rolex replicas|http://www.rolexreplicasstore.co.uk/] of this "counterfeit" in louis vuitton bag. Nadia was not impressed,  and she thinks the package deal is really a image, is really a a part of  her style [gucci replica handbags|http://www.gucci-replica-bags.co.uk/] fifteen, Nadia obtained a louis vuitton the company's attorney's  letter. They asked her to instantly quit utilizing the louis vuitton bag  styles for lou [fake breitling|http://www.breitling1replica.co.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751445</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784168</id>
    <property name="body"
      ><![CDATA[versial locations. The brand new louis vuitton  bag will probably be Richard Prince the most recent development: Nurses  Paintings theme, that is a sequence o [rolex replica|http://www.rolexreplicasstore.co.uk/] e emotional intentions, it's feasible to neglect the truth that she may  be infringing. Actually, in accordance to knowledgeable counsel  disclose, Nadia might [louis vuitton handbags|http://www.louisvuitton-bags.org.uk/] obtained in the imitation Rolex watches obtainable in the on-line shop  that is the very best supply for the charming sporting. The imitation  watches b [rolex replica|http://www.rolexreplicasstore.co.uk/] ariety of functions. Some put on it due to the standard appear from the  watches and other people put on it as being a jewellery merchandise.  What ever could be [rolex replica|http://www.ukrolexreplica0.org.uk/] reat\! Nevertheless. this really is no magic. The polish dissolves the  plastic glass from the watch whilst rubbing and successfully will get  the dissolved glass [swiss replica watches|http://www.replicawatches0.co.uk/] of failure of their very own qualifications, will be the so-called  Buddha by gold, individuals depend on costume, this sentence was reduce  around the prop [louis vuitton replica|http://www.louisvuitton-bags.org.uk/] First of all, Rolex watch Replica Wrist watches are recognized for  their own limitless elegance as well as stylish. In spite of to be the  actual fake as [breitling watches|http://www.breitling1replica.co.uk/] ately this type of watch may be worth a lot more than $550K) --- you can  aquire a replica Girard-Perregaux watch for any discount as well. [lv handbags|http://www.louisvuitton-bags.org.uk/] the liberty of an artist created, and can carry on her actions to help  these individuals struggling in Darfur. Before the picture as being a  representativ [fake breitling|http://www.breitling1replica.co.uk/] hich is most prone to harm and scratches. It's pretty typical to  unintentionally brush this watch glass in opposition to a strong object.  thus creating thes [breitling uk|http://www.breitling1replica.co.uk/] ervation from the automobile.I stated in the jars, the individuals of  Shanghai to determine a posted create (actually he didn't specify the  Shanghai individual [swiss rolex|http://www.rolexreplicasstore.co.uk/] dy searching for the right present for that guy inside your existence  or perhaps a guy thinking about selecting among the numerous around the  marketplace [breitling watches|http://www.breitling1replica.co.uk/] e to put lower for any watch that's in the end, merely a replica; but  it is vital that you remember that when you are referring to the replica  of the [swiss rolex|http://www.rolexreplicasstore.co.uk/] ven though there are lots of individuals who think before using the  problem, as well as who covers the cost the larger costs related to  custom t [lv bags|http://www.louisvuitton-bags.org.uk/] dy searching for the right present for that guy inside your existence  or perhaps a guy thinking about selecting among the numerous around the  marketplace [rolex replica|http://www.rolex-replica-uk.co.uk/] a lot more than that like to find the unique Rolex watch. No-one can  write out if you're putting on a good fake watch. This kind of may be  the excelle [louis vuitton replica|http://www.louisvuitton-bags.org.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751450</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784169</id>
    <property name="body"
      ><![CDATA[versial locations. The brand new louis vuitton  bag will probably be Richard Prince the most recent development: Nurses  Paintings theme, that is a sequence o [rolex replica|http://www.rolexreplicasstore.co.uk/] e emotional intentions, it's feasible to neglect the truth that she may  be infringing. Actually, in accordance to knowledgeable counsel  disclose, Nadia might [louis vuitton handbags|http://www.louisvuitton-bags.org.uk/] obtained in the imitation Rolex watches obtainable in the on-line shop  that is the very best supply for the charming sporting. The imitation  watches b [rolex replica|http://www.rolexreplicasstore.co.uk/] ariety of functions. Some put on it due to the standard appear from the  watches and other people put on it as being a jewellery merchandise.  What ever could be [rolex replica|http://www.ukrolexreplica0.org.uk/] reat\! Nevertheless. this really is no magic. The polish dissolves the  plastic glass from the watch whilst rubbing and successfully will get  the dissolved glass [swiss replica watches|http://www.replicawatches0.co.uk/] of failure of their very own qualifications, will be the so-called  Buddha by gold, individuals depend on costume, this sentence was reduce  around the prop [louis vuitton replica|http://www.louisvuitton-bags.org.uk/] First of all, Rolex watch Replica Wrist watches are recognized for  their own limitless elegance as well as stylish. In spite of to be the  actual fake as [breitling watches|http://www.breitling1replica.co.uk/] ately this type of watch may be worth a lot more than $550K) --- you can  aquire a replica Girard-Perregaux watch for any discount as well. [lv handbags|http://www.louisvuitton-bags.org.uk/] the liberty of an artist created, and can carry on her actions to help  these individuals struggling in Darfur. Before the picture as being a  representativ [fake breitling|http://www.breitling1replica.co.uk/] hich is most prone to harm and scratches. It's pretty typical to  unintentionally brush this watch glass in opposition to a strong object.  thus creating thes [breitling uk|http://www.breitling1replica.co.uk/] ervation from the automobile.I stated in the jars, the individuals of  Shanghai to determine a posted create (actually he didn't specify the  Shanghai individual [swiss rolex|http://www.rolexreplicasstore.co.uk/] dy searching for the right present for that guy inside your existence  or perhaps a guy thinking about selecting among the numerous around the  marketplace [breitling watches|http://www.breitling1replica.co.uk/] e to put lower for any watch that's in the end, merely a replica; but  it is vital that you remember that when you are referring to the replica  of the [swiss rolex|http://www.rolexreplicasstore.co.uk/] ven though there are lots of individuals who think before using the  problem, as well as who covers the cost the larger costs related to  custom t [lv bags|http://www.louisvuitton-bags.org.uk/] dy searching for the right present for that guy inside your existence  or perhaps a guy thinking about selecting among the numerous around the  marketplace [rolex replica|http://www.rolex-replica-uk.co.uk/] a lot more than that like to find the unique Rolex watch. No-one can  write out if you're putting on a good fake watch. This kind of may be  the excelle [louis vuitton replica|http://www.louisvuitton-bags.org.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751451</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784166</id>
    <property name="body"
      ><![CDATA[versial locations. The brand new louis vuitton  bag will probably be Richard Prince the most recent development: Nurses  Paintings theme, that is a sequence o [rolex replica|http://www.rolexreplicasstore.co.uk/] e emotional intentions, it's feasible to neglect the truth that she may  be infringing. Actually, in accordance to knowledgeable counsel  disclose, Nadia might [louis vuitton handbags|http://www.louisvuitton-bags.org.uk/] obtained in the imitation Rolex watches obtainable in the on-line shop  that is the very best supply for the charming sporting. The imitation  watches b [rolex replica|http://www.rolexreplicasstore.co.uk/] ariety of functions. Some put on it due to the standard appear from the  watches and other people put on it as being a jewellery merchandise.  What ever could be [rolex replica|http://www.ukrolexreplica0.org.uk/] reat\! Nevertheless. this really is no magic. The polish dissolves the  plastic glass from the watch whilst rubbing and successfully will get  the dissolved glass [swiss replica watches|http://www.replicawatches0.co.uk/] of failure of their very own qualifications, will be the so-called  Buddha by gold, individuals depend on costume, this sentence was reduce  around the prop [louis vuitton replica|http://www.louisvuitton-bags.org.uk/] First of all, Rolex watch Replica Wrist watches are recognized for  their own limitless elegance as well as stylish. In spite of to be the  actual fake as [breitling watches|http://www.breitling1replica.co.uk/] ately this type of watch may be worth a lot more than $550K) --- you can  aquire a replica Girard-Perregaux watch for any discount as well. [lv handbags|http://www.louisvuitton-bags.org.uk/] the liberty of an artist created, and can carry on her actions to help  these individuals struggling in Darfur. Before the picture as being a  representativ [fake breitling|http://www.breitling1replica.co.uk/] hich is most prone to harm and scratches. It's pretty typical to  unintentionally brush this watch glass in opposition to a strong object.  thus creating thes [breitling uk|http://www.breitling1replica.co.uk/] ervation from the automobile.I stated in the jars, the individuals of  Shanghai to determine a posted create (actually he didn't specify the  Shanghai individual [swiss rolex|http://www.rolexreplicasstore.co.uk/] dy searching for the right present for that guy inside your existence  or perhaps a guy thinking about selecting among the numerous around the  marketplace [breitling watches|http://www.breitling1replica.co.uk/] e to put lower for any watch that's in the end, merely a replica; but  it is vital that you remember that when you are referring to the replica  of the [swiss rolex|http://www.rolexreplicasstore.co.uk/] ven though there are lots of individuals who think before using the  problem, as well as who covers the cost the larger costs related to  custom t [lv bags|http://www.louisvuitton-bags.org.uk/] dy searching for the right present for that guy inside your existence  or perhaps a guy thinking about selecting among the numerous around the  marketplace [rolex replica|http://www.rolex-replica-uk.co.uk/] a lot more than that like to find the unique Rolex watch. No-one can  write out if you're putting on a good fake watch. This kind of may be  the excelle [louis vuitton replica|http://www.louisvuitton-bags.org.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751448</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784167</id>
    <property name="body"
      ><![CDATA[versial locations. The brand new louis vuitton  bag will probably be Richard Prince the most recent development: Nurses  Paintings theme, that is a sequence o [rolex replica|http://www.rolexreplicasstore.co.uk/] e emotional intentions, it's feasible to neglect the truth that she may  be infringing. Actually, in accordance to knowledgeable counsel  disclose, Nadia might [louis vuitton handbags|http://www.louisvuitton-bags.org.uk/] obtained in the imitation Rolex watches obtainable in the on-line shop  that is the very best supply for the charming sporting. The imitation  watches b [rolex replica|http://www.rolexreplicasstore.co.uk/] ariety of functions. Some put on it due to the standard appear from the  watches and other people put on it as being a jewellery merchandise.  What ever could be [rolex replica|http://www.ukrolexreplica0.org.uk/] reat\! Nevertheless. this really is no magic. The polish dissolves the  plastic glass from the watch whilst rubbing and successfully will get  the dissolved glass [swiss replica watches|http://www.replicawatches0.co.uk/] of failure of their very own qualifications, will be the so-called  Buddha by gold, individuals depend on costume, this sentence was reduce  around the prop [louis vuitton replica|http://www.louisvuitton-bags.org.uk/] First of all, Rolex watch Replica Wrist watches are recognized for  their own limitless elegance as well as stylish. In spite of to be the  actual fake as [breitling watches|http://www.breitling1replica.co.uk/] ately this type of watch may be worth a lot more than $550K) --- you can  aquire a replica Girard-Perregaux watch for any discount as well. [lv handbags|http://www.louisvuitton-bags.org.uk/] the liberty of an artist created, and can carry on her actions to help  these individuals struggling in Darfur. Before the picture as being a  representativ [fake breitling|http://www.breitling1replica.co.uk/] hich is most prone to harm and scratches. It's pretty typical to  unintentionally brush this watch glass in opposition to a strong object.  thus creating thes [breitling uk|http://www.breitling1replica.co.uk/] ervation from the automobile.I stated in the jars, the individuals of  Shanghai to determine a posted create (actually he didn't specify the  Shanghai individual [swiss rolex|http://www.rolexreplicasstore.co.uk/] dy searching for the right present for that guy inside your existence  or perhaps a guy thinking about selecting among the numerous around the  marketplace [breitling watches|http://www.breitling1replica.co.uk/] e to put lower for any watch that's in the end, merely a replica; but  it is vital that you remember that when you are referring to the replica  of the [swiss rolex|http://www.rolexreplicasstore.co.uk/] ven though there are lots of individuals who think before using the  problem, as well as who covers the cost the larger costs related to  custom t [lv bags|http://www.louisvuitton-bags.org.uk/] dy searching for the right present for that guy inside your existence  or perhaps a guy thinking about selecting among the numerous around the  marketplace [rolex replica|http://www.rolex-replica-uk.co.uk/] a lot more than that like to find the unique Rolex watch. No-one can  write out if you're putting on a good fake watch. This kind of may be  the excelle [louis vuitton replica|http://www.louisvuitton-bags.org.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751449</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784170</id>
    <property name="body"
      ><![CDATA[h3. Becoming therefore pricey as well as virtually inaccessible for an  person with average skills, Cartier wrist watches have their own superb  alternatives in sever  out this simply because there are lots of watch  makers who's promoting fake replica watch that is not tough. If by  opportunity watch mirror breaks [louis vuitton replica|http://www.louisvuitton-bags.org.uk/] or them. To begin with, the watch is chronological. This exhibits that  there's a degree of seriousness connected towards the watch. Most  chronological wat [replica watches|http://www.cheapsaleuk2.org.uk/] ely securely.There's completely no possibility of bending the bezel or  scratching the watch situation in the event you use this bezel remover.  This us [swiss replica watches|http://www.cheapsaleuk2.org.uk/] em. It's because of this how the manufacturers associated with custom  totes may often cost all of them fairly extremely --- to make all of them [swiss replica watches|http://www.replicawatches0.co.uk/] , go into the color and style you would like as well as your dimension  to the internet search engine to determine in the event that anybody  includes a [gucci handbags|http://www.gucci-replica-bags.co.uk/] cause these wrist watches have grown to be the standing image it is  simple to satisfy this particular require by using the Rolex watch  replica watch. Y [rolex replicas|http://www.rolex-replica-uk.co.uk/] style business. The replica variations of the trademark can be found in  their own groups.The advantagesOpting for the actual Louis Vuitton  Totes Rep [gucci bags|http://www.gucci-replica-bags.co.uk/] I've not also do to be able to conserve expenses although, I'm now a  drivers frequently now, but ah what the car's mechanical, or an idiot. I  wish to share [replica gucci|http://www.gucci-replica-bags.co.uk/] orporated in the proven fact that the actual custom totes might shed  their own reputation, in the event that everybody experienced all of the [replica watches|http://www.replicawatches0.co.uk/] tly  inventive artwork and duplicate it, and stroll in between legal and  illegal, it's each admiration for Richard Prince tends to make an  additional contro [louis vuitton handbags|http://www.louisvuitton-bags.org.uk/] ds the title of the brand name tend to be Ilea, Hampton, Diamant,  Classima Professionals, Riviera as well as Bill Baume. These types of  assortments [replica rolex|http://www.rolex-replica-uk.co.uk/] ch titles to consider consist of Rolex watch, Chanel, Gucci, Rr,  Breitling, Cartier, as well as Tagheuer. On the internet replica shops  could also provid [replica breitling|http://www.breitling1replica.co.uk/] uld be a marvelous factor by itself using its extremely refined steel  artwork pubs upon gray suede. The actual watch offered for any discount  $120K (approxim [replica rolex|http://www.rolexreplicasstore.co.uk/] ir styles as well as precision within the particulars of labor that  you'll be bowled more than through their own charm. This kind of  stimulating designs are [rolex replicas|http://www.rolexreplicasstore.co.uk/] who use fake, louis vuitton consumer doesn't belong to this class. This  time, actual louis vuitton really feel so poor mood simply because,  louis vuitton bag [replica watches|http://www.replicawatches0.co.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751452</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784215</id>
    <property name="body"><![CDATA[This document outlines the core of unit testing, i.e. Assertions. Assertions are simple: You assert something, and if that assertion does not result in your expectation, the test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions. A single failed assertion means that any subsequent assertions in a test will not execute and thus you won't know if those assertions indicate further problems in your code.

Need an assertion you don't see here? [Roll your own ...|Custom Assertions]

Without further delay, our players, The Assertions:


h3. assertTrue(boolean condition \[,String message\])

assertTrue is one of the two "bread and butter" assertions in any testing framework. The philosophy is simple: you assert something to be true; if it's not, the test fails

{code:title=assertTrue()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertTrue( StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

assertTrue has an opposite, assertFalse:

h3. assertFalse(boolean condition \[, String message\])\*

{code:title=assertFalse}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertFalse( StructIsEmpty(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>

{code}

h3. assert(boolean condition \[,String message\])

assert is semantically equivalent to assertTrue, providing a shorter form :

{code:title=assert()}<cffunction name="testAssert">
	<cfset assert( 1 eq 1,  "Testing a true expression")>
	<cfset assert( not 1 eq 2,  "Testing negated expression")>
</cffunction>
{code}


h3. assertEquals*(any expected, any actual \[, String message\])

assertEquals is the other core assertion. Here, you're asserting that some result equals some expected result. This could be two numbers, two strings, two structs, whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals to compare any type of data.

{code:title=assertEquals()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertEquals(1, StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertEquals(0, StructCount(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

h3. fail*(String message)

fail() is used to actively fail a test. It's useful when you're stubbing a test and you want to ensure it fails, like so:

{code:title=fail()}<cffunction name="addPrivilegeShouldHaveNoEffectIfPrivilegeExists">
 	<cfset fail("test not yet implemented")>
</cffunction>
{code}


It's also useful when you're testing an "error path", like so:

{code:title=fail() to test Error Paths}<cffunction name="addPrivilegesWithPunctuationShouldThrowError">
	<cfset var obj = createObject("component","myObject")>
	<cftry>
		<cfset obj.addPrivilege("Edit.User")>
		<cfset fail("Should not get here. Function under test should've thrown an error")>
	<cfcatch type="mxunit.exception.AssertionFailedError">
		<cfrethrow>
	</cfcatch>
	<cfcatch type="any"><!--- expect to get here ---></cfcatch>
	</cftry>
</cffunction>
{code}

h3. failNotEquals*(any value, any value2  \[,String message\])

Used to fail when two values do not equal. This doesn't perform any assertion... it's simply a convenience method for providing a specific type of failure message

{code:title=failNotEquals()}<cffunction name="demoFailNotEquals">
 	<cfset failNotEquals(myObject1,myOtherObject, "These should not have the same value")>
</cffunction>
{code}

h3. assertSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail for arrays.
{code:title=assertSame()}<cffunction name="initShouldReturnSelf">
	<cfset var obj = createObject("component","myObject")>
	<cfset assertSame(obj,obj.init(), "These should be the same thang since init should return 'this'")>
</cffunction>
{code}

h3. assertNotSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass for arrays.

{code:title=assertNotSame()}<cffunction name="newInstanceShouldNotReturnSelf">
	<cfset var obj = createObject("component","myObjectFactory")>
	<cfset assertNotSame(obj,obj.newInstance(), "These should not be the same thang since newInstance should return a new instance from the factory")>
</cffunction>
{code}

h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion.Note, that these are quite simple, can be easily implemented using the base assertions above, but are provided for convenience.

*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml located in /mxunit/framework/ directory. Simply remove or comment out these line:

{code:title=assertionExtension config-extension in mxunit-config.xml}	<config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true" override="false" />
	<config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false" />
	<config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false" />
{code}

h3. assertXPath*(String xpath, any data, \[String text\], \[String message\])

Searches data using xpath. If text is specified, it tries to match the exact text to  the xpath expression. Otherwise ,it returns true if any nodes are found that match the xpath expression. Note that, unlike most assertions, assertXPath returns an xml dom representation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this assertion returns true if any elements of the xpath expression are found. Not required. Defaults to ""
\[string message\]: The message to display when this assertion fails Not required. Defaults to The XPath expression, #arguments.xpath#, did not match the data.

{code:title=assertXPath()}
<cffunction name="testFindGoogleInTitle">
	<cfscript>
	nodes = assertXpath('/html/head/title', "http://google.com", "Google");
	debug(nodes);
	nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
	nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
	</cfscript>
</cffunction>
{code}

The above parses the results from urls and strings and searches the parsed results for the XPath expression.
Try it. Really, it works\!

h3. assertIsTypeOf*(component obj, String type)

Determines if obj is of type. type needs to be fully qualified.
{code:title=assertIsTypeOf()}
<cffunction name="demoAssertIsTypeOf">
  <cfset assertIsTypeOf(obj,"my.type.Of.Object")>
</cffunction>
{code}

h3. assertIsXMLDoc*(any xml \[, String message\])

Determines if xml is a valid XML DOM object.
{code:title=assertIsXMLDoc()}
<cffunction name="demoAssertIsXMLDoc">
  <cfset assertIsXMLDoc(xml)>
</cffunction>
{code}

h3. assertIsArray*(any obj1)

Determines if the obj1 is a valid array.
{code:title=assertIsArray()}
<cffunction name="demoAssertIsArray">
  <cfset assertIsArray(myObject1)>
</cffunction>
{code}

h3. assertIsDefined*(any obj1)

Determines if the obj1 has been defined in the available scope.
{code:title=assertIsDefined()}
<cffunction name="demoAssertIsDefined">
  <cfset assertIsDefined("myObject1")>
</cffunction>
{code}

h3. assertIsEmpty*(any obj1)

Determines if the obj1 is a 0 length string or NULL equivalent.
{code:title=assertIsEmpty()}
<cffunction name="demoAssertIsEmpty">
  <cfset assertIsEmpty(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyArray*(any obj1,\[String message\])

Determines if the obj1 is an array with no elements.
{code:title=assertIsEmptyArray()}
<cffunction name="demoAssertIsEmptyArray">
  <cfset assertIsEmptyArray(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyQuery*(any obj1,\[String message\])

Determines if the obj1 is a query with no rows.
{code:title=assertIsEmptyQuery()}
<cffunction name="demoAssertIsEmptyQuery">
  <cfset assertIsEmptyQuery(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyStruct*(any obj1,\[String message\])

Determines if the obj1 is a struct with no keys or values.
{code:title=assertIsEmptyStruct()}
<cffunction name="demoAssertIsEmptyStruct">
  <cfset assertIsEmptyStruct(myObject1)>
</cffunction>
{code}

h3. assertIsQuery*(any q)

Determines if q is a valid ColdFusion query.
{code:title=assertIsQuery()}
<cffunction name="demoAssertIsQuery">
  <cfset assertIsQuery(q)>
</cffunction>
{code}

h3. assertIsStruct*(any obj)

Determines if obj is a valid ColdFusion structure.
{code:title=assertIsStruct()}
<cffunction name="demoAssertIsStruct">
  <cfset assertIsStruct(obj)>
</cffunction>
{code}

----
Need more? [Build your own ...|Custom Assertions]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751501</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784217</id>
    <property name="body"><![CDATA[This document outlines the core of unit testing, i.e. Assertions. Assertions are simple: You assert something, and if that assertion does not result in your expectation, the test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions. A single failed assertion means that any subsequent assertions in a test will not execute and thus you won't know if those assertions indicate further problems in your code.

Need an assertion you don't see here? [Roll your own ...|Custom Assertions]

Without further delay, our players, The Assertions:


h3. assertTrue(boolean condition \[,String message\])

assertTrue is one of the two "bread and butter" assertions in any testing framework. The philosophy is simple: you assert something to be true; if it's not, the test fails

{code:title=assertTrue()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertTrue( StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

assertTrue has an opposite, assertFalse:

h3. assertFalse(boolean condition \[, String message\])\*

{code:title=assertFalse}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertFalse( StructIsEmpty(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>

{code}

h3. assert(boolean condition \[,String message\])

assert is semantically equivalent to assertTrue, providing a shorter form :

{code:title=assert()}<cffunction name="testAssert">
	<cfset assert( 1 eq 1,  "Testing a true expression")>
	<cfset assert( not 1 eq 2,  "Testing negated expression")>
</cffunction>
{code}


h3. assertEquals*(any expected, any actual \[, String message\])

assertEquals is the other core assertion. Here, you're asserting that some result equals some expected result. This could be two numbers, two strings, two structs, whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals to compare any type of data.

{code:title=assertEquals()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertEquals(1, StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertEquals(0, StructCount(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

h3. fail*(String message)

fail() is used to actively fail a test. It's useful when you're stubbing a test and you want to ensure it fails, like so:

{code:title=fail()}<cffunction name="addPrivilegeShouldHaveNoEffectIfPrivilegeExists">
 	<cfset fail("test not yet implemented")>
</cffunction>
{code}


It's also useful when you're testing an "error path", like so:

{code:title=fail() to test Error Paths}<cffunction name="addPrivilegesWithPunctuationShouldThrowError">
	<cfset var obj = createObject("component","myObject")>
	<cftry>
		<cfset obj.addPrivilege("Edit.User")>
		<cfset fail("Should not get here. Function under test should've thrown an error")>
	<cfcatch type="mxunit.exception.AssertionFailedError">
		<cfrethrow>
	</cfcatch>
	<cfcatch type="any"><!--- expect to get here ---></cfcatch>
	</cftry>
</cffunction>
{code}

h3. failNotEquals*(any value, any value2  \[,String message\])

Used to fail when two values do not equal. This doesn't perform any assertion... it's simply a convenience method for providing a specific type of failure message

{code:title=failNotEquals()}<cffunction name="demoFailNotEquals">
 	<cfset failNotEquals(myObject1,myOtherObject, "These should not have the same value")>
</cffunction>
{code}

h3. assertSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail for arrays.
{code:title=assertSame()}<cffunction name="initShouldReturnSelf">
	<cfset var obj = createObject("component","myObject")>
	<cfset assertSame(obj,obj.init(), "These should be the same thang since init should return 'this'")>
</cffunction>
{code}

h3. assertNotSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass for arrays.

{code:title=assertNotSame()}<cffunction name="newInstanceShouldNotReturnSelf">
	<cfset var obj = createObject("component","myObjectFactory")>
	<cfset assertNotSame(obj,obj.newInstance(), "These should not be the same thang since newInstance should return a new instance from the factory")>
</cffunction>
{code}

h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion.Note, that these are quite simple, can be easily implemented using the base assertions above, but are provided for convenience.

*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml located in /mxunit/framework/ directory. Simply remove or comment out these line:

{code:title=assertionExtension config-extension in mxunit-config.xml}	<config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true" override="false" />
	<config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false" />
	<config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false" />
{code}

h3. assertXPath*(String xpath, any data, \[String text\], \[String message\])

Searches data using xpath. If text is specified, it tries to match the exact text to  the xpath expression. Otherwise ,it returns true if any nodes are found that match the xpath expression. Note that, unlike most assertions, assertXPath returns an xml dom representation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this assertion returns true if any elements of the xpath expression are found. Not required. Defaults to ""
\[string message\]: The message to display when this assertion fails Not required. Defaults to The XPath expression, #arguments.xpath#, did not match the data.

{code:title=assertXPath()}
<cffunction name="testFindGoogleInTitle">
	<cfscript>
	nodes = assertXpath('/html/head/title', "http://google.com", "Google");
	debug(nodes);
	nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
	nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
	</cfscript>
</cffunction>
{code}

The above parses the results from urls and strings and searches the parsed results for the XPath expression.
Try it. Really, it works\!

h3. assertIsTypeOf*(component obj, String type)

Determines if obj is of type. type needs to be fully qualified.
{code:title=assertIsTypeOf()}
<cffunction name="demoAssertIsTypeOf">
  <cfset assertIsTypeOf(obj,"my.type.Of.Object")>
</cffunction>
{code}

h3. assertIsXMLDoc*(any xml \[, String message\])

Determines if xml is a valid XML DOM object.
{code:title=assertIsXMLDoc()}
<cffunction name="demoAssertIsXMLDoc">
  <cfset assertIsXMLDoc(xml)>
</cffunction>
{code}

h3. assertIsArray*(any obj1)

Determines if the obj1 is a valid array.
{code:title=assertIsArray()}
<cffunction name="demoAssertIsArray">
  <cfset assertIsArray(myObject1)>
</cffunction>
{code}

h3. assertIsDefined*(any obj1)

Determines if the obj1 has been defined in the available scope.
{code:title=assertIsDefined()}
<cffunction name="demoAssertIsDefined">
  <cfset assertIsDefined("myObject1")>
</cffunction>
{code}

h3. assertIsEmpty*(any obj1)

Determines if the obj1 is a 0 length string or NULL equivalent.
{code:title=assertIsEmpty()}
<cffunction name="demoAssertIsEmpty">
  <cfset assertIsEmpty(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyArray*(any obj1,\[String message\])

Determines if the obj1 is an array with no elements.
{code:title=assertIsEmptyArray()}
<cffunction name="demoAssertIsEmptyArray">
  <cfset assertIsEmptyArray(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyQuery*(any obj1,\[String message\])

Determines if the obj1 is a query with no rows.
{code:title=assertIsEmptyQuery()}
<cffunction name="demoAssertIsEmptyQuery">
  <cfset assertIsEmptyQuery(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyStruct*(any obj1,\[String message\])

Determines if the obj1 is a struct with no keys or values.
{code:title=assertIsEmptyStruct()}
<cffunction name="demoAssertIsEmptyStruct">
  <cfset assertIsEmptyStruct(myObject1)>
</cffunction>
{code}

h3. assertIsQuery*(any q)

Determines if q is a valid ColdFusion query.
{code:title=assertIsQuery()}
<cffunction name="demoAssertIsQuery">
  <cfset assertIsQuery(q)>
</cffunction>
{code}

h3. assertIsStruct*(any obj)

Determines if obj is a valid ColdFusion structure.
{code:title=assertIsStruct()}
<cffunction name="demoAssertIsStruct">
  <cfset assertIsStruct(obj)>
</cffunction>
{code}

----
Need more? [Build your own ...|Custom Assertions]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751503</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784219</id>
    <property name="body"><![CDATA[This document outlines the core of unit testing, i.e. Assertions. Assertions are simple: You assert something, and if that assertion does not result in your expectation, the test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions. A single failed assertion means that any subsequent assertions in a test will not execute and thus you won't know if those assertions indicate further problems in your code.

Need an assertion you don't see here? [Roll your own ...|Custom Assertions]

Without further delay, our players, The Assertions:


h3. assertTrue(boolean condition \[,String message\])

assertTrue is one of the two "bread and butter" assertions in any testing framework. The philosophy is simple: you assert something to be true; if it's not, the test fails

{code:title=assertTrue()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertTrue( StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}
assertTrue has an opposite, assertFalse:

h3. assertFalse(boolean condition \[, String message\])\*

{code:title=assertFalse}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertFalse( StructIsEmpty(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>

{code}
h3. assert(boolean condition \[,String message\])

assert is semantically equivalent to assertTrue, providing a shorter form :

{code:title=assert()}<cffunction name="testAssert">
	<cfset assert( 1 eq 1,  "Testing a true expression")>
	<cfset assert( not 1 eq 2,  "Testing negated expression")>
</cffunction>
{code}

h3. assertEquals*(any expected, any actual \[, String message\])

assertEquals is the other core assertion. Here, you're asserting that some result equals some expected result. This could be two numbers, two strings, two structs, whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals to compare any type of data.

{code:title=assertEquals()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertEquals(1, StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertEquals(0, StructCount(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}
h2. Comparing Arrays, Queries, and Structures

MXUnit will do a deep compare for arrays, queries, and structures. It is *not* fail-fast, meaning that an assertEquals( struct1, struct2 ) will compare every key in the struct, including any nested structures or arrays, accumulating mismatches. Once every key is visited, the existence of mismatches will signal an assertion failure. Array, Query, and Struct comparisons will add a Structure result into the debug output if the assertion fails, and you can view the full set of differences from there.

In addition, when using the Eclipse plugin, you can toggle the "Compare Dialog" to pop up Eclipse's comparison tool, which enables you to step through all the differences.

Here's an example
!CompareDialog.PNG|thumbnail!

h3. fail*(String message)

fail() is used to actively fail a test. It's useful when you're stubbing a test and you want to ensure it fails, like so:

{code:title=fail()}<cffunction name="addPrivilegeShouldHaveNoEffectIfPrivilegeExists">
 	<cfset fail("test not yet implemented")>
</cffunction>
{code}

It's also useful when you're testing an "error path", like so:

{code:title=fail() to test Error Paths}<cffunction name="addPrivilegesWithPunctuationShouldThrowError">
	<cfset var obj = createObject("component","myObject")>
	<cftry>
		<cfset obj.addPrivilege("Edit.User")>
		<cfset fail("Should not get here. Function under test should've thrown an error")>
	<cfcatch type="mxunit.exception.AssertionFailedError">
		<cfrethrow>
	</cfcatch>
	<cfcatch type="any"><!--- expect to get here ---></cfcatch>
	</cftry>
</cffunction>
{code}
h3. failNotEquals*(any value, any value2  \[,String message\])

Used to fail when two values do not equal. This doesn't perform any assertion... it's simply a convenience method for providing a specific type of failure message

{code:title=failNotEquals()}<cffunction name="demoFailNotEquals">
 	<cfset failNotEquals(myObject1,myOtherObject, "These should not have the same value")>
</cffunction>
{code}
h3. assertSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail for arrays.
{code:title=assertSame()}<cffunction name="initShouldReturnSelf">
	<cfset var obj = createObject("component","myObject")>
	<cfset assertSame(obj,obj.init(), "These should be the same thang since init should return 'this'")>
</cffunction>
{code}
h3. assertNotSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass for arrays.

{code:title=assertNotSame()}<cffunction name="newInstanceShouldNotReturnSelf">
	<cfset var obj = createObject("component","myObjectFactory")>
	<cfset assertNotSame(obj,obj.newInstance(), "These should not be the same thang since newInstance should return a new instance from the factory")>
</cffunction>
{code}
h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion.Note, that these are quite simple, can be easily implemented using the base assertions above, but are provided for convenience.

*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml located in /mxunit/framework/ directory. Simply remove or comment out these line:

{code:title=assertionExtension config-extension in mxunit-config.xml}	<config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true" override="false" />
	<config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false" />
	<config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false" />
{code}
h3. assertXPath*(String xpath, any data, \[String text\], \[String message\])

Searches data using xpath. If text is specified, it tries to match the exact text to  the xpath expression. Otherwise ,it returns true if any nodes are found that match the xpath expression. Note that, unlike most assertions, assertXPath returns an xml dom representation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this assertion returns true if any elements of the xpath expression are found. Not required. Defaults to ""
\[string message\]: The message to display when this assertion fails Not required. Defaults to The XPath expression, #arguments.xpath#, did not match the data.

{code:title=assertXPath()}<cffunction name="testFindGoogleInTitle">
	<cfscript>
	nodes = assertXpath('/html/head/title', "http://google.com", "Google");
	debug(nodes);
	nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
	nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
	</cfscript>
</cffunction>
{code}
The above parses the results from urls and strings and searches the parsed results for the XPath expression.
Try it. Really, it works\!

h3. assertIsTypeOf*(component obj, String type)

Determines if obj is of type. type needs to be fully qualified.
{code:title=assertIsTypeOf()}<cffunction name="demoAssertIsTypeOf">
  <cfset assertIsTypeOf(obj,"my.type.Of.Object")>
</cffunction>
{code}
h3. assertIsXMLDoc*(any xml \[, String message\])

Determines if xml is a valid XML DOM object.
{code:title=assertIsXMLDoc()}<cffunction name="demoAssertIsXMLDoc">
  <cfset assertIsXMLDoc(xml)>
</cffunction>
{code}
h3. assertIsArray*(any obj1)

Determines if the obj1 is a valid array.
{code:title=assertIsArray()}<cffunction name="demoAssertIsArray">
  <cfset assertIsArray(myObject1)>
</cffunction>
{code}
h3. assertIsDefined*(any obj1)

Determines if the obj1 has been defined in the available scope.
{code:title=assertIsDefined()}<cffunction name="demoAssertIsDefined">
  <cfset assertIsDefined("myObject1")>
</cffunction>
{code}
h3. assertIsEmpty*(any obj1)

Determines if the obj1 is a 0 length string or NULL equivalent.
{code:title=assertIsEmpty()}<cffunction name="demoAssertIsEmpty">
  <cfset assertIsEmpty(myObject1)>
</cffunction>
{code}
h3. assertIsEmptyArray*(any obj1,\[String message\])

Determines if the obj1 is an array with no elements.
{code:title=assertIsEmptyArray()}<cffunction name="demoAssertIsEmptyArray">
  <cfset assertIsEmptyArray(myObject1)>
</cffunction>
{code}
h3. assertIsEmptyQuery*(any obj1,\[String message\])

Determines if the obj1 is a query with no rows.
{code:title=assertIsEmptyQuery()}<cffunction name="demoAssertIsEmptyQuery">
  <cfset assertIsEmptyQuery(myObject1)>
</cffunction>
{code}
h3. assertIsEmptyStruct*(any obj1,\[String message\])

Determines if the obj1 is a struct with no keys or values.
{code:title=assertIsEmptyStruct()}<cffunction name="demoAssertIsEmptyStruct">
  <cfset assertIsEmptyStruct(myObject1)>
</cffunction>
{code}
h3. assertIsQuery*(any q)

Determines if q is a valid ColdFusion query.
{code:title=assertIsQuery()}<cffunction name="demoAssertIsQuery">
  <cfset assertIsQuery(q)>
</cffunction>
{code}
h3. assertIsStruct*(any obj)

Determines if obj is a valid ColdFusion structure.
{code:title=assertIsStruct()}<cffunction name="demoAssertIsStruct">
  <cfset assertIsStruct(obj)>
</cffunction>
{code}
----
Need more? [Build your own ...|Custom Assertions]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751505</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784218</id>
    <property name="body"><![CDATA[This document outlines the core of unit testing, i.e. Assertions. Assertions are simple: You assert something, and if that assertion does not result in your expectation, the test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions. A single failed assertion means that any subsequent assertions in a test will not execute and thus you won't know if those assertions indicate further problems in your code.

Need an assertion you don't see here? [Roll your own ...|Custom Assertions]

Without further delay, our players, The Assertions:


h3. assertTrue(boolean condition \[,String message\])

assertTrue is one of the two "bread and butter" assertions in any testing framework. The philosophy is simple: you assert something to be true; if it's not, the test fails

{code:title=assertTrue()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertTrue( StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

assertTrue has an opposite, assertFalse:

h3. assertFalse(boolean condition \[, String message\])\*

{code:title=assertFalse}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertFalse( StructIsEmpty(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>

{code}

h3. assert(boolean condition \[,String message\])

assert is semantically equivalent to assertTrue, providing a shorter form :

{code:title=assert()}<cffunction name="testAssert">
	<cfset assert( 1 eq 1,  "Testing a true expression")>
	<cfset assert( not 1 eq 2,  "Testing negated expression")>
</cffunction>
{code}


h3. assertEquals*(any expected, any actual \[, String message\])

assertEquals is the other core assertion. Here, you're asserting that some result equals some expected result. This could be two numbers, two strings, two structs, whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals to compare any type of data.

{code:title=assertEquals()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertEquals(1, StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertEquals(0, StructCount(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

h2. Comparing Arrays, Queries, and Structures

MXUnit will do a deep compare for arrays, queries, and structures. It is *not* fail-fast, meaning that an assertEquals( struct1, struct2 ) will compare every key in the struct, including any nested structures or arrays, accumulating mismatches. Once every key is visited, the existence of mismatches will signal an assertion failure. Array, Query, and Struct comparisons will add a Structure result into the debug output if the assertion fails, and you can view the full set of differences from there.  

In addition, when using the Eclipse plugin, you can toggle the "Compare Dialog" to pop up Eclipse's comparison tool, which enables you to step through all the differences.

h3. fail*(String message)

fail() is used to actively fail a test. It's useful when you're stubbing a test and you want to ensure it fails, like so:

{code:title=fail()}<cffunction name="addPrivilegeShouldHaveNoEffectIfPrivilegeExists">
 	<cfset fail("test not yet implemented")>
</cffunction>
{code}


It's also useful when you're testing an "error path", like so:

{code:title=fail() to test Error Paths}<cffunction name="addPrivilegesWithPunctuationShouldThrowError">
	<cfset var obj = createObject("component","myObject")>
	<cftry>
		<cfset obj.addPrivilege("Edit.User")>
		<cfset fail("Should not get here. Function under test should've thrown an error")>
	<cfcatch type="mxunit.exception.AssertionFailedError">
		<cfrethrow>
	</cfcatch>
	<cfcatch type="any"><!--- expect to get here ---></cfcatch>
	</cftry>
</cffunction>
{code}

h3. failNotEquals*(any value, any value2  \[,String message\])

Used to fail when two values do not equal. This doesn't perform any assertion... it's simply a convenience method for providing a specific type of failure message

{code:title=failNotEquals()}<cffunction name="demoFailNotEquals">
 	<cfset failNotEquals(myObject1,myOtherObject, "These should not have the same value")>
</cffunction>
{code}

h3. assertSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail for arrays.
{code:title=assertSame()}<cffunction name="initShouldReturnSelf">
	<cfset var obj = createObject("component","myObject")>
	<cfset assertSame(obj,obj.init(), "These should be the same thang since init should return 'this'")>
</cffunction>
{code}

h3. assertNotSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass for arrays.

{code:title=assertNotSame()}<cffunction name="newInstanceShouldNotReturnSelf">
	<cfset var obj = createObject("component","myObjectFactory")>
	<cfset assertNotSame(obj,obj.newInstance(), "These should not be the same thang since newInstance should return a new instance from the factory")>
</cffunction>
{code}

h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion.Note, that these are quite simple, can be easily implemented using the base assertions above, but are provided for convenience.

*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml located in /mxunit/framework/ directory. Simply remove or comment out these line:

{code:title=assertionExtension config-extension in mxunit-config.xml}	<config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true" override="false" />
	<config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false" />
	<config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false" />
{code}

h3. assertXPath*(String xpath, any data, \[String text\], \[String message\])

Searches data using xpath. If text is specified, it tries to match the exact text to  the xpath expression. Otherwise ,it returns true if any nodes are found that match the xpath expression. Note that, unlike most assertions, assertXPath returns an xml dom representation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this assertion returns true if any elements of the xpath expression are found. Not required. Defaults to ""
\[string message\]: The message to display when this assertion fails Not required. Defaults to The XPath expression, #arguments.xpath#, did not match the data.

{code:title=assertXPath()}
<cffunction name="testFindGoogleInTitle">
	<cfscript>
	nodes = assertXpath('/html/head/title', "http://google.com", "Google");
	debug(nodes);
	nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
	nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
	</cfscript>
</cffunction>
{code}

The above parses the results from urls and strings and searches the parsed results for the XPath expression.
Try it. Really, it works\!

h3. assertIsTypeOf*(component obj, String type)

Determines if obj is of type. type needs to be fully qualified.
{code:title=assertIsTypeOf()}
<cffunction name="demoAssertIsTypeOf">
  <cfset assertIsTypeOf(obj,"my.type.Of.Object")>
</cffunction>
{code}

h3. assertIsXMLDoc*(any xml \[, String message\])

Determines if xml is a valid XML DOM object.
{code:title=assertIsXMLDoc()}
<cffunction name="demoAssertIsXMLDoc">
  <cfset assertIsXMLDoc(xml)>
</cffunction>
{code}

h3. assertIsArray*(any obj1)

Determines if the obj1 is a valid array.
{code:title=assertIsArray()}
<cffunction name="demoAssertIsArray">
  <cfset assertIsArray(myObject1)>
</cffunction>
{code}

h3. assertIsDefined*(any obj1)

Determines if the obj1 has been defined in the available scope.
{code:title=assertIsDefined()}
<cffunction name="demoAssertIsDefined">
  <cfset assertIsDefined("myObject1")>
</cffunction>
{code}

h3. assertIsEmpty*(any obj1)

Determines if the obj1 is a 0 length string or NULL equivalent.
{code:title=assertIsEmpty()}
<cffunction name="demoAssertIsEmpty">
  <cfset assertIsEmpty(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyArray*(any obj1,\[String message\])

Determines if the obj1 is an array with no elements.
{code:title=assertIsEmptyArray()}
<cffunction name="demoAssertIsEmptyArray">
  <cfset assertIsEmptyArray(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyQuery*(any obj1,\[String message\])

Determines if the obj1 is a query with no rows.
{code:title=assertIsEmptyQuery()}
<cffunction name="demoAssertIsEmptyQuery">
  <cfset assertIsEmptyQuery(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyStruct*(any obj1,\[String message\])

Determines if the obj1 is a struct with no keys or values.
{code:title=assertIsEmptyStruct()}
<cffunction name="demoAssertIsEmptyStruct">
  <cfset assertIsEmptyStruct(myObject1)>
</cffunction>
{code}

h3. assertIsQuery*(any q)

Determines if q is a valid ColdFusion query.
{code:title=assertIsQuery()}
<cffunction name="demoAssertIsQuery">
  <cfset assertIsQuery(q)>
</cffunction>
{code}

h3. assertIsStruct*(any obj)

Determines if obj is a valid ColdFusion structure.
{code:title=assertIsStruct()}
<cffunction name="demoAssertIsStruct">
  <cfset assertIsStruct(obj)>
</cffunction>
{code}

----
Need more? [Build your own ...|Custom Assertions]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751504</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784221</id>
    <property name="body"><![CDATA[{toc}
This document outlines the core of unit testing, i.e. Assertions. Assertions are simple: You assert something, and if that assertion does not result in your expectation, the test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions. A single failed assertion means that any subsequent assertions in a test will not execute and thus you won't know if those assertions indicate further problems in your code.

Need an assertion you don't see here? [Roll your own ...|Custom Assertions]

Without further delay, our players, The Assertions:


h3. assertTrue(boolean condition \[,String message\])

assertTrue is one of the two "bread and butter" assertions in any testing framework. The philosophy is simple: you assert something to be true; if it's not, the test fails

{code:title=assertTrue()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertTrue( StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}
assertTrue has an opposite, assertFalse:

h3. assertFalse(boolean condition \[, String message\])\*

{code:title=assertFalse}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertFalse( StructIsEmpty(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>

{code}

h3. assert(boolean condition \[,String message\])

assert is semantically equivalent to assertTrue, providing a shorter form :

{code:title=assert()}<cffunction name="testAssert">
	<cfset assert( 1 eq 1,  "Testing a true expression")>
	<cfset assert( not 1 eq 2,  "Testing negated expression")>
</cffunction>
{code}

h3. assertEquals*(any expected, any actual \[, String message\])

assertEquals is the other core assertion. Here, you're asserting that some result equals some expected result. This could be two numbers, two strings, two structs, whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals to compare any type of data.

{code:title=assertEquals()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertEquals(1, StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertEquals(0, StructCount(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

h2. Comparing Arrays, Queries, and Structures

MXUnit will do a deep compare for arrays, queries, and structures. It is *not* fail-fast, meaning that an assertEquals( struct1, struct2 ) will compare every key in the struct, including any nested structures or arrays, accumulating mismatches. Once every key is visited, the existence of mismatches will signal an assertion failure. Array, Query, and Struct comparisons will add a Structure result into the debug output if the assertion fails, and you can view the full set of differences from there.

In addition, when using the Eclipse plugin, you can toggle the "Compare Dialog" to pop up Eclipse's comparison tool, which enables you to step through all the differences.

Here's an example
!CompareDialog.PNG|thumbnail!

h3. fail*(String message)

fail() is used to actively fail a test. It's useful when you're stubbing a test and you want to ensure it fails, like so:

{code:title=fail()}<cffunction name="addPrivilegeShouldHaveNoEffectIfPrivilegeExists">
 	<cfset fail("test not yet implemented")>
</cffunction>
{code}

It's also useful when you're testing an "error path", like so:

{code:title=fail() to test Error Paths}<cffunction name="addPrivilegesWithPunctuationShouldThrowError">
	<cfset var obj = createObject("component","myObject")>
	<cftry>
		<cfset obj.addPrivilege("Edit.User")>
		<cfset fail("Should not get here. Function under test should've thrown an error")>
	<cfcatch type="mxunit.exception.AssertionFailedError">
		<cfrethrow>
	</cfcatch>
	<cfcatch type="any"><!--- expect to get here ---></cfcatch>
	</cftry>
</cffunction>
{code}

h3. failNotEquals*(any value, any value2  \[,String message\])

Used to fail when two values do not equal. This doesn't perform any assertion... it's simply a convenience method for providing a specific type of failure message

{code:title=failNotEquals()}<cffunction name="demoFailNotEquals">
 	<cfset failNotEquals(myObject1,myOtherObject, "These should not have the same value")>
</cffunction>
{code}

h3. assertSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail for arrays.
{code:title=assertSame()}<cffunction name="initShouldReturnSelf">
	<cfset var obj = createObject("component","myObject")>
	<cfset assertSame(obj,obj.init(), "These should be the same thang since init should return 'this'")>
</cffunction>
{code}

h3. assertNotSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass for arrays.

{code:title=assertNotSame()}<cffunction name="newInstanceShouldNotReturnSelf">
	<cfset var obj = createObject("component","myObjectFactory")>
	<cfset assertNotSame(obj,obj.newInstance(), "These should not be the same thang since newInstance should return a new instance from the factory")>
</cffunction>
{code}

h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion.Note, that these are quite simple, can be easily implemented using the base assertions above, but are provided for convenience.

*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml located in /mxunit/framework/ directory. Simply remove or comment out these line:

{code:title=assertionExtension config-extension in mxunit-config.xml}	<config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true" override="false" />
	<config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false" />
	<config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false" />
{code}

h3. assertXPath*(String xpath, any data, \[String text\], \[String message\])

Searches data using xpath. If text is specified, it tries to match the exact text to  the xpath expression. Otherwise ,it returns true if any nodes are found that match the xpath expression. Note that, unlike most assertions, assertXPath returns an xml dom representation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this assertion returns true if any elements of the xpath expression are found. Not required. Defaults to ""
\[string message\]: The message to display when this assertion fails Not required. Defaults to The XPath expression, #arguments.xpath#, did not match the data.

{code:title=assertXPath()}<cffunction name="testFindGoogleInTitle">
	<cfscript>
	nodes = assertXpath('/html/head/title', "http://google.com", "Google");
	debug(nodes);
	nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
	nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
	</cfscript>
</cffunction>
{code}
The above parses the results from urls and strings and searches the parsed results for the XPath expression.
Try it. Really, it works\!

h3. assertIsTypeOf*(component obj, String type)

Determines if obj is of type. type needs to be fully qualified.
{code:title=assertIsTypeOf()}<cffunction name="demoAssertIsTypeOf">
  <cfset assertIsTypeOf(obj,"my.type.Of.Object")>
</cffunction>
{code}

h3. assertIsXMLDoc*(any xml \[, String message\])

Determines if xml is a valid XML DOM object.
{code:title=assertIsXMLDoc()}<cffunction name="demoAssertIsXMLDoc">
  <cfset assertIsXMLDoc(xml)>
</cffunction>
{code}

h3. assertIsArray*(any obj1)

Determines if the obj1 is a valid array.
{code:title=assertIsArray()}<cffunction name="demoAssertIsArray">
  <cfset assertIsArray(myObject1)>
</cffunction>
{code}

h3. assertIsDefined*(any obj1)

Determines if the obj1 has been defined in the available scope.
{code:title=assertIsDefined()}<cffunction name="demoAssertIsDefined">
  <cfset assertIsDefined("myObject1")>
</cffunction>
{code}

h3. assertIsEmpty*(any obj1)

Determines if the obj1 is a 0 length string or NULL equivalent.
{code:title=assertIsEmpty()}<cffunction name="demoAssertIsEmpty">
  <cfset assertIsEmpty(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyArray*(any obj1,\[String message\])

Determines if the obj1 is an array with no elements.
{code:title=assertIsEmptyArray()}<cffunction name="demoAssertIsEmptyArray">
  <cfset assertIsEmptyArray(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyQuery*(any obj1,\[String message\])

Determines if the obj1 is a query with no rows.
{code:title=assertIsEmptyQuery()}<cffunction name="demoAssertIsEmptyQuery">
  <cfset assertIsEmptyQuery(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyStruct*(any obj1,\[String message\])

Determines if the obj1 is a struct with no keys or values.
{code:title=assertIsEmptyStruct()}<cffunction name="demoAssertIsEmptyStruct">
  <cfset assertIsEmptyStruct(myObject1)>
</cffunction>
{code}

h3. assertIsQuery*(any q)

Determines if q is a valid ColdFusion query.
{code:title=assertIsQuery()}<cffunction name="demoAssertIsQuery">
  <cfset assertIsQuery(q)>
</cffunction>
{code}

h3. assertIsStruct*(any obj)

Determines if obj is a valid ColdFusion structure.
{code:title=assertIsStruct()}<cffunction name="demoAssertIsStruct">
  <cfset assertIsStruct(obj)>
</cffunction>
{code}
----
Need more? [Build your own ...|Custom Assertions]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751507</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784125</id>
    <property name="body"><![CDATA[[titleist 910d2|http://www.golfzonediscount.com/titleist/titleist-driver/titleist-910d2-driver]{color:#000000}&nbsp;{color}

[titleist 910D3|http://www.golfzonediscount.com/titleist/titleist-driver/titleist-910d3-driver]{color:#000000}&nbsp;{color}

[Ping G20|http://www.golfzonediscount.com/ping/ping-driver/ping-g20-driver]{color:#000000}&nbsp;{color}

[Taylormade r11|http://www.golfmartdiscount.com/taylormade-r11-driver-p-239.html]{color:#000000}&nbsp;{color}

[titleist 910d2|http://www.golfclubsoff.com/titleist-910d2-driver-p-286.html]{color:#000000}&nbsp;{color}

[titleist 910D3|http://www.golfclubsoff.com/titleist-910d3-driver-p-230.html]{color:#000000}&nbsp;{color}

[Ping G20|http://www.golfclubsoff.com/ping-g20-driver-p-275.html]{color:#000000}&nbsp;{color}

[Taylormade r11|http://www.golfclubsoff.com/taylormade-r11-driver-p-235.html]{color:#000000}&nbsp;{color}

If you see her happy, they will be happy, because she is the woman he loved Do not consider myself a very casual look at the relationship between men and women, with men who go to bed soon met the moment, she did love them, but her love is too short]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751404</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784096</id>
    <property name="body"><![CDATA[<A href="http://a123456777.mylivepage.com/blog/index/">http://a123456777.mylivepage.com/blog/index/</A><A href="http://www.thoughts.com/a123456777a">http://www.thoughts.com/a123456777a</A><A href="http://www.mywebprofile.com/a123456777/blog/">http://www.mywebprofile.com/a123456777/blog/</A><A href="http://a123456777.over-blog.com/">http://a123456777.over-blog.com/</A><A href="http://www.darksiders.net/user/a123456777/blogs">http://www.darksiders.net/user/a123456777/blogs</A><A href="http://www.blurty.com/users/a123456777/">http://www.blurty.com/users/a123456777/</A><A href="http://a123456777.fotopages.com/">http://a123456777.fotopages.com/</A><A href="http://www.graphicdesigncommunity.com/blogs.php?action=show_member_blog&amp;ownerID=85833">http://www.graphicdesigncommunity.com/blogs.php?action=show_member_blog&amp;ownerID=85833</A><A href="http://gvrl.com/profile.asp?memberid=8204">http://gvrl.com/profile.asp?memberid=8204</A><A href="http://www.equestrianblogging.com/blogs/a123456777">http://www.equestrianblogging.com/blogs/a123456777</A><A href="http://a123456777.createblog.com/blog/">http://a123456777.createblog.com/blog/</A><A href="http://a123456777.inube.com/">http://a123456777.inube.com/</A><A href="http://chouniu.blogtrue.com/">http://chouniu.blogtrue.com/</A><A href="http://wu060231.blog.163.com/">http://wu060231.blog.163.com/</A><A href="http://hi.baidu.com/ab123456777a/blog">http://hi.baidu.com/ab123456777a/blog</A><A href="http://blog.sina.com.cn/u/2350370677">http://blog.sina.com.cn/u/2350370677</A><A href="http://17847589.blog.hexun.com/">http://17847589.blog.hexun.com/</A><A href="http://blog.sohu.com/people/!d3UwNjAyMzFAaG90bWFpbC5jb20">http://blog.sohu.com/people/!d3UwNjAyMzFAaG90bWFpbC5jb20</A>=<A href="http://www.wu060231.19dog.com/blog/">http://www.wu060231.19dog.com/blog/</A><A href="http://www.freedatingsiteahead.co.uk/blogs.php?action=show_member_blog&amp;ownerID=6264">http://www.freedatingsiteahead.co.uk/blogs.php?action=show_member_blog&amp;ownerID=6264</A><A href="http://a123456777.insanejournal.com/">http://a123456777.insanejournal.com/</A><A href="http://phlog.net/wuxi">http://phlog.net/wuxi</A><A href="http://www.blogstoday.co.uk/bloghome.aspx?username=a123456777">http://www.blogstoday.co.uk/bloghome.aspx?username=a123456777</A><A href="http://www.holatu.com/user/a123456777/blogs">http://www.holatu.com/user/a123456777/blogs</A><A href="http://www.blogusers.com/sme_blog.php?u=a123456777">http://www.blogusers.com/sme_blog.php?u=a123456777</A><A href="http://www.art-ba-ba.com/blog/U/default.asp?UID=54175">http://www.art-ba-ba.com/blog/U/default.asp?UID=54175</A><A href="http://www.indyarocks.com/blogs/blog_visiterview_main.php?id=360777#blog360777">http://www.indyarocks.com/blogs/blog_visiterview_main.php?id=360777#blog360777</A><A href="http://wu060231.choblogs.com/">http://wu060231.choblogs.com/</A><A href="http://wu060231.eklablog.com/">http://wu060231.eklablog.com/</A><A href="http://www.adultblogs.com/users/a123456777/">http://www.adultblogs.com/users/a123456777/</A><A href="http://a123456777.tumblr.com/">http://a123456777.tumblr.com/</A><A href="http://a123456777.livejournal.com/">http://a123456777.livejournal.com/</A><A href="http://wu060231.blogspot.es/admin/">http://wu060231.blogspot.es/admin/</A><A href="http://www.kaka365.com/blog/blog.php?uid=6632">http://www.kaka365.com/blog/blog.php?uid=6632</A><A href="http://american-idol-stars.com/blog/a123456777">http://american-idol-stars.com/blog/a123456777</A><A href="http://wu060231.blogree.com/?tpl">http://wu060231.blogree.com/?tpl</A>=<A href="http://a123456.bloggd.org/">http://a123456.bloggd.org/</A> <A href="http://blog.cnfol.com/wu060231">http://blog.cnfol.com/wu060231</A><A href="http://www.sanalkahve.com/user/a123456777/blogs">http://www.sanalkahve.com/user/a123456777/blogs</A><A href="http://wu060231.podbean.com/">http://wu060231.podbean.com/</A><A href="http://vidi.co.il/profile_blogs/a123456777/">http://vidi.co.il/profile_blogs/a123456777/</A><A href="http://a123456777.nipox.com/">http://a123456777.nipox.com/</A><A href="http://wu060231.blog.com/">http://wu060231.blog.com/</A><A href="http://a123456777.bloges.org/">http://a123456777.bloges.org/</A><A href="http://users.section101.com/?page=user_blog&amp;room=a123456777">http://users.section101.com/?page=user_blog&amp;room=a123456777</A><A href="http://woodstockuniverse.com/?page=user_blog&amp;room=a123456777">http://woodstockuniverse.com/?page=user_blog&amp;room=a123456777</A><A href="http://fr.weblog.26l.com/weblog.2108606.html">http://fr.weblog.26l.com/weblog.2108606.html</A><A href="http://lazzeo.com/a123456777/blog/">http://lazzeo.com/a123456777/blog/</A><A href="http://blogs.hoycinema.com/a123456777/">http://blogs.hoycinema.com/a123456777/</A><A href="http://yaplog.jp/wu060231/">http://yaplog.jp/wu060231/</A><A href="http://www.newar.com.np/blog.php?user=a123456777">http://www.newar.com.np/blog.php?user=a123456777</A><A href="http://www.bambinidisatana.com/network/blogs/liststories/user_a123456777">http://www.bambinidisatana.com/network/blogs/liststories/user_a123456777</A><A href="http://hurones.net/blog/5116">http://hurones.net/blog/5116</A><A href="http://obshestvo.ru/blog/2107">http://obshestvo.ru/blog/2107</A><A href="http://www.filipinopeople.com/user/a123456777/blogs">http://www.filipinopeople.com/user/a123456777/blogs</A><A href="http://imfriends.net/user/a123456777/blogs">http://imfriends.net/user/a123456777/blogs</A><A href="http://www.muslimduniya.com/member/view_blog.php?profile_id=1684">http://www.muslimduniya.com/member/view_blog.php?profile_id=1684</A><A href="http://www.kerchoonz.com/user/a123456777/blogs">http://www.kerchoonz.com/user/a123456777/blogs</A><A href="http://polovinka.bg/member/view_blog.php?profile_id=245759">http://polovinka.bg/member/view_blog.php?profile_id=245759</A><A href="http://wrapcandy.com/friends/a123456777/">http://wrapcandy.com/friends/a123456777/</A><A href="http://www.carandcycleclub.com/index.php?do=/public/user/blogs/name_a123456777/">http://www.carandcycleclub.com/index.php?do=/public/user/blogs/name_a123456777/</A><A href="http://freckbook.com/blogs/posts/a123456777">http://freckbook.com/blogs/posts/a123456777</A><A href="http://www.spanishmusic.biz/user/a123456777/blogs">http://www.spanishmusic.biz/user/a123456777/blogs</A><A href="http://www.creativesocial.net/pg/blog/owner/a123456777">http://www.creativesocial.net/pg/blog/owner/a123456777</A><A href="http://www.exfatpeople.com/user/wu060231/blogs">http://www.exfatpeople.com/user/wu060231/blogs</A><A href="http://www.lovemuhammad.com/pg/blog/wu060231">http://www.lovemuhammad.com/pg/blog/wu060231</A><A href="http://www.lovemuhammad.com/pg/blog/wu060231">http://www.lovemuhammad.com/pg/blog/wu060231</A><A href="http://my.carttube.com/blogs/posts/a123456777">http://my.carttube.com/blogs/posts/a123456777</A><A href="http://www.mihirafamily.com/wuxi">http://www.mihirafamily.com/wuxi</A><A href="http://www.myspate.com/blogs_view.php?id=4199">http://www.myspate.com/blogs_view.php?id=4199</A><A href="http://osi.parsons.edu/archive/osi2007/?q=blog/11710">http://osi.parsons.edu/archive/osi2007/?q=blog/11710</A><A href="http://saswingers.org/blog/7525">http://saswingers.org/blog/7525</A><A href="http://www.lw-works.com/blog/32892">http://www.lw-works.com/blog/32892</A><A href="http://www.mygatheringspace.com/blogs.php?action=show_member_blog&amp;ownerID=4188">http://www.mygatheringspace.com/blogs.php?action=show_member_blog&amp;ownerID=4188</A><A href="http://social.wowjen.com/a123456777/blog/">http://social.wowjen.com/a123456777/blog/</A><A href="http://gritosverticais.socialgo.com/members/profile/862/blog">http://gritosverticais.socialgo.com/members/profile/862/blog</A><A href="http://www.kolspot.com/user/a123456777/blogs">http://www.kolspot.com/user/a123456777/blogs</A><A href="http://www.cnfblog.com/blogs.php?blog_id=11702">http://www.cnfblog.com/blogs.php?blog_id=11702</A><A href="http://blog.jinti.com/wu060231">http://blog.jinti.com/wu060231</A><A href="http://www.writernia.com/blog/13876">http://www.writernia.com/blog/13876</A><A href="http://blogsdelagente.com/wuxi/">http://blogsdelagente.com/wuxi/</A><A href="http://a1234546777.un165.com/">http://a1234546777.un165.com/</A><A href="http://a123456777.putblog.com/">http://a123456777.putblog.com/</A><A href="http://www.blogouf.com/a123456777">http://www.blogouf.com/a123456777</A><A href="http://www.freeblognetwork.com/a123456777/">http://www.freeblognetwork.com/a123456777/</A><A href="http://www.blog2net.com/a123456777">http://www.blog2net.com/a123456777</A><A href="http://solobuscame.com/social/blog.php?user=a123456777">http://solobuscame.com/social/blog.php?user=a123456777</A><A href="http://bbs.hkange.com/boke.asp?wuxi.index.html">http://bbs.hkange.com/boke.asp?wuxi.index.html</A><A href="http://www.tudou.com/home/diary_u98907984c00m00p1.html">http://www.tudou.com/home/diary_u98907984c00m00p1.html</A><A href="http://www.cretaceousworld.com/geobooks/My.asp?User_ID=4380">http://www.cretaceousworld.com/geobooks/My.asp?User_ID=4380</A><A href="http://a123456777.yesblog.ru/">http://a123456777.yesblog.ru/</A>
<A href="http://www.xxllove.net/blogs_view.php?id=103622">http://www.xxllove.net/blogs_view.php?id=103622</A><A href="http://www.randki.gazeta.ie/blogs_view.php?id=5142">http://www.randki.gazeta.ie/blogs_view.php?id=5142</A><A href="http://602980500.podomatic.com/">http://602980500.podomatic.com/</A><A href="http://www.shyfda.gov.cn/notes/blog.asp?username=a123456777">http://www.shyfda.gov.cn/notes/blog.asp?username=a123456777</A>	
<A href="http://shejishi.e-jjj.com/Web/OwnerIndex/378694/">http://shejishi.e-jjj.com/Web/OwnerIndex/378694/</A><A href="http://blog.xdzjw.com/Log/LogList.aspx?UserID=4674&ClassID=4736">http://blog.xdzjw.com/Log/LogList.aspx?UserID=4674&ClassID=4736</A><A href="http://home.km-airnet.net/space-79607-do-blog-view-me.html">http://home.km-airnet.net/space-79607-do-blog-view-me.html</A><A href="http://blog.19lou.com/25193057/">http://blog.19lou.com/25193057/</A><A href="http://baike.hnce.com.cn/index.php?user-space-150524.htm">http://baike.hnce.com.cn/index.php?user-space-150524.htm</A>
]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751370</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784155</id>
    <property name="body"
      ><![CDATA[are ranging from thousands of dollars. We can  find it worth at all considering that supplies utilized is truly  exceptional and also the finish is remarkable. But what [gucci handbags|http://www.gucci-replica-bags.co.uk/] is the best option for those. Whilst they appear similar to the unique  Rolex watch however in relation to costs they're a lot more inexpensive.  For thi [gucci replica|http://www.gucci-replica-bags.co.uk/] and in shops traditional effortlessly these days\!hhhhInexpensive and  simple to obtainRegardless of whether you possess an typical income or  perhaps a big [swiss replica watches|http://www.cheapsaleuk2.org.uk/] s. Additional particulars consist of the nude leather lining and  footbed, signature red leather sole, one.five inch double platform,  towering six inch self-co [louis vuitton replica|http://www.louisvuitton-bags.org.uk/] e most typical issues with replica wrist watches. Most are kept  collectively just with really affordable hooks. Following simply small  put on, the ac [lv handbags|http://www.louisvuitton-bags.org.uk/] of wrist watches very popular amongst women and men. Here are a few  factors which make these types of watches this is the greatest add-ons  for those: [breitling uk|http://www.breitling1replica.co.uk/] thin unique versions constantly. All of them keep exactly the same  design title 'LV'however with various design amounts. The actual amounts  is availab [replica watches|http://www.replicawatches0.co.uk/] erely have to type out issues having a small work and these who  consider the preliminary actions within the journey of work usually are  victorious. Wh [lv bags|http://www.louisvuitton-bags.org.uk/] 1 it is certain you will get the very best there's on the market if you  opt to purchase one of those slinky replica footwear. Along with best  manufactu [rolex replica|http://www.rolex-replica-uk.co.uk/] to spend larger amounts of cash. Additionally, to allow them to sign up  for the larger production requirements, the manufacturers associate [rolex replica|http://www.rolex-replica-uk.co.uk/] dark shoes.If a person ought to begin acquiring the dark shoes, may it  be the actual replicas from the custom things or even it may be from the  nearby style [swiss replica watches|http://www.cheapsaleuk2.org.uk/] his yr, February thirteen, Nadia obtained a letter in the louis vuitton  company's Paris workplace, by which they asked her to instantly quit  using photos [rolex replicas|http://www.rolex-replica-uk.co.uk/] deal watch for youths these days. If you're stressing concerning the  significant cost this arm watch demands, don't let yourself be disrupted  since [replica louis vuitton|http://www.louisvuitton-bags.org.uk/] pear such as the "real deal" but they are really constructed in a  different way in a reduced price. As well as here is a replica watch  solution.... [replica watches uk|http://www.replicawatches0.co.uk/] Becoming therefore pricey as well as virtually inaccessible for an  person with average skills, Cartier wrist watches have their own superb  alternatives in sever [gucci replica|http://www.gucci-replica-bags.co.uk/] Arrive as well as see the special moment associated with Baume &  Mercier replica watches and allow your globe be a fairy tale for other  people in order to jealous [replica watches|http://www.replicawatches0.co.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751437</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784157</id>
    <property name="body"
      ><![CDATA[are ranging from thousands of dollars. We can  find it worth at all considering that supplies utilized is truly  exceptional and also the finish is remarkable. But what [gucci handbags|http://www.gucci-replica-bags.co.uk/] is the best option for those. Whilst they appear similar to the unique  Rolex watch however in relation to costs they're a lot more inexpensive.  For thi [gucci replica|http://www.gucci-replica-bags.co.uk/] and in shops traditional effortlessly these days\!hhhhInexpensive and  simple to obtainRegardless of whether you possess an typical income or  perhaps a big [swiss replica watches|http://www.cheapsaleuk2.org.uk/] s. Additional particulars consist of the nude leather lining and  footbed, signature red leather sole, one.five inch double platform,  towering six inch self-co [louis vuitton replica|http://www.louisvuitton-bags.org.uk/] e most typical issues with replica wrist watches. Most are kept  collectively just with really affordable hooks. Following simply small  put on, the ac [lv handbags|http://www.louisvuitton-bags.org.uk/] of wrist watches very popular amongst women and men. Here are a few  factors which make these types of watches this is the greatest add-ons  for those: [breitling uk|http://www.breitling1replica.co.uk/] thin unique versions constantly. All of them keep exactly the same  design title 'LV'however with various design amounts. The actual amounts  is availab [replica watches|http://www.replicawatches0.co.uk/] erely have to type out issues having a small work and these who  consider the preliminary actions within the journey of work usually are  victorious. Wh [lv bags|http://www.louisvuitton-bags.org.uk/] 1 it is certain you will get the very best there's on the market if you  opt to purchase one of those slinky replica footwear. Along with best  manufactu [rolex replica|http://www.rolex-replica-uk.co.uk/] to spend larger amounts of cash. Additionally, to allow them to sign up  for the larger production requirements, the manufacturers associate [rolex replica|http://www.rolex-replica-uk.co.uk/] dark shoes.If a person ought to begin acquiring the dark shoes, may it  be the actual replicas from the custom things or even it may be from the  nearby style [swiss replica watches|http://www.cheapsaleuk2.org.uk/] his yr, February thirteen, Nadia obtained a letter in the louis vuitton  company's Paris workplace, by which they asked her to instantly quit  using photos [rolex replicas|http://www.rolex-replica-uk.co.uk/] deal watch for youths these days. If you're stressing concerning the  significant cost this arm watch demands, don't let yourself be disrupted  since [replica louis vuitton|http://www.louisvuitton-bags.org.uk/] pear such as the "real deal" but they are really constructed in a  different way in a reduced price. As well as here is a replica watch  solution.... [replica watches uk|http://www.replicawatches0.co.uk/] Becoming therefore pricey as well as virtually inaccessible for an  person with average skills, Cartier wrist watches have their own superb  alternatives in sever [gucci replica|http://www.gucci-replica-bags.co.uk/] Arrive as well as see the special moment associated with Baume &  Mercier replica watches and allow your globe be a fairy tale for other  people in order to jealous [replica watches|http://www.replicawatches0.co.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751439</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784156</id>
    <property name="body"
      ><![CDATA[are ranging from thousands of dollars. We can  find it worth at all considering that supplies utilized is truly  exceptional and also the finish is remarkable. But what [gucci handbags|http://www.gucci-replica-bags.co.uk/] is the best option for those. Whilst they appear similar to the unique  Rolex watch however in relation to costs they're a lot more inexpensive.  For thi [gucci replica|http://www.gucci-replica-bags.co.uk/] and in shops traditional effortlessly these days\!hhhhInexpensive and  simple to obtainRegardless of whether you possess an typical income or  perhaps a big [swiss replica watches|http://www.cheapsaleuk2.org.uk/] s. Additional particulars consist of the nude leather lining and  footbed, signature red leather sole, one.five inch double platform,  towering six inch self-co [louis vuitton replica|http://www.louisvuitton-bags.org.uk/] e most typical issues with replica wrist watches. Most are kept  collectively just with really affordable hooks. Following simply small  put on, the ac [lv handbags|http://www.louisvuitton-bags.org.uk/] of wrist watches very popular amongst women and men. Here are a few  factors which make these types of watches this is the greatest add-ons  for those: [breitling uk|http://www.breitling1replica.co.uk/] thin unique versions constantly. All of them keep exactly the same  design title 'LV'however with various design amounts. The actual amounts  is availab [replica watches|http://www.replicawatches0.co.uk/] erely have to type out issues having a small work and these who  consider the preliminary actions within the journey of work usually are  victorious. Wh [lv bags|http://www.louisvuitton-bags.org.uk/] 1 it is certain you will get the very best there's on the market if you  opt to purchase one of those slinky replica footwear. Along with best  manufactu [rolex replica|http://www.rolex-replica-uk.co.uk/] to spend larger amounts of cash. Additionally, to allow them to sign up  for the larger production requirements, the manufacturers associate [rolex replica|http://www.rolex-replica-uk.co.uk/] dark shoes.If a person ought to begin acquiring the dark shoes, may it  be the actual replicas from the custom things or even it may be from the  nearby style [swiss replica watches|http://www.cheapsaleuk2.org.uk/] his yr, February thirteen, Nadia obtained a letter in the louis vuitton  company's Paris workplace, by which they asked her to instantly quit  using photos [rolex replicas|http://www.rolex-replica-uk.co.uk/] deal watch for youths these days. If you're stressing concerning the  significant cost this arm watch demands, don't let yourself be disrupted  since [replica louis vuitton|http://www.louisvuitton-bags.org.uk/] pear such as the "real deal" but they are really constructed in a  different way in a reduced price. As well as here is a replica watch  solution.... [replica watches uk|http://www.replicawatches0.co.uk/] Becoming therefore pricey as well as virtually inaccessible for an  person with average skills, Cartier wrist watches have their own superb  alternatives in sever [gucci replica|http://www.gucci-replica-bags.co.uk/] Arrive as well as see the special moment associated with Baume &  Mercier replica watches and allow your globe be a fairy tale for other  people in order to jealous [replica watches|http://www.replicawatches0.co.uk/]]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751438</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784240</id>
    <property name="body"><![CDATA[Without you?I'd be a soul without a purpose.Without you?I'd be an emotion without a heart.I'm a

face without expression,A heart with no beat.Without you by my side,I'm just a flame without the

heat. Elle Kimberly Schmick <a href="[http://www.golfclubsoff.com/titleist-910d2-driver-p-286.html">titleist|http://www.golfclubsoff.com/titleist-910d2-driver-p-286.html">titleist] 910d2</a>
<a href="[http://www.golfclubsoff.com/titleist-910d3-driver-p-230.html">titleist|http://www.golfclubsoff.com/titleist-910d3-driver-p-230.html">titleist] 910D3</a>
<a href="[http://www.golfclubsoff.com/ping-g20-driver-p-275.html">Ping|http://www.golfclubsoff.com/ping-g20-driver-p-275.html">Ping] G20</a>
<a href="[http://www.golfclubsoff.com/taylormade-r11-driver-p-235.html">Taylormader11</a|http://www.golfclubsoff.com/taylormade-r11-driver-p-235.html">Taylormader11</a]>
<a href="[http://www.specialpricegolf.com/titleist/driver/titleist-910d2-driver">titleist|http://www.specialpricegolf.com/titleist/driver/titleist-910d2-driver">titleist] 910d2</a>
<a href="[http://www.specialpricegolf.com/titleist/driver/titleist-910d3-driver">titleist|http://www.specialpricegolf.com/titleist/driver/titleist-910d3-driver">titleist] 910D3</a>
<a href="[http://www.specialpricegolf.com/ping/driver/ping-g20-driver">Ping|http://www.specialpricegolf.com/ping/driver/ping-g20-driver">Ping] G20</a>
<a href="[http://www.specialpricegolf.com/taylormade-golf/driver">Taylormade|http://www.specialpricegolf.com/taylormade-golf/driver">Taylormade] Driver</a>
<a href="[http://www.discountracket.com/wilson-racket">Wilson|http://www.discountracket.com/wilson-racket">Wilson] Tennis Racket</a>
<a href="[http://www.discountracket.com/babolat">Babolat|http://www.discountracket.com/babolat">Babolat] Tennis Racket</a>
<a href="[http://www.discountracket.com/head">Head|http://www.discountracket.com/head">Head] Tennis Racket</a>
<a href="[http://www.discountracket.com/prince-racket">Prince|http://www.discountracket.com/prince-racket">Prince] Tennis Racket</a>
<a href="[http://www.discountracket.com/wilson-racket/wilson-blx-tennis-racquets">Wilson|http://www.discountracket.com/wilson-racket/wilson-blx-tennis-racquets">Wilson] Blx</a>
If you were a teardrop;In my eye,For fear of losing you,I would never cry.And if the golden

sun,Should cease to shine its light,Just one smile from you,Would make my whole world bright.

Hannah Jo Keen ]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751528</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784223</id>
    <property name="body"><![CDATA[{toc:maxLevel=2}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]

You can get the latest version of the Eclipse plugin by pointing at this update site: [http://mxunit.org/update]
{tip}
{section}

{column:width=50%}

h2. Framework \-\- 2.0.3 \-\- May 5, 2011



h3. Enhancements

* User-contributed "assertEqualsWithTolerance()" function which adds a tolerance parameter to equality assertions
* Updated samples/build.xml with hints for using with Jenkins
* Updated mxunit-ant.jar to log the entire html response to the console if the test run bombs (i.e. 500 error)

h2. Framework \-\- 2.0.2 \-\- November 19, 2010



h3. Enhancements

* added restoreMethod() for undoing method overwrites from injectMethod(). This is particularly useful when using ColdSpring-managed objects in your tests. Inspired by [this post|http://www.silverwareconsulting.com/index.cfm/2009/7/14/Using-MXUnits-injectMethod-to-Reverse-an-injectMethod-call#c82B9BFA8-0DE7-8E6D-2C4C1BC85072A908]&nbsp;
* HTML Result tweaks... mostly code cleanup. Also, no need to specify a result type any longer as it defaults to the new HTML output introduced in MXUnit 2.0

h3. Bug Fixes

* User-supplied patch to JUnitXMLTestResult to properly encode "special characters". Thanks\!




h2. Framework \-\- 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and [request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5, label="some label"); This is particularly important when debugging ORM objects
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Core features should now be CF7 compatible.
* MightyMock behavioral inconsistency on CF8 fixed
* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in MightyMock on Adobe ColdFusion

h3. Backwards Compatibility

* debug() will be backwards compatible IF for calls not using named arguments
* debug() will now fail if the old (removed) "debugdata" argument was passed like so: debug(debugdata=someStruct); to fix, either change debugdata to "var" or remove the named argument


{column}
{column:width=5%}


{column}
{column:width=45%}

h2. Eclipse Plugin \-\- 1.4.1 \-\- March 23, 2011


* Added "Run MXUnit Tests" to the "Run As" menu. Default keybinding is alt-shift-x, m (you can change that in preferences)
* Added support for opening files from the "Tag Context" panel when those files are not in projects, i.e. opens from the file system.
* Thanks Denny for these contributions\!



{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751509</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784428</id>
    <property name="body"><![CDATA[Data driven testing allows you to execute tests with a wide variety of input data. This can make creating and executing certain kinds of tests&nbsp; efficient and very powerful. Essentially, you provide a reference to a collection of data and MXUnit will iterate over that data and execute the test for each item in the collection.

Here it is in action:
{code:title=Basic Array Dataprovider Example}<cffunction name="setUp">
  <cfset name_data = ['joe','taj','mary','juan','hans', 'bjork','chaksa'] />
  <cfset myObject =&nbsp; createObject('component','com.foo.MyObject').init() />
</cffunction>

<cffunction name="testNameValidation" mxunit:dataprovider="name_data">
  <cfargument name="name" hint="Each name item in the name_data array" />
  <cfset assertTrue( myObject.validateName(name), "#name# not valid" ) />
</cffunction>
{code}To use data to drive tests, tell MXUnit about it using the mxunit:dataprovider annotation. This accepts a string name of some data that exists in the variables scope of the test. The mxunit:dataprovider annotation accepts the following types of data: array, query, list, and a CSV or Excel file. What's unique about these types of tests is that they accept parameters. The parameters represent the data you are using in your tests and may vary depending upon the type of the dataprovider. Note that this is invalid in ColdFusion: mxunit:dataprovider="#my_variable#" - this value must be a string.
Consider the following examples:

{code:title=Query Dataprovider Example}<!--------------------------------------------------------------------
           Example using a query:
    query_data = queryNew('name');
    queryAddRow(query_data,1);
    querySetCell(query_data,'name','ed');
   Note query name as a parameter
-------------------------------------------------------------------->
<cffunction name="testSomethingWithQuery" mxunit:dataprovider="query_data">
  <cfargument name="q" hint="A query object" />
  <cfset assertTrue( myObject.validateName(q.name), "#q.name# not valid." ) />
</cffunction>
{code}In this example we specify the name of a query that's in the variables scope of the test. We use this query name for the mxunit:dataprovider value. This test will be run once for each row in the query, and the value of "arguments.q" in this case will be the current row of the query.

{code:title=Basic List Dataprovider Example}<!-----------------------------------------------------------------
    Example using a list (identical to array)
    list_data = 'ed,joe,mary,jeff';
    Note list item name as a parameter
-------------------------------------------------------------------->

<cffunction name="testSomethingWithList" mxunit:dataprovider="list_data">
  <cfargument name="list_item" hint="Item in the list" />
  <cfset assertTrue( myObject.validateName(list_item), "#list_item# not valid." ) />
</cffunction>
{code}Iterating over a list is essentially the same as an array. The data here is provided as a list of values. As in all mxunit:dataprovider types, pass in the _name_ of the data to the dataprovider.

{code:title=Basic Excel/CSV Dataprovider}<!----------------------------------------------------------------
               Example using an Excel file
             Note query name as a parameter
------------------------------------------------------------------>
<cfset names_excel = getDirectoryFromPath(getCurrentTemplatePath()) & "/dataproviders/names.xls">
<cffunction name="testSomethingWithExcel" mxunit:dataprovider="names_excel">
  <cfargument name="name_query" hint="Default behavior is to convert Excel with header names to query object.">
  <cfset debug(myQuery)>
  <cfset assertTrue( myObject.validateName(name_query.name), "#name_query.name# not valid." ) />
</cffunction>
{code}For the basic default excel behavior where you have an Excel file with named row headers, pass the name of the file reference to the mxunit:dataprovider. Then, treat the data as a query object, using the row headings as column names.

{code:title=Basic Iterator Dataprovider}<!----------------------------------------------------------------
   Fuzzy Goodness
 ------------------------------------------------------------------>
<cffunction name="testRandomPasswordGenerator" mxunit:dataprovider="1000">
  <cfargument name="count" />
  <cfset pwd = myObject.generateRandomPassword(seed=count) />
  <cfset assert( myObject.isValidPassword(pwd), "#pwd# not valid. Occurred at iteration #count#" ) />
</cffunction>
{code}Sometimes it's useful to just iterate a number of times over some computation. You can do this with MXUnit simply by specify a positive integer to the mxunit:dataprovider.
{code:title=Script Example}/**
* @mxunit:dataprovider myDataProvider
*/{code}

To use dataproviders in CFScript, use @mxunit:dataprovider NameOfDataProvider


To Do: Advanced Dataproviders (2D Arrays and Excel and CSVs with or without header rows).]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751723</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784495</id>
    <property name="body"><![CDATA[{section:border=false}



{column:width=52%}

h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world.

h6. Quick Links

* [What is MXUnit and Why should you use it?|default:Why MXUnit?]
* [Getting Started|default:Getting Started]
* [Download Stable|http://mxunit.org/download.cfm]
* [Download Nightly Build|http://mxunit.org/downloadNightly.cfm]
* [Installing The Eclipse Plugin|default:Install the Eclipse Plugin]
* [The MXUnit Blog|http://blog.mxunit.org]
* [Eclipse Plugin Update Site|http://mxunit.org/update]
* [SVN Source Code \-\- trunk|http://mxunit.googlecode.com/svn/mxunit/trunk/]
* [Github Source Code|https://github.com/mxunit/]
* [MXUnit 2.0 API|http://mxunit.s3.amazonaws.com/api/index.html]


h6. Support

* [MXUnit Google Group|http://groups.google.com/group/mxunit]
* [Bug Report or Feature Request|http://jira.mxunit.org/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000]

{table:border=0 width=100%}
{table-row}

{table-cell}

h6. Committers

* Marc	Esher  ([blog|http://blog.mxunit.org], Twitter:[@marcesher|http://twitter.com/marcesher])
* Adam	Haskell  ([blog|http://cfrant.blogspot.com/], Twitter:[@AHaskell|http://twitter.com/ahaskell])
* Mike	Henke  ([blog|http://www.henke.ws/], Twitter: [@mikehenke|http://twitter.com/mikehenke])
* Patrick McElhaney ([blog|http://patrickmcelhaney.com/], Twitter: [@patrick_mc|http://twitter.com/patrick_mc])
* Randy	Merril  ([blog|http://forthedeveloper.com/], Twitter: [@Zoramite|http://twitter.com/Zoramite])
* Mike	Rankin  ([blog|http://mrmx.blogspot.com/], Twitter: [@mike_rankin|http://twitter.com/mike_rankin])
* Bill	Shelton  ([blog|http://blog.billshelton.me], Twitter:[@virtix|http://twitter.com/virtix])
* Bob	Silverberg  ([blog|http://www.silverwareconsulting.com/], Twitter: [@elegant_chaos|http://twitter.com/elegant_chaos])
* John Whish ([blog|http://www.aliaspooryorik.com/], Twitter: [@aliaspooryorik|http://twitter.com/aliaspooryorik]
{table-cell}
{table-cell} !einstein_coding_mxunit.jpg|thumbnail,align=left!{table-cell}{*}License*

Versions 1.x are licensed under [GPL|http://www.gnu.org/licenses/quick-guide-gplv3.html|Copyleft] and versions 2.x are licensed under the [MIT|http://www.opensource.org/licenses/mit-license.php] open source license.

{table-cell}
*MXUnit Office Hours*

Every few weeks we [get together on Adobe Connect|http://experts.na3.acrobat.com/mxunit-office-hours/] to chat about testing. Meetups start at Noon EST ([convert|http://www.timeanddate.com/worldclock/converter.html]). You're automatically promoted to presenter so bring a microphone. Here's the schedule:

{google-calendar:mode=agenda|width=300|height=300}[http://www.google.com/calendar/ical/h5eh6m4iirte5b7u3r997ul5q0%40group.calendar.google.com/public/basic.ics]{google-calendar}



{table-row}
{table}
{column}
{column:width=3%}




{column}
{column:width=45%}

h6. Navigate space{pagetreesearch}{pagetree:startDepth=2}
{column}
{section}
{recently-updated-dashboard:types=page,comment}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751798</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784496</id>
    <property name="body"><![CDATA[h2. *Installing the MXUnit Framework*

This should be the easiest part\! Download, unzip, and test ...&nbsp; You can also [watch the video|MXUnit Install Screencast] if you're so inclined


1. [Download|http://mxunit.org/download.cfm] the latest version ...


!install-download.png!


2. Unzip to your webroot; e.g., C:\Inetpub\wwwroot\
{color:darkred}{*}Note:*{color} The MXUnit framework can exist in any ColdFusion context -in the webroot or in the custom tags.
{color:darkred}{*}However{*}{color}, The examples assume installation directly under the webroot.

!install-unzip.png!


3. Test the install by pointing your web browser to the installation; e.g., [http://localhost:8500/mxunit/index.cfm|http://localhost:8500/mxunit/index.cfm] You should see this:

 !install-test.png!


4. Write some good clean code that works.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751799</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783906</id>
    <property name="body"><![CDATA[{toc}

h1. Creating an AWS Account


To get started with EC2, you'll need an Amazon Web Services (AWS) account. Don't worry... you can play around for a while without spending much money at all. Get out a credit card b/c you'll need it, but as you're configuring your first instances and doing some testing, you'll be paying pennies.

*First, go here:* [http://aws.amazon.com/about-aws/|http://aws.amazon.com/about-aws/*]

You will go through an account signup. If you are prompted to download any files, do it. Save them somewhere you won't forget them. Do not publish them on your blog. Do not put them in your public Dropbox share. Keep them secret. Keep them safe. I keep all AWS-related files in my private DropBox so that I can access them on multiple machines.

{note}You will not be charged anything until you create instances and run them. There is no charge for creating an account{note}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751173</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783866</id>
    <property name="body"><![CDATA[Can we have structure array as dataprovider?]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751132</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784072</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751345</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784069</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751342</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784066</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751339</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784064</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751337</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784042</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751315</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784045</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751318</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784044</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751317</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784039</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751312</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784035</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751308</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784036</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751309</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784033</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751306</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784058</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751331</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784059</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751332</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784060</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751333</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784055</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751328</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784050</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751323</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784052</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751325</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784047</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751320</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784048</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751321</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784026</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751299</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6784027</id>
    <property name="body"
      ><![CDATA[Louis Vuitton clutch purse could [Burberry Outlet|http://www.myburberryscarfoutlet.com/] the logo with  fashionable and elegance. Louis vuitton motorola clutch designer handbags [Louis Vuitton Outlet|http://www.louisvuittonoutlet-e.com/] created  from kinds of components [Authentic Louis Vuitton  Handbags|http://www.louisvuittonoutlet-max.com/] instance fabric, top-quality leather-based, Epi etc.There are lots  of variants [Louis Vuitton USA online  shopping|http://www.louisvuitton0.com/] Louis vuitton clutch system accessories. Essentially the most  classical a single needs to [Cheap  Louis Vuitton Handbags|http://www.louisvuittonoutlet0.com/] sweets colored monogram type that [Burberry Scarf|http://www.burberry-burberryscarf.com/] been well known  more than 1 100 years. In my view, [Chanel Handbags|http://www.chanelbags-cocochanel.com/] chocolates  colored monogram adaptation [Louis Vuitton Bag|http://www.louisvuittonoutlet-bagsx.com/] proper  with regard [Louis Vuitton  Outlet|http://www.louisvuittonoutletz.net/] older women as [Burberry Bags  Sale|http://www.myburberrybags.com/] multicolored monogrammed type [louis vuitton sunglasses|http://www.louisvuitton-outletlv.com/] your  needs meant for teenagers.The particular multicolored initialed or monogrammed  release seems to be hence vibrant and also beautiful. However , at [Chanel Handbag|http://www.chanelbags0.com/] I can see an adolescent  female using [Louis Vuitton  Purses|http://www.louisvuittons-bags.net/] chocolate dyed monogrammed clutch bag or perhaps travelling bag.  Probably younger from [lv Bags|http://www.lv-louisvuittonbags.net/] women, the greater adult they will possibly be.]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6751300</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783971</id>
    <property name="body"><![CDATA[This series will demonstrate how to set up a continuous integration (CI) environment for ColdFusion projects using [Jenkins|http://jenkins-ci.org/] CI and MXUnit. We'll cover Jenkins setup, MXUnit test runs and JUnit XML output, and a few notification mechanisms (email, IM).

I will not attempt to duplicate the quite thorough documentation available for Jenkins. Rather, I intend to cover enough "getting started" material, and then focus on instructions specific to MXUnit and Jenkins

h1. Big Picture

# You and your peeps write code and commit it to your source control repo
# Jenkins recognizes those commits (it can pulse SCM, or it can run every XXX hours/minutes/whatever)
# Jenkins runs "build actions" -- ANT targets, shell scripts, gradle tasks, whatever
## Use SVNAnt, git, post-commit hooks, or some other means to get the latest code onto your target server (usually DEV)
## Use ANT to run your MXUnit tests on the target server
## MXUnit test results are stored as XML files inside of Jenkins
# Jenkins reads the XML files and generates pretty reports of test results
# Jenkins sends notifications (email, IM, etc) when the build fails, tests fail, etc

!cfobjective_jenkins.png!


h1. Installing Jenkins

This  will cover the simple way to run Jenkins, which is to use its built-in Winstone container, which is fine for testing and has served me well in a medium-load production environment. If you already have Tomcat set up, then you  know how to install war files so follow that procedure instead (i.e.  drop the war where you put your war files, or use the admin to deploy  the war. It's that simple)
# Download the Jenkins war file and put it somewhere
# Open a command line and navigate to the war file location
# type "java \--jar jenkins.war"
# This will launch Jenkins. You can navigate to [http://localhost:8080|http://localhost:8080/] and from there, you're ready to start
# If you're on Windows, you can install Jenkins as a Windows service from inside "Manage Jenkins".

h1. Pulling your project from Subversion (SVN)

# Click "create a new job"
# Give your job a name, and then select Freestyle Software Project
# Under Source Code Management, select SVN, and then plug in your project's SVN location, eg [http://svn.myproject/whatever/trunk|http://svn.myproject/whatever/trunk]
# In the "Local Module Directory" field, I typicaly use the name of the directory as it will be deployed onto some production server. So if I'm checking out myproject/trunk, I'll use&nbsp; "myproject". The reason is that I'll often check out from multiple places in a single Job, and giving each module directory a proper name helps with organization.
# From  here, you can click "Save" and then perform a build by clicking  "Build". This will check out your code into the Jenkins workspace for  your project

*But this code isn't where I need the code to be\!* Good point. We'll talk more about that later


h2. What's Next?

See how easy that was? Next up, [configuring ANT|default:Continuous Integration -- ANT - The Glue between Jenkins and your Tests] , running your tests, and recording results]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751238</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783970</id>
    <property name="body"><![CDATA[This series will demonstrate how to set up a continuous integration (CI) environment for ColdFusion projects using [Jenkins|http://jenkins-ci.org/] CI and MXUnit. We'll cover Jenkins setup, MXUnit test runs and JUnit XML output, and a few notification mechanisms (email, IM).

I will not attempt to duplicate the quite thorough documentation available for Jenkins. Rather, I intend to cover enough "getting started" material, and then focus on instructions specific to MXUnit and Jenkins


h2. Installing Jenkins

This  will cover the simple way to run Jenkins, which is to use its built-in Winstone container, which is fine for testing and has served me well in a medium-load production environment. If you already have Tomcat set up, then you  know how to install war files so follow that procedure instead (i.e.  drop the war where you put your war files, or use the admin to deploy  the war. It's that simple)
# Download the Jenkins war file and put it somewhere
# Open a command line and navigate to the war file location
# type "java \--jar jenkins.war"
# This will launch Jenkins. You can navigate to [http://localhost:8080|http://localhost:8080/] and from there, you're ready to start
# If you're on Windows, you can install Jenkins as a Windows service from inside "Manage Jenkins".

h2. Pulling your project from Subversion (SVN)

# Click "create a new job"
# Give your job a name, and then select Freestyle Software Project
# Under Source Code Management, select SVN, and then plug in your project's SVN location, eg [http://svn.myproject/whatever/trunk|http://svn.myproject/whatever/trunk]
# In the "Local Module Directory" field, I typicaly use the name of the directory as it will be deployed onto some production server. So if I'm checking out myproject/trunk, I'll use&nbsp; "myproject". The reason is that I'll often check out from multiple places in a single Job, and giving each module directory a proper name helps with organization.
# From  here, you can click "Save" and then perform a build by clicking  "Build". This will check out your code into the Jenkins workspace for  your project

*But this code isn't where I need the code to be\!* Good point. We'll talk more about that later


h2. What's Next?

See how easy that was? Next up, [configuring ANT|default:Continuous Integration -- ANT - The Glue between Jenkins and your Tests] , running your tests, and recording results]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751237</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783973</id>
    <property name="body"><![CDATA[{toc}

This series will demonstrate how to set up a continuous integration (CI) environment for ColdFusion projects using [Jenkins|http://jenkins-ci.org/] CI and MXUnit. We'll cover Jenkins setup, MXUnit test runs and JUnit XML output, and a few notification mechanisms (email, IM).

I will not attempt to duplicate the quite thorough documentation available for Jenkins. Rather, I intend to cover enough "getting started" material, and then focus on instructions specific to MXUnit and Jenkins

h1. Big Picture

# You and your peeps write code and commit it to your source control repo
# Jenkins recognizes those commits (it can pulse SCM, or it can run every XXX hours/minutes/whatever)
# Jenkins runs "build actions" -- ANT targets, shell scripts, gradle tasks, whatever
## Use SVNAnt, git, post-commit hooks, or some other means to get the latest code onto your target server (usually DEV)
## Use ANT to run your MXUnit tests on the target server
## MXUnit test results are stored as XML files inside of Jenkins
# Jenkins reads the XML files and generates pretty reports of test results
# Jenkins sends notifications (email, IM, etc) when the build fails, tests fail, etc

!cfobjective_jenkins.png!


h1. Installing Jenkins

This  will cover the simple way to run Jenkins, which is to use its built-in Winstone container, which is fine for testing and has served me well in a medium-load production environment. If you already have Tomcat set up, then you  know how to install war files so follow that procedure instead (i.e.  drop the war where you put your war files, or use the admin to deploy  the war. It's that simple)
# Download the Jenkins war file and put it somewhere
# Open a command line and navigate to the war file location
# type "java \--jar jenkins.war"
# This will launch Jenkins. You can navigate to [http://localhost:8080|http://localhost:8080/] and from there, you're ready to start
# If you're on Windows, you can install Jenkins as a Windows service from inside "Manage Jenkins".

h1. Pulling your project from Subversion (SVN)

# Click "create a new job"
# Give your job a name, and then select Freestyle Software Project
# Under Source Code Management, select SVN, and then plug in your project's SVN location, eg [http://svn.myproject/whatever/trunk|http://svn.myproject/whatever/trunk]
# In the "Local Module Directory" field, I typicaly use the name of the directory as it will be deployed onto some production server. So if I'm checking out myproject/trunk, I'll use&nbsp; "myproject". The reason is that I'll often check out from multiple places in a single Job, and giving each module directory a proper name helps with organization.
# From  here, you can click "Save" and then perform a build by clicking  "Build". This will check out your code into the Jenkins workspace for  your project

*But this code isn't where I need the code to be\!* Good point. We'll talk more about that later


h2. What's Next?

See how easy that was? Next up, [configuring ANT|default:Continuous Integration -- ANT - The Glue between Jenkins and your Tests] , running your tests, and recording results]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751240</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783972</id>
    <property name="body"><![CDATA[{toc}

This series will demonstrate how to set up a continuous integration (CI) environment for ColdFusion projects using [Jenkins|http://jenkins-ci.org/] CI and MXUnit. We'll cover Jenkins setup, MXUnit test runs and JUnit XML output, and a few notification mechanisms (email, IM).

I will not attempt to duplicate the quite thorough documentation available for Jenkins. Rather, I intend to cover enough "getting started" material, and then focus on instructions specific to MXUnit and Jenkins

h1. Big Picture

# You and your peeps write code and commit it to your source control repo
# Jenkins recognizes those commits (it can pulse SCM, or it can run every XXX hours/minutes/whatever)
# Jenkins runs "build actions" -- ANT targets, shell scripts, gradle tasks, whatever
## Use SVNAnt, git, post-commit hooks, or some other means to get the latest code onto your target server (usually DEV)
## Use ANT to run your MXUnit tests on the target server
## MXUnit test results are stored as XML files inside of Jenkins
# Jenkins reads the XML files and generates pretty reports of test results
# Jenkins sends notifications (email, IM, etc) when the build fails, tests fail, etc

!cfobjective_jenkins.png!


h1. Installing Jenkins

This  will cover the simple way to run Jenkins, which is to use its built-in Winstone container, which is fine for testing and has served me well in a medium-load production environment. If you already have Tomcat set up, then you  know how to install war files so follow that procedure instead (i.e.  drop the war where you put your war files, or use the admin to deploy  the war. It's that simple)
# Download the Jenkins war file and put it somewhere
# Open a command line and navigate to the war file location
# type "java \--jar jenkins.war"
# This will launch Jenkins. You can navigate to [http://localhost:8080|http://localhost:8080/] and from there, you're ready to start
# If you're on Windows, you can install Jenkins as a Windows service from inside "Manage Jenkins".

h1. Pulling your project from Subversion (SVN)

# Click "create a new job"
# Give your job a name, and then select Freestyle Software Project
# Under Source Code Management, select SVN, and then plug in your project's SVN location, eg [http://svn.myproject/whatever/trunk|http://svn.myproject/whatever/trunk]
# In the "Local Module Directory" field, I typicaly use the name of the directory as it will be deployed onto some production server. So if I'm checking out myproject/trunk, I'll use&nbsp; "myproject". The reason is that I'll often check out from multiple places in a single Job, and giving each module directory a proper name helps with organization.
# From  here, you can click "Save" and then perform a build by clicking  "Build". This will check out your code into the Jenkins workspace for  your project

*But this code isn't where I need the code to be\!* Good point. We'll talk more about that later


h2. What's Next?

See how easy that was? Next up, [configuring ANT|default:Continuous Integration -- ANT - The Glue between Jenkins and your Tests] , running your tests, and recording results]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6751239</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325460</id>
    <property name="body"><![CDATA[h2. Why MXUnit?

Several fine unit testing frameworks exist for ColdFusion. Why choose MXUnit?

At its core, MXUnit grew around the concept of making things easier for the person writing the tests. We believe people shy away from unit testing because the perception (sometimes justified\!) is that it's too inconvenient. We sought to change that.

h3. Convenience features

* [Easy to see your data|http://mxunit.org/doc/index.cfm?doc=viewdebugoutput] with cfoutput, cfdump, and debug()
* Easy to [see your cfcatch|http://mxunit.org/doc/index.cfm?doc=viewdebugoutput#cfcatch] struct when errors occur
* Test [single methods|http://mxunit.org/doc/index.cfm?doc=runsinglemethod] inside a test case
* Easy "[directory runner|http://mxunit.org/doc/index.cfm?doc=directorytests]" for running entire directories of tests
* Easy to [test private functions|http://mxunit.org/doc/index.cfm?doc=testprivate] in your components
* Ability to [switch to message-first style assertions|http://mxunit.org/doc/index.cfm?doc=messagefirstassertions] to help ease transition from other frameworks

In addition to convenience features, MXUnit contains all the essential components of any unit testing framework:

h3. Framework Must-Haves

Test Generator for existing components

[Eclipse Plugin|http://mxunit.org/doc/index.cfm?doc=installplugin] with built-in help and [keyboard shortcuts|http://mxunit.org/doc/index.cfm?doc=pluginshortcuts]

Ant Integration

Plugin architecture for creating custom assertions

Many different [output formats|http://mxunit.org/doc/index.cfm?doc=outputformats]
* Basic HTML results
* ExtJS "fancy" grid results
* XML results
* JUnitReport XML results (for use with the ANT task and the JUnitReport Ant Task)
* Query results

h3. Active Development

* We're actively developing MXUnit and have more convenience features in the works. A sample:
* Easier exception testing
* Easier auto-rollback for tests that access databases
* JUnit 4 style "Hamcrest" assertions (assertThat(....))
* Customizable test generation]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292711</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325458</id>
    <property name="body"><![CDATA[This is the home of the MXUnit Public Wiki space.


The idea, maybe, is that this would be the public home for tech docs, blogs, musings, "the book", etc. Maybe use feedburner to publish the various parts ... content taxonomies?

mxunit.org may still be the landing point, maybe make static html pages for blog, wiki, support, etc. This would allow for google webmaster tools to create a site map.






{section}




{column:width=50%}

{recently-updated-dashboard}
{column}
{column:width=5%}




{column}
{column:width=45%}

h6. Navigate space
{pagetreesearch}
{pagetree:startDepth=2}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292709</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325456</id>
    <property name="body"><![CDATA[This is the home of the MXUnit Public Wiki space.


The idea, maybe, is that this would be the public home for tech docs, blogs, musings, "the book", etc. Maybe use feedburner to publish the various parts ... content taxonomies?

mxunit.org may still be the landing point, maybe make static html pages for blog, wiki, support, etc. This would allow for google webmaster tools to create a site map.






{section}




{column:width=50%}

{recently-updated}
{column}
{column:width=5%}




{column}
{column:width=45%}

h6. Navigate space
{pagetreesearch}
{pagetree:startDepth=2}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292707</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325454</id>
    <property name="body"><![CDATA[This is the home of the MXUnit Public Wiki space.


The idea, maybe, is that this would be the public home for tech docs, blogs, musings, "the book", etc. Maybe use feedburner to publish the various parts ... content taxonomies?

mxunit.org may still be the landing point, maybe make static html pages for blog, wiki, support, etc. This would allow for google webmaster tools to create a site map.






{section}




{column:width=60%}

{recently-updated}
{column}
{column:width=5%}




{column}
{column:width=35%}

h6. Navigate space
{pagetreesearch}
{pagetree}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292705</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325468</id>
    <property name="body"><![CDATA[h1. What is request.debug()?

One of my favorite features of MXUnit is the debug() function, [described here|http://mxunit.org/doc/index.cfm?doc=viewdebugoutput]. As you're developing, you might find yourself wishing you had a debug() function to use in the components you're building, not just in the unit tests themselves.

You can\! MXUnit will create a function called request.debug() that is hooked into the same glob of debug output as the debug() function you use in your tests. Thus, in any component you're trying to test (or its dependencies, for that matter), if you're running the code from within MXUnit, request.debug() will be available.

h1. Is it turned on by default?

It is turned on by default ONLY when tests are run from within the Eclipse plugin. Tests run within the browser and a DirectoryTestSuite (this includes tests executed with ANT) will not have this function available by default. The reason is simple: we believe that it's a bad thing to commit your changes to source control with stray request.debug() calls left in there. We believe most people run their tests from within Eclipse while developing, but entire suites of tests should also be run in the browser, or via ANT, in a scheduled process. Otherwise, what's the point of having tests if they're not running at least once a day?&nbsp; By turning them off in non-Eclipse contexts, you're more likely to catch the cases where you forget to remove the request.debug() calls when they're no longer helping you write your code


h1. Can I turn it on in those contexts?

{code}
	<cffunction name="testRequestDotDebug_WillPassInBothPluginAndWeb">
		<cfset createRequestScopeDebug()>
		<cfset obj = createObject("component","SomeObject")>
		<cfset debug("before the object calls request.debug")>
		<cfset obj.thisWillOnlyWorkInThePlugin()><!--- only work in plugin.... unless we explictly enable it in the test!!! --->
		<cfset debug("after a function that called request.debug")>
		<cfset stopRequestScopeDebug()>
	</cffunction>
{code}

Yes.&nbsp; Here's how:]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292719</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325466</id>
    <property name="body"><![CDATA[h2. Viewing Output

When writing unit tests, particularly with TDD, sometimes you need to see your data. Maybe you're working on a complex regular expression and you're building it up iteratively, watching the string mutate as you change the regex. Maybe you need to visualize the structure of a complex, uh, structure. Maybe when an error occurs, you actually want to see the entire cfcatch struct because you have so far failed in your mission to jack into the ether  and absorb the bits and bytes into your neurons. Maybe you just want to see the damn query.

Typically, this is pretty annoying to do in unit tests. Sometimes, it's just not possible if the framework doesn't make it easy for you. So you end up writing little tester files that create the object you're working with, do a cfdump or something, and then throw that work away when you've seen what you need to see. Icckkkkkk.

MXUnit makes seeing your data easy. In fact, making things easier is one of our core tenets. With MXUnit, you can use CFOUTPUT and CFDUMP inside the test cases themselves. But there's an even better way to see your data: debug().

Why is it better? If you use cfoutput and cfdump inside your tests, you'll only see that output if the test passes. But with debug(), you're guaranteed to see the output of any debug() calls, even if the test fails! Of course, any calls to debug() after a failed assertion won't show up, because as soon as an assertion fails the test method stops executing.

h3. How to use debug()

{code:title=Debugging Example}
<cfcomponent extends="mxunit.framework.TestCase">
	<cffunction name="testExecuteTestCase" returntype="void" hint="">
		<cfset var name = "mxunit.PluginDemoTests.DoubleMethodTest">
		<cfset var methods = "">
		<cfset var results = "">
		
		<cfset results = rf.executeTestCase(name,methods,"")>
		<cfset methods = rf.getComponentMethods(name)>
		
		<cfset debug(results)>
		
		<cfset assertTrue(isStruct(results),"results should be struct")>
		<cfset assertEquals(ArrayLen(methods),ArrayLen(StructKeyArray(results[name])),"")>
	</cffunction>
</cfcomponent>
{code}

*You can use debug() anywhere you'd normally use CFDUMP.*
 
# Caveat: No promises on how it'll behave if you try to call debug() on components and then run the test in the Eclipse plugin. You're bound to get an axis/webservice/xml parse error of some form or another.
# Caveat: if you're calling debug() on big data, like a big old struct, it's going to make your tests run slower! This is because CFDUMP, starting after CF 6.1, turned into a massive bloated slow pig of a tag, and debug() simply calls cfdump on whatever you're passing into it. I think there are a few stray Thread.sleep(2000) calls in the source code somewhere that they forgot to take out.

# Tip: I keep debug() calls on during iterative development because I probably want to see the data. When I'm finished, it's not uncommon for me to go comment them out so that they won't affect performance. Do what you want. If you don't mind a bit of a performance penalty, then don't bother.

h3. Using CFDUMP and CFOUTPUT in your tests

You can use cfdump and cfoutput in your tests, and the output will show up in the test output.

*BIG NOTE:* If your test fails, i.e. an error occurs or an assertion returns false, the output will not show up. This is why we recommend using debug().

h3. Viewing this output in the Eclipse Plugin

In the eclipse plugin, run a test (or a single method of a single test, or multiple methods, or everything in the test tree... whatever it is you want to run) When the test completes, hit &quot;b&quot; on the keyboard. &quot;b&quot; for Browser. Or hit F8. Or right click in the test view and select {{Open test case results in browser}} This will open up a browser view with the debug() and cfoutput/cfdumps from the selected tests/methods. If your eclipse preference is set to use the internal browser by default, then this will open up Eclipse's internal browser. If your preference is set to use an external browser, it'll pop open a new browser window (or tab, depending on your system setup).

The output will look like this: 

!plugin-install-19.png!

h3. Viewing this output in the web browser

When you run tests using the html or extjs browser runners, you get a column at the far right that says &quot;output&quot; or &quot;expand&quot;. Just click the link and you get your stuff.

Here's what it looks like when you click the &quot;view output&quot; link when using the extjs runner:

!extjsrunnerViewOutput.png!

Here's what it looks like when you click the &quot;expand&quot; link in the 'normal' html output runner: 

!normalhtmloutput.png!

{anchor:cfcatch}

h3. Viewing CFCATCH info when errors occur

When a test errors (for reasons other than a failed assertion), you often want to see the dump of the cfcatch struct. MXUnit automatically puts the cfcatch info into the debug dump when an error occurs. Thus, when a test errors, just hit &quot;b&quot; in the eclipse plugin when the test returns, or click &quot;view output&quot; in the browser runner, to see your cfcatch dump.

Here's what that looks like in Eclipse:

!cfcatchInPlugin.png! ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292717</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325465</id>
    <property name="body"><![CDATA[h2. Why MXUnit?

Several fine unit testing frameworks exist for ColdFusion. Why choose MXUnit?

At its core, MXUnit grew around the concept of making things easier for the person writing the tests. We believe people shy away from unit testing because the perception (sometimes justified\!) is that it's too inconvenient. We sought to change that.

h3. Convenience features

* [Easy to see your data|viewdebugoutput] with cfoutput, cfdump, and debug()
* Easy to [see your cfcatch|viewdebugoutput#cfcatch] struct when errors occur
* Test [single methods|runsinglemethod] inside a test case
* Easy "[directory runner|directorytests]" for running entire directories of tests
* Easy to [test private functions|testprivate] in your components
* Ability to [switch to message-first style assertions|messagefirstassertions] to help ease transition from other frameworks

In addition to convenience features, MXUnit contains all the essential components of any unit testing framework:

h3. Framework Must-Haves

Test Generator for existing components

[Eclipse Plugin|installplugin] with built-in help and [keyboard shortcuts|pluginshortcuts]

Ant Integration

Plugin architecture for creating custom assertions

Many different [output formats|outputformats]
* Basic HTML results
* ExtJS "fancy" grid results
* XML results
* JUnitReport XML results (for use with the ANT task and the JUnitReport Ant Task)
* Query results

h3. Active Development

* We're actively developing MXUnit and have more convenience features in the works. A sample:
* Easier exception testing
* Easier auto-rollback for tests that access databases
* JUnit 4 style "Hamcrest" assertions (assertThat(....))
* Customizable test generation]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292716</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325464</id>
    <property name="body"><![CDATA[h2. Viewing Output

When writing unit tests, particularly with TDD, sometimes you need to see your data.
Maybe you're working on a complex regular expression and you're building it up 
iteratively, watching the string mutate as you change the regex. Maybe you need to 
visualize the structure of a complex, uh, structure. Maybe when an error occurs, you 
actually want to see the entire cfcatch struct because you have so far failed in your 
mission to jack into the ether  and absorb the bits and bytes into your neurons. 
Maybe you just want to see the damn query.

Typically, this is pretty annoying to do in unit tests. Sometimes, it's just not 
possible if the framework doesn't make it easy for you. So you end up writing little 
tester files that create the object you're working with, do a cfdump or something, 
and then throw that work away when you've seen what you need to see. Icckkkkkk.

MXUnit makes seeing your data easy. In fact, making things easier is one of our core 
tenets. With MXUnit, you can use CFOUTPUT and CFDUMP inside the test cases themselves. 
But there's an even better way to see your data: debug().  

Why is it better? If you use cfoutput and cfdump inside your tests, you'll only see 
that output if the test passes. But with debug(), you're guaranteed to see the 
output of any debug() calls, even if the test fails! Of course, any calls to debug() 
after a failed assertion won't show up, because as soon as an assertion fails the 
test method stops executing.

h3. How to use debug()

{code:title=Debugging Example}
<cfcomponent extends="mxunit.framework.TestCase">
	<cffunction name="testExecuteTestCase" returntype="void" hint="">
		<cfset var name = "mxunit.PluginDemoTests.DoubleMethodTest">
		<cfset var methods = "">
		<cfset var results = "">
		
		<cfset results = rf.executeTestCase(name,methods,"")>
		<cfset methods = rf.getComponentMethods(name)>
		
		<cfset debug(results)>
		
		<cfset assertTrue(isStruct(results),"results should be struct")>
		<cfset assertEquals(ArrayLen(methods),ArrayLen(StructKeyArray(results[name])),"")>
	</cffunction>
</cfcomponent>
{code}

*You can use debug() anywhere you'd normally use CFDUMP.*
 
# Caveat: No promises on how it'll behave if you try to call debug() on components 
and then run the test in the Eclipse plugin. You're bound to get an axis/webservice/xml 
parse error of some form or another.
# Caveat: if you're calling debug() on big data, like a big old struct, it's going 
to make your tests run slower! This is because CFDUMP, starting after CF 6.1, turned 
into a massive bloated slow pig of a tag, and debug() simply calls cfdump on whatever 
you're passing into it. I think there are a few stray Thread.sleep(2000) calls in the 
source code somewhere that they forgot to take out.

# Tip: I keep debug() calls on during iterative development because I probably want to
see the data. When I'm finished, it's not uncommon for me to go comment them out so 
that they won't affect performance. Do what you want. If you don't mind a bit of a 
performance penalty, then don't bother.

h3. Using CFDUMP and CFOUTPUT in your tests

You can use cfdump and cfoutput in your tests, and the output will show up in the test 
output.

*BIG NOTE:* If your test fails, i.e. an error occurs or an assertion returns false, 
the output will not show up. This is why we recommend using debug().

h3. Viewing this output in the Eclipse Plugin

In the eclipse plugin, run a test (or a single method of a single test, or multiple 
methods, or everything in the test tree... whatever it is you want to run)  
When the test completes, hit &quot;b&quot; on the keyboard. &quot;b&quot; for Browser. 
Or hit F8. Or right click in the test view and select {{Open test case results in 
browser}}
This will open up a browser view with the debug() and cfoutput/cfdumps from the selected 
tests/methods. If your eclipse preference is set to use the internal browser by default, 
then this will open up Eclipse's internal browser. If your preference is set to use an 
external browser, it'll pop open a new browser window (or tab, depending on your system 
setup).

The output will look like this: 

!plugin-install-19.png!

h3. Viewing this output in the web browser

When you run tests using the html or extjs browser runners, you get a column at the far 
right that says &quot;output&quot; or &quot;expand&quot;. Just click the link and you 
get your stuff.

Here's what it looks like when you click the &quot;view output&quot; link when using 
the extjs runner:

!extjsrunnerViewOutput.png!

Here's what it looks like when you click the &quot;expand&quot; link in the 'normal' 
html output runner: 

!normalhtmloutput.png!

{anchor:cfcatch}

h3. Viewing CFCATCH info when errors occur

When a test errors (for reasons other than a failed assertion), you often want to see 
the dump of the cfcatch struct. MXUnit automatically puts the cfcatch info into the 
debug dump when an error occurs. Thus, when a test errors, just hit &quot;b&quot; in 
the eclipse plugin when the test returns, or click &quot;view output&quot; in the 
browser runner, to see your cfcatch dump.

Here's what that looks like in Eclipse:

!cfcatchInPlugin.png! ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292715</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325600</id>
    <property name="body"><![CDATA[h3. Here are some happy users :-)


[Animation Mentor|http://www.animationmentor.com]
"My work  (Animation Mentor) uses it for THE online animation school (sorry had to pump it up there). In fact
I've spent the whole week cleaning up our entire MXUnit set of tests to finally all pass. Keep up the great work\!"


----
[Crisp eBusiness|http://www.crisp-ebusiness.com/]


"If you want to do Test Driven Development with CFML, then MXUnit is THE framework to use\!"

----
[Figleaf Software|http://figleaf.com]
"MXUnit ROCKS"

----
[ICF Macro|http://www.macrointernational.com/]
"MXUnit is the suck\!"

----
[Mach-II Framework|http://www.mach-ii.com/]

----
[NASA|http://www.nasa.gov]
"The Altair Program here at Johnson Space Center NASA is using MXUnit for testing the Extensible Information Modeler (XIM) service application.  This set of CF services allow the Altair program to create applications to design the Lunar Lander in very flexible ways under constantly changing requirements.  XIM has further been expanded to support the certification of flight readiness (COFR) process of the ISS Payloads group and other NASA programs are in the pipeline.  Thus, unit testing of the service layer has become critical and we found
MXUnit to be the best of breed among the available CF xUnit frameworks.  It is being regularly maintained, has the best assertion capabilities, and best test output mechanisms.  The addition of ant support is an added plus (if you can get NTLM authentication working :-) "

----
[Railo Technologies|http://www.getrailo.com/]
"It's the cream of unit testing frameworks in CFML\!"

----
[SilverWare Consulting|http://www.silverwareconsulting.com/]
"It is remarkably easy to get up and running with unit testing in CFusing MXUnit. The framework is well designed and full featured, and
the Eclipse plugin makes working with it a pleasure. Equally important is the support available from the development team, who are remarkably
responsive to questions, bug reports and feature requests.

Keep up the great work, hombres\!"

----
[SOSensible|http://www.sosensible.com/]
It is the most approachable ColdFusion testing framework I have come across\!"

----
[Strictly Business Computer Systems|http://www.sbcs.com]
"It's easy, it's free, it's powerful, it's the best of it's kind.  There is no reason not to use it."

----
[UNM|http://unm.edu]
"MXUnit is bad-ass.  Use it.  Use it lots."

----
[Warwick Business School staff information portal project|http://www.wbs.ac.uk/]
"We're using MXUnit for a first foray into test-driven development. The option to use multiple interfaces gives us great flexibility in how we manage tests both for writing brand new code, and regression checking a monolithic application as we refactor. The simple assertion syntax and built-in support for accessing private methods makes for very quick and natural development."]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292880</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325599</id>
    <property name="body"><![CDATA[h3. Here are some happy users :-)


[Animation Mentor|http://www.animationmentor.com]
"My work  (Animation Mentor) uses it for THE online animation school (sorry had to pump it up there). In fact
I've spent the whole week cleaning up our entire MXUnit set of tests to finally all pass. Keep up the great work\!"


----
[Crisp eBusiness|http://www.crisp-ebusiness.com/]


"If you want to do Test Driven Development with CFML, then MXUnit is THE framework to use\!"

----
[Figleaf Software|http://figleaf.com]
"MXUnit ROCKS"

----
[ICF Macro|http://www.macrointernational.com/]
"MXUnit is the suck\!"

----
[Mach-II Framework|http://www.mach-ii.com/]

----
[NASA|http://nasa.gov]
"The Altair Program here at Johnson Space Center NASA is using MXUnit for testing the Extensible Information Modeler (XIM) service
application.  This set of CF services allow the Altair program to create applications to design the Lunar Lander in very flexible ways
under constantly changing requirements.  XIM has further been expanded to support the certification of flight readiness (COFR) process of the
ISS Payloads group and other NASA programs are in the pipeline.  Thus, unit testing of the service layer has become critical and we found
MXUnit to be the best of breed among the available CF xUnit frameworks.  It is being regularly maintained, has the best assertion
capabilities, and best test output mechanisms.  The addition of ant support is an added plus (if you can get NTLM authentication
working :-) "

----
[Railo Technologies|http://www.getrailo.com/]
"It's the cream of unit testing frameworks in CFML\!"

----
[SilverWare Consulting|http://www.silverwareconsulting.com/]
"It is remarkably easy to get up and running with unit testing in CFusing MXUnit. The framework is well designed and full featured, and
the Eclipse plugin makes working with it a pleasure. Equally important is the support available from the development team, who are remarkably
responsive to questions, bug reports and feature requests.

Keep up the great work, hombres\!"

----
[SOSensible|http://www.sosensible.com/]
It is the most approachable ColdFusion testing framework I have come across\!"

----
[Strictly Business Computer Systems|http://www.sbcs.com]
"It's easy, it's free, it's powerful, it's the best of it's kind.  There is no reason not to use it."

----
[UNM|http://unm.edu]
"MXUnit is bad-ass.  Use it.  Use it lots."

----
[Warwick Business School staff information portal project|http://www.wbs.ac.uk/]
"We're using MXUnit for a first foray into test-driven development. The option to use multiple interfaces gives us great flexibility in how we manage tests both for writing brand new code, and regression checking a monolithic application as we refactor. The simple assertion syntax and built-in support for accessing private methods makes for very quick and natural development."]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292879</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325561</id>
    <property name="body"><![CDATA[In general, problems with the plugin come in two varieties:
* The plugin can't figure out the correct "cfc path" for a file
* The plugin can't communicate with the RemoteFacade URL

h2. CFC Path

If you've read the Help documentation in the plugin and you still can't figure out how to get the plugin to correctly derive the CFC path for your components, then please follow these steps:
# Close Eclipse
# Open eclipse.ini in the eclipse install directory, and add "-debug" on a separate line, toward the top of the file. For example, it might look like this:
# {code}-startup
plugins/org.eclipse.equinox.launcher_1.0.200.v20090520.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.win32.win32.x86_1.0.200.v20090519
-product
org.eclipse.epp.package.rcp.product
--launcher.XXMaxPermSize
256M
-showsplash
-debug
org.eclipse.platform
--launcher.XXMaxPermSize
256m
-vmargs
-Dosgi.requiredJavaVersion=1.5
-Xms40m
-Xmx512m{code}
# (Note the \-debug on a line by itself)
# Start Eclipse
# Try running your test. This will now put a bunch of stuff into Eclipse's error log view
# Open the Error Log View (window \-\- show view \-\- general \-\- Error Log)
# You'll see a number of entries with an "i" (Information) Icon in the top few rows. Copy the contents of those rows and email them to the MXUnit google group with an explanation of what the plugin should be doing that it's not doing
# Alternately, you can open the raw law and copy the appropriate lines which you'll find toward the bottom of the file. To get to the Eclipse error log: Help \-\- About Eclipse \-\- Installation Details \-\- View Error Log

After you do that, you can remove the \-debug from your eclipse.ini file



h2. RemoteFacade

Ensure you can hit the URL in a browser. If not, there's your problem.

If you can access the URL in a browser, but the plugin still can't talk to your URL, try opening that URL in Eclipse's internal browser

h2. Using the RemoteFacadeTester.cfm


As a last resort, open a file named "RemoteFacadeTester.cfm" in the mxunit/samples directory. This file is included in the distribution. At the top of the file, you'll see this content:
{code:controls=true}<!--- change these as necessary --->
<cfset mycomponent = "mxunit.PluginDemoTests.HodgePodgeTest">
<cfset myfunction = "testNotEquals">
<cfset remoteURL = "http://localhost/mxunit/framework/RemoteFacade.cfc?wsdl">{code}Replace the variables with the component, function, and URL you're trying to invoke. Run that RemoteFacadeTester.cfm in your browser and inspect the output. Look at the CFDumps. It'll show you the result of running the test when run directly, when run through a testsuite, and when run through the RemoteFacade.cfc URL. All 3 results should be roughly the same.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292839</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325559</id>
    <property name="body"><![CDATA[In general, problems with the plugin come in two varieties:
* The plugin can't figure out the correct "cfc path" for a file
* The plugin can't communicate with the RemoteFacade URL

h2. CFC Path

If you've read the Help documentation in the plugin and you still can't figure out how to get the plugin to correctly derive the CFC path for your components, then please follow these steps:
# Close Eclipse
# Open eclipse.ini in the eclipse install directory, and add "-debug" on a separate line, toward the top of the file. For example, it might look like this:
# {code}-startup
plugins/org.eclipse.equinox.launcher_1.0.200.v20090520.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.win32.win32.x86_1.0.200.v20090519
-product
org.eclipse.epp.package.rcp.product
--launcher.XXMaxPermSize
256M
-showsplash
-debug
org.eclipse.platform
--launcher.XXMaxPermSize
256m
-vmargs
-Dosgi.requiredJavaVersion=1.5
-Xms40m
-Xmx512m{code}
# (Note the \-debug on a line by itself)
# Start Eclipse
# Try running your test. This will now put a bunch of stuff into Eclipse's error log view
# Open the Error Log View (window \-\- show view \-\- general \-\- Error Log)
# You'll see a number of entries with an "i" (Information) Icon in the top few rows. Copy the contents of those rows and email them to the MXUnit google group with an explanation of what the plugin should be doing that it's not doing

After you do that, you can remove the \-debug from your eclipse.ini file


h2. RemoteFacade

Ensure you can hit the URL in a browser. If not, there's your problem.

If you can access the URL in a browser, but the plugin still can't talk to your URL, try opening that URL in Eclipse's internal browser

h2. Using the RemoteFacadeTester.cfm


As a last resort, open a file named "RemoteFacadeTester.cfm" in the mxunit/samples directory. This file is included in the distribution. At the top of the file, you'll see this content:
{code:controls=true}<!--- change these as necessary --->
<cfset mycomponent = "mxunit.PluginDemoTests.HodgePodgeTest">
<cfset myfunction = "testNotEquals">
<cfset remoteURL = "http://localhost/mxunit/framework/RemoteFacade.cfc?wsdl">{code}
Replace the variables with the component, function, and URL you're trying to invoke. Run that RemoteFacadeTester.cfm in your browser and inspect the output. Look at the CFDumps. It'll show you the result of running the test when run directly, when run through a testsuite, and when run through the RemoteFacade.cfc URL. All 3 results should be roughly the same.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292837</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325565</id>
    <property name="body"><![CDATA[{toc:minLevel=4}
I have tried to anticipate the most common problems and address them in the Help that comes with the MXUnit Eclipse plugin. You should always consult the Help first\!

h4. Q: What version of Eclipse will the plugin work in?

A: As of right now, Eclipse 3.4 and later. If you need a version that works on Eclipse 3.3, use [http://mxunit.org/update33] as the update site


h4. Q: Why won't the plugin see "MyFile.cfc" as a test?

A: Because the file doesn't start or end with the word "Test".

h4. Q: The plugin seems to be ignoring my custom RemoteFacade.cfc URL

A: Try restarting Eclipse. Also, it only honors that URL when it's set at the project level, not in a subdirectory of a project

h4. Q: The plugin can't figure out my "cfc path" (dot notation)

A: Read the plugin help. If you still can't figure it out from reading the help, please email the [Google Group|http://groups.google.com/group/mxunit]

h4. Q: The plugin won't do anything with a TestSuite I created

A: The plugin doesn't do test suites. Read the Help for an explanation

h4. Q: Why doesn't the plugin support NTLMv2?

A: Because neither Apache Axis nor commons HTTPClient doesn't support it. There does not, as of this writing, appear to be a free java client for NTLMv2

h4. Q: When I run the tests in the plugin, my Application scope variables aren't present

A: You'll need a custom RemoteFacade.cfc (very easy\!). See the Plugin Help.

h4. Q: When I run the tests in the plugin, I get "Variable FORM is undefined". Why?


A: The plugin runs the tests via SOAP. The form scope is not available to ColdFusion components during webservice calls. My advice: Don't use the form scope in your CFCs


h4. Q: What are the differences between how the plugin runs tests and how the tests run when I run them in the browser?

A: The plugin runs test test one test at a time, one request at a time. This means there is zero chance for "bleed" from one test method run to another. When you run them in the browser, they're run as a single request.

In addition, since the plugin runs the tests via SOAP, the FORM scope is not available.

h4. Q: What do you call a snail in a ship?

A: A Snailor\!

h4. Q: Does the Plugin work in ColdFusion Builder?

A: Of course]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292843</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325563</id>
    <property name="body"><![CDATA[{toc:minLevel=4}
I have tried to anticipate the most common problems and address them in the Help that comes with the MXUnit Eclipse plugin. You should always consult the Help first\!

h4. Q: What version of Eclipse will the plugin work in?

A: As of right now, Eclipse 3.4 and later. If you need a version that works on Eclipse 3.3, use [http://mxunit.org/update33] as the update site


h4. Q: Why won't the plugin see "MyFile.cfc" as a test?

A: Because the file doesn't start or end with the word "Test".

h4. Q: The plugin seems to be ignoring my custom RemoteFacade.cfc URL

A: Try restarting Eclipse. Also, it only honors that URL when it's set at the project level, not in a subdirectory of a project

h4. Q: The plugin can't figure out my "cfc path" (dot notation)

A: Read the plugin help. If you still can't figure it out from reading the help, please email the [Google Group|http://groups.google.com/group/mxunit]

h4. Q: The plugin won't do anything with a TestSuite I created

A: The plugin doesn't do test suites. Read the Help for an explanation

h4. Q: Why doesn't the plugin support NTLMv2?

A: Because neither Apache Axis nor commons HTTPClient doesn't support it. There does not, as of this writing, appear to be a free java client for NTLMv2

h4. Q: What are the differences between how the plugin runs tests and how the tests run when I run them in the browser?

A: The plugin runs test test one test at a time, one request at a time. This means there is zero chance for "bleed" from one test method run to another. When you run them in the browser, they're run as a single request.

In addition, since the plugin runs the tests via SOAP, the FORM scope is not available.

h4. Q: What do you call a snail in a ship?

A: A Snailor\!

h4. Q: Does the Plugin work in ColdFusion Builder?

A: Of course]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292841</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325552</id>
    <property name="body"><![CDATA[{toc:type=flat|minLevel=4}
I have tried to anticipate the most common problems and address them in the Help that comes with the MXUnit Eclipse plugin. You should always consult the Help first\!

h4. Q: What version of Eclipse will the plugin work in?

A: As of right now, Eclipse 3.4 and later. If you need a version that works on Eclipse 3.3, use http://mxunit.org/update33 as the update site


h4. Q: Why won't the plugin see "MyFile.cfc" as a test?

A: Because the file doesn't start or end with the word "Test".

h4. Q: The plugin seems to be ignoring my custom RemoteFacade.cfc URL

A: Try restarting Eclipse. Also, it only honors that URL when it's set at the project level, not in a subdirectory of a project

h4. Q: The plugin can't figure out my "cfc path" (dot notation)

A: Read the plugin help. If you still can't figure it out from reading the help, please email the [Google Group|http://groups.google.com/group/mxunit]

h4. Q: The plugin won't do anything with a TestSuite I created

A: The plugin doesn't do test suites. Read the Help for an explanation

h4. Q: Why doesn't the plugin support NTLMv2?

A: Because neither Apache Axis nor commons HTTPClient doesn't support it. There does not, as of this writing, appear to be a free java client for NTLMv2

h4. Q: What are the differences between how the plugin runs tests and how the tests run when I run them in the browser?

A: The plugin runs test test one test at a time, one request at a time. This means there is zero chance for "bleed" from one test method run to another. When you run them in the browser, they're run as a single request.

In addition, since the plugin runs the tests via SOAP, the FORM scope is not available.

h4. Q: What do you call a snail in a ship?

A: A Snailor\!

h4. Q: Does the Plugin work in ColdFusion Builder?

A: Of course]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292830</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325550</id>
    <property name="body"><![CDATA[{toc:minLevel=4}
I have tried to anticipate the most common problems and address them in the Help that comes with the MXUnit Eclipse plugin. You should always consult the Help first\!

h4. Q: Why won't the plugin see "MyFile.cfc" as a test?

A: Because the file doesn't start or end with the word "Test".

h4. Q: The plugin seems to be ignoring my custom RemoteFacade.cfc URL

A: Try restarting Eclipse. Also, it only honors that URL when it's set at the project level, not in a subdirectory of a project

h4. Q: The plugin can't figure out my "cfc path" (dot notation)

A: Read the plugin help. If you still can't figure it out from reading the help, please email the [Google Group|http://groups.google.com/group/mxunit]

h4. Q: The plugin won't do anything with a TestSuite I created

A: The plugin doesn't do test suites. Read the Help for an explanation

h4. Q: Why doesn't the plugin support NTLMv2?

A: Because neither Apache Axis nor commons HTTPClient doesn't support it. There does not, as of this writing, appear to be a free java client for NTLMv2

h4. Q: What are the differences between how the plugin runs tests and how the tests run when I run them in the browser?

A: The plugin runs test test one test at a time, one request at a time. This means there is zero chance for "bleed" from one test method run to another. When you run them in the browser, they're run as a single request.

In addition, since the plugin runs the tests via SOAP, the FORM scope is not available. ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292828</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325557</id>
    <property name="body"><![CDATA[In general, problems with the plugin come in two varieties:
* The plugin can't figure out the correct "cfc path" for a file
* The plugin can't communicate with the RemoteFacade URL

h2. CFC Path

If you've read the Help documentation in the plugin and you still can't figure out how to get the plugin to correctly derive the CFC path for your components, then please follow these steps:
# Close Eclipse
# Open eclipse.ini in the eclipse install directory, and add "-debug" on a separate line, toward the top of the file. For example, it might look like this:
# {code}-startup
plugins/org.eclipse.equinox.launcher_1.0.200.v20090520.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.win32.win32.x86_1.0.200.v20090519
-product
org.eclipse.epp.package.rcp.product
--launcher.XXMaxPermSize
256M
-showsplash
-debug
org.eclipse.platform
--launcher.XXMaxPermSize
256m
-vmargs
-Dosgi.requiredJavaVersion=1.5
-Xms40m
-Xmx512m{code}
# (Note the \-debug on a line by itself)
# Start Eclipse
# Try running your test. This will now put a bunch of stuff into Eclipse's error log view
# Open the Error Log View (window \-\- show view \-\- general \-\- Error Log)
# You'll see a number of entries with an "i" (Information) Icon in the top few rows. Copy the contents of those rows and email them to the MXUnit google group with an explanation of what the plugin should be doing that it's not doing

After you do that, you can remove the \-debug from your eclipse.ini file


h2. RemoteFacade

Ensure you can hit the URL in a browser. If not, there's your problem.

If you can access the URL in a browser, but the plugin still can't talk to your URL, try opening that URL in Eclipse's internal browser

h2. Using the RemoteFacadeTester.cfm


As a last resort, open a file named "RemoteFacadeTester.cfm" in the mxunit/samples directory. This file is included in the distribution. At the top of the file, you'll see this content:
{code}<!--- change these as necessary --->
<cfset mycomponent = "mxunit.PluginDemoTests.HodgePodgeTest">
<cfset myfunction = "testNotEquals">
<cfset remoteURL = "http://localhost/mxunit/framework/RemoteFacade.cfc?wsdl">{code}
Replace the variables with the component, function, and URL you're trying to invoke. Run that RemoteFacadeTester.cfm in your browser and inspect the output. Look at the CFDumps. It'll show you the result of running the test when run directly, when run through a testsuite, and when run through the RemoteFacade.cfc URL. All 3 results should be roughly the same.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292835</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325554</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292832</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325555</id>
    <property name="body"><![CDATA[In general, problems with the plugin come in two varieties:
* The plugin can't figure out the correct "cfc path" for a file
* The plugin can't communicate with the RemoteFacade URL

h2. CFC Path

If you've read the Help documentation in the plugin and you still can't figure out how to get the plugin to correctly derive the CFC path for your components, then please follow these steps:
# Close Eclipse
# Open eclipse.ini in the eclipse install directory, and add "-debug" on a separate line, toward the top of the file. For example, it might look like this:
# {code}-startup
plugins/org.eclipse.equinox.launcher_1.0.200.v20090520.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.win32.win32.x86_1.0.200.v20090519
-product
org.eclipse.epp.package.rcp.product
--launcher.XXMaxPermSize
256M
-showsplash
-debug
org.eclipse.platform
--launcher.XXMaxPermSize
256m
-vmargs
-Dosgi.requiredJavaVersion=1.5
-Xms40m
-Xmx512m{code}
# (Note the \-debug) on a line by itself
# Start Eclipse
# Try running your test. This will now put a bunch of stuff into Eclipse's error log view
# Open the Error Log View (window \-\- show view \-\- general \-\- Error Log)
# You'll see a number of entries with an "i" (Information) Icon in the top few rows. Copy the contents of those rows and email them to the MXUnit google group with an explanation of what the plugin should be doing that it's not doing

After you do that, you can remove the \-debug from your eclipse.ini file


h2. RemoteFacade

Ensure you can hit the URL in a browser. If not, there's your problem.

If you can access the URL in a browser, but the plugin still can't talk to your URL, try opening that URL in Eclipse's internal browser

h2. Using the RemoteFacadeTester.cfm


As a last resort, open a file named "RemoteFacadeTester.cfm" in the mxunit/samples directory. This file is included in the distribution. At the top of the file, you'll see this content:
{code}<!--- change these as necessary --->
<cfset mycomponent = "mxunit.PluginDemoTests.HodgePodgeTest">
<cfset myfunction = "testNotEquals">
<cfset remoteURL = "http://localhost/mxunit/framework/RemoteFacade.cfc?wsdl">{code}
Replace the variables with the component, function, and URL you're trying to invoke. Run that RemoteFacadeTester.cfm in your browser and inspect the output. Look at the CFDumps. It'll show you the result of running the test when run directly, when run through a testsuite, and when run through the RemoteFacade.cfc URL. All 3 results should be roughly the same.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292833</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325544</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292822</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325548</id>
    <property name="body"><![CDATA[I have tried to anticipate the most common problems and address them in the Help that comes with the MXUnit Eclipse plugin. You should always consult the Help first\!

Q: Why won't the plugin see "MyFile.cfc" as a test?

A: Because the file doesn't start or end with the word "Test".

Q: The plugin seems to be ignoring my custom RemoteFacade.cfc URL

A: Try restarting Eclipse. Also, it only honors that URL when it's set at the project level, not in a subdirectory of a project

Q: The plugin can't figure out my "cfc path" (dot notation)

A: Read the plugin help. If you still can't figure it out from reading the help, please email the [Google Group|http://groups.google.com/group/mxunit]

Q: The plugin won't do anything with a TestSuite I created

A: The plugin doesn't do test suites. Read the Help for an explanation

Q: Why doesn't the plugin support NTLMv2?

A: Because neither Apache Axis nor commons HTTPClient doesn't support it. There does not, as of this writing, appear to be a free java client for NTLMv2

Q: What are the differences between how the plugin runs tests and how the tests run when I run them in the browser?

A: The plugin runs test test one test at a time, one request at a time. This means there is zero chance for "bleed" from one test method run to another. When you run them in the browser, they're run as a single request.

In addition, since the plugin runs the tests via SOAP, the FORM scope is not available. ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292826</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325546</id>
    <property name="body"><![CDATA[I have tried to anticipate the most common problems and address them in the Help that comes with the MXUnit Eclipse plugin. You should always consult the Help first\!

Q: Why won't the plugin see "MyFile.cfc" as a test?

A: Because the file doesn't start or end with the word "Test".]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292824</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325541</id>
    <property name="body"><![CDATA[h2.


[Install / Update|Install the Eclipse Plugin]

[Configure and Test|default:Configure and Test the Plugin]


[Keyboard Shortcuts|default:Eclipse Plugin Keyboard Shortcuts]

[Troubleshooting|Eclipse Plugin Troubleshooting]

[Frequently Asked Questions|Eclipse Plugin FAQ]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292818</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325538</id>
    <property name="body"><![CDATA[h2.

[Install / Update|Install the Eclipse Plugin]

[Configure and Test|default:Configure and Test the Plugin]


[Keyboard Shortcuts|default:Eclipse Plugin Keyboard Shortcuts]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292813</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325592</id>
    <property name="body"><![CDATA[{section:border=false}

 {column:width=60%}
   h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world. 
    h6. Quick Links
      * [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
      * [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
      * [The MXUnit Blog|http://blog.mxunit.org]

    h6. Support
      * [MXUnit Google Group|http://groups.google.com/group/mxunit]
      * [File a Bug|http://code.google.com/p/mxunit/issues/list]
     
    h6. Committers
       * Marc	Esher
       * Adam	Haskel
       * Mike	Henke
       * Randy	Merril
       * Mike	Rankin
       * Bill	Shelton 
       * Bob	Silverberg


 {column}

{column:width=5%}
 &nbsp;
{column}


{column:width=35%}
  h6. Navigate space
  {pagetreesearch}
  {pagetree:startDepth=3}
{column}

{section}

{recently-updated-dashboard:types=page,comment}




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292872</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325594</id>
    <property name="body"><![CDATA[Here are some happy customers:

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292874</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325595</id>
    <property name="body"><![CDATA[h3. Here are some very happy users :-)


[Animation Mentor|http://www.animationmentor.com]
"My work  (Animation Mentor) uses it for THE online animation school (sorry had to pump it up there). In fact
I've spent the whole week cleaning up our entire MXUnit set of tests to finally all pass. Keep up the great work\!"


----
[Crisp eBusiness|http://www.crisp-ebusiness.com/]


"If you want to do Test Driven Development with CFML, then MXUnit is THE framework to use\!"

----
[Figleaf Software|http://figleaf.com]
"MXUnit ROCKS"

----
[ICF Macro|http://www.macrointernational.com/]
"MXUnit is the suck\!"

----
[Mach-II Framework|http://www.mach-ii.com/]

----
[NASA|http://nasa.gov]
"The Altair Program here at Johnson Space Center NASA is using MXUnit for testing the Extensible Information Modeler (XIM) service
application.  This set of CF services allow the Altair program to create applications to design the Lunar Lander in very flexible ways
under constantly changing requirements.  XIM has further been expanded to support the certification of flight readiness (COFR) process of the
ISS Payloads group and other NASA programs are in the pipeline.  Thus, unit testing of the service layer has become critical and we found
MXUnit to be the best of breed among the available CF xUnit frameworks.  It is being regularly maintained, has the best assertion
capabilities, and best test output mechanisms.  The addition of ant support is an added plus (if you can get NTLM authentication
working :-) "

----
[Railo Technologies|http://www.getrailo.com/]
"It's the cream of unit testing frameworks in CFML\!"

----
[SilverWare Consulting|http://silverareconsulting.com]
"It is remarkably easy to get up and running with unit testing in CFusing MXUnit. The framework is well designed and full featured, and
the Eclipse plugin makes working with it a pleasure. Equally important is the support available from the development team, who are remarkably
responsive to questions, bug reports and feature requests.

Keep up the great work, hombres\!"

----
[SOSensible|http://www.sosensible.com/]
It is the most approachable ColdFusion testing framework I have come across\!"

----
[Strictly Business Computer Systems|http://www.sbcs.com]
"It's easy, it's free, it's powerful, it's the best of it's kind.  There is no reason not to use it."

----
[UNM|http://unm.edu]
"MXUnit is bad-ass.  Use it.  Use it lots."

----
[Warwick Business School staff information portal project|http://www.wbs.ac.uk/]
"We're using MXUnit for a first foray into test-driven development. The option to use multiple interfaces gives us great flexibility in how we manage tests both for writing brand new code, and regression checking a monolithic application as we refactor. The simple assertion syntax and built-in support for accessing private methods makes for very quick and natural development."]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292875</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325596</id>
    <property name="body"><![CDATA[{section:border=false}

 {column:width=60%}
   h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world. 
    h6. Quick Links
      * [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
      * [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
      * [The MXUnit Blog|http://blog.mxunit.org]
      * [Download|http://mxunit.org/download]
      * [Eclipse Plugin Update Site|http://mxunit.org/update]
      * [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]

    h6. Support
      * [MXUnit Google Group|http://groups.google.com/group/mxunit]
      * [File a Bug|http://code.google.com/p/mxunit/issues/list]
     
    h6. Committers
       * Marc	Esher
       * Adam	Haskel
       * Mike	Henke
       * Randy	Merril
       * Mike	Rankin
       * Bill	Shelton 
       * Bob	Silverberg


 {column}

{column:width=5%}
 &nbsp;
{column}


{column:width=35%}
  h6. Navigate space
  {pagetreesearch}
  {pagetree:startDepth=3}
{column}

{section}

{recently-updated-dashboard:types=page,comment}




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292876</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325597</id>
    <property name="body"><![CDATA[h3. Here are some happy users :-)


[Animation Mentor|http://www.animationmentor.com]
"My work  (Animation Mentor) uses it for THE online animation school (sorry had to pump it up there). In fact
I've spent the whole week cleaning up our entire MXUnit set of tests to finally all pass. Keep up the great work\!"


----
[Crisp eBusiness|http://www.crisp-ebusiness.com/]


"If you want to do Test Driven Development with CFML, then MXUnit is THE framework to use\!"

----
[Figleaf Software|http://figleaf.com]
"MXUnit ROCKS"

----
[ICF Macro|http://www.macrointernational.com/]
"MXUnit is the suck\!"

----
[Mach-II Framework|http://www.mach-ii.com/]

----
[NASA|http://nasa.gov]
"The Altair Program here at Johnson Space Center NASA is using MXUnit for testing the Extensible Information Modeler (XIM) service
application.  This set of CF services allow the Altair program to create applications to design the Lunar Lander in very flexible ways
under constantly changing requirements.  XIM has further been expanded to support the certification of flight readiness (COFR) process of the
ISS Payloads group and other NASA programs are in the pipeline.  Thus, unit testing of the service layer has become critical and we found
MXUnit to be the best of breed among the available CF xUnit frameworks.  It is being regularly maintained, has the best assertion
capabilities, and best test output mechanisms.  The addition of ant support is an added plus (if you can get NTLM authentication
working :-) "

----
[Railo Technologies|http://www.getrailo.com/]
"It's the cream of unit testing frameworks in CFML\!"

----
[SilverWare Consulting|http://silverareconsulting.com]
"It is remarkably easy to get up and running with unit testing in CFusing MXUnit. The framework is well designed and full featured, and
the Eclipse plugin makes working with it a pleasure. Equally important is the support available from the development team, who are remarkably
responsive to questions, bug reports and feature requests.

Keep up the great work, hombres\!"

----
[SOSensible|http://www.sosensible.com/]
It is the most approachable ColdFusion testing framework I have come across\!"

----
[Strictly Business Computer Systems|http://www.sbcs.com]
"It's easy, it's free, it's powerful, it's the best of it's kind.  There is no reason not to use it."

----
[UNM|http://unm.edu]
"MXUnit is bad-ass.  Use it.  Use it lots."

----
[Warwick Business School staff information portal project|http://www.wbs.ac.uk/]
"We're using MXUnit for a first foray into test-driven development. The option to use multiple interfaces gives us great flexibility in how we manage tests both for writing brand new code, and regression checking a monolithic application as we refactor. The simple assertion syntax and built-in support for accessing private methods makes for very quick and natural development."]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292877</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325584</id>
    <property name="body"><![CDATA[h6. About Me

You may edit this page to include additional information about yourself.

E-mail: [marc.esher@gmail.com|mailto:marc.esher@gmail.com]

{section}

{column:width=60%}

{recently-updated}
{column}
{column:width=2%}

{column}
{column:width=38%}

h6. Navigate space
{pagetreesearch}
{pagetree}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292864</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325585</id>
    <property name="body"><![CDATA[{section:border=false}

h2. Home


 {column:width=60%}
   h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world. 
    h6. Quick Links
      * [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
      * [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
      * [The MXUnit Blog|http://blog.mxunit.org]

    h6. Support
      * [MXUnit Google Group|http://groups.google.com/group/mxunit]
      * [File a Bug|http://code.google.com/p/mxunit/issues/list]
     
    h6. Committers
       * Marc	Esher
       * Adam	Haskel
       * Mike	Henke
       * Randy	Merril
       * Mike	Rankin
       * Bill	Shelton 
       * Bob	Silverberg


 {column}

{column:width=5%}
 &nbsp;
{column}


{column:width=35%}
  h6. Navigate space
  {pagetreesearch}
  {pagetree:startDepth=3}
{column}

{section}

{recently-updated-dashboard:types=page,comment}




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292865</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325588</id>
    <property name="body"><![CDATA[{section:border=false}

h2. Home


 {column:width=60%}
   h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world. 
    h6. Quick Links
      * [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
      * [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
      * [The MXUnit Blog|http://blog.mxunit.org]

    h6. Support
      * [MXUnit Google Group|http://groups.google.com/group/mxunit]
      * [File a Bug|http://code.google.com/p/mxunit/issues/list]
     
    h6. Committers
       * Marc	Esher
       * Adam	Haskel
       * Mike	Henke
       * Randy	Merril
       * Mike	Rankin
       * Bill	Shelton 
       * Bob	Silverberg


 {column}

{column:width=5%}
 &nbsp;
{column}


{column:width=35%}
  h6. Navigate space
  {pagetreesearch}
  {pagetree:startDepth=3}
{column}

{section}

{recently-updated-dashboard:types=page,comment}




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292868</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325576</id>
    <property name="body"><![CDATA[{section}
{column:width=45%}

h6. Navigate space
{pagetreesearch}
{pagetree:startDepth=2}
{column}
{column:width=5%}


{column}
{column:width=50%}

{recently-updated-dashboard:types=page}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292855</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980788</id>
    <property name="body"><![CDATA[This document outlines the core of unit testing, i.e. Assertions. Assertions are simple: You assert something, and if that assertion does not result in your expectation, the test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions. A single failed assertion means that any subsequent assertions in a test will not execute and thus you won't know if those assertions indicate further problems in your code.

Need an assertion you don't see here? [Roll your own ...|Custom Assertions]

Without further delay, our players, The Assertions:


h3. assertTrue(boolean condition \[,String message\])

assertTrue is one of the two "bread and butter" assertions in any testing framework. The philosophy is simple: you assert something to be true; if it's not, the test fails

{code:title=assertTrue()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertTrue( StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

assertTrue has an opposite, assertFalse:

h3. assertFalse(boolean condition \[, String message\])\*

{code:title=assertFalse}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertFalse( StructIsEmpty(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>

{code}

h3. assert(boolean condition \[,String message\])

assert is semantically equivellent to assertTrue, providing a shorter form :

{code:title=assert()}<cffunction name="testAssert">
	<cfset assert( 1 eq 1,  "Testing a true expression")>
	<cfset assert( not 1 eq 2,  "Testing negated expression")>
</cffunction>
{code}


h3. assertEquals*(any expected, any actual \[, String message\])

assertEquals is the other core assertion. Here, you're asserting that some result equals some expected result. This could be two numbers, two strings, two structs, whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals to compare any type of data.

{code:title=assertEquals()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertEquals(1, StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertEquals(0, StructCount(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

h3. fail*(String message)

fail() is used to actively fail a test. It's useful when you're stubbing a test and you want to ensure it fails, like so:

{code:title=fail()}<cffunction name="addPrivilegeShouldHaveNoEffectIfPrivilegeExists">
 	<cfset fail("test not yet implemented")>
</cffunction>
{code}


It's also useful when you're testing an "error path", like so:

{code:title=fail() to test Error Paths}<cffunction name="addPrivilegesWithPunctuationShouldThrowError">
	<cfset var obj = createObject("component","myObject")>
	<cftry>
		<cfset obj.addPrivilege("Edit.User")>
		<cfset fail("Should not get here. Function under test should've thrown an error")>
	<cfcatch type="mxunit.exception.AssertionFailedError">
		<cfrethrow>
	</cfcatch>
	<cfcatch type="any"><!--- expect to get here ---></cfcatch>
	</cftry>
</cffunction>
{code}

h3. failNotEquals*(any value, any value2  \[,String message\])

Used to fail when two values do not equal. This doesn't perform any assertion... it's simply a convenience method for providing a specific type of failure message

{code:title=failNotEquals()}<cffunction name="demoFailNotEquals">
 	<cfset failNotEquals(myObject1,myOtherObject, "These should not have the same value")>
</cffunction>
{code}

h3. assertSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail for arrays.
{code:title=assertSame()}<cffunction name="initShouldReturnSelf">
	<cfset var obj = createObject("component","myObject")>
	<cfset assertSame(obj,obj.init(), "These should be the same thang since init should return 'this'")>
</cffunction>
{code}

h3. assertNotSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass for arrays.

{code:title=assertNotSame()}<cffunction name="newInstanceShouldNotReturnSelf">
	<cfset var obj = createObject("component","myObjectFactory")>
	<cfset assertNotSame(obj,obj.newInstance(), "These should not be the same thang since newInstance should return a new instance from the factory")>
</cffunction>
{code}

h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion.Note, that these are quite simple, can be easily implemented using the base assertions above, but are provided for convenience.

*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml located in /mxunit/framework/ directory. Simply remove or comment out these line:

{code:title=assertionExtension config-extension in mxunit-config.xml}	<config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true" override="false" />
	<config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false" />
	<config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false" />
{code}

h3. assertXPath*(String xpath, any data, \[String text\], \[String message\])

Searches data using xpath. If text is specified, it tries to match the exact text to  the xpath expression. Otherwise ,it returns true if any nodes are found that match the xpath expression. Note that, unlike most assertions, assertXPath returns an xml dom representation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this assertion returns true if any elements of the xpath expression are found. Not required. Defaults to ""
\[string message\]: The message to display when this assertion fails Not required. Defaults to The XPath expression, #arguments.xpath#, did not match the data.

{code:title=assertXPath()}
<cffunction name="testFindGoogleInTitle">
	<cfscript>
	nodes = assertXpath('/html/head/title', "http://google.com", "Google");
	debug(nodes);
	nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
	nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
	</cfscript>
</cffunction>
{code}

The above parses the results from urls and strings and searches the parsed results for the XPath expression.
Try it. Really, it works\!

h3. assertIsTypeOf*(component obj, String type)

Determines if obj is of type. type needs to be fully qualified.
{code:title=assertIsTypeOf()}
<cffunction name="demoAssertIsTypeOf">
  <cfset assertIsTypeOf(obj,"my.type.Of.Object")>
</cffunction>
{code}

h3. assertIsXMLDoc*(any xml \[, String message\])

Determines if xml is a valid XML DOM object.
{code:title=assertIsXMLDoc()}
<cffunction name="demoAssertIsXMLDoc">
  <cfset assertIsXMLDoc(xml)>
</cffunction>
{code}

h3. assertIsArray*(any obj1)

Determines if the obj1 is a valid array.
{code:title=assertIsArray()}
<cffunction name="demoAssertIsArray">
  <cfset assertIsArray(myObject1)>
</cffunction>
{code}

h3. assertIsDefined*(any obj1)

Determines if the obj1 has been defined in the available scope.
{code:title=assertIsDefined()}
<cffunction name="demoAssertIsDefined">
  <cfset assertIsDefined("myObject1")>
</cffunction>
{code}

h3. assertIsEmpty*(any obj1)

Determines if the obj1 is a 0 length string or NULL equivalent.
{code:title=assertIsEmpty()}
<cffunction name="demoAssertIsEmpty">
  <cfset assertIsEmpty(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyArray*(any obj1,\[String message\])

Determines if the obj1 is an array with no elements.
{code:title=assertIsEmptyArray()}
<cffunction name="demoAssertIsEmptyArray">
  <cfset assertIsEmptyArray(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyQuery*(any obj1,\[String message\])

Determines if the obj1 is a query with no rows.
{code:title=assertIsEmptyQuery()}
<cffunction name="demoAssertIsEmptyQuery">
  <cfset assertIsEmptyQuery(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyStruct*(any obj1,\[String message\])

Determines if the obj1 is a struct with no keys or values.
{code:title=assertIsEmptyStruct()}
<cffunction name="demoAssertIsEmptyStruct">
  <cfset assertIsEmptyStruct(myObject1)>
</cffunction>
{code}

h3. assertIsQuery*(any q)

Determines if q is a valid ColdFusion query.
{code:title=assertIsQuery()}
<cffunction name="demoAssertIsQuery">
  <cfset assertIsQuery(q)>
</cffunction>
{code}

h3. assertIsStruct*(any obj)

Determines if obj is a valid ColdFusion structure.
{code:title=assertIsStruct()}
<cffunction name="demoAssertIsStruct">
  <cfset assertIsStruct(obj)>
</cffunction>
{code}

----
Need more? [Build your own ...|Custom Assertions]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948023</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325578</id>
    <property name="body"><![CDATA[h2. Home

{section:border=false}
 {column:width=60%}
   h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world. 
    h6. Quick Links
      * Getting Started
      * 

    h6. Support
      * Google Groups
      * Direct Email

 {column}

{column:width=5%}
 &nbsp;
{column}


{column:width=35%}
  h6. Navigate space
  {pagetreesearch}
  {pagetree:startDepth=3}
{column}

{section}

{recently-updated-dashboard:types=page,comment}




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292858</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980789</id>
    <property name="body"><![CDATA[In general, problems with the plugin come in two varieties:
* The plugin can't figure out the correct "cfc path" for a file
* The plugin can't communicate with the RemoteFacade URL

h2. CFC Path

If you've read the Help documentation in the plugin and you still can't figure out how to get the plugin to correctly derive the CFC path for your components, then please follow these steps:
# Close Eclipse
# Open eclipse.ini in the eclipse install directory, and add "-debug" on a separate line, toward the top of the file. For example, it might look like this:
# {code}-startup
plugins/org.eclipse.equinox.launcher_1.0.200.v20090520.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.win32.win32.x86_1.0.200.v20090519
-product
org.eclipse.epp.package.rcp.product
--launcher.XXMaxPermSize
256M
-showsplash
-debug
org.eclipse.platform
--launcher.XXMaxPermSize
256m
-vmargs
-Dosgi.requiredJavaVersion=1.5
-Xms40m
-Xmx512m{code}
# (Note the \-debug on a line by itself)
# Start Eclipse
# Try running your test. This will now put a bunch of stuff into Eclipse's error log view
# Open the Error Log View (window \-\- show view \-\- general \-\- Error Log)
# You'll see a number of entries with an "i" (Information) Icon in the top few rows. Copy the contents of those rows and email them to the MXUnit google group with an explanation of what the plugin should be doing that it's not doing
# Alternately, you can open the raw law and copy the appropriate lines which you'll find toward the bottom of the file. To get to the Eclipse error log: Help \-\- About Eclipse \-\- Installation Details \-\- View Error Log

After you do that, you can remove the \-debug from your eclipse.ini file



h2. RemoteFacade

* Ensure you can hit the URL in a browser. If not, there's your problem.
* If you can access the URL in a browser, but the plugin still can't talk to your URL, try opening that URL in Eclipse's internal browser
* If you're still getting "could not connect to facade URL" and can't figure it out, ensure that you don't have any onError stuff in your Application.cfc. Perhaps the errors are being swallowed?
* Try looking at the coldfusion error logs to see if anything in there sheds light on the problem


h2. Using the RemoteFacadeTester.cfm


As a last resort, open a file named "RemoteFacadeTester.cfm" in the mxunit/samples directory. This file is included in the distribution. At the top of the file, you'll see this content:
{code:controls=true}<!--- change these as necessary --->
<cfset mycomponent = "mxunit.PluginDemoTests.HodgePodgeTest">
<cfset myfunction = "testNotEquals">
<cfset remoteURL = "http://localhost/mxunit/framework/RemoteFacade.cfc?wsdl">{code}Replace the variables with the component, function, and URL you're trying to invoke. Run that RemoteFacadeTester.cfm in your browser and inspect the output. Look at the CFDumps. It'll show you the result of running the test when run directly, when run through a testsuite, and when run through the RemoteFacade.cfc URL. All 3 results should be roughly the same.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948024</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325581</id>
    <property name="body"><![CDATA[{section:border=false}
{column:width=5%}
{column}
h2. Home


 {column:width=60%}
   h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world. 
    h6. Quick Links
      * [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
      * [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
      * [The MXUnit Blog|http://blog.mxunit.org]

    h6. Support
      * [MXUnit Google Group|http://groups.google.com/group/mxunit]
      * [File a Bug|http://code.google.com/p/mxunit/issues/list]
     
    h6. Committers
       * Marc	Esher
       * Adam	Haskel
       * Mike	Henke
       * Randy	Merril
       * Mike	Rankin
       * Bill	Shelton 
       * Bob	Silverberg


 {column}

{column:width=5%}
 &nbsp;
{column}


{column:width=35%}
  h6. Navigate space
  {pagetreesearch}
  {pagetree:startDepth=3}
{column}

{section}

{recently-updated-dashboard:types=page,comment}




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292861</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980786</id>
    <property name="body"><![CDATA[This document outlines the core of unit testing, i.e. Assertions. Assertions are simple: You assert something, and if that assertion does not result in your expectation, the test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions. A single failed assertion means that any subsequent assertions in a test will not execute and thus you won't know if those assertions indicate further problems in your code.

Need an assertion you don't see here? [Roll your own ...|Custom Assertions]

Without further delay, our players, The Assertions:


h3. assertTrue(boolean condition \[,String message\])

assertTrue is one of the two "bread and butter" assertions in any testing framework. The philosophy is simple: you assert something to be true; if it's not, the test fails

{code:title=assertTrue()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertTrue( StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

assertTrue has an opposite, assertFalse:

h3. assertFalse()*(boolean condition \[, String message\])

{code:title=assertFalse}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertFalse( StructIsEmpty(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>

{code}

h3. assert(boolean condition \[,String message\])

assert is semantically equivellent to assertTrue, providing a shorter form :

{code:title=assert()}<cffunction name="testAssert">
	<cfset assert( 1 eq 1,  "Testing a true expression")>
	<cfset assert( not 1 eq 2,  "Testing negated expression")>
</cffunction>
{code}


h3. assertEquals*(any expected, any actual \[, String message\])

assertEquals is the other core assertion. Here, you're asserting that some result equals some expected result. This could be two numbers, two strings, two structs, whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals to compare any type of data.

{code:title=assertEquals()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertEquals(1, StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertEquals(0, StructCount(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

h3. fail*(String message)

fail() is used to actively fail a test. It's useful when you're stubbing a test and you want to ensure it fails, like so:

{code:title=fail()}<cffunction name="addPrivilegeShouldHaveNoEffectIfPrivilegeExists">
 	<cfset fail("test not yet implemented")>
</cffunction>
{code}


It's also useful when you're testing an "error path", like so:

{code:title=fail() to test Error Paths}<cffunction name="addPrivilegesWithPunctuationShouldThrowError">
	<cfset var obj = createObject("component","myObject")>
	<cftry>
		<cfset obj.addPrivilege("Edit.User")>
		<cfset fail("Should not get here. Function under test should've thrown an error")>
	<cfcatch type="mxunit.exception.AssertionFailedError">
		<cfrethrow>
	</cfcatch>
	<cfcatch type="any"><!--- expect to get here ---></cfcatch>
	</cftry>
</cffunction>
{code}

h3. failNotEquals*(any value, any value2  \[,String message\])

Used to fail when two values do not equal. This doesn't perform any assertion... it's simply a convenience method for providing a specific type of failure message

{code:title=failNotEquals()}<cffunction name="demoFailNotEquals">
 	<cfset failNotEquals(myObject1,myOtherObject, "These should not have the same value")>
</cffunction>
{code}

h3. assertSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail for arrays.
{code:title=assertSame()}<cffunction name="initShouldReturnSelf">
	<cfset var obj = createObject("component","myObject")>
	<cfset assertSame(obj,obj.init(), "These should be the same thang since init should return 'this'")>
</cffunction>
{code}

h3. assertNotSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass for arrays.

{code:title=assertNotSame()}<cffunction name="newInstanceShouldNotReturnSelf">
	<cfset var obj = createObject("component","myObjectFactory")>
	<cfset assertNotSame(obj,obj.newInstance(), "These should not be the same thang since newInstance should return a new instance from the factory")>
</cffunction>
{code}

h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion.Note, that these are quite simple, can be easily implemented using the base assertions above, but are provided for convenience.

*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml located in /mxunit/framework/ directory. Simply remove or comment out these line:

{code:title=assertionExtension config-extension in mxunit-config.xml}	<config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true" override="false" />
	<config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false" />
	<config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false" />
{code}

h3. assertXPath*(String xpath, any data, \[String text\], \[String message\])

Searches data using xpath. If text is specified, it tries to match the exact text to  the xpath expression. Otherwise ,it returns true if any nodes are found that match the xpath expression. Note that, unlike most assertions, assertXPath returns an xml dom representation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this assertion returns true if any elements of the xpath expression are found. Not required. Defaults to ""
\[string message\]: The message to display when this assertion fails Not required. Defaults to The XPath expression, #arguments.xpath#, did not match the data.

{code:title=assertXPath()}
<cffunction name="testFindGoogleInTitle">
	<cfscript>
	nodes = assertXpath('/html/head/title', "http://google.com", "Google");
	debug(nodes);
	nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
	nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
	</cfscript>
</cffunction>
{code}

The above parses the results from urls and strings and searches the parsed results for the XPath expression.
Try it. Really, it works\!

h3. assertIsTypeOf*(component obj, String type)

Determines if obj is of type. type needs to be fully qualified.
{code:title=assertIsTypeOf()}
<cffunction name="demoAssertIsTypeOf">
  <cfset assertIsTypeOf(obj,"my.type.Of.Object")>
</cffunction>
{code}

h3. assertIsXMLDoc*(any xml \[, String message\])

Determines if xml is a valid XML DOM object.
{code:title=assertIsXMLDoc()}
<cffunction name="demoAssertIsXMLDoc">
  <cfset assertIsXMLDoc(xml)>
</cffunction>
{code}

h3. assertIsArray*(any obj1)

Determines if the obj1 is a valid array.
{code:title=assertIsArray()}
<cffunction name="demoAssertIsArray">
  <cfset assertIsArray(myObject1)>
</cffunction>
{code}

h3. assertIsDefined*(any obj1)

Determines if the obj1 has been defined in the available scope.
{code:title=assertIsDefined()}
<cffunction name="demoAssertIsDefined">
  <cfset assertIsDefined("myObject1")>
</cffunction>
{code}

h3. assertIsEmpty*(any obj1)

Determines if the obj1 is a 0 length string or NULL equivalent.
{code:title=assertIsEmpty()}
<cffunction name="demoAssertIsEmpty">
  <cfset assertIsEmpty(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyArray*(any obj1,\[String message\])

Determines if the obj1 is an array with no elements.
{code:title=assertIsEmptyArray()}
<cffunction name="demoAssertIsEmptyArray">
  <cfset assertIsEmptyArray(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyQuery*(any obj1,\[String message\])

Determines if the obj1 is a query with no rows.
{code:title=assertIsEmptyQuery()}
<cffunction name="demoAssertIsEmptyQuery">
  <cfset assertIsEmptyQuery(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyStruct*(any obj1,\[String message\])

Determines if the obj1 is a struct with no keys or values.
{code:title=assertIsEmptyStruct()}
<cffunction name="demoAssertIsEmptyStruct">
  <cfset assertIsEmptyStruct(myObject1)>
</cffunction>
{code}

h3. assertIsQuery*(any q)

Determines if q is a valid ColdFusion query.
{code:title=assertIsQuery()}
<cffunction name="demoAssertIsQuery">
  <cfset assertIsQuery(q)>
</cffunction>
{code}

h3. assertIsStruct*(any obj)

Determines if obj is a valid ColdFusion structure.
{code:title=assertIsStruct()}
<cffunction name="demoAssertIsStruct">
  <cfset assertIsStruct(obj)>
</cffunction>
{code}

----
Need more? [Build your own ...|Custom Assertions]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948021</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325580</id>
    <property name="body"><![CDATA[h2. Home

{section:border=false}
 {column:width=60%}
   h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world. 
    h6. Quick Links
      * [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
      * [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
      * [The MXUnit Blog|http://blog.mxunit.org]

    h6. Support
      * [MXUnit Google Group|http://groups.google.com/group/mxunit]
      * [File a Bug|http://code.google.com/p/mxunit/issues/list]
     
    h6. Committers
       * Marc	Esher
       * Adam	Haskel
       * Mike	Henke
       * Randy	Merril
       * Mike	Rankin
       * Bill	Shelton 
       * Bob	Silverberg


 {column}

{column:width=5%}
 &nbsp;
{column}


{column:width=35%}
  h6. Navigate space
  {pagetreesearch}
  {pagetree:startDepth=3}
{column}

{section}

{recently-updated-dashboard:types=page,comment}




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292860</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980787</id>
    <property name="body"><![CDATA[This document outlines the core of unit testing, i.e. Assertions. Assertions are simple: You assert something, and if that assertion does not result in your expectation, the test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions. A single failed assertion means that any subsequent assertions in a test will not execute and thus you won't know if those assertions indicate further problems in your code.

Need an assertion you don't see here? [Roll your own ...|Custom Assertions]

Without further delay, our players, The Assertions:


h3. assertTrue(boolean condition \[,String message\])

assertTrue is one of the two "bread and butter" assertions in any testing framework. The philosophy is simple: you assert something to be true; if it's not, the test fails

{code:title=assertTrue()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertTrue( StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

assertTrue has an opposite, assertFalse:

h3. assertFalse((boolean condition \[, String message\])\*

{code:title=assertFalse}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertFalse( StructIsEmpty(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>

{code}

h3. assert(boolean condition \[,String message\])

assert is semantically equivellent to assertTrue, providing a shorter form :

{code:title=assert()}<cffunction name="testAssert">
	<cfset assert( 1 eq 1,  "Testing a true expression")>
	<cfset assert( not 1 eq 2,  "Testing negated expression")>
</cffunction>
{code}


h3. assertEquals*(any expected, any actual \[, String message\])

assertEquals is the other core assertion. Here, you're asserting that some result equals some expected result. This could be two numbers, two strings, two structs, whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals to compare any type of data.

{code:title=assertEquals()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertEquals(1, StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertEquals(0, StructCount(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

h3. fail*(String message)

fail() is used to actively fail a test. It's useful when you're stubbing a test and you want to ensure it fails, like so:

{code:title=fail()}<cffunction name="addPrivilegeShouldHaveNoEffectIfPrivilegeExists">
 	<cfset fail("test not yet implemented")>
</cffunction>
{code}


It's also useful when you're testing an "error path", like so:

{code:title=fail() to test Error Paths}<cffunction name="addPrivilegesWithPunctuationShouldThrowError">
	<cfset var obj = createObject("component","myObject")>
	<cftry>
		<cfset obj.addPrivilege("Edit.User")>
		<cfset fail("Should not get here. Function under test should've thrown an error")>
	<cfcatch type="mxunit.exception.AssertionFailedError">
		<cfrethrow>
	</cfcatch>
	<cfcatch type="any"><!--- expect to get here ---></cfcatch>
	</cftry>
</cffunction>
{code}

h3. failNotEquals*(any value, any value2  \[,String message\])

Used to fail when two values do not equal. This doesn't perform any assertion... it's simply a convenience method for providing a specific type of failure message

{code:title=failNotEquals()}<cffunction name="demoFailNotEquals">
 	<cfset failNotEquals(myObject1,myOtherObject, "These should not have the same value")>
</cffunction>
{code}

h3. assertSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail for arrays.
{code:title=assertSame()}<cffunction name="initShouldReturnSelf">
	<cfset var obj = createObject("component","myObject")>
	<cfset assertSame(obj,obj.init(), "These should be the same thang since init should return 'this'")>
</cffunction>
{code}

h3. assertNotSame*(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass for arrays.

{code:title=assertNotSame()}<cffunction name="newInstanceShouldNotReturnSelf">
	<cfset var obj = createObject("component","myObjectFactory")>
	<cfset assertNotSame(obj,obj.newInstance(), "These should not be the same thang since newInstance should return a new instance from the factory")>
</cffunction>
{code}

h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion.Note, that these are quite simple, can be easily implemented using the base assertions above, but are provided for convenience.

*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml located in /mxunit/framework/ directory. Simply remove or comment out these line:

{code:title=assertionExtension config-extension in mxunit-config.xml}	<config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true" override="false" />
	<config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false" />
	<config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false" />
{code}

h3. assertXPath*(String xpath, any data, \[String text\], \[String message\])

Searches data using xpath. If text is specified, it tries to match the exact text to  the xpath expression. Otherwise ,it returns true if any nodes are found that match the xpath expression. Note that, unlike most assertions, assertXPath returns an xml dom representation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this assertion returns true if any elements of the xpath expression are found. Not required. Defaults to ""
\[string message\]: The message to display when this assertion fails Not required. Defaults to The XPath expression, #arguments.xpath#, did not match the data.

{code:title=assertXPath()}
<cffunction name="testFindGoogleInTitle">
	<cfscript>
	nodes = assertXpath('/html/head/title', "http://google.com", "Google");
	debug(nodes);
	nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
	nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
	</cfscript>
</cffunction>
{code}

The above parses the results from urls and strings and searches the parsed results for the XPath expression.
Try it. Really, it works\!

h3. assertIsTypeOf*(component obj, String type)

Determines if obj is of type. type needs to be fully qualified.
{code:title=assertIsTypeOf()}
<cffunction name="demoAssertIsTypeOf">
  <cfset assertIsTypeOf(obj,"my.type.Of.Object")>
</cffunction>
{code}

h3. assertIsXMLDoc*(any xml \[, String message\])

Determines if xml is a valid XML DOM object.
{code:title=assertIsXMLDoc()}
<cffunction name="demoAssertIsXMLDoc">
  <cfset assertIsXMLDoc(xml)>
</cffunction>
{code}

h3. assertIsArray*(any obj1)

Determines if the obj1 is a valid array.
{code:title=assertIsArray()}
<cffunction name="demoAssertIsArray">
  <cfset assertIsArray(myObject1)>
</cffunction>
{code}

h3. assertIsDefined*(any obj1)

Determines if the obj1 has been defined in the available scope.
{code:title=assertIsDefined()}
<cffunction name="demoAssertIsDefined">
  <cfset assertIsDefined("myObject1")>
</cffunction>
{code}

h3. assertIsEmpty*(any obj1)

Determines if the obj1 is a 0 length string or NULL equivalent.
{code:title=assertIsEmpty()}
<cffunction name="demoAssertIsEmpty">
  <cfset assertIsEmpty(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyArray*(any obj1,\[String message\])

Determines if the obj1 is an array with no elements.
{code:title=assertIsEmptyArray()}
<cffunction name="demoAssertIsEmptyArray">
  <cfset assertIsEmptyArray(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyQuery*(any obj1,\[String message\])

Determines if the obj1 is a query with no rows.
{code:title=assertIsEmptyQuery()}
<cffunction name="demoAssertIsEmptyQuery">
  <cfset assertIsEmptyQuery(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyStruct*(any obj1,\[String message\])

Determines if the obj1 is a struct with no keys or values.
{code:title=assertIsEmptyStruct()}
<cffunction name="demoAssertIsEmptyStruct">
  <cfset assertIsEmptyStruct(myObject1)>
</cffunction>
{code}

h3. assertIsQuery*(any q)

Determines if q is a valid ColdFusion query.
{code:title=assertIsQuery()}
<cffunction name="demoAssertIsQuery">
  <cfset assertIsQuery(q)>
</cffunction>
{code}

h3. assertIsStruct*(any obj)

Determines if obj is a valid ColdFusion structure.
{code:title=assertIsStruct()}
<cffunction name="demoAssertIsStruct">
  <cfset assertIsStruct(obj)>
</cffunction>
{code}

----
Need more? [Build your own ...|Custom Assertions]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948022</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325567</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292845</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980793</id>
    <property name="body"><![CDATA[{section:border=false}

!http://s905.photobucket.com/albums/ac259/virtix/?action=view&current=app10938251256827729.jpg|align=left!

 {column:width=60%}
   h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world. 
    h6. Quick Links
      * [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
      * [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
      * [The MXUnit Blog|http://blog.mxunit.org]
      * [Download|http://mxunit.org/download.cfm]
      * [Eclipse Plugin Update Site|http://mxunit.org/update]
      * [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]

    h6. Support
      * [MXUnit Google Group|http://groups.google.com/group/mxunit]
      * [File a Bug|http://code.google.com/p/mxunit/issues/list]
     
    h6. Committers
       * Marc	Esher
       * Adam	Haskell
       * Mike	Henke
       * Randy	Merril
       * Mike	Rankin
       * Bill	Shelton 
       * Bob	Silverberg


 {column}

{column:width=5%}
 &nbsp;
{column}


{column:width=35%}
  h6. Navigate space
  {pagetreesearch}
  {pagetree:startDepth=2}
{column}

{section}

{recently-updated-dashboard:types=page,comment}




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948028</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325569</id>
    <property name="body"><![CDATA[* You can right click on any directory, select "Run MXUnit Tests", and it'll find your Test components and run them, ignoring all the others
* If you have your test case open in an Eclipse editor, you can right click in the file, select "Run MXUnit Test", and run the tests in the plugin
* You can find "slow" tests easily by setting the Timeout preference to "1". You can easily change the timeout preference from the little white triangle on the right side of the view
* If you maximize the plugin view, the view will automatically put the "Tag Context" view on the right (i.e. it'll shift from vertical to horizontal)
* [debug()|default:View Debug Output] and the "b" keyboard shortcut are perhaps your best friends]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292847</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980791</id>
    <property name="body"><![CDATA[{section:border=false}

 {column:width=60%}
   h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world. 
    h6. Quick Links
      * [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
      * [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
      * [The MXUnit Blog|http://blog.mxunit.org]
      * [Download|http://mxunit.org/download.cfm]
      * [Eclipse Plugin Update Site|http://mxunit.org/update]
      * [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]

    h6. Support
      * [MXUnit Google Group|http://groups.google.com/group/mxunit]
      * [File a Bug|http://code.google.com/p/mxunit/issues/list]
     
    h6. Committers
       * Marc	Esher
       * Adam	Haskell
       * Mike	Henke
       * Randy	Merril
       * Mike	Rankin
       * Bill	Shelton 
       * Bob	Silverberg


 {column}

{column:width=5%}
 &nbsp;
{column}


{column:width=35%}
  h6. Navigate space
  {pagetreesearch}
  {pagetree:startDepth=2}
{column}

{section}

{recently-updated-dashboard:types=page,comment}




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948026</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325571</id>
    <property name="body"><![CDATA[[Bestessays.com|http://www.bestessay.org]

<!-- 		@page { size: 21cm 29.7cm; margin: 2cm } 		P { margin-bottom: 0.21cm } 	-->

Want a perfect essay? Well we can help you on that as we do have a lot of professional writers here and rest assured that the paper that you will be getting is  plagiarism free as we will be basing on your instructions. You can choose a lot of Style and have a resources as many as you want to, we can provide all of that.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292849</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325570</id>
    <property name="body"><![CDATA[{section}
{column:width=45%}

h6. Navigate space
{pagetreesearch}
{pagetree:startDepth=2}
{column}
{column:width=5%}


{column}
{column:width=50%}

{recently-updated-dashboard}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292848</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980797</id>
    <property name="body"
      ><![CDATA[{rss:url=http://blog.mxunit.org/feeds/posts/default?alt=rss|max=30}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325500</id>
    <property name="body"><![CDATA[h2. More MXUnit Test Cases

For this section we will add to our [first TestCase|http://mxunit.org/doc/getting-started.html].   We will add more basic math functions to complete a our TestCases: Subtraction, Multiplication, and Division.

Again, following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

Note that this rhythm is referred to as Red-Refactor-Green. This means that the   first step is failure and is signified by {color:red}{*}Red{*}{color}. The second step is to [Refactor|http://www.refactoring.com/] the code. The last step is   to make sure the test passes, which is indicated by {color:green}{*}Green{*}{color}

*1.Write the test* *{_}first{_}*.  Type the following code into your existing file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testSubtract()}  <cffunction name="testSubtract" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 5;
    actual = mycomponent.subtract(10,5);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}
*2. Watch the test fail. (Red)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this:

!mxu-sub-fail.png!


Again, this error is exactly what we expect. This tells us that the subtract method does not exist.

*3. Refactor the component. (Refactor)*

Type the following code into MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests


{code:title=MyComponent.cfc subtract()}  <cffunction name="subtract" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1-num2>
  </cffunction>

{code}
*4. Watch the test pass. (Green)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

You should see this:

!mxu-sub-pass.png!

*5. Now, let's do something interesting with Division - divide by zero.*

Type the following code into your existing file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testDivide()}  <cffunction name="testDivide" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.divide(10,0);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}

*6. Watch the test fail. (Red)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

You should see this:

!mxu-divide-fail-1.png!



This tells us that the divide method does not exist.

*7. Refactor the component. (Refactor)*

Type the following code into MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=MyComponent.cfc divide()}  <cffunction name="divide" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1/num2>
  </cffunction>

{code}
*8. Watch the test pass. (Green)*
[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

Hold on\! We're still in red. The exception shows a divide by zero error.

!mxu-divide-fail-2.png!


In this case, The test itself is broken. So, we need to fix the test. Replace the existing testDivide test method in MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testDivide() refactored}  <cffunction name="testDivide" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.divide(10,5);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}


*8 (Redux). Watch the test pass. (Green)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

Ahh\! Oh joy\! Oh rapture\! We're in the green ...

!mxu-divide-pass.png!

*9. Try the multiplication test on your own.*

[Click here for the full solution|http://mxunit.org/doc/tutorial/solution-1.zip].

*Next - [Building a Test Suite|default:Getting Started -- Test Suites]*]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292755</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325498</id>
    <property name="body"><![CDATA[h2. Getting Started with MXUnit

We built MXUnit to make it as easy as possible to write tests. The framework   is designed to facilitate, not get in the way. So, let's write some code.

*Setup*: [http://mxunit.org/download.cfm]
* [Download|http://mxunit.org/download.cfm] and    install MXUnit directly under your webroot; e.g.; [http://localhost:8500/mxunit/]
* Create a directory in /mxunit/doc/tutorial and call it mytests

Following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

*1.Write the test* *{_}first{_}*.

Type the following code into a new file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=MyComponentTest.cfc}<cfcomponent displayname="MyComponentTest"  extends="mxunit.framework.TestCase">
  <cffunction name="testAdd" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.add(1,1);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>
</cfcomponent>

{code}{*}2. Watch the test fail.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this:

!mx-testfail-1.png!

Believe it or not, this is good\! This error is exactly what we expect. This tells us that our component, MyComponent, does not exist.

*3. Write the component.*

Type the following code into a new file called MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=MyComponent.cfc}<cfcomponent displayname="MyComponent" >
  <cffunction name="add" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1+num2>
  </cffunction>
</cfcomponent>

{code}{*}4. Watch the test pass.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
You should see this:


!mx-testpass-1.png!

*[Next - More Test Cases|default:Getting Started -- More Test Cases]*]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292753</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325499</id>
    <property name="body"><![CDATA[h2. Getting Started with MXUnit

We built MXUnit to make it as easy as possible to write tests. The framework   is designed to facilitate, not get in the way. So, let's write some code.

*Setup*: [http://mxunit.org/download.cfm]
* [Download|http://mxunit.org/download.cfm] and    install MXUnit directly under your webroot; e.g.; [http://localhost:8500/mxunit/]
* Create a directory in /mxunit/doc/tutorial and call it mytests

Following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

*1.Write the test* *{_}first{_}*.

Type the following code into a new file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=MyComponentTest.cfc}<cfcomponent displayname="MyComponentTest"  extends="mxunit.framework.TestCase">
  <cffunction name="testAdd" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.add(1,1);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>
</cfcomponent>

{code}{*}2. Watch the test fail.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this:

!mx-testfail-1.png!

Believe it or not, this is good\! This error is exactly what we expect. This tells us that our component, MyComponent, does not exist.

*3. Write the component.*

Type the following code into a new file called MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=MyComponent.cfc}<cfcomponent displayname="MyComponent" >
  <cffunction name="add" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1+num2>
  </cffunction>
</cfcomponent>

{code}{*}4. Watch the test pass.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
You should see this:


!mx-testpass-1.png!

*[Next - More Test Cases|default:Getting Started -- More Test Cases]*]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292754</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325497</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292752</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325494</id>
    <property name="body"><![CDATA[h2.


h2. *Getting Started with TestSuites*

A TestSuite is a collection of tests that logically fit together.

*Creating and Running a TestSuite*

MXUnit was built to make it as easy as possible to create tests and test suites.
For this tutorial we will _incrementally_ rebuild the MXUnit example found in  the installation package mxunit/samples/MyTestSuite.cfm.

The steps for creating and running a TestSuite are:
# Create a ColdFusion page to run the suite
# Create a TestSuite object
# Tell the TestSuite what tests to add
# run() the TestSuite
# Print the output
# Run the suite in your web browser

*1. Create a ColdFusion page to run this example*

Create an empty ColdFusion page and save it as MyTestSuite.cfm in/mxunit/doc/tutorial/mytests

*2. Create a TestSuite object*

Type the following code into the template:

{code:title=MyTestSuite.cfm}<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
</cfscript>

{code}
*3. Tell the TestSuite what tests to add*

{code}<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
 //Add all runnable methods in MyComponentTest
 testSuite.addAll("mxunit.samples.MyComponentTest");
 testSuite.addAll("mxunit.samples.MyOtherComponentTest"); //Identical to above
 //add explicit test cased (don't start with 'test').
 //Note you can add more than one at a time as a list
 testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");

</cfscript>

{code}
*4. Run the TestSuite*
{code}<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
 testSuite.addAll("mxunit.samples.MyComponentTest");
 testSuite.addAll("mxunit.samples.MyOtherComponentTest");
 testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");
 //Run the tests and save everything in "results"
 results = testSuite.run();
</cfscript>
{code}
*5. Do something with the output*
{code}<cfscript>
testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
testSuite.addAll("mxunit.samples.MyComponentTest");
testSuite.addAll("mxunit.samples.MyOtherComponentTest"); //Identical to above
testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");
results = testSuite.run();
//Now print the results. Simple\!
writeOutput(results.getResultsOutput('html')); //See next section for other output formats
</cfscript>

{code}


*6. Run the suite in your web browser*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyTestSuite.cfm|http://localhost:8500/mxunit/doc/tutorial/mytests/MyTestSuite.cfm]

You should see this:

!suites-1.png!


\[Next - [Overview of MXUnit TestResult output formats|default:MXUnit TestResult Output Formats]\]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292749</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980737</id>
    <property name="body"><![CDATA[

{section:border=false}

 {column:width=60%}
   h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world. 
    h6. Quick Links
      * [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
      * [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
      * [The MXUnit Blog|http://blog.mxunit.org]
      * [Download|http://mxunit.org/download.cfm]
      * [Eclipse Plugin Update Site|http://mxunit.org/update]
      * [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]

    h6. Support
      * [MXUnit Google Group|http://groups.google.com/group/mxunit]
      * [File a Bug|http://code.google.com/p/mxunit/issues/list]
     
    h6. Committers
       * Marc	Esher
       * Adam	Haskel
       * Mike	Henke
       * Randy	Merril
       * Mike	Rankin
       * Bill	Shelton 
       * Bob	Silverberg


 {column}

{column:width=5%}
 &nbsp;
{column}


{column:width=35%}
  h6. Navigate space
  {pagetreesearch}
  {pagetree:startDepth=3}
{column}

{section}

{recently-updated-dashboard:types=page,comment}




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947969</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325495</id>
    <property name="body"><![CDATA[h2. More MXUnit Test Cases

For this section we will add to our [first TestCase|http://mxunit.org/doc/getting-started.html].   We will add more basic math functions to complete a our TestCases: Subtraction, Multiplication, and Division.

Again, following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

Note that this rhythm is referred to as Red-Refactor-Green. This means that the   first step is failure and is signified by {color:red}{*}Red{*}{color}. The second step is to [Refactor|http://www.refactoring.com/] the code. The last step is   to make sure the test passes, which is indicated by {color:green}{*}Green{*}{color}

*1.Write the test* *{_}first{_}*.  Type the following code into your existing file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testSubtract()}  <cffunction name="testSubtract" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 5;
    actual = mycomponent.subtract(10,5);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}
*2. Watch the test fail. (Red)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this:

!mxu-sub-fail.png!


Again, this error is exactly what we expect. This tells us that the subtract method does not exist.

*3. Refactor the component. (Refactor)*

Type the following code into MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests


{code:title=MyComponent.cfc subtract()}  <cffunction name="subtract" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1-num2>
  </cffunction>

{code}
*4. Watch the test pass. (Green)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

You should see this:

!mxu-sub-pass.png!

*5. Now, let's do something interesting with Division - divide by zero.*

Type the following code into your existing file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testDivide()}  <cffunction name="testDivide" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.divide(10,0);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}

*6. Watch the test fail. (Red)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

You should see this:

!mxu-divide-fail-1.png!



This tells us that the divide method does not exist.

*7. Refactor the component. (Refactor)*

Type the following code into MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=MyComponent.cfc divide()}  <cffunction name="divide" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1/num2>
  </cffunction>

{code}
*8. Watch the test pass. (Green)*
[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

Hold on\! We're still in red. The exception shows a divide by zero error.

!mxu-divide-fail-2.png!


In this case, The test itself is broken. So, we need to fix the test. Replace the existing testDivide test method in MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testDivide() refactored}  <cffunction name="testDivide" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.divide(10,5);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}


*8 (Redux). Watch the test pass. (Green)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

Ahh\! Oh joy\! Oh rapture\! We're in the green ...

!mxu-divide-pass.png!

*9. Try the multiplication test on your own.*

[Click here for the full solution|http://mxunit.org/doc/tutorial/solution-1.zip].

\[[Next - Building a Test Suite|default:Getting Started -- Test Suites]\]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292750</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325492</id>
    <property name="body"><![CDATA[h2. Getting Started with MXUnit

We built MXUnit to make it as easy as possible to write tests. The framework   is designed to facilitate, not get in the way. So, let's write some code.

*Setup*: [http://mxunit.org/download.cfm]
* [Download|http://mxunit.org/download.cfm] and    install MXUnit directly under your webroot; e.g.; [http://localhost:8500/mxunit/]
* Create a directory in /mxunit/doc/tutorial and call it mytests

Following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

*1.Write the test* *{_}first{_}*.

Type the following code into a new file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests[http://mxunit.org/doc/index.cfm?doc=firsttestcase#]

{code:title=MyComponentTest.cfc}<cfcomponent displayname="MyComponentTest"  extends="mxunit.framework.TestCase">
  <cffunction name="testAdd" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.add(1,1);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>
</cfcomponent>

{code}{*}2. Watch the test fail.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this:

!mx-testfail-1.png!

Believe it or not, this is good\! This error is exactly what we expect. This tells us that our component, MyComponent, does not exist.

*3. Write the component.*

Type the following code into a new file called MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests[http://mxunit.org/doc/index.cfm?doc=firsttestcase#]

{code:title=MyComponent.cfc}<cfcomponent displayname="MyComponent" >
  <cffunction name="add" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1+num2>
  </cffunction>
</cfcomponent>

{code}{*}4. Watch the test pass.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
You should see this:


!mx-testpass-1.png!

\[[Next - More Test Cases|default:Getting Started -- More Test Cases]\]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292747</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980747</id>
    <property name="body"><![CDATA[When making changes to the MXUnit framework it's a good idea to test those changes to ensure you haven't broken anything. Luckily MXUnit can be used to test itself! Methods of running MXUnit's tests include:
# via the Eclipse plugin
# via the browser
# via the ant task

h3. Running the Unit Tests via the Eclipse Plugin

In the _Navigator_ tab, simply point to the _/tests_ folder, off of the MXUnit root, right-click, and choose *_Run MXUnit Tests_*. You should see the results of the tests in the MXUnit tab.

h3. Expected Errors and Failures

*Fixtures Can Be Safely Ignored*
When running all of the tests in the /tests folder, some errors and failures will be reported. Most of these are due to fixtures being run as tests, so you can safely ignore any errors or failures reported from test cases that reside in a folder with the word _fixture_ in its name.

*Expected Failures*
* testAdd2() in mxunit.tests.samples.MyComponentTest fails with an mxunit.exception.AssertionFailedError failure. It can be safely ignored.
* mismatchedArgumentTypesShouldFail() in mxunit.tests.mightymock.ArgumentMatcherTest fails because it is a placeholder for unimplemented logic.
* attemptingToRegisterTheSamePatternShouldThrowMeaningfulException() in mxunit.tests.mightymock.InvocationTestArgumentMatcherTest fails as a reminder to fix or document an issue.
* testWriteLog() in mxunit.tests.mightymock.MockLoggerTest fails because it is a placeholder for unimplemented logic.
* $addInvocationRecordForBothPatternAndLiteral() in mxunit.tests.mightymock.MockRegistryTest fails because it is a placeholder for unimplemented logic.
* howToHandlePatternVerification() in mxunit.tests.mightymock.MockVerificationTest fails because it is a placeholder for unimplemented logic.
* $verifyExact() in mxunit.tests.mightymock.OrderTest fails because it is a placeholder for unimplemented logic.
* shouldBeAbleToVerifyBothePatternAndLiteral() in mxunit.tests.mightymock.PatternInvocationTest fails because it is a placeholder for unimplemented logic.

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947982</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325493</id>
    <property name="body"><![CDATA[h2. Getting Started with MXUnit

We built MXUnit to make it as easy as possible to write tests. The framework   is designed to facilitate, not get in the way. So, let's write some code.

*Setup*: [http://mxunit.org/download.cfm]
* [Download|http://mxunit.org/download.cfm] and    install MXUnit directly under your webroot; e.g.; [http://localhost:8500/mxunit/]
* Create a directory in /mxunit/doc/tutorial and call it mytests

Following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

*1.Write the test* *{_}first{_}*.

Type the following code into a new file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=MyComponentTest.cfc}<cfcomponent displayname="MyComponentTest"  extends="mxunit.framework.TestCase">
  <cffunction name="testAdd" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.add(1,1);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>
</cfcomponent>

{code}{*}2. Watch the test fail.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this:

!mx-testfail-1.png!

Believe it or not, this is good\! This error is exactly what we expect. This tells us that our component, MyComponent, does not exist.

*3. Write the component.*

Type the following code into a new file called MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=MyComponent.cfc}<cfcomponent displayname="MyComponent" >
  <cffunction name="add" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1+num2>
  </cffunction>
</cfcomponent>

{code}{*}4. Watch the test pass.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
You should see this:


!mx-testpass-1.png!

\[[Next - More Test Cases|default:Getting Started -- More Test Cases]\]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292748</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980746</id>
    <property name="body"><![CDATA[When making changes to the MXUnit framework it's a good idea to test those changes to ensure you haven't broken anything. Luckily MXUnit can be used to test itself! Methods of running MXUnit's tests include:
# via the Eclipse plugin
# via the browser
# via the ant task

h3. Running the Unit Tests via the Eclipse Plugin

In the _Navigator_ tab, simply point to the _/tests_ folder, off of the MXUnit root, right-click, and choose *_Run MXUnit Tests_*. You should see the results of the tests in the MXUnit tab.

h3. Expected Errors and Failures

*Fixtures Can Be Safely Ignored*
When running all of the tests in the /tests folder, some errors and failures will be reported. Most of these are due to fixtures being run as tests, so you can safely ignore any errors or failures reported from test cases that reside in a folder with the word _fixture_ in its name.

*Expected Failures*
There is a test in mxunit.tests.samples.MyComponentTest called testAdd2. It fails with an mxunit.exception.AssertionFailedError failure. It can be safely ignored.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947981</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980749</id>
    <property name="body"><![CDATA[When making changes to the MXUnit framework it's a good idea to test those changes to ensure you haven't broken anything. Luckily MXUnit can be used to test itself! Methods of running MXUnit's tests include:
# via the Eclipse plugin
# via the browser
# via the ant task

h3. Running the Unit Tests via the Eclipse Plugin

In the _Navigator_ tab, simply point to the _/tests_ folder, off of the MXUnit root, right-click, and choose *_Run MXUnit Tests_*. You should see the results of the tests in the MXUnit tab.

h3. Expected Errors and Failures

*Fixtures Can Be Safely Ignored*

When running all of the tests in the /tests folder, some errors and failures will be reported. Most of these are due to fixtures being run as tests, so you can safely ignore any errors or failures reported from test cases that reside in a folder with the word _fixture_ in its name.

*Expected Failures*
* testAdd2() in mxunit.tests.samples.MyComponentTest fails with an mxunit.exception.AssertionFailedError failure. It can be safely ignored.
* mismatchedArgumentTypesShouldFail() in mxunit.tests.mightymock.ArgumentMatcherTest fails because it is a placeholder for unimplemented logic.
* attemptingToRegisterTheSamePatternShouldThrowMeaningfulException() in mxunit.tests.mightymock.InvocationTestArgumentMatcherTest fails as a reminder to fix or document an issue.
* testWriteLog() in mxunit.tests.mightymock.MockLoggerTest fails because it is a placeholder for unimplemented logic.
* $addInvocationRecordForBothPatternAndLiteral() in mxunit.tests.mightymock.MockRegistryTest fails because it is a placeholder for unimplemented logic.
* howToHandlePatternVerification() in mxunit.tests.mightymock.MockVerificationTest fails because it is a placeholder for unimplemented logic.
* $verifyExact() in mxunit.tests.mightymock.OrderTest fails because it is a placeholder for unimplemented logic.
* shouldBeAbleToVerifyBothePatternAndLiteral() in mxunit.tests.mightymock.PatternInvocationTest fails because it is a placeholder for unimplemented logic.

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947984</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325491</id>
    <property name="body"><![CDATA[The plugin comes with built-in documentation for configuring and testing the plugin.

*In Eclipse:*
# Open the MXUnit View (Window \-\- Show View \-\- MXUnit)
# On the right side of the view is a "Help" icon. Click it: !help.png!
# This will pop up the Eclipse Help for the MXUnit plugin. Start at the start\! ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292746</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325488</id>
    <property name="body"><![CDATA[h2. *Installing the MXUnit Eclipse Plugin*

*Update Site URL:* [http://mxunit.org/update]


h3. Detailed Instructions

Doesn't get much easier\! Install, Configure, Run ...

*Installation*

1. Make sure the [MXUnit Framework|http://mxunit.org/doc/index.cfm?doc=installframework] is installed.

2. Get [Eclipse|http://www.eclipse.org/] if you haven't already

3. In Eclipse, go to Help > Software Updates > Find and Install !plugin-install-1.png!

4. Select the "Search for new features" radio button. Click Next !plugin-install-2.png!

5. Click the "New Remote Site" button.

 !plugin-install-3.png!

6. Add the url [http://mxunit.org/update] to the URL field. Give it any Name; e.g, MXUnit Plugin. Click OK.


 !plugin-install-4.png!

7. Select All features to be installed. Click Next.


 !plugin-install-5.png!

8. Accept License Agreement. Click Next.


 !plugin-install-6.png!

9. Click Finish on the Install Dialogue.


 !plugin-install-7.png!

10. The plugin will download ...


 !plugin-install-8.png!

11. Click Install All.


 !plugin-install-9.png!

12. Allow the plugin to install ...


 !plugin-install-10.png!

13. Click Yes when prompted to restart Eclipse ...


 !plugin-install-11.png!

\[Next - [Configure and Test the Plugin|Configure and Test the Plugin]\]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292743</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325489</id>
    <property name="body"><![CDATA[*Eclipse Update Site URL:* [http://mxunit.org/update]

h2. Detailed Instructions

Doesn't get much easier\! Install, Configure, Run ...

# Make sure the [MXUnit Framework|Install MXUnit] is installed.
# Get [Eclipse|http://www.eclipse.org/] if you haven't already
# In Eclipse, go to {{Help > Software Updates > Find and Install}}
!plugin-install-1.png!
# Select the "Search for new features" radio button. Click Next
!plugin-install-2.png!
# Click the "New Remote Site" button.
!plugin-install-3.png!
# Add the url [http://mxunit.org/update] to the URL field. Give it any Name; e.g, MXUnit Plugin. Click OK.
!plugin-install-4.png!
# Select All features to be installed. Click Next.
!plugin-install-5.png!
# Accept License Agreement. Click Next.
!plugin-install-6.png!
# Click Finish on the Install Dialogue.
!plugin-install-7.png!
# The plugin will download ...
!plugin-install-8.png!
# Click Install All.
!plugin-install-9.png!
# Allow the plugin to install ...
!plugin-install-10.png!
# Click Yes when prompted to restart Eclipse ...
!plugin-install-11.png!

*Next - [Configure and Test the Plugin|Configure and Test the Plugin]*]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292744</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980742</id>
    <property name="body"
      ><![CDATA[When making changes to the MXUnit framework it's a good idea to test those changes to ensure you haven't broken anything. Luckily MXUnit can be used to test itself!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947977</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980744</id>
    <property name="body"><![CDATA[When making changes to the MXUnit framework it's a good idea to test those changes to ensure you haven't broken anything. Luckily MXUnit can be used to test itself! Methods of running MXUnit's tests include:
# via the Eclipse plugin
# via the browser
# via the ant task

h3. Running the Unit Tests via the Eclipse Plugin

In the _Navigator_ tab, simply point to the _/tests_ folder, off of the MXUnit root, right-click, and choose *_Run MXUnit Tests_*. You should see the results of the tests in the MXUnit tab.

h3. Expected Errors and Failures

When running all of the tests in the /tests folder, some errors and failures will be reported. Most of these are due to fixtures being run as tests, so you can safely ignore any errors or failures reported from test cases that reside in a folder with the word _fixture_ in its name.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947979</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325485</id>
    <property name="body"><![CDATA[h2. Why MXUnit?

Several fine unit testing frameworks exist for ColdFusion. Why choose MXUnit?

At its core, MXUnit grew around the concept of making things easier for the person writing the tests. We believe people shy away from unit testing because the perception (sometimes justified\!) is that it's too inconvenient. We sought to change that.

h3. Convenience features

* [Easy to see your data|View Debug Output] with cfoutput, cfdump, and debug()
* Easy to [see your cfcatch|View Debug Output#cfcatch] struct when errors occur
* Test [single methods|Running single test methods] inside a test case
* Easy "[directory runner|Running directories of tests]" for running entire directories of tests
* Easy to [test private functions|Test Private Methods] in your components
* Ability to [switch to message-first style assertions|Message First Assertions] to help ease transition from other frameworks

In addition to convenience features, MXUnit contains all the essential components of any unit testing framework:

h3. Framework Must-Haves

Test Generator for existing components

[Eclipse Plugin|Install the Eclipse Plugin] with built-in help and [keyboard shortcuts|Eclipse Plugin Keyboard Shortcuts]

Ant Integration

Plugin architecture for creating custom assertions

Many different [output formats|Output Formats]

* Basic HTML results
* ExtJS "fancy" grid results
* XML results
* JUnitReport XML results (for use with the ANT task and the JUnitReport Ant Task)
* Query results

h3. Active Development

* We're actively developing MXUnit and have more convenience features in the works. A sample:
* Easier exception testing
* Easier auto-rollback for tests that access databases
* JUnit 4 style "Hamcrest" assertions (assertThat(....))
* Customizable test generation]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292740</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980754</id>
    <property name="body"><![CDATA[{toc}
When making changes to the MXUnit framework it's a good idea to test those changes to ensure you haven't broken anything. Luckily MXUnit can be used to test itself\! Methods of running MXUnit's tests include:
# via the Eclipse plugin
# via the browser
# via the ant task

h3. Dependencies

There are unit tests which are designed to test the integration between MXUnit and a number of mocking frameworks. If you do not have those mocking frameworks installed you will see errors and test failures in mxunit.tests.framework.TestCaseTest. The frameworks required, and their expected locations are:

* MightyMock - this now ships with MXUnit so it will always be available
* ColdMock - this is expected to be found in /coldmock
* MockBox - this is expected to be found in /Coldbox/system/testing

h3. Running the Unit Tests via the Eclipse Plugin

In the _Navigator_ tab, simply point to the _/tests_ folder, off of the MXUnit root, right-click, and choose *{_}Run MXUnit Tests{_}*. You should see the results of the tests in the MXUnit tab.

h3. Expected Errors and Failures

*Fixtures Can Be Safely Ignored*

When running all of the tests in the /tests folder, some errors and failures will be reported. Most of these are due to fixtures being run as tests, so you can safely ignore any errors or failures reported from test cases that reside in a folder with the word _fixture_ in its name.

*Expected Failures*
* testAdd2() in mxunit.tests.samples.MyComponentTest fails with an mxunit.exception.AssertionFailedError failure. It can be safely ignored.
* mismatchedArgumentTypesShouldFail() in mxunit.tests.mightymock.ArgumentMatcherTest fails because it is a placeholder for unimplemented logic.
* attemptingToRegisterTheSamePatternShouldThrowMeaningfulException() in mxunit.tests.mightymock.InvocationTestArgumentMatcherTest fails as a reminder to fix or document an issue.
* testWriteLog() in mxunit.tests.mightymock.MockLoggerTest fails because it is a placeholder for unimplemented logic.
* $addInvocationRecordForBothPatternAndLiteral() in mxunit.tests.mightymock.MockRegistryTest fails because it is a placeholder for unimplemented logic.
* howToHandlePatternVerification() in mxunit.tests.mightymock.MockVerificationTest fails because it is a placeholder for unimplemented logic.
* $verifyExact() in mxunit.tests.mightymock.OrderTest fails because it is a placeholder for unimplemented logic.
* shouldBeAbleToVerifyBothePatternAndLiteral() in mxunit.tests.mightymock.PatternInvocationTest fails because it is a placeholder for unimplemented logic.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947989</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980755</id>
    <property name="body"><![CDATA[{toc}
When making changes to the MXUnit framework it's a good idea to test those changes to ensure you haven't broken anything. Luckily MXUnit can be used to test itself\! Methods of running MXUnit's tests include:
# via the Eclipse plugin
# via the browser
# via the ant task

h2. Dependencies

There are unit tests which are designed to test the integration between MXUnit and a number of mocking frameworks. If you do not have those mocking frameworks installed you will see errors and test failures in mxunit.tests.framework.TestCaseTest. The frameworks required, and their expected locations are:

* MightyMock - this now ships with MXUnit so it will always be available
* ColdMock - this is expected to be found in /coldmock
* MockBox - this is expected to be found in /Coldbox/system/testing

h2. Running the Unit Tests via the Eclipse Plugin

In the _Navigator_ tab, simply point to the _/tests_ folder, off of the MXUnit root, right-click, and choose *{_}Run MXUnit Tests{_}*. You should see the results of the tests in the MXUnit tab.

h3. Expected Errors and Failures

*Fixtures Can Be Safely Ignored*

When running all of the tests in the /tests folder, some errors and failures will be reported. Most of these are due to fixtures being run as tests, so you can safely ignore any errors or failures reported from test cases that reside in a folder with the word _fixture_ in its name.

*Expected Failures*
* testAdd2() in mxunit.tests.samples.MyComponentTest fails with an mxunit.exception.AssertionFailedError failure. It can be safely ignored.
* mismatchedArgumentTypesShouldFail() in mxunit.tests.mightymock.ArgumentMatcherTest fails because it is a placeholder for unimplemented logic.
* attemptingToRegisterTheSamePatternShouldThrowMeaningfulException() in mxunit.tests.mightymock.InvocationTestArgumentMatcherTest fails as a reminder to fix or document an issue.
* testWriteLog() in mxunit.tests.mightymock.MockLoggerTest fails because it is a placeholder for unimplemented logic.
* $addInvocationRecordForBothPatternAndLiteral() in mxunit.tests.mightymock.MockRegistryTest fails because it is a placeholder for unimplemented logic.
* howToHandlePatternVerification() in mxunit.tests.mightymock.MockVerificationTest fails because it is a placeholder for unimplemented logic.
* $verifyExact() in mxunit.tests.mightymock.OrderTest fails because it is a placeholder for unimplemented logic.
* shouldBeAbleToVerifyBothePatternAndLiteral() in mxunit.tests.mightymock.PatternInvocationTest fails because it is a placeholder for unimplemented logic.

h2. Running the Unit Tests via the Browser

&nbsp; You can run mxunit/tests/run.cfm in your browser. For example, I run it at http://localhost/mxunit/tests/run.cfm

h2. Running the Unit Tests via ANT

asdfadsf

{tip}When you run the tests via run.cfm or via ANT, the "fixtures" and "samples" tests are all filtered out, so you needn't mentally filter them yourself{tip}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947990</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325482</id>
    <property name="body"><![CDATA[h2. Why MXUnit?

Several fine unit testing frameworks exist for ColdFusion. Why choose MXUnit?

At its core, MXUnit grew around the concept of making things easier for the person writing the tests. We believe people shy away from unit testing because the perception (sometimes justified\!) is that it's too inconvenient. We sought to change that.

h3. Convenience features

* [Easy to see your data|View Debug Output] with cfoutput, cfdump, and debug()
* Easy to [see your cfcatch|View Debug Output#cfcatch] struct when errors occur
* Test [single methods|Running single test methods] inside a test case
* Easy "[directory runner|Running directories of tests]" for running entire directories of tests
* Easy to [test private functions|Test Private] in your components
* Ability to [switch to message-first style assertions|Message First Assertions] to help ease transition from other frameworks

In addition to convenience features, MXUnit contains all the essential components of any unit testing framework:

h3. Framework Must-Haves

Test Generator for existing components

[Eclipse Plugin|Install the Eclipse Plugin] with built-in help and [keyboard shortcuts|Eclipse Plugin Keyboard Shortcuts]

Ant Integration

Plugin architecture for creating custom assertions

Many different [output formats|Output Formats]

* Basic HTML results
* ExtJS "fancy" grid results
* XML results
* JUnitReport XML results (for use with the ANT task and the JUnitReport Ant Task)
* Query results

h3. Active Development

* We're actively developing MXUnit and have more convenience features in the works. A sample:
* Easier exception testing
* Easier auto-rollback for tests that access databases
* JUnit 4 style "Hamcrest" assertions (assertThat(....))
* Customizable test generation]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292735</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980757</id>
    <property name="body"><![CDATA[{toc}
When making changes to the MXUnit framework it's a good idea to test those changes to ensure you haven't broken anything. Luckily MXUnit can be used to test itself\! Methods of running MXUnit's tests include:
# via the Eclipse plugin
# via the browser
# via the ant task

h2. Dependencies

There are unit tests which are designed to test the integration between MXUnit and a number of mocking frameworks. If you do not have those mocking frameworks installed you will see errors and test failures in mxunit.tests.framework.TestCaseTest. The frameworks required, and their expected locations are:

* MightyMock - this now ships with MXUnit so it will always be available
* ColdMock - this is expected to be found in /coldmock
* MockBox - this is expected to be found in /Coldbox/system/testing

h2. Running the Unit Tests via the Eclipse Plugin

In the _Navigator_ tab, simply point to the _/tests_ folder, off of the MXUnit root, right-click, and choose *{_}Run MXUnit Tests{_}*. You should see the results of the tests in the MXUnit tab.

h3. Expected Errors and Failures

*Fixtures Can Be Safely Ignored*

When running all of the tests in the /tests folder, some errors and failures will be reported. Most of these are due to fixtures being run as tests, so you can safely ignore any errors or failures reported from test cases that reside in a folder with the word _fixture_ in its name.

*Expected Failures*
* testAdd2() in mxunit.tests.samples.MyComponentTest fails with an mxunit.exception.AssertionFailedError failure. It can be safely ignored.
* mismatchedArgumentTypesShouldFail() in mxunit.tests.mightymock.ArgumentMatcherTest fails because it is a placeholder for unimplemented logic.
* attemptingToRegisterTheSamePatternShouldThrowMeaningfulException() in mxunit.tests.mightymock.InvocationTestArgumentMatcherTest fails as a reminder to fix or document an issue.
* testWriteLog() in mxunit.tests.mightymock.MockLoggerTest fails because it is a placeholder for unimplemented logic.
* $addInvocationRecordForBothPatternAndLiteral() in mxunit.tests.mightymock.MockRegistryTest fails because it is a placeholder for unimplemented logic.
* howToHandlePatternVerification() in mxunit.tests.mightymock.MockVerificationTest fails because it is a placeholder for unimplemented logic.
* $verifyExact() in mxunit.tests.mightymock.OrderTest fails because it is a placeholder for unimplemented logic.
* shouldBeAbleToVerifyBothePatternAndLiteral() in mxunit.tests.mightymock.PatternInvocationTest fails because it is a placeholder for unimplemented logic.

h2. Running the Unit Tests via the Browser

&nbsp; You can run mxunit/tests/run.cfm in your browser. For example, I run it at [http://localhost/mxunit/tests/run.cfm]

h2. Running the Unit Tests via ANT

h3. Setting your "paths"


h3. Running the tests


{tip}When you run the tests via run.cfm or via ANT, the "fixtures" and "samples" tests are all filtered out, so you needn't mentally filter them yourself{tip}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947992</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325481</id>
    <property name="body"><![CDATA[h2. Why MXUnit?

Several fine unit testing frameworks exist for ColdFusion. Why choose MXUnit?

At its core, MXUnit grew around the concept of making things easier for the person writing the tests. We believe people shy away from unit testing because the perception (sometimes justified\!) is that it's too inconvenient. We sought to change that.

h3. Convenience features

* [Easy to see your data|View Debug Output] with cfoutput, cfdump, and debug()
* Easy to [see your cfcatch|View Debug Output#cfcatch] struct when errors occur
* Test [single methods|Running single test methods] inside a test case
* Easy "[directory runner|Directory Tests]" for running entire directories of tests
* Easy to [test private functions|Test Private] in your components
* Ability to [switch to message-first style assertions|Message First Assertions] to help ease transition from other frameworks

In addition to convenience features, MXUnit contains all the essential components of any unit testing framework:

h3. Framework Must-Haves

Test Generator for existing components

[Eclipse Plugin|Install the Eclipse Plugin] with built-in help and [keyboard shortcuts|Eclipse Plugin Keyboard Shortcuts]

Ant Integration

Plugin architecture for creating custom assertions

Many different [output formats|Output Formats]

* Basic HTML results
* ExtJS "fancy" grid results
* XML results
* JUnitReport XML results (for use with the ANT task and the JUnitReport Ant Task)
* Query results

h3. Active Development

* We're actively developing MXUnit and have more convenience features in the works. A sample:
* Easier exception testing
* Easier auto-rollback for tests that access databases
* JUnit 4 style "Hamcrest" assertions (assertThat(....))
* Customizable test generation]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292733</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980750</id>
    <property name="body"><![CDATA[h3. Here are some happy users :-)


[Animation Mentor|http://www.animationmentor.com]
"My work  (Animation Mentor) uses it for THE online animation school (sorry had to pump it up there). In fact
I've spent the whole week cleaning up our entire MXUnit set of tests to finally all pass. Keep up the great work\!"


----
[Crisp eBusiness|http://www.crisp-ebusiness.com/]
"If you want to do Test Driven Development with CFML, then MXUnit is THE framework to use\!"

----
[Figleaf Software|http://figleaf.com]
"MXUnit ROCKS"

----
[ICF Macro|http://www.macrointernational.com/]
"MXUnit is the suck\!"

----
[Mach-II Framework|http://www.mach-ii.com/]

----
[NASA|http://www.nasa.gov]
"The Altair Program here at Johnson Space Center NASA is using MXUnit for testing the Extensible Information Modeler (XIM) service application.  This set of CF services allow the Altair program to create applications to design the Lunar Lander in very flexible ways under constantly changing requirements.  XIM has further been expanded to support the certification of flight readiness (COFR) process of the ISS Payloads group and other NASA programs are in the pipeline.  Thus, unit testing of the service layer has become critical and we found
MXUnit to be the best of breed among the available CF xUnit frameworks.  It is being regularly maintained, has the best assertion capabilities, and best test output mechanisms.  The addition of ant support is an added plus (if you can get NTLM authentication working :-) "

----
[Railo Technologies|http://www.getrailo.com/]
"It's the cream of unit testing frameworks in CFML\!"

----
[SilverWare Consulting|http://www.silverwareconsulting.com/]
"It is remarkably easy to get up and running with unit testing in CFusing MXUnit. The framework is well designed and full featured, and
the Eclipse plugin makes working with it a pleasure. Equally important is the support available from the development team, who are remarkably
responsive to questions, bug reports and feature requests.

Keep up the great work, hombres\!"

----
[SOSensible|http://www.sosensible.com/]
It is the most approachable ColdFusion testing framework I have come across\!"

----
[Strictly Business Computer Systems|http://www.sbcs.com]
"It's easy, it's free, it's powerful, it's the best of it's kind.  There is no reason not to use it."

----
[UNM|http://unm.edu]
"MXUnit is bad-ass.  Use it.  Use it lots."

----
[Warwick Business School staff information portal project|http://www.wbs.ac.uk/]
"We're using MXUnit for a first foray into test-driven development. The option to use multiple interfaces gives us great flexibility in how we manage tests both for writing brand new code, and regression checking a monolithic application as we refactor. The simple assertion syntax and built-in support for accessing private methods makes for very quick and natural development."]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947985</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325480</id>
    <property name="body"><![CDATA[h2. Why MXUnit?

Several fine unit testing frameworks exist for ColdFusion. Why choose MXUnit?

At its core, MXUnit grew around the concept of making things easier for the person writing the tests. We believe people shy away from unit testing because the perception (sometimes justified\!) is that it's too inconvenient. We sought to change that.

h3. Convenience features

* [Easy to see your data|View Debug Output] with cfoutput, cfdump, and debug()
* Easy to [see your cfcatch|View Debug Output#cfcatch] struct when errors occur
* Test [single methods|Run Single Method] inside a test case
* Easy "[directory runner|Directory Tests]" for running entire directories of tests
* Easy to [test private functions|Test Private] in your components
* Ability to [switch to message-first style assertions|Message First Assertions] to help ease transition from other frameworks

In addition to convenience features, MXUnit contains all the essential components of any unit testing framework:

h3. Framework Must-Haves

Test Generator for existing components

[Eclipse Plugin|Install the Eclipse Plugin] with built-in help and [keyboard shortcuts|Eclipse Plugin Keyboard Shortcuts]

Ant Integration

Plugin architecture for creating custom assertions

Many different [output formats|Output Formats]

* Basic HTML results
* ExtJS "fancy" grid results
* XML results
* JUnitReport XML results (for use with the ANT task and the JUnitReport Ant Task)
* Query results

h3. Active Development

* We're actively developing MXUnit and have more convenience features in the works. A sample:
* Easier exception testing
* Easier auto-rollback for tests that access databases
* JUnit 4 style "Hamcrest" assertions (assertThat(....))
* Customizable test generation]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292732</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980752</id>
    <property name="body"><![CDATA[When making changes to the MXUnit framework it's a good idea to test those changes to ensure you haven't broken anything. Luckily MXUnit can be used to test itself! Methods of running MXUnit's tests include:
# via the Eclipse plugin
# via the browser
# via the ant task

h3. Dependencies

There are unit tests which are designed to test the integration between MXUnit and a number of mocking frameworks. If you do not have those mocking frameworks installed you will see errors and test failures in mxunit.tests.framework.TestCaseTest. The frameworks required, and their expected locations are:

* MightyMock - this now ships with MXUnit so it will always be available
* ColdMock - this is expected to be found in /coldmock
* MockBox - this is expected to be found in /Coldbox/system/testing

h3. Running the Unit Tests via the Eclipse Plugin

In the _Navigator_ tab, simply point to the _/tests_ folder, off of the MXUnit root, right-click, and choose *_Run MXUnit Tests_*. You should see the results of the tests in the MXUnit tab.

h3. Expected Errors and Failures

*Fixtures Can Be Safely Ignored*

When running all of the tests in the /tests folder, some errors and failures will be reported. Most of these are due to fixtures being run as tests, so you can safely ignore any errors or failures reported from test cases that reside in a folder with the word _fixture_ in its name.

*Expected Failures*
* testAdd2() in mxunit.tests.samples.MyComponentTest fails with an mxunit.exception.AssertionFailedError failure. It can be safely ignored.
* mismatchedArgumentTypesShouldFail() in mxunit.tests.mightymock.ArgumentMatcherTest fails because it is a placeholder for unimplemented logic.
* attemptingToRegisterTheSamePatternShouldThrowMeaningfulException() in mxunit.tests.mightymock.InvocationTestArgumentMatcherTest fails as a reminder to fix or document an issue.
* testWriteLog() in mxunit.tests.mightymock.MockLoggerTest fails because it is a placeholder for unimplemented logic.
* $addInvocationRecordForBothPatternAndLiteral() in mxunit.tests.mightymock.MockRegistryTest fails because it is a placeholder for unimplemented logic.
* howToHandlePatternVerification() in mxunit.tests.mightymock.MockVerificationTest fails because it is a placeholder for unimplemented logic.
* $verifyExact() in mxunit.tests.mightymock.OrderTest fails because it is a placeholder for unimplemented logic.
* shouldBeAbleToVerifyBothePatternAndLiteral() in mxunit.tests.mightymock.PatternInvocationTest fails because it is a placeholder for unimplemented logic.

]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947987</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325474</id>
    <property name="body"><![CDATA[h2. Why MXUnit?

Several fine unit testing frameworks exist for ColdFusion. Why choose MXUnit?

At its core, MXUnit grew around the concept of making things easier for the person writing the tests. We believe people shy away from unit testing because the perception (sometimes justified\!) is that it's too inconvenient. We sought to change that.

h3. Convenience features

* [Easy to see your data|View Debug Output] with cfoutput, cfdump, and debug()
* Easy to [see your cfcatch|View Debug Output#cfcatch] struct when errors occur
* Test [single methods|Run Single Method] inside a test case
* Easy "[directory runner|Directory Tests]" for running entire directories of tests
* Easy to [test private functions|Test Private] in your components
* Ability to [switch to message-first style assertions|Message First Assertions] to help ease transition from other frameworks

In addition to convenience features, MXUnit contains all the essential components of any unit testing framework:

h3. Framework Must-Haves

Test Generator for existing components

[Eclipse Plugin|Install the Eclipse Plugin] with built-in help and [keyboard shortcuts|Plugin Shortcuts]

Ant Integration

Plugin architecture for creating custom assertions

Many different [output formats|Output Formats]

* Basic HTML results
* ExtJS "fancy" grid results
* XML results
* JUnitReport XML results (for use with the ANT task and the JUnitReport Ant Task)
* Query results

h3. Active Development

* We're actively developing MXUnit and have more convenience features in the works. A sample:
* Easier exception testing
* Easier auto-rollback for tests that access databases
* JUnit 4 style "Hamcrest" assertions (assertThat(....))
* Customizable test generation]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292726</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325473</id>
    <property name="body"><![CDATA[h2. Why MXUnit?

Several fine unit testing frameworks exist for ColdFusion. Why choose MXUnit?

At its core, MXUnit grew around the concept of making things easier for the person writing the tests. We believe people shy away from unit testing because the perception (sometimes justified\!) is that it's too inconvenient. We sought to change that.

h3. Convenience features

* [Easy to see your data|View Debug Output] with cfoutput, cfdump, and debug()
* Easy to [see your cfcatch|View Debug Output#cfcatch] struct when errors occur
* Test [single methods|Run Single Method] inside a test case
* Easy "[directory runner|Directory Tests]" for running entire directories of tests
* Easy to [test private functions|Test Private] in your components
* Ability to [switch to message-first style assertions|Message First Assertions] to help ease transition from other frameworks

In addition to convenience features, MXUnit contains all the essential components of any unit testing framework:

h3. Framework Must-Haves

Test Generator for existing components

[Eclipse Plugin|Install Plugin] with built-in help and [keyboard shortcuts|Plugin Shortcuts]

Ant Integration

Plugin architecture for creating custom assertions

Many different [output formats|Output Formats]

* Basic HTML results
* ExtJS "fancy" grid results
* XML results
* JUnitReport XML results (for use with the ANT task and the JUnitReport Ant Task)
* Query results

h3. Active Development

* We're actively developing MXUnit and have more convenience features in the works. A sample:
* Easier exception testing
* Easier auto-rollback for tests that access databases
* JUnit 4 style "Hamcrest" assertions (assertThat(....))
* Customizable test generation]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292725</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325472</id>
    <property name="body"><![CDATA[h2. Why MXUnit?

Several fine unit testing frameworks exist for ColdFusion. Why choose MXUnit?

At its core, MXUnit grew around the concept of making things easier for the person writing the tests. We believe people shy away from unit testing because the perception (sometimes justified\!) is that it's too inconvenient. We sought to change that.

h3. Convenience features

* [Easy to see your data|View Debug Output] with cfoutput, cfdump, and debug()
* Easy to [see your cfcatch|View Debug Output#cfcatch] struct when errors occur
* Test [single methods|runsinglemethod] inside a test case
* Easy "[directory runner|directorytests]" for running entire directories of tests
* Easy to [test private functions|testprivate] in your components
* Ability to [switch to message-first style assertions|messagefirstassertions] to help ease transition from other frameworks

In addition to convenience features, MXUnit contains all the essential components of any unit testing framework:

h3. Framework Must-Haves

Test Generator for existing components

[Eclipse Plugin|installplugin] with built-in help and [keyboard shortcuts|pluginshortcuts]

Ant Integration

Plugin architecture for creating custom assertions

Many different [output formats|outputformats]
* Basic HTML results
* ExtJS "fancy" grid results
* XML results
* JUnitReport XML results (for use with the ANT task and the JUnitReport Ant Task)
* Query results

h3. Active Development

* We're actively developing MXUnit and have more convenience features in the works. A sample:
* Easier exception testing
* Easier auto-rollback for tests that access databases
* JUnit 4 style "Hamcrest" assertions (assertThat(....))
* Customizable test generation]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292724</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980759</id>
    <property name="body"><![CDATA[{toc}
When making changes to the MXUnit framework it's a good idea to test those changes to ensure you haven't broken anything. Luckily MXUnit can be used to test itself\! Methods of running MXUnit's tests include:
# via the Eclipse plugin
# via the browser
# via the ant task

h2. Dependencies

There are unit tests which are designed to test the integration between MXUnit and a number of mocking frameworks. If you do not have those mocking frameworks installed you will see errors and test failures in mxunit.tests.framework.TestCaseTest. The frameworks required, and their expected locations are:

* MightyMock - this now ships with MXUnit so it will always be available
* ColdMock - this is expected to be found in /coldmock
* MockBox - this is expected to be found in /Coldbox/system/testing

h2. Running the Unit Tests via the Eclipse Plugin

In the _Navigator_ tab, simply point to the _/tests_ folder, off of the MXUnit root, right-click, and choose *{_}Run MXUnit Tests{_}*. You should see the results of the tests in the MXUnit tab.

h3. Expected Errors and Failures

*Fixtures Can Be Safely Ignored*

When running all of the tests in the /tests folder, some errors and failures will be reported. Most of these are due to fixtures being run as tests, so you can safely ignore any errors or failures reported from test cases that reside in a folder with the word _fixture_ in its name.

*Expected Failures*
* testAdd2() in mxunit.tests.samples.MyComponentTest fails with an mxunit.exception.AssertionFailedError failure. It can be safely ignored.
* mismatchedArgumentTypesShouldFail() in mxunit.tests.mightymock.ArgumentMatcherTest fails because it is a placeholder for unimplemented logic.
* attemptingToRegisterTheSamePatternShouldThrowMeaningfulException() in mxunit.tests.mightymock.InvocationTestArgumentMatcherTest fails as a reminder to fix or document an issue.
* testWriteLog() in mxunit.tests.mightymock.MockLoggerTest fails because it is a placeholder for unimplemented logic.
* $addInvocationRecordForBothPatternAndLiteral() in mxunit.tests.mightymock.MockRegistryTest fails because it is a placeholder for unimplemented logic.
* howToHandlePatternVerification() in mxunit.tests.mightymock.MockVerificationTest fails because it is a placeholder for unimplemented logic.
* $verifyExact() in mxunit.tests.mightymock.OrderTest fails because it is a placeholder for unimplemented logic.
* shouldBeAbleToVerifyBothePatternAndLiteral() in mxunit.tests.mightymock.PatternInvocationTest fails because it is a placeholder for unimplemented logic.

h2. Running the Unit Tests via the Browser

&nbsp; You can run mxunit/tests/run.cfm in your browser. For example, I run it at [http://localhost/mxunit/tests/run.cfm]

h2. Running the Unit Tests via ANT

h3. Setting your "paths"

In mxunit/buildprops, copy the contents of the antrunner_sample.properties file. Create a new file in that directory named "antrunner.properties"
Fill in your server, port, and webroot properties. For example, mine looks like this:
{code:title=antrunner.properties}
server=localhost
port=80
webroot=c:/inetpub/wwwroot/
{code}
Save that file


h3. Running the tests
From within Eclipse, drag mxunit/build.xml into the Ant view
Run the "runTests" target
It'll print out the results in the console view


{tip}When you run the tests via run.cfm or via ANT, the "fixtures" and "samples" tests are all filtered out, so you needn't mentally filter them yourself{tip}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947994</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325471</id>
    <property name="body"><![CDATA[h1. What is request.debug()?

One of my favorite features of MXUnit is the debug() function, [described here|http://mxunit.org/doc/index.cfm?doc=viewdebugoutput]. As you're developing, you might find yourself wishing you had a debug() function to use in the components you're building, not just in the unit tests themselves.

You can\! MXUnit will create a function called request.debug() that is hooked into the same glob of debug output as the debug() function you use in your tests. Thus, in any component you're trying to test (or its dependencies, for that matter), if you're running the code from within MXUnit, request.debug() will be available.

h1. Is it turned on by default?

It is turned on by default ONLY when tests are run from within the Eclipse plugin. Tests run within the browser and a DirectoryTestSuite (this includes tests executed with ANT) will not have this function available by default. The reason is simple: we believe that it's a bad thing to commit your changes to source control with stray request.debug() calls left in there. We believe most people run their tests from within Eclipse while developing, but entire suites of tests should also be run in the browser, or via ANT, in a scheduled process. Otherwise, what's the point of having tests if they're not running at least once a day?&nbsp; By turning them off in non-Eclipse contexts, you're more likely to catch the cases where you forget to remove the request.debug() calls when they're no longer helping you write your code


h1. Can I turn it on in those contexts?

{code:title=Example Debugging}
<cffunction name="testRequestDotDebug_WillPassInBothPluginAndWeb">
	<cfset createRequestScopeDebug()>
	<cfset obj = createObject("component","SomeObject")>
	<cfset debug("before the object calls request.debug")>
	<cfset obj.thisWillOnlyWorkInThePlugin()><!--- only work in plugin.... unless we explictly enable it in the test!!! --->
	<cfset debug("after a function that called request.debug")>
	<cfset stopRequestScopeDebug()>
</cffunction>
{code}

Yes.&nbsp; Here's how:]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292723</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4980761</id>
    <property name="body"><![CDATA[
{section:border=false}

 {column:width=60%}
   h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world. 
    h6. Quick Links
      * [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
      * [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
      * [The MXUnit Blog|http://blog.mxunit.org]
      * [Download|http://mxunit.org/download.cfm]
      * [Eclipse Plugin Update Site|http://mxunit.org/update]
      * [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]

    h6. Support
      * [MXUnit Google Group|http://groups.google.com/group/mxunit]
      * [File a Bug|http://code.google.com/p/mxunit/issues/list]
     
    h6. Committers
       * Marc	Esher
       * Adam	Haskell
       * Mike	Henke
       * Randy	Merril
       * Mike	Rankin
       * Bill	Shelton 
       * Bob	Silverberg


 {column}

{column:width=5%}
 &nbsp;
{column}


{column:width=35%}
  h6. Navigate space
  {pagetreesearch}
  {pagetree:startDepth=3}
{column}

{section}

{recently-updated-dashboard:types=page,comment}




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4947996</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325530</id>
    <property name="body"><![CDATA[{section}
{column:width=45%}

h6. Navigate space
{pagetreesearch}
{pagetree:startDepth=2}
{column}
{column:width=5%}


{column}
{column:width=50%}

{recently-updated-dashboard}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292803</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325526</id>
    <property name="body"><![CDATA[{section}
{column:width=45%}

h6. Navigate space
{pagetreesearch}
{pagetree:startDepth=2}
{column}

{column:width=5%}

{column}
{column:width=50%}

{recently-updated-dashboard}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292799</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325527</id>
    <property name="body"><![CDATA[{section}
{column:width=45%}

h6. Navigate space
{pagetreesearch}
{pagetree:startDepth=2}
{column}
{column:width=5%}


{column}
{column:width=50%}

{recently-updated-dashboard}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292800</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325529</id>
    <property name="body"><![CDATA[Data driven testing allows you to execute tests with a wide variety of input data. This can make creating and executing certain kinds of tests&nbsp; efficient and very powerful. Essentially, you provide a reference to a collection of data and MXUnit will iterate over that data and execute the test for each item in the collection.

Here it is in action:
{code:title=Basic Array Dataprovider Example}
<cffunction name="setUp">
&nbsp; <cfset name_data = \['joe','taj','mary','juan','hans', 'bjork','chaksa'\] />
&nbsp; <cfset myObject =&nbsp; createObject('component','com.foo.MyObject').init() />
</cffunction>

<cffunction name="testNameValidation" mxunit:dataprovider="name_data">
&nbsp; <cfargument name="name" hint="Each name item in the name_data array" />
&nbsp; <cfset assertTrue( myObject.validateName(name), "#name# not valid" ) />
</cffunction>
{code}

To use data to drive tests, tell MXUnit about it using the mxunit:dataprovider annotation. This accepts a string name of some data that exists in the variables scope of the test. The mxunit:dataprovider annotation accepts the following types of data: array, query, list, and a CSV or Excel file. What's unique about these types of tests is that they accept parameters. The parameters represent the data you are using in your tests and may vary depending upon the type of the dataprovider. Note that this is invalid in ColdFusion: mxunit:dataprovider="#my_variable#" - this value must be a string.
Consider the following examples:

{code:title=Query Dataprovider Example}
<\!-------------------------------------------------------------------\-
&nbsp;&nbsp; &nbsp;Example using a query:
&nbsp;&nbsp;&nbsp;&nbsp; query_data = queryNew('name');
&nbsp;&nbsp;&nbsp;&nbsp; query.addRow(1);
&nbsp;&nbsp;&nbsp;&nbsp; query.setCell('name','ed');
&nbsp;&nbsp; &nbsp; //...etc.
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; Note query name as a parameter
\-------------------------------------------------------------------->
<cffunction name="testSomethingWithQuery" mxunit:dataprovider="query_data">
&nbsp; <cfargument name="q" hint="A query object" />
&nbsp; <cfset assertTrue( myObject.validateName(q.name), "#q.name# not valid." ) />
</cffunction>
{code}

In this example we specify the name of a query that's in the variables scope of the test. We use this query name for the mxunit:dataprovider value. This test will be run once for each row in the query, and the value of "arguments.q" in this case will be the current row of the query.

{code:title=Basic List Dataprovider Example}
<\!----------------------------------------------------------------\-
&nbsp;&nbsp;&nbsp; &nbsp;Example using a list (identical to array)
&nbsp;&nbsp;&nbsp; &nbsp;list_data = 'ed,joe,mary,jeff';
&nbsp;&nbsp;&nbsp; Note list item name as a parameter
\-------------------------------------------------------------------->

<cffunction name="testSomethingWithList" mxunit:dataprovider="list_data">
&nbsp; <cfargument name="list_item" hint="Item in the list" />
&nbsp; <cfset assertTrue( myObject.validateName(list_item), "#list_item# not valid." ) />
</cffunction>
{code}

Iterating over a list is essentially the same as an array. The data here is provided as a list of values. As in all mxunit:dataprovider types, pass in the _name_ of the data to the dataprovider.

{code:title=Basic Excel/CSV Dataprovider}
<\!---------------------------------------------------------------\-
&nbsp;&nbsp; &nbsp;&nbsp;Example using an Excel file
&nbsp;&nbsp; &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; Note query name as a parameter
\------------------------------------------------------------------>
<cfset names_excel = getDirectoryFromPath(getCurrentTemplatePath()) & "/dataproviders/names.xls">
<cffunction name="testSomethingWithExcel" mxunit:dataprovider="names_excel">
&nbsp;&nbsp;&nbsp; <cfargument name="name_query" hint="Default behavior is to convert Excel with header names to query object.">
&nbsp;&nbsp;&nbsp; <cfset debug(myQuery)>
&nbsp;&nbsp;&nbsp; <cfset assertTrue( myObject.validateName(name_query.name), "#name_query.name# not valid." ) />
</cffunction>
{code}

For the basic default excel behavior where you have an Excel file with named row headers, pass the name of the file reference to the mxunit:dataprovider. Then, treat the data as a query object, using the row headings as column names.

{code:title=Basic Iterator Dataprovider}
<\!---------------------------------------------------------------\-
&nbsp;&nbsp; &nbsp; Fuzzy Goodness
&nbsp;&nbsp; &nbsp;
&nbsp;------------------------------------------------------------------>
<cffunction name="testRandomPasswordGenerator" mxunit:dataprovider="1000">
&nbsp;&nbsp;&nbsp; <cfargument name="count" />
&nbsp;&nbsp;&nbsp; <cfset pwd = myObject.generateRandomPassword(seed=count) />
&nbsp;&nbsp;&nbsp; <cfset assert( myObject.isValidPassword(pwd), "#pwd# not valid. Occurred at iteration #count#" ) />
</cffunction>
{code}

Sometimes it's useful to just iterate a number of times over some computation. You can do this with MXUnit simply by specify a positive integer to the mxunit:dataprovider.

Next: Advanced Dataproviders (2D Arrays and Excel and CSVs with or without header rows).]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292802</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325524</id>
    <property name="body"><![CDATA[Data driven testing allows you to execute tests with a wide variety of input data. This can make creating and executing certain kinds of tests&nbsp; efficient and very powerful. Essentially, you provide a reference to a collection of data and MXUnit will iterate over that data and execute the test for each item in the collection.

Here it is in action:

<cffunction name="setUp">
&nbsp; <cfset name_data = \['joe','taj','mary','juan','hans', 'bjork','chaksa'\] />
&nbsp; <cfset myObject =&nbsp; createObject('component','com.foo.MyObject').init() />
</cffunction>

<cffunction name="testNameValidation" mxunit:dataprovider="name_data">
&nbsp; <cfargument name="name" hint="Each name item in the name_data array" />
&nbsp; <cfset assertTrue( myObject.validateName(name), "#name# not valid" ) />
</cffunction>

To use data to drive tests, tell MXUnit about it using the mxunit:dataprovider annotation. This accepts a string name of some data that exists in the variables scope of the test. The mxunit:dataprovider annotation accepts the following types of data: array, query, list, and a CSV or Excel file. What's unique about these types of tests is that they accept parameters. The parameters represent the data you are using in your tests and may vary depending upon the type of the dataprovider. Note that this is invalid in ColdFusion: mxunit:dataprovider="#my_variable#" - this value must be a string.
Consider the following examples:

<\!-------------------------------------------------------------------\-
&nbsp;&nbsp; &nbsp;Example using a query:
&nbsp;&nbsp;&nbsp;&nbsp; query_data = queryNew('name');
&nbsp;&nbsp;&nbsp;&nbsp; query.addRow(1);
&nbsp;&nbsp;&nbsp;&nbsp; query.setCell('name','ed');
&nbsp;&nbsp; &nbsp; //...etc.
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; Note query name as a parameter
\-------------------------------------------------------------------->
<cffunction name="testSomethingWithQuery" mxunit:dataprovider="query_data">
&nbsp; <cfargument name="q" hint="A query object" />
&nbsp; <cfset assertTrue( myObject.validateName(q.name), "#q.name# not valid." ) />
</cffunction>

In this example we specify the name of a query that's in the variables scope of the test. We use this query name for the mxunit:dataprovider value. This test will be run once for each row in the query, and the value of "arguments.q" in this case will be the current row of the query.

<\!----------------------------------------------------------------\-
&nbsp;&nbsp;&nbsp; &nbsp;Example using a list (identical to array)
&nbsp;&nbsp;&nbsp; &nbsp;list_data = 'ed,joe,mary,jeff';
&nbsp;&nbsp;&nbsp; Note list item name as a parameter
\-------------------------------------------------------------------->

<cffunction name="testSomethingWithList" mxunit:dataprovider="list_data">
&nbsp; <cfargument name="list_item" hint="Item in the list" />
&nbsp; <cfset assertTrue( myObject.validateName(list_item), "#list_item# not valid." ) />
</cffunction>

Iterating over a list is essentially the same as an array. The data here is provided as a list of values. As in all mxunit:dataprovider types, pass in the _name_ of the data to the dataprovider.

<\!---------------------------------------------------------------\-
&nbsp;&nbsp; &nbsp;&nbsp;Example using an Excel file
&nbsp;&nbsp; &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; Note query name as a parameter
\------------------------------------------------------------------>
<cfset names_excel = getDirectoryFromPath(getCurrentTemplatePath()) & "/dataproviders/names.xls">
<cffunction name="testSomethingWithExcel" mxunit:dataprovider="names_excel">
&nbsp;&nbsp;&nbsp; <cfargument name="name_query" hint="Default behavior is to convert Excel with header names to query object.">
&nbsp;&nbsp;&nbsp; <cfset debug(myQuery)>
&nbsp;&nbsp;&nbsp; <cfset assertTrue( myObject.validateName(name_query.name), "#name_query.name# not valid." ) />
</cffunction>

For the basic default excel behavior where you have an Excel file with named row headers, pass the name of the file reference to the mxunit:dataprovider. Then, treat the data as a query object, using the row headings as column names.
<\!---------------------------------------------------------------\-
&nbsp;&nbsp; &nbsp; Fuzzy Goodness
&nbsp;&nbsp; &nbsp;
&nbsp;------------------------------------------------------------------>
<cffunction name="testRandomPasswordGenerator" mxunit:dataprovider="1000">
&nbsp;&nbsp;&nbsp; <cfargument name="count" />
&nbsp;&nbsp;&nbsp; <cfset pwd = myObject.generateRandomPassword(seed=count) />
&nbsp;&nbsp;&nbsp; <cfset assert( myObject.isValidPassword(pwd), "#pwd# not valid. Occurred at iteration #count#" ) />
</cffunction>

Sometimes it's useful to just iterate a number of times over some computation. You can do this with MXUnit simply by specify a positive integer to the mxunit:dataprovider.

Next: Advanced Dataproviders (2D Arrays and Excel and CSVs with or without header rows).]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292797</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325519</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292778</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325514</id>
    <property name="body"><![CDATA[*NOTE: You've already downloaded the mxunit framework. For the example below to work, create a new project in eclipse named &quot;mxunit&quot; (or whatever) and point it to your mxunit framework install location (c:\inetpub\wwwroot\mxunit for example)* 

*When Eclipse has restarted configure and test the MXUnit Eclipse Plugin installation*

h3. Finding Tests

# In Eclipse, go to Window > Preferences > MXUnit. 
Make sure the paths listed point to your MXUnit intallation and follow the directions listedand click OK.
!plugin-install-12.png!
# Open the MXUnit View 
!plugin-install-13.png!
# Click the "Search" icon (or hit CTRL-F):  
!plugin-install-14.png!
# Type "PluginDemoTests". Click OK  
!plugin-install-15.png!
# It'll take a few seconds to start up if this is the first time running the tests. You'll then get an eclipse Error. This is expected, because InvalidMarkupTest.cfc is a bad file.Click OK on the error message.  
!plugin-install-16.png!
# Each of the test cases in the entire directory of tests will load into the tree. It does <em>not</em> run the tests. 
!plugin-install-17.png!

h3. Running the tests:

# Click the green "Play" button (or hit Enter).The tests will run. 
!plugin-install-18.png!
# To see any output from the tests, right click in the tree and select "Open test case results in browser". or hit "F8". or hit "b".
# To run all tests again, hit the green play arrow.
# To run just the failures, hit the red play arrow 
# To run just one test or a group of tests, select each test and hold the Ctrl key, then press the green plat arrow.
# You can can also doublee-click  individual tests or top level tests to run those.
# To clear all results, click the "refresh" icon or hit "F5" 
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292771</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325511</id>
    <property name="body"><![CDATA[The plugin comes with built-in documentation for configuring and testing the plugin.

*In Eclipse:*
# Open the MXUnit View ({{Window > Show View > MXUnit}})
# On the right side of the view is a "Help" icon. Click it: !help.png!
# This will pop up the Eclipse Help for the MXUnit plugin. Start at the start\! ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292768</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325512</id>
    <property name="body"><![CDATA[*NOTE: You've already downloaded the mxunit framework. For the example below to work, create a new project in eclipse named &quot;mxunit&quot; (or whatever) and point it to your mxunit framework install location (c:\inetpub\wwwroot\mxunit for example) * 

*When Eclipse has restarted configure and test the MXUnit Eclipse Plugin installation*

h3. Finding Tests

# In Eclipse, go to Window > Preferences > MXUnit. 
Make sure the paths listed point to your MXUnit intallation and follow the directions listedand click OK.
!plugin-install-12.png!
# Open the MXUnit View 
!plugin-install-13.png!
# Click the "Search" icon (or hit CTRL-F):  
!plugin-install-14.png!
# Type "PluginDemoTests". Click OK  
!plugin-install-15.png!
# It'll take a few seconds to start up if this is the first time running the tests. You'll then get an eclipse Error. This is expected, because InvalidMarkupTest.cfc is a bad file.Click OK on the error message.  
!plugin-install-16.png!
# Each of the test cases in the entire directory of tests will load into the tree. It does <em>not</em> run the tests. 
!plugin-install-17.png!

h3. Running the tests:

# Click the green "Play" button (or hit Enter).The tests will run. 
!plugin-install-18.png!
# To see any output from the tests, right click in the tree and select "Open test case results in browser". or hit "F8". or hit "b".
# To run all tests again, hit the green play arrow.
# To run just the failures, hit the red play arrow 
# To run just one test or a group of tests, select each test and hold the Ctrl key, then press the green plat arrow.
# You can can also doublee-click  individual tests or top level tests to run those.
# To clear all results, click the "refresh" icon or hit "F5" 
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292769</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325507</id>
    <property name="body"><![CDATA[h2. Built-In Assertions

This document outlines the core of unit testing, i.e. Assertions. Assertions are simple: You assert something, and if that assertion does not result in your expectation, the test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions. A single failed assertion means that any subsequent assertions in a test will not execute and thus you won't know if those assertions indicate further problems in your code.

Need an assertion you don't see here? [Roll your own ...|http://mxunit.org/doc/index.cfm?doc=customassertions]

Without further delay, our players, The Assertions:
----
{color:#0000ff}{*}assertTrue{*}{color}{color:#0000ff}(boolean condition \[,String message\]){color}

assertTrue is one of the two "bread and butter" assertions in any testing framework. The philosophy is simple: you assert something to be true; if it's not, the test fails

{code:title=assertTrue()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertTrue( StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}





assertTrue has an opposite, assertFalse:


{color:#0000ff}{*}assertFalse(){*}{color}{color:#0000ff}(boolean condition \[, String message\]){color}

{code:title=assertFalse}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertFalse( StructIsEmpty(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>

{code}

----
{color:#0000ff}{*}assertEquals{*}{color}{color:#0000ff}(any expected, any actual \[, String message\]){color}

assertEquals is the other core assertion. Here, you're asserting that some result equals some expected result. This could be two numbers, two strings, two structs, whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals to compare any type of data.

{code:title=assertEquals()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertEquals(1, StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertEquals(0, StructCount(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}


----
{color:#0000ff}{*}fail{*}{color}{color:#0000ff}(String message){color}

fail() is used to actively fail a test. It's useful when you're stubbing a test and you want to ensure it fails, like so:

{code:title=fail()}<cffunction name="addPrivilegeShouldHaveNoEffectIfPrivilegeExists">
 	<cfset fail("test not yet implemented")>
</cffunction>
{code}


It's also useful when you're testing an "error path", like so:

{code:title=fail() to test Error Paths}<cffunction name="addPrivilegesWithPunctuationShouldThrowError">
	<cfset var obj = createObject("component","myObject")>
	<cftry>
		<cfset obj.addPrivilege("Edit.User")>
		<cfset fail("Should not get here. Function under test should've thrown an error")>
	<cfcatch type="mxunit.exception.AssertionFailedError">
		<cfrethrow>
	</cfcatch>
	<cfcatch type="any"><!--- expect to get here ---></cfcatch>
	</cftry>
</cffunction>
{code}
----
{color:#0000ff}{*}failNotEquals{*}{color}{color:#0000ff}(any value, any value2  \[,String message\]){color}

Used to fail when two values do not equal. This doesn't perform any assertion... it's simply a convenience method for providing a specific type of failure message

{code:title=failNotEquals()}<cffunction name="demoFailNotEquals">
 	<cfset failNotEquals(myObject1,myOtherObject, "These should not have the same value")>
</cffunction>
{code}

----
{color:#0000ff}{*}assertSame{*}{color}{color:#0000ff}(any obj1, any obj2  \[,String message\]){color}

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail for arrays.
{code:title=assertSame()}<cffunction name="initShouldReturnSelf">
	<cfset var obj = createObject("component","myObject")>
	<cfset assertSame(obj,obj.init(), "These should be the same thang since init should return 'this'")>
</cffunction>
{code}
----
{color:#0000ff}{*}assertNotSame{*}{color}{color:#0000ff}(any obj1, any obj2  \[,String message\]){color}

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass for arrays.

{code:title=assertNotSame()}<cffunction name="newInstanceShouldNotReturnSelf">
	<cfset var obj = createObject("component","myObjectFactory")>
	<cfset assertNotSame(obj,obj.newInstance(), "These should not be the same thang since newInstance should return a new instance from the factory")>
</cffunction>
{code}


----
h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion.Note, that these are quite simple, can be easily implemented using the base assertions above, but are provided for convenience.

*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml located in /mxunit/framework/ directory. Simply remove or comment out these line:

{code:title=assertionExtension config-extension in mxunit-config.xml}	<config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true" override="false" />
	<config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false" />
	<config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false" />
{code}
----
{color:#0000ff}{*}assertXPath{*}{color}{color:#0000ff}(String xpath, any data, \[String text\], \[String message\]){color}

Searches data using xpath. If text is specified, it tries to match the exact text to  the xpath expression. Otherwise ,it returns true if any nodes are found that match the xpath expression. Note that, unlike most assertions, assertXPath returns an xml dom representation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this assertion returns true if any elements of the xpath expression are found. Not required. Defaults to ""
\[string message\]: The message to display when this assertion fails Not required. Defaults to The XPath expression, #arguments.xpath#, did not match the data.

{code:title=assertXPath()}
<cffunction name="testFindGoogleInTitle">
	<cfscript>
	nodes = assertXpath('/html/head/title', "http://google.com", "Google");
	debug(nodes);
	nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
	nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
	</cfscript>
</cffunction>
{code}

The above parses the results from urls and strings and searches the parsed results for the XPath expression.
Try it. Really, it works\!



----
{color:#0000ff}{*}assertIsTypeOf{*}{color}{color:#0000ff}(component obj, String type){color}

Determines if obj is of type. type needs to be fully qualified.
{code:title=assertIsTypeOf()}
<cffunction name="demoAssertIsTypeOf">
  <cfset assertIsTypeOf(obj,"my.type.Of.Object")>
</cffunction>
{code}

----
{color:#0000ff}{*}assertIsXMLDoc{*}{color}{color:#0000ff}(any xml \[, String message\]){color}

Determines if xml is a valid XML DOM object.
{code:title=assertIsXMLDoc()}
<cffunction name="demoAssertIsXMLDoc">
  <cfset assertIsXMLDoc(xml)>
</cffunction>
{code}

----

{color:#0000ff}{*}assertIsArray{*}{color}{color:#0000ff}(any obj1){color}

Determines if the obj1 is a valid array.
{code:title=assertIsArray()}
<cffunction name="demoAssertIsArray">
  <cfset assertIsArray(myObject1)>
</cffunction>
{code}

----
{color:#0000ff}{*}assertIsDefined{*}{color}{color:#0000ff}(any obj1){color}

Determines if the obj1 has been defined in the available scope.
{code:title=assertIsDefined()}
<cffunction name="demoAssertIsDefined">
  <cfset assertIsDefined("myObject1")>
</cffunction>
{code}

----
{color:#0000ff}{*}assertIsEmpty{*}{color}{color:#0000ff}(any obj1){color}

Determines if the obj1 is a 0 length string or NULL equivalent.
{code:title=assertIsEmpty()}
<cffunction name="demoAssertIsEmpty">
  <cfset assertIsEmpty(myObject1)>
</cffunction>
{code}

----
{color:#0000ff}{*}assertIsEmptyArray{*}{color}{color:#0000ff}(any obj1,\[String message\]){color}

Determines if the obj1 is an array with no elements.
{code:title=assertIsEmptyArray()}
<cffunction name="demoAssertIsEmptyArray">
  <cfset assertIsEmptyArray(myObject1)>
</cffunction>
{code}

----
{color:#0000ff}{*}assertIsEmptyQuery{*}{color}{color:#0000ff}(any obj1,\[String message\]){color}

Determines if the obj1 is a query with no rows.
{code:title=assertIsEmptyQuery()}
<cffunction name="demoAssertIsEmptyQuery">
  <cfset assertIsEmptyQuery(myObject1)>
</cffunction>
{code}

----
{color:#0000ff}{*}assertIsEmptyStruct{*}{color}{color:#0000ff}(any obj1,\[String message\]){color}

Determines if the obj1 is a struct with no keys or values.
{code:title=assertIsEmptyStruct()}
<cffunction name="demoAssertIsEmptyStruct">
  <cfset assertIsEmptyStruct(myObject1)>
</cffunction>
{code}

----
{color:#0000ff}{*}assertIsQuery{*}{color}{color:#0000ff}(any q){color}

Determines if q is a valid ColdFusion query.
{code:title=assertIsQuery()}
<cffunction name="demoAssertIsQuery">
  <cfset assertIsQuery(q)>
</cffunction>
{code}

----
{color:#0000ff}{*}assertIsStruct{*}{color}{color:#0000ff}(any obj){color}

Determines if obj is a valid ColdFusion structure.
{code:title=assertIsStruct()}
<cffunction name="demoAssertIsStruct">
  <cfset assertIsStruct(obj)>
</cffunction>
{code}



----
Need more? [Build your own ...|http://mxunit.org/doc/index.cfm?doc=customassertions]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292762</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325508</id>
    <property name="body"><![CDATA[This document outlines the core of unit testing, i.e. Assertions. Assertions are simple: You assert something, and if that assertion does not result in your expectation, the test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions. A single failed assertion means that any subsequent assertions in a test will not execute and thus you won't know if those assertions indicate further problems in your code.

Need an assertion you don't see here? [Roll your own ...|http://mxunit.org/doc/index.cfm?doc=customassertions]

Without further delay, our players, The Assertions:

h3. assertTrue(boolean condition \[,String message\])

assertTrue is one of the two "bread and butter" assertions in any testing framework. The philosophy is simple: you assert something to be true; if it's not, the test fails

{code:title=assertTrue()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertTrue( StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

assertTrue has an opposite, assertFalse:

h3. assertFalse(){*}(boolean condition \[, String message\])

{code:title=assertFalse}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertFalse( StructIsEmpty(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>

{code}

h3. assertEquals{*}(any expected, any actual \[, String message\])

assertEquals is the other core assertion. Here, you're asserting that some result equals some expected result. This could be two numbers, two strings, two structs, whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals to compare any type of data.

{code:title=assertEquals()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertEquals(1, StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertEquals(0, StructCount(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

h3. fail{*}(String message)

fail() is used to actively fail a test. It's useful when you're stubbing a test and you want to ensure it fails, like so:

{code:title=fail()}<cffunction name="addPrivilegeShouldHaveNoEffectIfPrivilegeExists">
 	<cfset fail("test not yet implemented")>
</cffunction>
{code}


It's also useful when you're testing an "error path", like so:

{code:title=fail() to test Error Paths}<cffunction name="addPrivilegesWithPunctuationShouldThrowError">
	<cfset var obj = createObject("component","myObject")>
	<cftry>
		<cfset obj.addPrivilege("Edit.User")>
		<cfset fail("Should not get here. Function under test should've thrown an error")>
	<cfcatch type="mxunit.exception.AssertionFailedError">
		<cfrethrow>
	</cfcatch>
	<cfcatch type="any"><!--- expect to get here ---></cfcatch>
	</cftry>
</cffunction>
{code}

h3. failNotEquals{*}(any value, any value2  \[,String message\])

Used to fail when two values do not equal. This doesn't perform any assertion... it's simply a convenience method for providing a specific type of failure message

{code:title=failNotEquals()}<cffunction name="demoFailNotEquals">
 	<cfset failNotEquals(myObject1,myOtherObject, "These should not have the same value")>
</cffunction>
{code}

h3. assertSame{*}(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail for arrays.
{code:title=assertSame()}<cffunction name="initShouldReturnSelf">
	<cfset var obj = createObject("component","myObject")>
	<cfset assertSame(obj,obj.init(), "These should be the same thang since init should return 'this'")>
</cffunction>
{code}

h3. assertNotSame{*}(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass for arrays.

{code:title=assertNotSame()}<cffunction name="newInstanceShouldNotReturnSelf">
	<cfset var obj = createObject("component","myObjectFactory")>
	<cfset assertNotSame(obj,obj.newInstance(), "These should not be the same thang since newInstance should return a new instance from the factory")>
</cffunction>
{code}

h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion.Note, that these are quite simple, can be easily implemented using the base assertions above, but are provided for convenience.

*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml located in /mxunit/framework/ directory. Simply remove or comment out these line:

{code:title=assertionExtension config-extension in mxunit-config.xml}	<config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true" override="false" />
	<config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false" />
	<config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false" />
{code}

h3. assertXPath{*}(String xpath, any data, \[String text\], \[String message\])

Searches data using xpath. If text is specified, it tries to match the exact text to  the xpath expression. Otherwise ,it returns true if any nodes are found that match the xpath expression. Note that, unlike most assertions, assertXPath returns an xml dom representation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this assertion returns true if any elements of the xpath expression are found. Not required. Defaults to ""
\[string message\]: The message to display when this assertion fails Not required. Defaults to The XPath expression, #arguments.xpath#, did not match the data.

{code:title=assertXPath()}
<cffunction name="testFindGoogleInTitle">
	<cfscript>
	nodes = assertXpath('/html/head/title', "http://google.com", "Google");
	debug(nodes);
	nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
	nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
	</cfscript>
</cffunction>
{code}

The above parses the results from urls and strings and searches the parsed results for the XPath expression.
Try it. Really, it works\!

h3. assertIsTypeOf{*}(component obj, String type)

Determines if obj is of type. type needs to be fully qualified.
{code:title=assertIsTypeOf()}
<cffunction name="demoAssertIsTypeOf">
  <cfset assertIsTypeOf(obj,"my.type.Of.Object")>
</cffunction>
{code}

h3. assertIsXMLDoc{*}(any xml \[, String message\])

Determines if xml is a valid XML DOM object.
{code:title=assertIsXMLDoc()}
<cffunction name="demoAssertIsXMLDoc">
  <cfset assertIsXMLDoc(xml)>
</cffunction>
{code}

h3. assertIsArray{*}(any obj1)

Determines if the obj1 is a valid array.
{code:title=assertIsArray()}
<cffunction name="demoAssertIsArray">
  <cfset assertIsArray(myObject1)>
</cffunction>
{code}

h3. assertIsDefined{*}(any obj1)

Determines if the obj1 has been defined in the available scope.
{code:title=assertIsDefined()}
<cffunction name="demoAssertIsDefined">
  <cfset assertIsDefined("myObject1")>
</cffunction>
{code}

h3. assertIsEmpty{*}(any obj1)

Determines if the obj1 is a 0 length string or NULL equivalent.
{code:title=assertIsEmpty()}
<cffunction name="demoAssertIsEmpty">
  <cfset assertIsEmpty(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyArray{*}(any obj1,\[String message\])

Determines if the obj1 is an array with no elements.
{code:title=assertIsEmptyArray()}
<cffunction name="demoAssertIsEmptyArray">
  <cfset assertIsEmptyArray(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyQuery{*}(any obj1,\[String message\])

Determines if the obj1 is a query with no rows.
{code:title=assertIsEmptyQuery()}
<cffunction name="demoAssertIsEmptyQuery">
  <cfset assertIsEmptyQuery(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyStruct{*}(any obj1,\[String message\])

Determines if the obj1 is a struct with no keys or values.
{code:title=assertIsEmptyStruct()}
<cffunction name="demoAssertIsEmptyStruct">
  <cfset assertIsEmptyStruct(myObject1)>
</cffunction>
{code}

h3. assertIsQuery{*}(any q)

Determines if q is a valid ColdFusion query.
{code:title=assertIsQuery()}
<cffunction name="demoAssertIsQuery">
  <cfset assertIsQuery(q)>
</cffunction>
{code}

h3. assertIsStruct{*}(any obj)

Determines if obj is a valid ColdFusion structure.
{code:title=assertIsStruct()}
<cffunction name="demoAssertIsStruct">
  <cfset assertIsStruct(obj)>
</cffunction>
{code}

----
Need more? [Build your own ...|Custom Assertions]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292763</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325503</id>
    <property name="body"><![CDATA[h2.


h2. *Getting Started with TestSuites*

A TestSuite is a collection of tests that logically fit together.

*Creating and Running a TestSuite*

MXUnit was built to make it as easy as possible to create tests and test suites.
For this tutorial we will _incrementally_ rebuild the MXUnit example found in  the installation package mxunit/samples/MyTestSuite.cfm.

The steps for creating and running a TestSuite are:
# Create a ColdFusion page to run the suite
# Create a TestSuite object
# Tell the TestSuite what tests to add
# run() the TestSuite
# Print the output
# Run the suite in your web browser

*1. Create a ColdFusion page to run this example*

Create an empty ColdFusion page and save it as MyTestSuite.cfm in/mxunit/doc/tutorial/mytests

*2. Create a TestSuite object*

Type the following code into the template:

{code:title=MyTestSuite.cfm}<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
</cfscript>

{code}
*3. Tell the TestSuite what tests to add*

{code}<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
 //Add all runnable methods in MyComponentTest
 testSuite.addAll("mxunit.samples.MyComponentTest");
 testSuite.addAll("mxunit.samples.MyOtherComponentTest"); //Identical to above
 //add explicit test cased (don't start with 'test').
 //Note you can add more than one at a time as a list
 testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");

</cfscript>

{code}
*4. Run the TestSuite*
{code}<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
 testSuite.addAll("mxunit.samples.MyComponentTest");
 testSuite.addAll("mxunit.samples.MyOtherComponentTest");
 testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");
 //Run the tests and save everything in "results"
 results = testSuite.run();
</cfscript>
{code}
*5. Do something with the output*
{code}<cfscript>
testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
testSuite.addAll("mxunit.samples.MyComponentTest");
testSuite.addAll("mxunit.samples.MyOtherComponentTest"); //Identical to above
testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");
results = testSuite.run();
//Now print the results. Simple\!
writeOutput(results.getResultsOutput('html')); //See next section for other output formats
</cfscript>

{code}


*6. Run the suite in your web browser*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyTestSuite.cfm|http://localhost:8500/mxunit/doc/tutorial/mytests/MyTestSuite.cfm]

You should see this:

!suites-1.png!


*Next - [Overview of MXUnit TestResult output formats|MXUnit TestResult Output Formats]*]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292758</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325502</id>
    <property name="body"><![CDATA[h2. More MXUnit Test Cases

For this section we will add to our [first TestCase|http://mxunit.org/doc/getting-started.html].   We will add more basic math functions to complete a our TestCases: Subtraction, Multiplication, and Division.

Again, following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

Note that this rhythm is referred to as Red-Refactor-Green. This means that the   first step is failure and is signified by {color:red}{*}Red{*}{color}. The second step is to [Refactor|http://www.refactoring.com/] the code. The last step is   to make sure the test passes, which is indicated by {color:green}{*}Green{*}{color}

*1.Write the test* *{_}first{_}*.  Type the following code into your existing file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testSubtract()}  <cffunction name="testSubtract" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 5;
    actual = mycomponent.subtract(10,5);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}
*2. Watch the test fail. (Red)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this:

!mxu-sub-fail.png!


Again, this error is exactly what we expect. This tells us that the subtract method does not exist.

*3. Refactor the component. (Refactor)*

Type the following code into MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests


{code:title=MyComponent.cfc subtract()}  <cffunction name="subtract" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1-num2>
  </cffunction>

{code}
*4. Watch the test pass. (Green)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

You should see this:

!mxu-sub-pass.png!

*5. Now, let's do something interesting with Division - divide by zero.*

Type the following code into your existing file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testDivide()}  <cffunction name="testDivide" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.divide(10,0);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}

*6. Watch the test fail. (Red)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

You should see this:

!mxu-divide-fail-1.png!



This tells us that the divide method does not exist.

*7. Refactor the component. (Refactor)*

Type the following code into MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=MyComponent.cfc divide()}  <cffunction name="divide" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1/num2>
  </cffunction>

{code}
*8. Watch the test pass. (Green)*
[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

Hold on\! We're still in red. The exception shows a divide by zero error.

!mxu-divide-fail-2.png!


In this case, The test itself is broken. So, we need to fix the test. Replace the existing testDivide test method in MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testDivide() refactored}  <cffunction name="testDivide" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.divide(10,5);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}


*8 (Redux). Watch the test pass. (Green)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

Ahh\! Oh joy\! Oh rapture\! We're in the green ...

!mxu-divide-pass.png!

*9. Try the multiplication test on your own.*

[Click here for the full solution|http://mxunit.org/doc/tutorial/solution-1.zip].

*Next - [Building a Test Suite|default:Getting Started -- Test Suites]*]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292757</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325505</id>
    <property name="body"><![CDATA[{html}
<h2>Setting up your environment</h2>

<p>
	So you've downloaded mxunit. Now What? How do you set up your own project? Where do you put your tests?
</p>

<p>Everyone hates to hear this, but there's no one right answer. However, we're not gonna leave you hangin' with that lame answer. Here's what we've done (and still do):</p>

<p>

<ul>

	<li>put your tests in a directory named "tests" parallel to your components</li>
		<ul>
			<b>pros:</b>
			<li>in the same place so they're easy to find</li>
			<li>separated so you have no danger of accidentally running a "real" component as a test case </li>
			<b>cons:</b>
			<li>if it matters to you, you probably don't want to deploy your tests to prod, so you'd need to filter them out somehow (ANT!)</li>
		</ul>
				
	<li>put your tests in a directory named "tests" underneath your components directory</li>
		<ul>
			<b>pros</b>
			<li>same as above</li>
			<b>cons</b>
			<li>same as above</li>
			
		</ul>
	<li>put your tests in a directory named "tests" outside your project</li>
		<ul>
			<b>pros</b>
			<li>centralize all your tests in one place</li>
			<li>forces you to find problems where your tests rely on data they shouldn't be able to see (session info, etc)</li>
			<b>cons</b>
			<li>potentially not as intuitive to find tests for a project when getting started initially</li>
			<li>makes it harder to access application-specific data (that might be a good thing though)</li>
			
		</ul>
	<li>put your tests in the same directory as your components</li>
		<ul>
			<b>pros</b>
			<li>extremely easy to see your tests and components together</li>
			<b>cons</b>
			<li>you probably don't want to deploy tests to production so you'd need to use ANT or some other tool to pull those files out during deployments</li>
			
			
		</ul>


</ul>





</p>
{html}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292760</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6619183</id>
    <property name="body"><![CDATA[{toc:minLevel=4}
I have tried to anticipate the most common problems and address them in the Help that comes with the MXUnit Eclipse plugin. You should always consult the Help first\!

h4. Q: What version of Eclipse will the plugin work in?

A: As of right now, Eclipse 3.4 and later. If you need a version that works on Eclipse 3.3, use [http://mxunit.org/update33] as the update site


h4. Q: Why won't the plugin see "MyFile.cfc" as a test?

A: Because the file doesn't start or end with the word "Test".

h4. Q: The plugin seems to be ignoring my custom RemoteFacade.cfc URL

A: Try restarting Eclipse. Also, it only honors that URL when it's set at the project level, not in a subdirectory of a project

h4. Q: The plugin can't figure out my "cfc path" (dot notation)

A: Read the plugin help. If you still can't figure it out from reading the help, please email the [Google Group|http://groups.google.com/group/mxunit]

h4. Q: The plugin won't do anything with a TestSuite I created

A: The plugin doesn't do test suites. Read the Help for an explanation

h4. Q: Why doesn't the plugin support NTLMv2?

A: Because neither Apache Axis nor commons HTTPClient doesn't support it. There does not, as of this writing, appear to be a free java client for NTLMv2

h4. Q: When I run the tests in the plugin, my Application scope variables aren't present

A: You'll need a custom RemoteFacade.cfc (very easy\!). See the Plugin Help.

h4. Q: When I run the tests in the plugin, I get "Variable FORM is undefined". Why?


A: The plugin runs the tests via SOAP. The form scope is not available to ColdFusion components during webservice calls. My advice: Don't use the form scope in your CFCs

h4. Q: When I add certain variables to a "debug()" call, the plugin hangs. Why?

A: debug() duplicates and then cfdumps whatever variables are passed into it. Depending on the content of the variable you're trying to debug, this could kill ColdFusion.



h4. Q: What are the differences between how the plugin runs tests and how the tests run when I run them in the browser?

A: The plugin runs test test one test at a time, one request at a time. This means there is zero chance for "bleed" from one test method run to another. When you run them in the browser, they're run as a single request.

In addition, since the plugin runs the tests via SOAP, the FORM scope is not available.

h4. Q: What do you call a snail in a ship?

A: A Snailor\!

h4. Q: Does the Plugin work in ColdFusion Builder?

A: Of course

h4. Q: Do I need to do something special to test ColdFusion ORM apps?

A: Yes, you need to set a custom RemoteFacade URL on the project. On the MXUnit view, click the Green Help Icon (or hit F1), and click "Talking to ColdFusion: The RemoteFacade.cfc URL". From there, click the link at the bottom of the page, which takes you to the "Project-Specific RemoteFacade URL" page. This has all the instructions you should need.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6586417</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6619186</id>
    <property name="body"><![CDATA[{html}
<center>

<!-- the comment and script is used to workaround the KB912945 patch -->
	<!--[if gte IE 6]> <comment id="to_be_rewritten"> <![endif]-->
	<OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" WIDTH="814" HEIGHT="701" id="movie">
	<PARAM NAME=movie VALUE="mxunit_ant_automation_demo.swf"> 
	<PARAM NAME=quality VALUE=high>
	<PARAM NAME=bgcolor VALUE=#FFFFFF>
	<EMBED src="https://mxunit.s3.amazonaws.com/video/mxunit_ant_automation_demo.swf" quality=high bgcolor=#FFFFFF WIDTH="814" HEIGHT="701" NAME="movie" ALIGN="" TYPE="application/x-shockwave-flash" PLUGINSPAGE="http://www.macromedia.com/go/getflashplayer"></EMBED>
	</OBJECT>
	</comment><script language="Javascript" src="ieupdate.js"></script>


</center> 
{html}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6586420</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6619146</id>
    <property name="body"><![CDATA[{toc}

h1. Introduction


A while back, I (Marc) wrote about using coldfusion's "mix-in" functionality to achieve simple mocking. The usefulness here is where you have a function that "does something", but you want to change the thing that it does for the purpose of a test. This is particularly handy when you're testing functionA(), and functionA() calls functionB() and functionC(). Maybe functionA() depends on the results of functionB() to do certain work, and then it calls functionC() to do other work. In code, it might look like:

{code}	<cfcomponent name=MyComponent>
		<cffunction name="functionA">
			<cfargument name="someArg" required="true">
			<cfif listlen(functionB(someArg) GTE 1)>
				<cfreturn functionC(someArg)>
			</cfif>
			<cfreturn false>
		</cffunction>

		<cffunction name="functionB">
			.... maybe i'll return a number ... or a list of numbers
		</cffunction>

		<cffunction name="functionC">
			.... i think i'll go and run a bunch of database updates
			<cfreturn true>
		</cffunction>
	</cfcomponent>
{code}
And here might be some tests for functionA:

{code}	<cfcomponent extends="mxunit.framework.TestCase">

		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>

		<cffunction name="functionAShouldReturnFalseForASingleListElement">
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertFalse(ret,"a single list should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnFalseForMultipleListElements">
			<cfset ret = obj.functionA(SomeOtherID)>
			<cfset assertFalse(ret,"multiple list elements should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnTrueForNoElements">
			<cfset ret = obj.functionA(AndYetAnotherID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>
	</cfcomponent>
{code}

h1. Using injectMethod()


Now, let's say functionB() queries the database or whatever, based on the passed-in someArg argument. The problem is obvious: your database is in an unknown state, because data change all day long. And you want to do a number of tests: you want to test the condition where functionB() returns a single list element, and also when it returns more than 1 list element. Which means you need at least two known inputs for someArg: one that will ensure functionB() returns a single element, and one that ensures it'll return more than one. What a pain\! Wouldn't it be great if you could say "for the purposes of this test, I want functionB() to return a single list element". and then in another test, say "And for this test, I want it to return 2 list elements"? Or, to put it another way, wouldn't it be nice to override functionB for this test, but without a lot of work?

This is why injectMethod() was born. To make it a little easier to override functions for the purpose of testing. Now, you're not overriding the function under test\! You're overriding functions that the function under test calls, in order to make it easier to test the function under test.

Here's the method signature for injectMethod():
{code}<cffunction name="injectMethod" output="false" access="public" returntype="void" hint="injects the method from giver into receiver. This is helpful for quick and dirty mocking">
	<cfargument name="Receiver" type="any" required="true" hint="the object receiving the method"/>
	<cfargument name="Giver" type="any" required="true" hint="the object giving the method"/>
	<cfargument name="FunctionName" type="string" required="true" hint="the function to be injected from the giver into the receiver"/>
	<cfargument name="FunctionNameInReceiver" type="string" required="false" default="#arguments.functionName#" hint="the function name that you will call. this is useful when you want to inject giver.someFunctionXXX but have it be called as someFunction in your receiver object">

</cffunction>{code}
*Almost always:*
* "Receiver" is your component under test
* "Giver" is your test itself since that's where the overriding function will be declared, so you'll use "this"
* "functionName" will the name of the overriding function you've defined in your test that will be used to overwrite the function in the component under test
* "functionNameInReceiver" is the function you're overriding

Let's have a look at our new set of tests:
{code}	<cfcomponent extends="mxunit.framework.TestCase">

		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>

		<!---  DEFINE PRIVATE METHODS TO OVERRIDE FUNCTIONB AND FUNCTIONC  --->

		<cffunction name="returnsSingleListElement" access="private">
			<cfreturn "1">
		</cffunction>

		<cffunction name="returnsMultipleListElements" access="private">
			<cfreturn "1,2,3">
		</cffunction>

		<cffunction name="returnsNoListElement" access="private">
			<cfreturn "">
		</cffunction>

		<!---  and our tests, again  --->
		<cffunction name="functionAShouldReturnFalseForASingleListElement">
			<!--- pass in our returnSingleListElement function into the object and name it functionB (i.e., override functionB) inside the object under test --->
			<cfset injectMethod(obj, this, "returnSingleListElement", "functionB")>
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertFalse(ret,"a single list should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnFalseForMultipleListElements">
			<!--- pass in our returnMultipleListElements function into the object and name it functionB --->
			<cfset injectMethod(obj, this, "returnMultipleListElements", "functionB")>
			<cfset ret = obj.functionA(SomeOtherID)>
			<cfset assertFalse(ret,"multiple list elements should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnTrueForNoElements">
			<!--- pass in our returnNoListElement function into the object and name it functionB --->
			<cfset injectMethod(obj, this, "returnNoListElement", "functionB")>
			<cfset ret = obj.functionA(AndYetAnotherID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>
	</cfcomponent>
{code}
As this illustrates, we've now created a very easy way to test functionA with the 3 cases we need to happen with functionB: a single list, multiple list, and no-element returns. Now, to take this one step further, you could override functionC -- which, if you remember, updates the database -- with a simple function that simply returns "true". Remember, we're not testing functionC so ideally we wouldn't touch the database at all in this case

{code}	<cfcomponent extends="mxunit.framework.TestCase">

		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>

		<!---  DEFINE PRIVATE METHODS TO OVERRIDE FUNCTIONB AND FUNCTIONC  --->

		....

		<cffunction name="functionC_Replacement" access="private">
			<cfreturn true>
		</cffunction>

		<!---  and our tests, again  --->
		<cffunction name="functionAShouldReturnTrueForNoElements">
			<!--- pass in our returnNoListElement function into the object and name it functionB
					in addition, overwrite functionC with our new, spoof functionC	 --->
			<cfset injectMethod(obj, this, "returnNoListElement", "functionB")>
			<cfset injectMethod(obj, this, "functionC_Replacement", "functionC")>
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>

		....

	</cfcomponent>

{code}
There you go: you can pass in functions to achieve exactly the conditions you want to achieve in order to fully test your logic. And you pass in functions that "spoof" the DB-updating function that would slow down your test and potentially corrupt your data.

I can't stress enough that this solves a different than mock objects solve. Mocks solve the problem of spoofing collaborator objects. But in this case, we're not spoofing functions in a dependent component. We're spoofing functions in the same component we're trying to test.

h1. Using restoreMethod()

{warning}We *strongly* encourage you to write tests that use freshly-created instances in your setUp() method.{warning}

If you have tests that reuse the same component instance, injectMethod() can wreak havoc. Usually you wind up in this situation if you're using coldspring-managed objects inside your TestCase. To undo a method overwrite resulting from injectMethod(), you can use *restoreMethod( object, "functionName" )*. This will restore the original function back into the component.

MXUnit will NOT automatically restore methods for you. You must do so deliberately. I advise doing it in tearDown, like so:

{code}

<cffunction name="tearDown">

&nbsp; <cfset restoreMethod( someObject, "someFunction" )>

</cffunction>

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6586380</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6619147</id>
    <property name="body"
      ><![CDATA[Anonymous, I've now added a restoreMethod() to undo an injectMethod(). Documentation added to this page]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6586381</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6619149</id>
    <property name="body"><![CDATA[{toc}

h1. Introduction


A while back, I (Marc) wrote about using coldfusion's "mix-in" functionality to achieve simple mocking. The usefulness here is where you have a function that "does something", but you want to change the thing that it does for the purpose of a test. This is particularly handy when you're testing functionA(), and functionA() calls functionB() and functionC(). Maybe functionA() depends on the results of functionB() to do certain work, and then it calls functionC() to do other work. In code, it might look like:

{code}	<cfcomponent name=MyComponent>
		<cffunction name="functionA">
			<cfargument name="someArg" required="true">
			<cfif listlen(functionB(someArg) GTE 1)>
				<cfreturn functionC(someArg)>
			</cfif>
			<cfreturn false>
		</cffunction>

		<cffunction name="functionB">
			.... maybe i'll return a number ... or a list of numbers
		</cffunction>

		<cffunction name="functionC">
			.... i think i'll go and run a bunch of database updates
			<cfreturn true>
		</cffunction>
	</cfcomponent>
{code}
And here might be some tests for functionA:

{code}	<cfcomponent extends="mxunit.framework.TestCase">

		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>

		<cffunction name="functionAShouldReturnFalseForASingleListElement">
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertFalse(ret,"a single list should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnFalseForMultipleListElements">
			<cfset ret = obj.functionA(SomeOtherID)>
			<cfset assertFalse(ret,"multiple list elements should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnTrueForNoElements">
			<cfset ret = obj.functionA(AndYetAnotherID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>
	</cfcomponent>
{code}

h1. Using injectMethod()


Now, let's say functionB() queries the database or whatever, based on the passed-in someArg argument. The problem is obvious: your database is in an unknown state, because data change all day long. And you want to do a number of tests: you want to test the condition where functionB() returns a single list element, and also when it returns more than 1 list element. Which means you need at least two known inputs for someArg: one that will ensure functionB() returns a single element, and one that ensures it'll return more than one. What a pain\! Wouldn't it be great if you could say "for the purposes of this test, I want functionB() to return a single list element". and then in another test, say "And for this test, I want it to return 2 list elements"? Or, to put it another way, wouldn't it be nice to override functionB for this test, but without a lot of work?

This is why injectMethod() was born. To make it a little easier to override functions for the purpose of testing. Now, you're not overriding the function under test\! You're overriding functions that the function under test calls, in order to make it easier to test the function under test.

Here's the method signature for injectMethod():
{code}<cffunction name="injectMethod" output="false" access="public" returntype="void" hint="injects the method from giver into receiver. This is helpful for quick and dirty mocking">
	<cfargument name="Receiver" type="any" required="true" hint="the object receiving the method"/>
	<cfargument name="Giver" type="any" required="true" hint="the object giving the method"/>
	<cfargument name="FunctionName" type="string" required="true" hint="the function to be injected from the giver into the receiver"/>
	<cfargument name="FunctionNameInReceiver" type="string" required="false" default="#arguments.functionName#" hint="the function name that you will call. this is useful when you want to inject giver.someFunctionXXX but have it be called as someFunction in your receiver object">

</cffunction>{code}
*Almost always:*
* "Receiver" is your component under test
* "Giver" is your test itself since that's where the overriding function will be declared, so you'll use "this"
* "functionName" will the name of the overriding function you've defined in your test that will be used to overwrite the function in the component under test
* "functionNameInReceiver" is the function you're overriding

Let's have a look at our new set of tests:
{code}	<cfcomponent extends="mxunit.framework.TestCase">

		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>

		<!---  DEFINE PRIVATE METHODS TO OVERRIDE FUNCTIONB AND FUNCTIONC  --->

		<cffunction name="returnsSingleListElement" access="private">
			<cfreturn "1">
		</cffunction>

		<cffunction name="returnsMultipleListElements" access="private">
			<cfreturn "1,2,3">
		</cffunction>

		<cffunction name="returnsNoListElement" access="private">
			<cfreturn "">
		</cffunction>

		<!---  and our tests, again  --->
		<cffunction name="functionAShouldReturnFalseForASingleListElement">
			<!--- pass in our returnSingleListElement function into the object and name it functionB (i.e., override functionB) inside the object under test --->
			<cfset injectMethod(obj, this, "returnSingleListElement", "functionB")>
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertFalse(ret,"a single list should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnFalseForMultipleListElements">
			<!--- pass in our returnMultipleListElements function into the object and name it functionB --->
			<cfset injectMethod(obj, this, "returnMultipleListElements", "functionB")>
			<cfset ret = obj.functionA(SomeOtherID)>
			<cfset assertFalse(ret,"multiple list elements should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnTrueForNoElements">
			<!--- pass in our returnNoListElement function into the object and name it functionB --->
			<cfset injectMethod(obj, this, "returnNoListElement", "functionB")>
			<cfset ret = obj.functionA(AndYetAnotherID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>
	</cfcomponent>
{code}
As this illustrates, we've now created a very easy way to test functionA with the 3 cases we need to happen with functionB: a single list, multiple list, and no-element returns. Now, to take this one step further, you could override functionC -- which, if you remember, updates the database -- with a simple function that simply returns "true". Remember, we're not testing functionC so ideally we wouldn't touch the database at all in this case

{code}	<cfcomponent extends="mxunit.framework.TestCase">

		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>

		<!---  DEFINE PRIVATE METHODS TO OVERRIDE FUNCTIONB AND FUNCTIONC  --->

		....

		<cffunction name="functionC_Replacement" access="private">
			<cfreturn true>
		</cffunction>

		<!---  and our tests, again  --->
		<cffunction name="functionAShouldReturnTrueForNoElements">
			<!--- pass in our returnNoListElement function into the object and name it functionB
					in addition, overwrite functionC with our new, spoof functionC	 --->
			<cfset injectMethod(obj, this, "returnNoListElement", "functionB")>
			<cfset injectMethod(obj, this, "functionC_Replacement", "functionC")>
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>

		....

	</cfcomponent>

{code}
There you go: you can pass in functions to achieve exactly the conditions you want to achieve in order to fully test your logic. And you pass in functions that "spoof" the DB-updating function that would slow down your test and potentially corrupt your data.

I can't stress enough that this solves a different than mock objects solve. Mocks solve the problem of spoofing collaborator objects. But in this case, we're not spoofing functions in a dependent component. We're spoofing functions in the same component we're trying to test.

h1. Using restoreMethod()

{warning}We *strongly* encourage you to write tests that use freshly-created instances in your setUp() method.{warning}

If you have tests that reuse the same component instance, injectMethod() can wreak havoc. Usually you wind up in this situation if you're using coldspring-managed objects inside your TestCase. To undo a method overwrite resulting from injectMethod(), you can use *restoreMethod( object, "functionName" )*. This will restore the original function back into the component.

MXUnit will NOT automatically restore methods for you. You must do so deliberately. I advise doing it in tearDown, like so:

{code}
<cffunction name="tearDown">

   <cfset restoreMethod( someObject, "someFunction" )>

</cffunction>

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6586383</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6619142</id>
    <property name="body"><![CDATA[{toc}
{tip}You can get the latest version of MXUnit here:&nbsp;[http://mxunit.org/download.cfm|http://mxunit.org/download.cfm]
{tip}




h2. 2.0.1


h3. Enhancements


* [debug()|default:View Debug Output] and [request.debug()|default:Using request.debug()] now support all attributes of cfdump. For example, you can now do: debug(var=mystruct, top=5, label="some label"); This is particularly important when debugging ORM objects
* Assertion isTypeOf() now considers interfaces

h3. Bug Fixes

* Core features should now be CF7 compatible.
* MightyMock behavioral inconsistency on CF8 fixed
* Components with output=true have been turned to output=false where appropriate. This important fix [addresses a memory condition|default:How cfcomponent output=true  can affect memory consumption] in MightyMock on Adobe ColdFusion

h3. Backwards Compatibility

* debug() will be backwards compatible IF for calls not using named arguments
* debug() will now fail if the old (removed) "debugdata" argument was passed like so: debug(debugdata=someStruct); to fix, either change debugdata to "var" or remove the named argument]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6586376</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6619144</id>
    <property name="body"><![CDATA[A while back, I (Marc) wrote about using coldfusion's "mix-in" functionality to achieve simple mocking. The usefulness here is where you have a function that "does something", but you want to change the thing that it does for the purpose of a test. This is particularly handy when you're testing functionA(), and functionA() calls functionB() and functionC(). Maybe functionA() depends on the results of functionB() to do certain work, and then it calls functionC() to do other work. In code, it might look like:

{code}	<cfcomponent name=MyComponent>
		<cffunction name="functionA">
			<cfargument name="someArg" required="true">
			<cfif listlen(functionB(someArg) GTE 1)>
				<cfreturn functionC(someArg)>
			</cfif>
			<cfreturn false>
		</cffunction>

		<cffunction name="functionB">
			.... maybe i'll return a number ... or a list of numbers
		</cffunction>

		<cffunction name="functionC">
			.... i think i'll go and run a bunch of database updates
			<cfreturn true>
		</cffunction>
	</cfcomponent>
{code}
And here might be some tests for functionA:

{code}	<cfcomponent extends="mxunit.framework.TestCase">

		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>

		<cffunction name="functionAShouldReturnFalseForASingleListElement">
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertFalse(ret,"a single list should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnFalseForMultipleListElements">
			<cfset ret = obj.functionA(SomeOtherID)>
			<cfset assertFalse(ret,"multiple list elements should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnTrueForNoElements">
			<cfset ret = obj.functionA(AndYetAnotherID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>
	</cfcomponent>
{code}
Now, let's say functionB() queries the database or whatever, based on the passed-in someArg argument. The problem is obvious: your database is in an unknown state, because data change all day long. And you want to do a number of tests: you want to test the condition where functionB() returns a single list element, and also when it returns more than 1 list element. Which means you need at least two known inputs for someArg: one that will ensure functionB() returns a single element, and one that ensures it'll return more than one. What a pain\! Wouldn't it be great if you could say "for the purposes of this test, I want functionB() to return a single list element". and then in another test, say "And for this test, I want it to return 2 list elements"? Or, to put it another way, wouldn't it be nice to override functionB for this test, but without a lot of work?

This is why injectMethod() was born. To make it a little easier to override functions for the purpose of testing. Now, you're not overriding the function under test\! You're overriding functions that the function under test calls, in order to make it easier to test the function under test.

Here's the method signature for injectMethod():
{code}<cffunction name="injectMethod" output="false" access="public" returntype="void" hint="injects the method from giver into receiver. This is helpful for quick and dirty mocking">
	<cfargument name="Receiver" type="any" required="true" hint="the object receiving the method"/>
	<cfargument name="Giver" type="any" required="true" hint="the object giving the method"/>
	<cfargument name="FunctionName" type="string" required="true" hint="the function to be injected from the giver into the receiver"/>
	<cfargument name="FunctionNameInReceiver" type="string" required="false" default="#arguments.functionName#" hint="the function name that you will call. this is useful when you want to inject giver.someFunctionXXX but have it be called as someFunction in your receiver object">

</cffunction>{code}
*Almost always:*
* "Receiver" is your component under test
* "Giver" is your test itself since that's where the overriding function will be declared, so you'll use "this"
* "functionName" will the name of the overriding function you've defined in your test that will be used to overwrite the function in the component under test
* "functionNameInReceiver" is the function you're overriding

Let's have a look at our new set of tests:
{code}	<cfcomponent extends="mxunit.framework.TestCase">

		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>

		<!---  DEFINE PRIVATE METHODS TO OVERRIDE FUNCTIONB AND FUNCTIONC  --->

		<cffunction name="returnsSingleListElement" access="private">
			<cfreturn "1">
		</cffunction>

		<cffunction name="returnsMultipleListElements" access="private">
			<cfreturn "1,2,3">
		</cffunction>

		<cffunction name="returnsNoListElement" access="private">
			<cfreturn "">
		</cffunction>

		<!---  and our tests, again  --->
		<cffunction name="functionAShouldReturnFalseForASingleListElement">
			<!--- pass in our returnSingleListElement function into the object and name it functionB (i.e., override functionB) inside the object under test --->
			<cfset injectMethod(obj, this, "returnSingleListElement", "functionB")>
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertFalse(ret,"a single list should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnFalseForMultipleListElements">
			<!--- pass in our returnMultipleListElements function into the object and name it functionB --->
			<cfset injectMethod(obj, this, "returnMultipleListElements", "functionB")>
			<cfset ret = obj.functionA(SomeOtherID)>
			<cfset assertFalse(ret,"multiple list elements should've been returned for SomeID and functionA should have returned false")>
		</cffunction>

		<cffunction name="functionAShouldReturnTrueForNoElements">
			<!--- pass in our returnNoListElement function into the object and name it functionB --->
			<cfset injectMethod(obj, this, "returnNoListElement", "functionB")>
			<cfset ret = obj.functionA(AndYetAnotherID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>
	</cfcomponent>
{code}
As this illustrates, we've now created a very easy way to test functionA with the 3 cases we need to happen with functionB: a single list, multiple list, and no-element returns. Now, to take this one step further, you could override functionC -- which, if you remember, updates the database -- with a simple function that simply returns "true". Remember, we're not testing functionC so ideally we wouldn't touch the database at all in this case

{code}	<cfcomponent extends="mxunit.framework.TestCase">

		<cffunction name="setUp">
			<cfset obj = createObject("component","MyComponent")>
		</cffunction>

		<!---  DEFINE PRIVATE METHODS TO OVERRIDE FUNCTIONB AND FUNCTIONC  --->

		....

		<cffunction name="functionC_Replacement" access="private">
			<cfreturn true>
		</cffunction>

		<!---  and our tests, again  --->
		<cffunction name="functionAShouldReturnTrueForNoElements">
			<!--- pass in our returnNoListElement function into the object and name it functionB
					in addition, overwrite functionC with our new, spoof functionC	 --->
			<cfset injectMethod(obj, this, "returnNoListElement", "functionB")>
			<cfset injectMethod(obj, this, "functionC_Replacement", "functionC")>
			<cfset ret = obj.functionA(SomeID)>
			<cfset assertTrue(ret,"NO list elements should've been returned for SomeID and functionA should have returned true")>
		</cffunction>

		....

	</cfcomponent>

{code}
There you go: you can pass in functions to achieve exactly the conditions you want to achieve in order to fully test your logic. And you pass in functions that "spoof" the DB-updating function that would slow down your test and potentially corrupt your data.

I can't stress enough that this solves a different than mock objects solve. Mocks solve the problem of spoofing collaborator objects. But in this case, we're not spoofing functions in a dependent component. We're spoofing functions in the same component we're trying to test.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6586378</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6619138</id>
    <property name="body"><![CDATA[Los Hombres have given a number of individual and combined talks and presentations both in public and on line. Here're some of the the talks we've given:

* [Adobe MAX 2010 \-\- ColdFusion Skunkworks with Joe Rinehart and Marc Esher|Adobe MAX 2010 -- ColdFusion Skunkworks] \-\- October 27, 2010&nbsp; \-\- Experimentation, learning, and finding joy in what you do
* [CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit|CFObjective 2010 -- Continuous Integration with Hudson, ANT, and MXUnit] \-\- April 22, 2010 \-\- An ungentle introduction to Continuous Integration for CFMLers
* [April 2010 -- Online ColdFusion  Meetup -- Know your tools: Productivity Tips-n-Tricks for ColdFusion Builder / CFEclipse|CFMeetupEclipseProductivity|Master your tool]
* [CFUnited 2009 -- Automate like a Rock Star: Do more work in less time|http://mxunit.s3.amazonaws.com/doc/zip/CFUnited_2009_Esher_Automation.zip] \-\- August 14, 2009 \-\- The presentation I'd give myself if I could go back in time
* [CFObjective 2009 -- Writing Easy-To-Test Code|http://mxunit.s3.amazonaws.com/doc/zip/marc_esher_cfobjective_2009_designing_for_easy_testability.zip] \-\- May 14, 2009 \-\- Mo'Betta tips for designing easy-to-test components
* [CFObjective 2009 -- Approaches To Automated Security Testing|http://mxunit.s3.amazonaws.com/doc/zip/cfobjective-2009-security-testing.zip] \-\- May 16, 2009
* [Adobe MAX 2008: Advanced Patterns for ColdFusion Test Automation|http://mxunit.s3.amazonaws.com/doc/zip/MAX08_AdvancedUnitTestPatterns_Shelton_Esher.zip] \-\- November 19, 2008 \-\- How to be a Design-For-Testability Ninja
* [Automating the build/deploy process with ANT - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/CFU2008ANT.zip] \-\- June 19, 2008 \-\- Copying, Zipping, FTPing, SVN, SQL, macrodef, looping, conditionals, scriptdef. Lots of example code\!
* [Patterns for ColdFusion Test Automation - CFUnited|http://mxunit.s3.amazonaws.com/doc/zip/Patterns-for-CF-Test-Automation-CFUnited08.zip] \-\- June 18, 2008 \-\- Basic and advanced patterns for unit testing
* [Better living through Testing|http://mxunit.s3.amazonaws.com/doc/zip/BaltimoreAUGMXUnitIntro.zip] \-\- April 23, 2008 \-\- Intro to Unit Testing and MXUnit.
* [Unit Testing w/MXUnit (Part-2) : In the weeds|http://mxunit.s3.amazonaws.com/doc/zip/cfmeetup-unittesting-part2-04102008.zip] \-\- April 10, 2008 \-\- Writing tests principals, design for testability, and test automation
* [Unit Testing w/MXUnit (Part-1) - Jump Start|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_MXUnit_Jumpstart.zip] \-\- March 06, 2008 \-\- Getting started with unit testing, MXUnit, and Test Driven Development.
* [Ant on the wire|http://mxunit.s3.amazonaws.com/doc/zip/CFMeetup_AntWired.zip] \-\- February 28, 2008 \-\- This is a how-to session on using FTP, Email, Subversion, and VSS access in your ANT build files.

{tip}Just getting started with unit testing? John C Bland II gave a fantastic overview... [watch it here|http://experts.na3.acrobat.com/p76614762/] .{tip}{tip}Want to learn more about ANT? Watch [Jim Priest's CFMeetup presentation|http://experts.acrobat.com/p53858056/] {tip}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6586371</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6619141</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6586375</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6128062</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&source=web&cd=1&ved=0CBMQFjAA&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D4948033&rct=j&q=cfbuilder%20folder%20star%20cf%20nature&ei=ffLOTK66FcKclgfqqNHjCA&usg=AFQjCNHRfhbN9SM_YQgUZxctIV1hpx0wEA]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-11-01 17:02:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-11-01 17:02:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6128116</id>
    <property name="viewCount">2</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=4948033]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-11-03 20:26:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-12-08 05:56:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6127715</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=5341267]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341267</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-10-15 17:19:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-10-15 17:19:15.000</property>
  </object>
  <object class="Comment" package="com.atlassian.confluence.pages">
    <id name="id">6750403</id>
    <property name="title"/>
    <collection name="bodyContents">
      <element class="BodyContent" package="com.atlassian.confluence.core">
        <id name="id">6783163</id>
      </element>
    </collection>
    <property name="version">1</property>
    <property name="creatorName"><![CDATA[brian@page-solutions.com]]></property>
    <property name="creationDate">2011-03-16 15:44:01.920</property>
    <property name="lastModifierName"><![CDATA[brian@page-solutions.com]]></property>
    <property name="lastModificationDate">2011-03-16 15:44:01.920</property>
    <property name="versionComment"><![CDATA[]]></property>
    <property name="originalVersion" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6750402</id>
    </property>
    <property name="contentStatus"><![CDATA[current]]></property>
  </object>
  <object class="Comment" package="com.atlassian.confluence.pages">
    <id name="id">6750404</id>
    <property name="title"/>
    <collection name="bodyContents">
      <element class="BodyContent" package="com.atlassian.confluence.core">
        <id name="id">6783164</id>
      </element>
    </collection>
    <property name="version">2</property>
    <property name="creatorName"><![CDATA[brian@page-solutions.com]]></property>
    <property name="creationDate">2011-03-16 15:44:01.920</property>
    <property name="lastModifierName"><![CDATA[brian@page-solutions.com]]></property>
    <property name="lastModificationDate">2011-03-16 15:46:50.100</property>
    <property name="versionComment"><![CDATA[]]></property>
    <property name="originalVersion" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6750402</id>
    </property>
    <property name="contentStatus"><![CDATA[current]]></property>
  </object>
  <object class="SpaceDescription" package="com.atlassian.confluence.spaces">
    <id name="id">4292867</id>
    <property name="title"/>
    <collection name="bodyContents">
      <element class="BodyContent" package="com.atlassian.confluence.core">
        <id name="id">4325587</id>
      </element>
    </collection>
    <property name="version">5</property>
    <property name="creatorName"><![CDATA[virtix]]></property>
    <property name="creationDate">2009-01-17 10:51:32.000</property>
    <property name="lastModifierName"><![CDATA[virtix]]></property>
    <property name="lastModificationDate">2010-01-07 10:53:21.000</property>
    <property name="versionComment"><![CDATA[]]></property>
    <property name="originalVersion" class="SpaceDescription"
      package="com.atlassian.confluence.spaces">
      <id name="id">786456</id>
    </property>
    <property name="contentStatus"><![CDATA[current]]></property>
  </object>
  <object class="SpaceDescription" package="com.atlassian.confluence.spaces">
    <id name="id">4292866</id>
    <property name="title"/>
    <collection name="bodyContents">
      <element class="BodyContent" package="com.atlassian.confluence.core">
        <id name="id">4325586</id>
      </element>
    </collection>
    <property name="version">4</property>
    <property name="creatorName"><![CDATA[virtix]]></property>
    <property name="creationDate">2009-01-17 10:51:32.000</property>
    <property name="lastModifierName"><![CDATA[virtix]]></property>
    <property name="lastModificationDate">2010-01-07 10:49:51.000</property>
    <property name="versionComment"><![CDATA[]]></property>
    <property name="originalVersion" class="SpaceDescription"
      package="com.atlassian.confluence.spaces">
      <id name="id">786456</id>
    </property>
    <property name="contentStatus"><![CDATA[current]]></property>
  </object>
  <object class="SpaceDescription" package="com.atlassian.confluence.spaces">
    <id name="id">4292862</id>
    <property name="title"/>
    <collection name="bodyContents">
      <element class="BodyContent" package="com.atlassian.confluence.core">
        <id name="id">4325582</id>
      </element>
    </collection>
    <property name="version">3</property>
    <property name="creatorName"><![CDATA[virtix]]></property>
    <property name="creationDate">2009-01-17 10:51:32.000</property>
    <property name="lastModifierName"><![CDATA[virtix]]></property>
    <property name="lastModificationDate">2009-11-16 20:15:59.000</property>
    <property name="versionComment"><![CDATA[]]></property>
    <property name="originalVersion" class="SpaceDescription"
      package="com.atlassian.confluence.spaces">
      <id name="id">786456</id>
    </property>
    <property name="contentStatus"><![CDATA[current]]></property>
  </object>
  <object class="SpaceDescription" package="com.atlassian.confluence.spaces">
    <id name="id">4292798</id>
    <property name="title"/>
    <collection name="bodyContents">
      <element class="BodyContent" package="com.atlassian.confluence.core">
        <id name="id">4325525</id>
      </element>
    </collection>
    <property name="version">2</property>
    <property name="creatorName"><![CDATA[virtix]]></property>
    <property name="creationDate">2009-01-17 10:51:32.000</property>
    <property name="lastModifierName"><![CDATA[virtix]]></property>
    <property name="lastModificationDate">2009-01-17 11:08:18.000</property>
    <property name="versionComment"><![CDATA[]]></property>
    <property name="originalVersion" class="SpaceDescription"
      package="com.atlassian.confluence.spaces">
      <id name="id">786456</id>
    </property>
    <property name="contentStatus"><![CDATA[current]]></property>
  </object>
  <object class="Label" package="com.atlassian.confluence.labels">
    <id name="id">4816897</id>
    <property name="name"><![CDATA[presentations]]></property>
    <property name="owner"/>
    <property name="namespace"><![CDATA[global]]></property>
    <property name="creationDate">2010-01-15 15:15:58.000</property>
    <property name="lastModificationDate">2010-01-15 15:15:58.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697273</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.co.jp/url?sa=t&rct=j&q=mxunittask&source=web&cd=3&ved=0CDcQFjAC&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341294&ei=cZXNTur2FoPJmAWWsoWqDQ&usg=AFQjCNF-26i-6EnbLebWqmb4BrD9lME1Jg&sig2=oWoWq8_dWfogpb8eUXOtVw]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-24 01:31:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-24 01:31:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697274</id>
    <property name="viewCount">2</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=5341649]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341649</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-24 02:26:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-24 02:26:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697304</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com.hk/url?sa=t&rct=j&q=continuous+integration+windows+services&source=web&cd=2&ved=0CCsQFjAB&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D6750552&ei=SDPPTp-qIq6ViAf_w-zCDg&usg=AFQjCNGMKjcoRFNYFdREw4T_0wE2fHTzQw]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750552</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-25 06:57:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-25 06:57:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697392</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.cfinnovate.com/pages/viewpage.action?pageId=5734465]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734465</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-28 17:10:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-28 17:10:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697401</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=mxunit%20setup%20teardown&source=web&cd=4&sqi=2&ved=0CDUQFjAD&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341649&ei=6e_TTpXxC-Th0QG70Mn2Dw&usg=AFQjCNHaT2zH1iTaoOBWE8ScVXIbFgrA_g]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341649</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-28 21:13:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-28 21:13:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697444</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=4&ved=0CDUQFjAD&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341294&ei=cUzVTuTzPKeIiALg8KmsDg&usg=AFQjCNF-26i-6EnbLebWqmb4BrD9lME1Jg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-29 22:00:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-29 22:00:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697014</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CBsQFjAA&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341294&ei=BJTFTsNKhqmIAsrryPQF&usg=AFQjCNF-26i-6EnbLebWqmb4BrD9lME1Jg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-17 23:46:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-17 23:46:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697028</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com.au/url?sa=t&rct=j&q=mxunit%20getresultsoutput&source=web&cd=2&ved=0CCYQFjAB&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D786580&ei=YfDFTvyxK8KiiAfi3MDtDQ&usg=AFQjCNEepDatxYoE4Vyn3ElE0L6JoqjlSw&cad=rja]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786580</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-18 06:20:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-18 06:20:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697960</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=3&sqi=2&ved=0CDQQFjAC&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341649&ei=FJ_rTv-MIMGAsgL6qIS4CQ&usg=AFQjCNHaT2zH1iTaoOBWE8ScVXIbFgrA_g&sig2=YGIl2Uv3j47QvqEr7HCDXQ]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341649</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-16 20:27:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-16 20:27:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697905</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.ch/url?sa=t&rct=j&q=mxunittask%20ant&source=web&cd=1&ved=0CCIQFjAA&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341294&ei=jc_pTsaUBobj4QTQ6tn5CA&usg=AFQjCNF-26i-6EnbLebWqmb4BrD9lME1Jg&sig2=ofeuhXg7DTAn2cTobjVRiQ]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-15 11:28:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-15 11:28:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697542</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=mxunit%20test%20suite%20add&source=web&cd=4&ved=0CDYQFjAD&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D4292749&ei=wjXZTsXRI4Xf0QGAm4X1DQ&usg=AFQjCNFxekZabzqU2xNdlNMUltoDGaN_RA]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292749</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-02 21:14:19.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-02 21:14:19.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697541</id>
    <property name="viewCount">3</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=mxunit%20test%20suite%20add&source=web&cd=2&ved=0CCoQFjAB&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D786580&ei=wjXZTsXRI4Xf0QGAm4X1DQ&usg=AFQjCNEepDatxYoE4Vyn3ElE0L6JoqjlSw]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786580</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-02 21:14:18.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-02 21:14:18.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697690</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com.au/url?sa=t&rct=j&q=cfcomponent%20tutorial&source=web&cd=15&ved=0CDgQFjAEOAo&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D786560&ei=OzXgTsTnLo-IrAe0_OmnCw&usg=AFQjCNHnUYGz1HW0SYdKqjW6by6q5XMiwA]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-08 04:51:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-08 04:51:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697716</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=free%20download%20mxunit-ant.jar%20&source=web&cd=3&ved=0CCoQFjAC&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341294&ei=SNzhTpK3CKPx0gGl1cHiBQ&usg=AFQjCNF-26i-6EnbLebWqmb4BrD9lME1Jg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-09 10:43:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-09 10:43:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6697718</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=mxunit%20for%20junit%20report%20generation&source=web&cd=2&ved=0CCQQFjAB&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341294&ei=Ot3hTo7xE6ju0gHn2cjUBQ&usg=AFQjCNF-26i-6EnbLebWqmb4BrD9lME1Jg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-09 10:47:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-09 10:47:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6698309</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=3&ved=0CEAQFjAC&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341213&ei=79UAT7-1DsHv0gGtqcDAAg&usg=AFQjCNFYyOEZrVtmgNfj5rrm1CpwdWNQTw&sig2=VTB0eNR72gTEJrGLtZAtbg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341213</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2012-01-01 22:43:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2012-01-01 22:43:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6698493</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=10&ved=0CGMQFjAJ&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341649&ei=AZQGT6SBLM2VmQXErK2DAg&usg=AFQjCNHaT2zH1iTaoOBWE8ScVXIbFgrA_g]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341649</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2012-01-06 07:16:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2012-01-06 07:16:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6698469</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com.br/url?sa=t&rct=j&q=mxunittask&source=web&cd=4&ved=0CD8QFjAD&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341294&ei=UKIFT8L9JYObtwfGv-mbAw&usg=AFQjCNF-26i-6EnbLebWqmb4BrD9lME1Jg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2012-01-05 14:04:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2012-01-05 14:04:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6698127</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CB4QFjAA&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341521&ei=mVPzToXqL-mAsgKr7c2_AQ&usg=AFQjCNHTiY0Wi6TdWv6ckSshnmLtzzLhOg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341521</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-22 16:44:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-22 16:44:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6698124</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=3&ved=0CDYQFjAC&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341294&ei=EkrzTpOdL-be0QHGu4nOAg&usg=AFQjCNF-26i-6EnbLebWqmb4BrD9lME1Jg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-22 16:03:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-22 16:03:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6698036</id>
    <property name="viewCount">2</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&ved=0CCkQFjAB&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341294&ei=QyfwTr-qBMPftgfbpbCgAg&usg=AFQjCNF-26i-6EnbLebWqmb4BrD9lME1Jg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-20 06:58:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-20 06:59:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6698044</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCIQFjAA&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341342&ei=zbjwTrvDEMPXiAKF1-XCDg&usg=AFQjCNGouVauNGhjhYl5frdM_VyjqxDymA&sig2=kEFhAut71W8ckEvYYD2tgA]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341342</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-20 17:18:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-20 17:18:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6698062</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&ved=0CCYQFjAB&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D6750462&ei=3Q3xTsWGFIOH4gTN-s2oAQ&usg=AFQjCNEZ79xUqad0oY_BCNtNAx0eq0fIdQ]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750462</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-20 23:22:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-20 23:22:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6698064</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&ved=0CCUQFjAB&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341342&ei=bRDxTqDlJaqbiAKNwvjSDg&usg=AFQjCNGouVauNGhjhYl5frdM_VyjqxDymA]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341342</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-20 23:32:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-20 23:32:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6698252</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=4&ved=0CDUQFjAD&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D786580&ei=ioz7TrKDAqLX0QGX-bSeAg&usg=AFQjCNEepDatxYoE4Vyn3ElE0L6JoqjlSw&sig2=JNJ0cni8NsuEgx1QOWA1TA]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786580</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-28 22:27:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-28 22:27:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6698275</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=19&ved=0CHwQFjAIOAo&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341213&ei=3gD9TtLmA4jg0QGywtjDAg&usg=AFQjCNFYyOEZrVtmgNfj5rrm1CpwdWNQTw&sig2=7Xu8LpqYG8n4T7I5115Qxw]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341213</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-30 00:58:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-30 00:58:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6698203</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&ved=0CCkQFjAB&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D6750462&ei=P1T5Ts7APIWztwfm0-zQBg&usg=AFQjCNEZ79xUqad0oY_BCNtNAx0eq0fIdQ]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750462</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-12-27 06:02:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-12-27 06:02:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6698569</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=786497&navigatingVersions=true]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786497</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2012-01-09 09:36:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2012-01-09 09:36:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6695053</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.co.uk/search?aq=f&gcx=c&sourceid=chrome&ie=UTF-8&q=mxunittask]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-10-05 08:31:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-10-05 08:31:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6696493</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/diffpages.action?originalId=5341649&pageId=5341651]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341651</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-07 12:42:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-07 12:42:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6696494</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=5341651]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734420</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-07 12:46:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-07 12:46:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6696297</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpreviousversions.action?pageId=786598]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786600</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-01 17:02:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-01 17:02:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6696884</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.co.uk/url?sa=t&rct=j&q=mxunit%20setup%20teardown&source=web&cd=4&ved=0CDsQFjAD&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341649&ei=F0fCTpH3Fc_oOamy3OAN&usg=AFQjCNHaT2zH1iTaoOBWE8ScVXIbFgrA_g]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341649</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-15 11:40:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-15 11:40:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310624</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?client=firefox-a&rls=org.mozilla%3Aen-US%3Aofficial&channel=s&hl=en&source=hp&q=eclipse+mxunit+certificate+expired&btnG=Google+Search]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-06-21 17:52:05.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-06-21 17:52:05.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310667</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&rlz=1C1_____enUS374US374&q=coldfusion.monitor.stack.cfstackframe&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-06-22 18:51:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-06-22 18:51:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310734</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunittask&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-06-25 19:09:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-06-25 19:09:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6696601</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=3&ved=0CDUQFjAC&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341294&ei=ssy6TozHGMrE2gXvh7HZBw&usg=AFQjCNF-26i-6EnbLebWqmb4BrD9lME1Jg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-09 19:31:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-09 19:31:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6696537</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.de/url?sa=t&rct=j&q=mxunittask&source=web&cd=5&ved=0CEoQFjAE&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341294&ei=mD65TreNKOTO4QTn2In7Bw&usg=AFQjCNF-26i-6EnbLebWqmb4BrD9lME1Jg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-08 15:12:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-08 15:12:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6696509</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=5&ved=0CD0QFjAE&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341294&ei=1d63TrOyMMrO2wWd0szMDQ&usg=AFQjCNF-26i-6EnbLebWqmb4BrD9lME1Jg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-11-07 18:26:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-11-07 18:26:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819223</id>
    <property name="body"><![CDATA[MXUnit Documentation]]></property>
    <property name="content" class="SpaceDescription" package="com.atlassian.confluence.spaces">
      <id name="id">786456</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819226</id>
    <property name="body"><![CDATA[This is the home of the MXUnit Public Wiki space.

To help you on your way, we've inserted some of our favourite macros on this home page. As you start creating pages, adding news items and commenting you'll see the macros below fill up with all the activity in your space. 
{section}
{column:width=60%}
{recently-updated}
{column}
{column:width=5%}
{column}
{column:width=35%}
h6. Navigate space
{pagetreesearch}
{pagetree}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786459</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6693024</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.de/search?q=task+junit+encoding&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:de:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-08-22 17:33:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-08-22 17:33:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819242</id>
    <property name="body"><![CDATA[h6. About Me
You may edit this page to include additional information about yourself.

E-mail: [marc.esher@gmail.com|mailto:marc.esher@gmail.com]
{section}
{column:width=60%}
{recently-updated}
{column}
{column:width=2%}
{column}
{column:width=38%}
h6. Navigate space
{pagetreesearch}
{pagetree}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786476</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310414</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.co.jp/search?q=confluence+url+tree+view+expand&hl=ja&rlz=1B3GGGL_jaJP347JP348&start=50&sa=N]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-06-10 10:38:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-06-10 10:38:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819241</id>
    <property name="body"><![CDATA[h2. Running entire directories of Tests with one line of code

When you have a multiple tests  all residing in a directory and subdirectories,    it's very conventient to run everything contained in those directories.  In   this context, a directory of tests _implies_ a test suite, and MXUnit enables   you to run directories as test suites.

Running directories of tests can be done with a single line of code:

{code}
<cfinvoke component="mxunit.runner.DirectoryTestSuite"
	      method="run"
	      directory="#expandPath('/mxunit/PluginDemoTests')#"
	      recurse="true"
	      excludes="InvalidMarkupTest,FiveSecondTest"
	      returnvariable="results" />
{code}

*Explanation:*


* component: The MXUnit runner component responsible for running all the tests.
* method: The component's method being invoked.
* directory: A physical path to the directory containing your tests.
* recurse: A flag to indicate whether or not to run tests in all subdirectories.
* excludes: A list of component names to exclude.
* returnvariable: The variable name of the TestResult object returned
* componentPath: (Not listed above) Optional parameter that increases performance.    This is the component name prefix; e.g., com.foo.bar.        If not specified, MXUnit will locate the full component name using the ColdFusion server       cache of components.
* This will pick up any file that *starts or ends with the word "Test"*, but excluding anything in your "excludes" attribute

Once this is exectuted you can easily output the results to the screen:

{code}
<cfinvoke component="mxunit.runner.DirectoryTestSuite"
	      method="run"
	      directory="#expandPath('/mxunit/PluginDemoTests')#"
	      recurse="true"
	      excludes="InvalidMarkupTest,FiveSecondTest"
	      returnvariable="results" />

<cfoutput> #results.getResultsOutput('extjs')# </cfoutput>
{code}


Copy the above to a file called /mxunit/doc/tutorial/directoryRunner.cfm and   run it: [http://localhost:8500/mxunit/doc/tutorial/directoryRunner.cfm|http://localhost:8500/mxunit/doc/tutorial/directoryRunner.cfm] You should see this: !dir-runner-1.png|width=32,height=32!]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786475</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819234</id>
    <property name="body"><![CDATA[This is the home of the MXUnit Public Wiki space.

How can we get this to appear as the default when calling wiki.mxunit.org?

The idea, maybe, is that this would be the public home for tech docs, blogs, musings, "the book", etc. Maybe use feedburner to publish the various parts ... content taxonomies?

mxunit.org may still be the landing point, maybe make static html pages for blog, wiki, support, etc. This would allow for google webmaster tools to create a site map.




{section}


{column:width=60%}

{recently-updated}
{column}
{column:width=5%}


{column}
{column:width=35%}

h6. Navigate space
{pagetreesearch}
{pagetree}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786468</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310404</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&safe=active&rlz=1R2SUNA_enUS344&q=%22function+addRow()%22+%22date+picker%22&start=20&sa=N]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-06-09 16:55:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-06-09 16:55:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310405</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&safe=active&rlz=1R2SUNA_enUS344&q=%22function+addRow()%22+%22date+picker%22&start=20&sa=N]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341213</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-06-09 17:00:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-06-09 17:00:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819233</id>
    <property name="body"><![CDATA[This is the home of the MXUnit Public Wiki space.

How can we get this to appear as the default when calling wiki.mxunit.org?


{section}

{column:width=60%}

{recently-updated}
{column}
{column:width=5%}

{column}
{column:width=35%}

h6. Navigate space
{pagetreesearch}
{pagetree}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786467</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819261</id>
    <property name="body"><![CDATA[h2. TDD Example: Fixing a Bug in the Plugin

Note: This example uses a bug I found in the MXUnit Eclipse plugin. The code examples are java but they're simple and accessible and, honestly, the code doesn't matter here. What matters is the approach.

h3. The Bug

You have a filesystem path like this: C:\inetpub\wwwroot\sandbox\cfc\MyTest.cfc

You try to open that CFC in the MXUnit View

*Expected:* The view loads sandbox.cfc.MyTest and displays its methods

*Actual:* The view loads sandbox.MyTest and gives an error that the component is not found

*Analysis:* Something in the plugin code is stripping ".cfc" from the Component path

h3. Finding the Bug

*Step 1:* I know that the code responsible for deriving component paths is in PathUtils.java. So... Open PathUtilsTest.java (_That's right... I open the test case first_)

*Step 2:* Run all tests and confirm everything passes

*Step 3:* Spend a few minutes figuring out why my existing tests don't catch this bug. The answer is easy: no tests check explicitly for a directory with "cfc" in the path

*Step 4:* Add a new test

{code}
  	public void testDeriveComponentPathWithCFCInDirectory(){
		String root = "c:\\cfusionmx7\\wwwroot";
		String component = "C:\\cfusionmx7\\WWWroot\\cfc\\TestMyCFC.cfc";
		File rootFile = new File(root);
		File componentFile = new File(component);
		String componentPath = PathUtils.deriveComponentPath(rootFile.getAbsolutePath(), componentFile.getAbsolutePath());
		assertEquals("cfc.TestMyCFC",componentPath);
	}
{code}



*Step 5:* Run the test. It PASSES\! Rats... My test isn't finding the bug. OK, what's different between this test and the behavior I'm seeing??? Hmmmm....

*Step 6:* Revise the test. I'm not changing any code until I can verify a failure:



{code}
  	public void testDeriveComponentPathWithCFCInDirectory(){
		String root = "c:\\cfusionmx7\\wwwroot";
		String component = "C:\\cfusionmx7\\WWWroot\\sandbox\\cfc\\TestMyCFC.cfc";
		File rootFile = new File(root);
		File componentFile = new File(component);
		String componentPath = PathUtils.deriveComponentPath(rootFile.getAbsolutePath(), componentFile.getAbsolutePath());
		assertEquals("sandbox.cfc.TestMyCFC",componentPath);
	}
{code}

{color:#ff0000}{*}SWEET{*}{color}: It fails as I expected it to. I get sandbox.TestMyCFC instead of sandbox.cfc.TestMyCFC

h3. Fixing the Bug

\*Step 7:*Open PathUtils.java and find out what's going on in deriveComponentPath that isn't jiving with the path i'm sending it. deriveComponentPath is pretty simple stuff: it takes the webroot, the full path to the component, knocks the webroot out of the string, and converts the remainder to dot notation. It's literally like 5 or 6 lines of code, and it could probably be shortened down to 2 or 3. But it works, so I'm not messing with it.

*Step 8*: find something that looks like it's stripping ".cfc". Well... that was easy:

{code}
	//strip extension
	path = path.replaceFirst("(?i)\\.cfc", "");
{code}


Blindingly easy. So, how to fix? Well... understand that by the time it gets to this code, the \sandbox\cfc\TestMyCFC.cfc part of the path now looks like this: sandbox.cfc.TestMyCFC.cfc

*Step 9:* try to fix it

So what I really need is just a "replaceLast". But there is no replaceLast in java. Still, as you can see, I'm using replaceFirst, and replaceFirst takes a regex as its first arg, and since I'm no regex dummy, I simply do this:

{code}
  	//strip extension
	path = path.replaceFirst("(?i)\\.cfc$", "");
{code}

The $ means "only if it's at the end". i.e., replace Last.

*Step 10:* run all my tests. Green\!

Technically, at this point, i'm done. But I had a few minutes to kill so I thought I'd tinker. replaceFirst() and then doing just the last .cfc seems kind of wonky to me. Why not just run "replace".

*Step 11:* change replaceFirst() to replace() and run my tests again. {color:#ff0000}{*}RED\!*{color}

*Step 12:* Say "WTF?"

*Step 13:* Open up API docs for String.replace()

DOH\! replace() doesn't take a regex, it takes a CharSequence

*Step 14:* change back to replaceFirst(), run tests again just to be safe.

\*Step 15:*All tests pass. I fire up a new eclipse debug session and try to run a test in a directory named "sandbox.cfc". Everything now works as expected.

*Step 16:* Tests Pass. App works as expected. Call it a day.

h3. How this saved me time

One of the things you hear from the TDD evangelists is that testing is supposed to save you time, not add time. It's supposed to help you become more productive. But it seems nonsensical: {color:#ff0000}{*}How can I write more code and be more productive?*{color} That's like drinking more Dalwhinnie 15 and being less -drunk- happy. It doesn't make sense.

Especially when you're starting out with TDD, you're likely to find that it does in fact add some time onto your programming. You're still getting in the groove of writing tests; maybe you don't have snippets for jamming out test cases and test methods quickly. Quite possibly the code itself simply doesn't lend itself to testing because it's all one monster self-contained component and it doesn't return any data and how the hell do you test that? And you're running up against project deadlines, project managers are sending you emails every 5 minutes asking if you're done yet (because that's what they're good at. That, and changing requirements at the last minute... but i digress). Executives are concocting diabolical schemes to Turn that January 1 deadline into a December 15 deadline because "our whizbang isn't-he-so-smart programmer just started this STD or DTT or some thing and it's gonna make him 5 times more productive in half the time" (?boggle?)

It takes time. Hang in there.

Oh, so how did this save me time. Got off track for a second.
* I didn't have to bother opening new debug instances of eclipse until I was pretty sure the code worked well. I didn't have to actually use the plugin view, trying to load my sandbox.cfc.MyTest.cfc until I got it right.
* My confidence was high that I didn't have to manually test all the other normal component paths. All my unit tests that test that stuff passed, so I felt good about that. One of the things TDD is supposesd to do is decrease regression test time. In this case, it did that for me.
* I felt confident spending a couple minutes monkeying with replaceFirst(), changing it to replace(). It literally took like 30 seconds and when I saw that other tests failed, I ditched it and went back.
* I could stay in the IDE. this is really an offshoot from point 1 I suppose. Nonetheless, for me, the more time I can spend in the IDE, the faster I program. There's something about not having to jump out to other applications that keeps me focused and fast.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786497</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819260</id>
    <property name="body"><![CDATA[h2. TDD Example: Fixing a Bug in the Plugin

Note: This example uses a bug I found in the MXUnit Eclipse plugin. The code examples are java but they're simple and accessible and, honestly, the code doesn't matter here. What matters is the approach.

h3. The Bug

You have a filesystem path like this: C:\inetpub\wwwroot\sandbox\cfc\MyTest.cfc

You try to open that CFC in the MXUnit View

*Expected:* The view loads sandbox.cfc.MyTest and displays its methods

*Actual:* The view loads sandbox.MyTest and gives an error that the component is not found

*Analysis:* Something in the plugin code is stripping ".cfc" from the Component path

h3. Finding the Bug

*Step 1:* I know that the code responsible for deriving component paths is in PathUtils.java. So... Open PathUtilsTest.java (_That's right... I open the test case first_)

*Step 2:* Run all tests and confirm everything passes

*Step 3:* Spend a few minutes figuring out why my existing tests don't catch this bug. The answer is easy: no tests check explicitly for a directory with "cfc" in the path

*Step 4:* Add a new test  	public void testDeriveComponentPathWithCFCInDirectory(){ 		String root = "c:\\cfusionmx7\\wwwroot"; 		String component = "C:\\cfusionmx7\\WWWroot\\cfc\\TestMyCFC.cfc"; 		File rootFile = new File(root); 		File componentFile = new File(component); 		String componentPath = PathUtils.deriveComponentPath(rootFile.getAbsolutePath(), componentFile.getAbsolutePath()); 		assertEquals("cfc.TestMyCFC",componentPath); 	}
*Step 5:* Run the test. It PASSES\! Rats... My test isn't finding the bug. OK, what's different between this test and the behavior I'm seeing??? Hmmmm....

*Step 6:* Revise the test. I'm not changing any code until I can verify a failure:  	public void testDeriveComponentPathWithCFCInDirectory(){ 		String root = "c:\\cfusionmx7\\wwwroot"; 		String component = "C:\\cfusionmx7\\WWWroot\\sandbox\\cfc\\TestMyCFC.cfc"; 		File rootFile = new File(root); 		File componentFile = new File(component); 		String componentPath = PathUtils.deriveComponentPath(rootFile.getAbsolutePath(), componentFile.getAbsolutePath()); 		assertEquals("sandbox.cfc.TestMyCFC",componentPath); 	}

SWEET: It fails as I expected it to. I get sandbox.TestMyCFC instead of sandbox.cfc.TestMyCFC

h3. Fixing the Bug

\*Step 7:*Open PathUtils.java and find out what's going on in deriveComponentPath that isn't jiving with the path i'm sending it. deriveComponentPath is pretty simple stuff: it takes the webroot, the full path to the component, knocks the webroot out of the string, and converts the remainder to dot notation. It's literally like 5 or 6 lines of code, and it could probably be shortened down to 2 or 3. But it works, so I'm not messing with it.

*Step 8*: find something that looks like it's stripping ".cfc". Well... that was easy:  	//strip extension
path = path.replaceFirst("(?i)
\\
.cfc", "");
Blindingly easy. So, how to fix? Well... understand that by the time it gets to this code, the \sandbox\cfc\TestMyCFC.cfc part of the path now looks like this: sandbox.cfc.TestMyCFC.cfc

*Step 9:* try to fix it

So what I really need is just a "replaceLast". But there is no replaceLast in java. Still, as you can see, I'm using replaceFirst, and replaceFirst takes a regex as its first arg, and since I'm no regex dummy, I simply do this:  	//strip extension
path = path.replaceFirst("(?i)
\\
.cfc$", "");
The $ means "only if it's at the end". i.e., replace Last.

*Step 10:* run all my tests. Green\!

Technically, at this point, i'm done. But I had a few minutes to kill so I thought I'd tinker. replaceFirst() and then doing just the last .cfc seems kind of wonky to me. Why not just run "replace".

*Step 11:* change replaceFirst() to replace() and run my tests again. RED\!

*Step 12:* Say "WTF?"

*Step 13:* Open up API docs for String.replace()

DOH\! replace() doesn't take a regex, it takes a CharSequence

*Step 14:* change back to replaceFirst(), run tests again just to be safe.

\*Step 15:*All tests pass. I fire up a new eclipse debug session and try to run a test in a directory named "sandbox.cfc". Everything now works as expected.

*Step 16:* Tests Pass. App works as expected. Call it a day.

h3. How this saved me time

One of the things you hear from the TDD evangelists is that testing is supposed to save you time, not add time. It's supposed to help you become more productive. But it seems nonsensical: How can I write more code and be more productive? That's like drinking more Dalwhinnie 15 and being less -drunk- happy. It doesn't make sense.

Especially when you're starting out with TDD, you're likely to find that it does in fact add some time onto your programming. You're still getting in the groove of writing tests; maybe you don't have snippets for jamming out test cases and test methods quickly. Quite possibly the code itself simply doesn't lend itself to testing because it's all one monster self-contained component and it doesn't return any data and how the hell do you test that? And you're running up against project deadlines, project managers are sending you emails every 5 minutes asking if you're done yet (because that's what they're good at. That, and changing requirements at the last minute... but i digress). Executives are concocting diabolical schemes to Turn that January 1 deadline into a December 15 deadline because "our whizbang isn't-he-so-smart programmer just started this STD or DTT or some thing and it's gonna make him 5 times more productive in half the time" (?boggle?)

It takes time. Hang in there.

Oh, so how did this save me time. Got off track for a second.
* I didn't have to bother opening new debug instances of eclipse until I was pretty sure the code worked well. I didn't have to actually use the plugin view, trying to load my sandbox.cfc.MyTest.cfc until I got it right.
* My confidence was high that I didn't have to manually test all the other normal component paths. All my unit tests that test that stuff passed, so I felt good about that. One of the things TDD is supposesd to do is decrease regression test time. In this case, it did that for me.
* I felt confident spending a couple minutes monkeying with replaceFirst(), changing it to replace(). It literally took like 30 seconds and when I saw that other tests failed, I ditched it and went back.
* I could stay in the IDE. this is really an offshoot from point 1 I suppose. Nonetheless, for me, the more time I can spend in the IDE, the faster I program. There's something about not having to jump out to other applications that keeps me focused and fast.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786496</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819255</id>
    <property name="body"><![CDATA[h2. What to put in your tests \-\- or, patterns for your assertions

Components are a mix of state and behavior. Thus, when we test, we typically want to know:
* Did the state of the object change as expected?
* Did the behavior occur that I expected?

Sometimes we want to know one or the other; sometimes we want to know both.

Here are some "assertion patterns"\* to help you get started.

h3. Resulting-State Assertion

The resulting-state assertion tests data. It says "I'm doing something to my object that will change that object's data, or 'state'. I'm going to test that the resulting state of my object is as I expect". A simple example is the common "bank account" or "transaction" example: You have two accounts, you transfer $20 from one account to another, and you test that the first account is 20 bucks shorter and the second account has that 20 bucks. Here's a different example, using a typical "User" object:


{code:title=Resulting-State Assertion}
<cffunction name="testAddPrivilegeGroup">
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>
{code}
h3. Guard Assertion

The guard assertion is simply a slight variant on the resulting state assertion; typically, the difference is that toward the top of the test, before you get into the "guts" of your assertion(s), you check the object for some condition that you want to ensure exists before proceeding with the meat of your tests. Think of it as "If this condition isn't true, I want to fail right now because the rest of the tests don't matter". Usually the "guard" is just a simple assertion for equality, often to check that a "default" condition exists. In our example here, we're simply checking that our user object always starts without the privileges we're adding. IF the user object already had those privileges, then that means something tinkered with our object (perhaps indicating a problem in our setup function) and we got a problem here, Houston, and we want to fail right now.

{code:title=Guard Assertion}
<cffunction name="testAddPrivilegeGroup">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.belongsToGroup("admin"))>
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.hasPrivilegeTo("DeleteOtherUsers"))>
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>
{code}
h3. Different instances, same data

The different-instances, same-data pattern is common in DAO testing. Essentially, we're asserting that two objects are different instances but contain the same data. In MXUnit, you can test for "different instance" by using the assertNotSame() assertion.

{code:title=Different instances, same data}
<cffunction name="testSaveWithRead">
	<cfset dao.save(user)>
	<cfset user2 = dao.read(user.getUserID())>
	<!--- assert they're not the same instance --->
	<cfset assertNotSame(user,user2)>
	<!--- one final check... assert the UUIDs aren't the same --->
	<cfset assertTrue( user.getUUID() neq user2.getUUID(), "user UUID and user2 UUID should not be the same but are")>

	<cfset assertEquals(user.getUserID(),user2.getUserID())>
	<cfset assertEquals(user.getCreateTS(),user2.getCreateTS())>

	<!--- is there an easier way? could we use any of the functions in the baseobject for comparisons so we don't have to test all these fields? --->
	<cfset assertEquals(user.XXXXX,user2.XXXXX)>
</cffunction>
{code}

h3. "Delta" Assertion

Sometimes you can't assert an absolute equality (like "My list is now 5 elements long"). Sometimes, you have to assert equality relative to some previous state. In the example below, imagine you're hooking into some scheduling mechanism (this would be for an integration test, for example). We don't know exactly what getTotalScheduled() will return at any given test run. Maybe it's 1. Maybe it's 30. Who knows. What we want to test is that when we schedule one additional thing, our scheduler's "totalScheduled" count increases by 1. Again, the result could be 2 or it could be 31. We don't know. This type of assertion, where we compare the state right before and right after performing some task, is called "delta", or difference, assertion. 

{code:title=Delta Assertion}
<cffunction name="testScheduleSomething">
	<cfset obj = createObject("component","SchedulableObject")>
	<cfset currentlyScheduled = scheduler.getTotalScheduled()>
	<cfset scheduler.scheduleSomething(obj)>
	<cfset assertEquals(currentlyScheduled+1, scheduler.getTotalScheduled())>
</cffunction>
{code}

And here's what it might look like for our User object:

{code:title=Delta Assertion on User object}
<cffunction name="testPrivilegeCount">
	<cfset currentPrivilegeCount = user.getPrivilegeCount()>
	<cfset user.addPrivilege("ChangeOwnPassword")>
	<cfset assertEquals(currentPrivilegeCount+1, user.getPrivilegeCount())>
</cffunction>
{code}


h3. Interaction Assertion

With interaction assertions, we're testing to make sure an object and a collaborator worked together as we expected. A great example of an interaction is a "bean" style object, like perhaps a "User", and the DAO for that object, like a UserDAO: 

{code:title=Interaction Assertion}
<cffunction name="testSave"
	<cfset origUUID = user.getUUID()>
	<cfset dao.save(user)> 
	<cfset newUserID = user.getUserID()>
	<!---  Assert that our DAO updated our user object with its ID after saving  --->
	<cfset assertTrue(newUserID GT 0)>   
	<cfset user.setEmail("somethingnew@somethingnew.com")>
	<cfset dao.save(user)>
	<!--- We don't care about testing the update here... just that the insert didn't change the user object's key --->
	<cfset assertEquals(newUserID,user.getUserID())>
	<cfset assertEquals(origUUID,user.getUUID())>
</cffunction>
{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786490</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819257</id>
    <property name="body"><![CDATA[h2. What to put in your tests \-\- or, patterns for your assertions

Components are a mix of state and behavior. Thus, when we test, we typically want to know:
* Did the state of the object change as expected?
* Did the behavior occur that I expected?

Sometimes we want to know one or the other; sometimes we want to know both.

Here are some *"assertion patterns" ** to help you get started.

h3. Resulting-State Assertion

The resulting-state assertion tests data. It says "I'm doing something to my object that will change that object's data, or 'state'. I'm going to test that the resulting state of my object is as I expect". A simple example is the common "bank account" or "transaction" example: You have two accounts, you transfer $20 from one account to another, and you test that the first account is 20 bucks shorter and the second account has that 20 bucks. Here's a different example, using a typical "User" object:


{code:title=Resulting-State Assertion}<cffunction name="testAddPrivilegeGroup">
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>
{code}
h3. Guard Assertion

The guard assertion is simply a slight variant on the resulting state assertion; typically, the difference is that toward the top of the test, before you get into the "guts" of your assertion(s), you check the object for some condition that you want to ensure exists before proceeding with the meat of your tests. Think of it as "If this condition isn't true, I want to fail right now because the rest of the tests don't matter". Usually the "guard" is just a simple assertion for equality, often to check that a "default" condition exists. In our example here, we're simply checking that our user object always starts without the privileges we're adding. IF the user object already had those privileges, then that means something tinkered with our object (perhaps indicating a problem in our setup function) and we got a problem here, Houston, and we want to fail right now.

{code:title=Guard Assertion}<cffunction name="testAddPrivilegeGroup">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.belongsToGroup("admin"))>
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.hasPrivilegeTo("DeleteOtherUsers"))>
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>
{code}
h3. Different instances, same data

The different-instances, same-data pattern is common in DAO testing. Essentially, we're asserting that two objects are different instances but contain the same data. In MXUnit, you can test for "different instance" by using the assertNotSame() assertion.

{code:title=Different instances, same data}<cffunction name="testSaveWithRead">
	<cfset dao.save(user)>
	<cfset user2 = dao.read(user.getUserID())>
	<!--- assert they're not the same instance --->
	<cfset assertNotSame(user,user2)>
	<!--- one final check... assert the UUIDs aren't the same --->
	<cfset assertTrue( user.getUUID() neq user2.getUUID(), "user UUID and user2 UUID should not be the same but are")>

	<cfset assertEquals(user.getUserID(),user2.getUserID())>
	<cfset assertEquals(user.getCreateTS(),user2.getCreateTS())>

	<!--- is there an easier way? could we use any of the functions in the baseobject for comparisons so we don't have to test all these fields? --->
	<cfset assertEquals(user.XXXXX,user2.XXXXX)>
</cffunction>
{code}
h3. "Delta" Assertion

Sometimes you can't assert an absolute equality (like "My list is now 5 elements long"). Sometimes, you have to assert equality relative to some previous state. In the example below, imagine you're hooking into some scheduling mechanism (this would be for an integration test, for example). We don't know exactly what getTotalScheduled() will return at any given test run. Maybe it's 1. Maybe it's 30. Who knows. What we want to test is that when we schedule one additional thing, our scheduler's "totalScheduled" count increases by 1. Again, the result could be 2 or it could be 31. We don't know. This type of assertion, where we compare the state right before and right after performing some task, is called "delta", or difference, assertion.

{code:title=Delta Assertion}<cffunction name="testScheduleSomething">
	<cfset obj = createObject("component","SchedulableObject")>
	<cfset currentlyScheduled = scheduler.getTotalScheduled()>
	<cfset scheduler.scheduleSomething(obj)>
	<cfset assertEquals(currentlyScheduled+1, scheduler.getTotalScheduled())>
</cffunction>
{code}
And here's what it might look like for our User object:

{code:title=Delta Assertion on User object}<cffunction name="testPrivilegeCount">
	<cfset currentPrivilegeCount = user.getPrivilegeCount()>
	<cfset user.addPrivilege("ChangeOwnPassword")>
	<cfset assertEquals(currentPrivilegeCount+1, user.getPrivilegeCount())>
</cffunction>
{code}

h3. Interaction Assertion

With interaction assertions, we're testing to make sure an object and a collaborator worked together as we expected. A great example of an interaction is a "bean" style object, like perhaps a "User", and the DAO for that object, like a UserDAO:

{code:title=Interaction Assertion}<cffunction name="testSave"
	<cfset origUUID = user.getUUID()>
	<cfset dao.save(user)>
	<cfset newUserID = user.getUserID()>
	<!---  Assert that our DAO updated our user object with its ID after saving  --->
	<cfset assertTrue(newUserID GT 0)>
	<cfset user.setEmail("somethingnew@somethingnew.com")>
	<cfset dao.save(user)>
	<!--- We don't care about testing the update here... just that the insert didn't change the user object's key --->
	<cfset assertEquals(newUserID,user.getUserID())>
	<cfset assertEquals(origUUID,user.getUUID())>
</cffunction>
{code}*\*The terms here are taken from the outstanding book "Test-Driven" by Lasse Koskela*]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786492</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819251</id>
    <property name="body"><![CDATA[h2. What to put in your tests \-\- or, patterns for your assertions

Components are a mix of state and behavior. Thus, when we test, we typically want to know:
* Did the state of the object change as expected?
* Did the behavior occur that I expected?

Sometimes we want to know one or the other; sometimes we want to know both.

Here are some "assertion patterns"\* to help you get started.

h3. Resulting-State Assertion

The resulting-state assertion tests data. It says "I'm doing something to my object that will change that object's data, or 'state'. I'm going to test that the resulting state of my object is as I expect". A simple example is the common "bank account" or "transaction" example: You have two accounts, you transfer $20 from one account to another, and you test that the first account is 20 bucks shorter and the second account has that 20 bucks. Here's a different example, using a typical "User" object: [view plain|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][print|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][?|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#]
# <cffunction&nbsp;name="testAddPrivilegeGroup">
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;user.addPrivilegeGroup("admin")>
# &nbsp;&nbsp;&nbsp;&nbsp;<\!---&nbsp;verify&nbsp;the&nbsp;internal&nbsp;state&nbsp;of&nbsp;the&nbsp;user&nbsp;--->
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertTrue(user.belongsToGroup("admin"))>
# </cffunction>
# 
# <cffunction&nbsp;name="testAddPrivilege">
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;user.addPrivilege("DeleteOtherUsers")>
# &nbsp;&nbsp;&nbsp;&nbsp;<\!---&nbsp;verify&nbsp;the&nbsp;internal&nbsp;state&nbsp;of&nbsp;the&nbsp;user&nbsp;--->
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
# </cffunction>&nbsp;&nbsp;<cffunction name="testAddPrivilegeGroup">
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>

h3. Guard Assertion

The guard assertion is simply a slight variant on the resulting state assertion; typically, the difference is that toward the top of the test, before you get into the "guts" of your assertion(s), you check the object for some condition that you want to ensure exists before proceeding with the meat of your tests. Think of it as "If this condition isn't true, I want to fail right now because the rest of the tests don't matter". Usually the "guard" is just a simple assertion for equality, often to check that a "default" condition exists. In our example here, we're simply checking that our user object always starts without the privileges we're adding. IF the user object already had those privileges, then that means something tinkered with our object (perhaps indicating a problem in our setup function) and we got a problem here, Houston, and we want to fail right now. [view plain|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][print|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][?|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#]
# <cffunction&nbsp;name="testAddPrivilegeGroup">
# &nbsp;&nbsp;&nbsp;&nbsp;<\!---&nbsp;our&nbsp;&nbsp;'guard':&nbsp;ensure&nbsp;we&nbsp;are&nbsp;starting&nbsp;fresh&nbsp;--->
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertFalse(user.belongsToGroup("admin"))>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;user.addPrivilegeGroup("admin")>
# &nbsp;&nbsp;&nbsp;&nbsp;<\!---&nbsp;verify&nbsp;the&nbsp;internal&nbsp;state&nbsp;of&nbsp;the&nbsp;user&nbsp;--->
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertTrue(user.belongsToGroup("admin"))>
# </cffunction>
# 
# <cffunction&nbsp;name="testAddPrivilege">
# &nbsp;&nbsp;&nbsp;&nbsp;<\!---&nbsp;our&nbsp;&nbsp;'guard':&nbsp;ensure&nbsp;we&nbsp;are&nbsp;starting&nbsp;fresh&nbsp;--->
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertFalse(user.hasPrivilegeTo("DeleteOtherUsers"))>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;user.addPrivilege("DeleteOtherUsers")>
# &nbsp;&nbsp;&nbsp;&nbsp;<\!---&nbsp;verify&nbsp;the&nbsp;internal&nbsp;state&nbsp;of&nbsp;the&nbsp;user&nbsp;--->
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
# </cffunction>&nbsp;&nbsp;<cffunction name="testAddPrivilegeGroup">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.belongsToGroup("admin"))>
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.hasPrivilegeTo("DeleteOtherUsers"))>
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>

h3. Different instances, same data

The different-instances, same-data pattern is common in DAO testing. Essentially, we're asserting that two objects are different instances but contain the same data. In MXUnit, you can test for "different instance" by using the assertNotSame() assertion. [view plain|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][print|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][?|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#]
# <cffunction&nbsp;name="testSaveWithRead">
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;dao.save(user)>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;user2&nbsp;=&nbsp;dao.read(user.getUserID())>
# &nbsp;&nbsp;&nbsp;&nbsp;<\!---&nbsp;assert&nbsp;they're&nbsp;not&nbsp;the&nbsp;same&nbsp;instance&nbsp;--->
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertNotSame(user,user2)>
# &nbsp;&nbsp;&nbsp;&nbsp;<\!---&nbsp;one&nbsp;final&nbsp;check...&nbsp;assert&nbsp;the&nbsp;UUIDs&nbsp;aren't&nbsp;the&nbsp;same&nbsp;--->
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertTrue(&nbsp;user.getUUID()&nbsp;neq&nbsp;user2.getUUID(),&nbsp;"user&nbsp;UUID&nbsp;and&nbsp;user2&nbsp;UUID&nbsp;should&nbsp;not&nbsp;be&nbsp;the&nbsp;same&nbsp;but&nbsp;are")>
# 
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertEquals(user.getUserID(),user2.getUserID())>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertEquals(user.getCreateTS(),user2.getCreateTS())>
# 
# &nbsp;&nbsp;&nbsp;&nbsp;<\!---&nbsp;is&nbsp;there&nbsp;an&nbsp;easier&nbsp;way?&nbsp;could&nbsp;we&nbsp;use&nbsp;any&nbsp;of&nbsp;the&nbsp;functions&nbsp;in&nbsp;the&nbsp;baseobject&nbsp;for&nbsp;comparisons&nbsp;so&nbsp;we&nbsp;don't&nbsp;have&nbsp;to&nbsp;test&nbsp;all&nbsp;these&nbsp;fields?&nbsp;--->
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertEquals(user.XXXXX,user2.XXXXX)>
# </cffunction>&nbsp;&nbsp;<cffunction name="testSaveWithRead">
	<cfset dao.save(user)>
	<cfset user2 = dao.read(user.getUserID())>
	<!--- assert they're not the same instance --->
	<cfset assertNotSame(user,user2)>
	<!--- one final check... assert the UUIDs aren't the same --->
	<cfset assertTrue( user.getUUID() neq user2.getUUID(), "user UUID and user2 UUID should not be the same but are")>

	<cfset assertEquals(user.getUserID(),user2.getUserID())>
	<cfset assertEquals(user.getCreateTS(),user2.getCreateTS())>

	<!--- is there an easier way? could we use any of the functions in the baseobject for comparisons so we don't have to test all these fields? --->
	<cfset assertEquals(user.XXXXX,user2.XXXXX)>
</cffunction>

h3. "Delta" Assertion

Sometimes you can't assert an absolute equality (like "My list is now 5 elements long"). Sometimes, you have to assert equality relative to some previous state. In the example below, imagine you're hooking into some scheduling mechanism (this would be for an integration test, for example). We don't know exactly what getTotalScheduled() will return at any given test run. Maybe it's 1. Maybe it's 30. Who knows. What we want to test is that when we schedule one additional thing, our scheduler's "totalScheduled" count increases by 1. Again, the result could be 2 or it could be 31. We don't know. This type of assertion, where we compare the state right before and right after performing some task, is called "delta", or difference, assertion. [view plain|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][print|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][?|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#]
# <cffunction&nbsp;name="testScheduleSomething">
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;obj&nbsp;=&nbsp;createObject("component","SchedulableObject")>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;currentlyScheduled&nbsp;=&nbsp;scheduler.getTotalScheduled()>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;scheduler.scheduleSomething(obj)>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertEquals(currentlyScheduled\+1,&nbsp;scheduler.getTotalScheduled())>
# </cffunction>&nbsp;&nbsp;<cffunction name="testScheduleSomething">
	<cfset obj = createObject("component","SchedulableObject")>
	<cfset currentlyScheduled = scheduler.getTotalScheduled()>
	<cfset scheduler.scheduleSomething(obj)>
	<cfset assertEquals(currentlyScheduled+1, scheduler.getTotalScheduled())>
</cffunction>
And here's what it might look like for our User object:[view plain|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][print|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][?|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#]
# <cffunction&nbsp;name="testPrivilegeCount">
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;currentPrivilegeCount&nbsp;=&nbsp;user.getPrivilegeCount()>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;user.addPrivilege("ChangeOwnPassword")>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertEquals(currentPrivilegeCount\+1,&nbsp;user.getPrivilegeCount())>
# </cffunction>&nbsp;&nbsp;<cffunction name="testPrivilegeCount">
	<cfset currentPrivilegeCount = user.getPrivilegeCount()>
	<cfset user.addPrivilege("ChangeOwnPassword")>
	<cfset assertEquals(currentPrivilegeCount+1, user.getPrivilegeCount())>
</cffunction>

h3. Interaction Assertion

With interaction assertions, we're testing to make sure an object and a collaborator worked together as we expected. A great example of an interaction is a "bean" style object, like perhaps a "User", and the DAO for that object, like a UserDAO: [view plain|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][print|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][?|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#]
# <cffunction&nbsp;name="testSave"
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;origUUID&nbsp;=&nbsp;user.getUUID()>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;dao.save(user)>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;newUserID&nbsp;=&nbsp;user.getUserID()>
# &nbsp;&nbsp;&nbsp;&nbsp;<\!---&nbsp;&nbsp;Assert&nbsp;that&nbsp;our&nbsp;DAO&nbsp;updated&nbsp;our&nbsp;user&nbsp;object&nbsp;with&nbsp;its&nbsp;ID&nbsp;after&nbsp;saving&nbsp;&nbsp;--->
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertTrue(newUserID&nbsp;GT&nbsp;0)>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;user.setEmail("somethingnew@somethingnew.com")>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;dao.save(user)>
# &nbsp;&nbsp;&nbsp;&nbsp;<\!---&nbsp;We&nbsp;don't&nbsp;care&nbsp;about&nbsp;testing&nbsp;the&nbsp;update&nbsp;here...&nbsp;just&nbsp;that&nbsp;the&nbsp;insert&nbsp;didn't&nbsp;change&nbsp;the&nbsp;user&nbsp;object's&nbsp;key&nbsp;--->
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertEquals(newUserID,user.getUserID())>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertEquals(origUUID,user.getUUID())>
# </cffunction>&nbsp;&nbsp;<cffunction name="testSave"
	<cfset origUUID = user.getUUID()>
	<cfset dao.save(user)>
	<cfset newUserID = user.getUserID()>
	<!---  Assert that our DAO updated our user object with its ID after saving  --->
	<cfset assertTrue(newUserID GT 0)>
	<cfset user.setEmail("somethingnew@somethingnew.com")>
	<cfset dao.save(user)>
	<!--- We don't care about testing the update here... just that the insert didn't change the user object's key --->
	<cfset assertEquals(newUserID,user.getUserID())>
	<cfset assertEquals(origUUID,user.getUUID())>
</cffunction>
\\]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786486</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819253</id>
    <property name="body"><![CDATA[h2. What to put in your tests \-\- or, patterns for your assertions

Components are a mix of state and behavior. Thus, when we test, we typically want to know:
* Did the state of the object change as expected?
* Did the behavior occur that I expected?

Sometimes we want to know one or the other; sometimes we want to know both.

Here are some "assertion patterns"\* to help you get started.

h3. Resulting-State Assertion

The resulting-state assertion tests data. It says "I'm doing something to my object that will change that object's data, or 'state'. I'm going to test that the resulting state of my object is as I expect". A simple example is the common "bank account" or "transaction" example: You have two accounts, you transfer $20 from one account to another, and you test that the first account is 20 bucks shorter and the second account has that 20 bucks. Here's a different example, using a typical "User" object: 


{code:title=Resulting-State Assertion}
<cffunction name="testAddPrivilegeGroup">
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>
{code}

h3. Guard Assertion

The guard assertion is simply a slight variant on the resulting state assertion; typically, the difference is that toward the top of the test, before you get into the "guts" of your assertion(s), you check the object for some condition that you want to ensure exists before proceeding with the meat of your tests. Think of it as "If this condition isn't true, I want to fail right now because the rest of the tests don't matter". Usually the "guard" is just a simple assertion for equality, often to check that a "default" condition exists. In our example here, we're simply checking that our user object always starts without the privileges we're adding. IF the user object already had those privileges, then that means something tinkered with our object (perhaps indicating a problem in our setup function) and we got a problem here, Houston, and we want to fail right now. 

{code:title=Guard Assertion}
<cffunction name="testAddPrivilegeGroup">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.belongsToGroup("admin"))>
	<cfset user.addPrivilegeGroup("admin")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.belongsToGroup("admin"))>
</cffunction>

<cffunction name="testAddPrivilege">
	<!--- our  'guard': ensure we are starting fresh --->
	<cfset assertFalse(user.hasPrivilegeTo("DeleteOtherUsers"))>	
	<cfset user.addPrivilege("DeleteOtherUsers")>
	<!--- verify the internal state of the user --->
	<cfset assertTrue(user.hasPrivilegeTo("DeleteOtherUsers"))>
</cffunction>
{code}

h3. Different instances, same data

The different-instances, same-data pattern is common in DAO testing. Essentially, we're asserting that two objects are different instances but contain the same data. In MXUnit, you can test for "different instance" by using the assertNotSame() assertion. 

{code:title=Different instances, same data}
<cffunction name="testSaveWithRead">
	<cfset dao.save(user)>		
	<cfset user2 = dao.read(user.getUserID())>
	<!--- assert they're not the same instance --->
	<cfset assertNotSame(user,user2)>
	<!--- one final check... assert the UUIDs aren't the same --->
	<cfset assertTrue( user.getUUID() neq user2.getUUID(), "user UUID and user2 UUID should not be the same but are")>
			
	<cfset assertEquals(user.getUserID(),user2.getUserID())>
	<cfset assertEquals(user.getCreateTS(),user2.getCreateTS())>
			
	<!--- is there an easier way? could we use any of the functions in the baseobject for comparisons so we don't have to test all these fields? --->
	<cfset assertEquals(user.XXXXX,user2.XXXXX)>
</cffunction>
{code}


h3. "Delta" Assertion

Sometimes you can't assert an absolute equality (like "My list is now 5 elements long"). Sometimes, you have to assert equality relative to some previous state. In the example below, imagine you're hooking into some scheduling mechanism (this would be for an integration test, for example). We don't know exactly what getTotalScheduled() will return at any given test run. Maybe it's 1. Maybe it's 30. Who knows. What we want to test is that when we schedule one additional thing, our scheduler's "totalScheduled" count increases by 1. Again, the result could be 2 or it could be 31. We don't know. This type of assertion, where we compare the state right before and right after performing some task, is called "delta", or difference, assertion. [view plain|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][print|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][?|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#]
# <cffunction&nbsp;name="testScheduleSomething">
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;obj&nbsp;=&nbsp;createObject("component","SchedulableObject")>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;currentlyScheduled&nbsp;=&nbsp;scheduler.getTotalScheduled()>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;scheduler.scheduleSomething(obj)>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertEquals(currentlyScheduled+1,&nbsp;scheduler.getTotalScheduled())>
# </cffunction>&nbsp;&nbsp;<cffunction name="testScheduleSomething">
<cfset obj = createObject("component","SchedulableObject")>
<cfset currentlyScheduled = scheduler.getTotalScheduled()>
<cfset scheduler.scheduleSomething(obj)>
<cfset assertEquals(currentlyScheduled+1, scheduler.getTotalScheduled())>
</cffunction>
And here's what it might look like for our User object:[view plain|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][print|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][?|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#]
# <cffunction&nbsp;name="testPrivilegeCount">
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;currentPrivilegeCount&nbsp;=&nbsp;user.getPrivilegeCount()>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;user.addPrivilege("ChangeOwnPassword")>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertEquals(currentPrivilegeCount+1,&nbsp;user.getPrivilegeCount())>
# </cffunction>&nbsp;&nbsp;<cffunction name="testPrivilegeCount">
<cfset currentPrivilegeCount = user.getPrivilegeCount()>
<cfset user.addPrivilege("ChangeOwnPassword")>
<cfset assertEquals(currentPrivilegeCount+1, user.getPrivilegeCount())>
</cffunction>

h3. Interaction Assertion

With interaction assertions, we're testing to make sure an object and a collaborator worked together as we expected. A great example of an interaction is a "bean" style object, like perhaps a "User", and the DAO for that object, like a UserDAO: [view plain|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][print|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#][?|http://mxunit.org/doc/index.cfm?doc=assertionpatterns#]
# <cffunction&nbsp;name="testSave"
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;origUUID&nbsp;=&nbsp;user.getUUID()>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;dao.save(user)>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;newUserID&nbsp;=&nbsp;user.getUserID()>
# &nbsp;&nbsp;&nbsp;&nbsp;<\!-\--&nbsp;&nbsp;Assert&nbsp;that&nbsp;our&nbsp;DAO&nbsp;updated&nbsp;our&nbsp;user&nbsp;object&nbsp;with&nbsp;its&nbsp;ID&nbsp;after&nbsp;saving&nbsp;&nbsp;-\-->
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertTrue(newUserID&nbsp;GT&nbsp;0)>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;user.setEmail("somethingnew@somethingnew.com")>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;dao.save(user)>
# &nbsp;&nbsp;&nbsp;&nbsp;<\!-\--&nbsp;We&nbsp;don't&nbsp;care&nbsp;about&nbsp;testing&nbsp;the&nbsp;update&nbsp;here...&nbsp;just&nbsp;that&nbsp;the&nbsp;insert&nbsp;didn't&nbsp;change&nbsp;the&nbsp;user&nbsp;object's&nbsp;key&nbsp;-\-->
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertEquals(newUserID,user.getUserID())>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;assertEquals(origUUID,user.getUUID())>
# </cffunction>&nbsp;&nbsp;<cffunction name="testSave"
<cfset origUUID = user.getUUID()>
<cfset dao.save(user)>
<cfset newUserID = user.getUserID()>
<\!\--\-  Assert that our DAO updated our user object with its ID after saving  --\->
<cfset assertTrue(newUserID GT 0)>
<cfset user.setEmail("somethingnew@somethingnew.com")>
<cfset dao.save(user)>
<\!\--\- We don't care about testing the update here... just that the insert didn't change the user object's key --\->
<cfset assertEquals(newUserID,user.getUserID())>
<cfset assertEquals(origUUID,user.getUUID())>
</cffunction>
\\]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786488</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819246</id>
    <property name="body"><![CDATA[h2. Built-In Assertions

This document outlines the core of unit testing, i.e. Assertions. Assertions are simple: You assert something, and if that assertion does not result in your expectation, the test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions. A single failed assertion means that any subsequent assertions in a test will not execute and thus you won't know if those assertions indicate further problems in your code.

Need an assertion you don't see here? [Roll your own ...|http://mxunit.org/doc/index.cfm?doc=customassertions]

Without further delay, our players, The Assertions:
----
{color:#0000ff}{*}assertTrue{*}{color}{color:#0000ff}(boolean condition \[,String message\]){color}

assertTrue is one of the two "bread and butter" assertions in any testing framework. The philosophy is simple: you assert something to be true; if it's not, the test fails[http://mxunit.org/doc/index.cfm?doc=builtinassertions#]\[
| http://mxunit.org/doc/index.cfm?doc=builtinassertions#\]
# <cffunction&nbsp;name="demoAssertTrue">
# &nbsp;&nbsp;<cfset&nbsp;obj&nbsp;=&nbsp;createObject("component","myObject")>
# &nbsp;&nbsp;<cfset&nbsp;isL33t&nbsp;=&nbsp;obj.AreYouThirteenAndDoYouUsePHP(&nbsp;you&nbsp;)>
# &nbsp;&nbsp;<cfset&nbsp;assertTrue(isL33t,"This&nbsp;better&nbsp;damn&nbsp;well&nbsp;fail")>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertTrue">\\
 <cfset obj = createObject("component","myObject")>\\
 <cfset isL33t = obj.AreYouThirteenAndDoYouUsePHP( you )>\\
 <cfset assertTrue(isL33t,"This better damn well fail")>\\
 </cffunction>\\
 That test above... it'll fail
----{color:#0000ff}{*}assertFalse{*}{color}{color:#0000ff}(boolean condition \[,String message\]){color}
# <cffunction&nbsp;name="demoAssertFalse">
# &nbsp;&nbsp;<cfset&nbsp;obj&nbsp;=&nbsp;createObject("component","myObject")>
# &nbsp;&nbsp;<cfset&nbsp;isBadass&nbsp;=&nbsp;obj.EvaluateBadassnessFromType(&nbsp;"php"&nbsp;)>
# &nbsp;&nbsp;<cfset&nbsp;assertFalse(isBadass,"&nbsp;How&nbsp;about&nbsp;trying&nbsp;CF?&nbsp;")>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertFalse">\\
 <cfset obj = createObject("component","myObject")>\\
 <cfset isBadass = obj.EvaluateBadassnessFromType( "php" )>\\
 <cfset assertFalse(isBadass," How about trying CF? ")>\\
 </cffunction> |

----
{color:#0000ff}{*}assertEquals{*}{color}{color:#0000ff}(any expected, any actual \[, String message\]){color}

assertEquals is the other core assertion. Here, you're asserting that some result equals some expected result. This could be two numbers, two strings, two structs, whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals to compare any type of data.
# <cffunction&nbsp;name="demoAssertEquals">
# &nbsp;&nbsp;<cfset&nbsp;obj&nbsp;=&nbsp;createObject("component","myObject")>
# &nbsp;&nbsp;<cfset&nbsp;result&nbsp;=&nbsp;obj.computeMySalary(&nbsp;me&nbsp;)>
# &nbsp;&nbsp;<cfset&nbsp;assertEquals(500000,result,"You're&nbsp;not&nbsp;paid&nbsp;enough,&nbsp;my&nbsp;friend")>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertEquals">
<cfset obj = createObject("component","myObject")>
<cfset result = obj.computeMySalary( me )>
<cfset assertEquals(500000,result,"You're not paid enough, my friend")>
</cffunction>
That test will fail, too. It's a travesty.
----{color:#0000ff}{*}fail{*}{color}{color:#0000ff}(String message){color}

fail() is used to actively fail a test. It's useful when you're stubbing a test and you want to ensure it fails, like so:
# <cffunction&nbsp;name="demoFail">
# &nbsp;&nbsp;<cfset&nbsp;fail("test&nbsp;not&nbsp;yet&nbsp;implemented")>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoFail">
<cfset fail("test not yet implemented")>
</cffunction>
It's also useful when you're testing an "error path", like so:
# <cffunction&nbsp;name="demoFail2">
# &nbsp;&nbsp;<cfset&nbsp;obj&nbsp;=&nbsp;createObject("component","myObject")>
# &nbsp;&nbsp;<cftry>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;somethingDumb&nbsp;=&nbsp;obj.PayMarc5MillionToDrinkDalwhinnie15AllDayLong()>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfset&nbsp;fail("Should&nbsp;not&nbsp;get&nbsp;here.&nbsp;Function&nbsp;under&nbsp;test&nbsp;should've&nbsp;thrown&nbsp;an&nbsp;error")>
# &nbsp;&nbsp;<cfcatch&nbsp;type="mxunit.exception.AssertionFailedError">
# &nbsp;&nbsp;&nbsp;&nbsp;<cfrethrow>
# &nbsp;&nbsp;</cfcatch>
# &nbsp;&nbsp;<cfcatch&nbsp;type="any"><\!-\--&nbsp;expect&nbsp;to&nbsp;get&nbsp;here&nbsp;-\--></cfcatch>
# &nbsp;&nbsp;</cftry>
# 
# 
# </cffunction>&nbsp;&nbsp;<cffunction name="demoFail2">
<cfset obj = createObject("component","myObject")>
<cftry>
<cfset somethingDumb = obj.PayMarc5MillionToDrinkDalwhinnie15AllDayLong()>
<cfset fail("Should not get here. Function under test should've thrown an error")>
<cfcatch type="mxunit.exception.AssertionFailedError">
<cfrethrow>
</cfcatch>
<cfcatch type="any"><\!--\- expect to get here \---></cfcatch>
</cftry>


</cffunction>

----
{color:#0000ff}{*}assertSame{*}{color}{color:#0000ff}(any obj1, any obj2  \[,String message\]){color}

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail for arrays.
# <cffunction&nbsp;name="demoAssertSame">
# &nbsp;&nbsp;<cfset&nbsp;assertSame(myObject1,myOtherObject,&nbsp;"These&nbsp;should&nbsp;be&nbsp;the&nbsp;same&nbsp;thang")>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertSame">
<cfset assertSame(myObject1,myOtherObject, "These should be the same thang")>
</cffunction>

----
{color:#0000ff}{*}assertNotSame{*}{color}{color:#0000ff}(any obj1, any obj2  \[,String message\]){color}

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass for arrays.
# <cffunction&nbsp;name="demoAssertNotSame">
# &nbsp;&nbsp;<cfset&nbsp;assertNotSame(myObject1,myOtherObject,&nbsp;"These&nbsp;should&nbsp;not&nbsp;be&nbsp;the&nbsp;same&nbsp;thang")>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertNotSame">
<cfset assertNotSame(myObject1,myOtherObject, "These should not be the same thang")>
</cffunction>

----
{color:#0000ff}{*}failNotEquals{*}{color}{color:#0000ff}(any obj1, any obj2  \[,String message\]){color}

Used to fail when two objects do not have the same values.
# <cffunction&nbsp;name="demoFailNoteEquals">
# &nbsp;&nbsp;<cfset&nbsp;failNoteEquals(myObject1,myOtherObject,&nbsp;"These&nbsp;should&nbsp;not&nbsp;have&nbsp;the&nbsp;same&nbsp;value")>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoFailNoteEquals">
<cfset failNoteEquals(myObject1,myOtherObject, "These should not have the same value")>
</cffunction>

----
h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion. Note, that these are quite simple, can be easily implemented using the base assertions above, but are provided for convenience.
*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml located in /mxunit/framework/ directory. Simply remove or comment out these line:
# <config-element&nbsp;type="assertionExtension"&nbsp;path="MXUnitAssertionExtensions"&nbsp;autoload="true"&nbsp;override="false"&nbsp;/>
# <config-element&nbsp;type="assertionExtension"&nbsp;path="HamcrestAssert"&nbsp;autoload="true"&nbsp;override="false"&nbsp;/>
# <config-element&nbsp;type="assertionExtension"&nbsp;path="XPathAssert"&nbsp;autoload="true"&nbsp;override="false"&nbsp;/>&nbsp;&nbsp;  <config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true" override="false" />
<config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false" />
<config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false" />

----
{color:#0000ff}{*}assertXPath{*}{color}{color:#0000ff}(String xpath, any data, \[String text\], \[String message\]){color}

Searches data using xpath. If text is specified, it tries to match the exact text to  the xpath expression. Otherwise ,it returns true if any nodes are found that match the xpath expression. Note that, unlike most assertions, assetXPath returns an xml dom represenation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this assertion returns true if any elements of the xpath expression are found. Not required. Defaults to ""
\[string message\]: The message to display when this assertion fails Not required. Defaults to The XPath expression, #arguments.xpath#, did not match the data.

# <cffunction&nbsp;name="testFindGoogleInTitle">
# &nbsp;&nbsp;&nbsp;&nbsp;<cfscript>
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes&nbsp;=&nbsp;assertXpath('/html/head/title',&nbsp;"http://google.com",&nbsp;"Google");
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug(nodes);
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes&nbsp;=&nbsp;assertXPath("/html/head/title",&nbsp;"file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes&nbsp;=&nbsp;assertXPath("/root/foo/bar\[@id='123abc'\]",&nbsp;someXmlOrHtml);
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cfscript>
# &nbsp;&nbsp;</cffunction>&nbsp;&nbsp;<cffunction name="testFindGoogleInTitle">
<cfscript>
nodes = assertXpath('/html/head/title', "http://google.com", "Google");
debug(nodes);
nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
</cfscript>
</cffunction>
The above parses the results from urls and strings and searches the parsed results for the XPath expression.
Try it. Really, it works\!
----{color:#0000ff}{*}assertIsArray{*}{color}{color:#0000ff}(any obj1){color}

Determines if the obj1 is a valid array.
# <cffunction&nbsp;name="demoAssertIsArray">
# &nbsp;&nbsp;<cfset&nbsp;assertIsArray(myObject1)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsArray">
<cfset assertIsArray(myObject1)>
</cffunction>

----
{color:#0000ff}{*}assertIsDefined{*}{color}{color:#0000ff}(any obj1){color}

Determines if the obj1 has been defined in the available scope.
# <cffunction&nbsp;name="demoAssertIsDefined">
# &nbsp;&nbsp;<cfset&nbsp;assertIsDefined(myObject1)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsDefined">
<cfset assertIsDefined(myObject1)>
</cffunction>

----
{color:#0000ff}{*}assertIsEmpty{*}{color}{color:#0000ff}(any obj1){color}

Determines if the obj1 is a 0 length string or NULL equivalent.
# <cffunction&nbsp;name="demoAssertIsEmpty">
# &nbsp;&nbsp;<cfset&nbsp;assertIsEmpty(myObject1)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsEmpty">
<cfset assertIsEmpty(myObject1)>
</cffunction>

----
{color:#0000ff}{*}assertIsEmptyArray{*}{color}{color:#0000ff}(any obj1,\[String message\]){color}

Determines if the obj1 is an array with no elements.
# <cffunction&nbsp;name="demoAssertIsEmptyArray">
# &nbsp;&nbsp;<cfset&nbsp;assertIsEmptyArray(myObject1)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsEmptyArray">
<cfset assertIsEmptyArray(myObject1)>
</cffunction>

----
{color:#0000ff}{*}assertIsEmptyQuery{*}{color}{color:#0000ff}(any obj1,\[String message\]){color}

Determines if the obj1 is a query with no rows.
# <cffunction&nbsp;name="demoAssertIsEmptyQuery">
# &nbsp;&nbsp;<cfset&nbsp;assertIsEmptyQuery(myObject1)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsEmptyQuery">
<cfset assertIsEmptyQuery(myObject1)>
</cffunction>

----
{color:#0000ff}{*}assertIsEmptyStruct{*}{color}{color:#0000ff}(any obj1,\[String message\]){color}

Determines if the obj1 is a struct with no keys or values.
# <cffunction&nbsp;name="demoAssertIsEmptyStruct">
# &nbsp;&nbsp;<cfset&nbsp;assertIsEmptyStruct(myObject1)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsEmptyStruct">
<cfset assertIsEmptyStruct(myObject1)>
</cffunction>

----
{color:#0000ff}{*}assertIsQuery{*}{color}{color:#0000ff}(any q){color}

Determines if q is a valid ColdFusion query.
# <cffunction&nbsp;name="demoAssertIsQuery">
# &nbsp;&nbsp;<cfset&nbsp;assertIsQuery(q)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsQuery">
<cfset assertIsQuery(q)>
</cffunction>

----
{color:#0000ff}{*}assertIsStruct{*}{color}{color:#0000ff}(any obj){color}

Determines if obj is a valid ColdFusion structure.
# <cffunction&nbsp;name="demoAssertIsStruct">
# &nbsp;&nbsp;<cfset&nbsp;assertIsStruct(obj)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsStruct">
<cfset assertIsStruct(obj)>
</cffunction>

----
{color:#0000ff}{*}assertIsTypeOf{*}{color}{color:#0000ff}(component obj, String type){color}

Determines if obj is of type. type needs to be fully qualified.
# <cffunction&nbsp;name="demoAssertIsTypeOf">
# &nbsp;&nbsp;<cfset&nbsp;assertIsTypeOf(obj,"my.type.Of.Object")>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsTypeOf">
<cfset assertIsTypeOf(obj,"my.type.Of.Object")>
</cffunction>

----
{color:#0000ff}{*}assertIsXMLDoc{*}{color}{color:#0000ff}(any xml \[, String message\]){color}

Determines if xml is a valid XML DOM object.
# <cffunction&nbsp;name="demoAssertIsXMLDoc">
# &nbsp;&nbsp;<cfset&nbsp;assertIsXMLDoc(xml)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsXMLDoc">
<cfset assertIsXMLDoc(xml)>
</cffunction>

----
Need more? [Build your own ...|http://mxunit.org/doc/index.cfm?doc=customassertions]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786480</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819248</id>
    <property name="body"><![CDATA[h2. Built-In Assertions

This document outlines the core of unit testing, i.e. Assertions. Assertions are simple: You assert something, and if that assertion does not result in your expectation, the test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions. A single failed assertion means that any subsequent assertions in a test will not execute and thus you won't know if those assertions indicate further problems in your code.

Need an assertion you don't see here? [Roll your own ...|http://mxunit.org/doc/index.cfm?doc=customassertions]

Without further delay, our players, The Assertions:
----
{color:#0000ff}{*}assertTrue{*}{color}{color:#0000ff}(boolean condition \[,String message\]){color}

assertTrue is one of the two "bread and butter" assertions in any testing framework. The philosophy is simple: you assert something to be true; if it's not, the test fails

{code:title=assertTrue}
<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertTrue( StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}






assertTrue has a correlary, assertFalse:


{color:#0000ff}{*}assertFalse{*}{color}{color:#0000ff}(boolean condition \[, String message\]){color}

{code:title=assertFalse}
<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertFalse( StructIsEmpty(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>

{code}


----
{color:#0000ff}{*}assertEquals{*}{color}{color:#0000ff}(any expected, any actual \[, String message\]){color}

assertEquals is the other core assertion. Here, you're asserting that some result equals some expected result. This could be two numbers, two strings, two structs, whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals to compare any type of data.

{code:title=assertEquals}
<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertEquals(1, StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertEquals(0, StructCount(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}



----
{color:#0000ff}{*}fail{*}{color}{color:#0000ff}(String message){color}

fail() is used to actively fail a test. It's useful when you're stubbing a test and you want to ensure it fails, like so:

{code:title=fail}
<cffunction name="addPrivilegeShouldHaveNoEffectIfPrivilegeExists">
 	<cfset fail("test not yet implemented")>
</cffunction>
{code}



It's also useful when you're testing an "error path", like so:

{code:title=fail() to test Error Paths}
<cffunction name="addPrivilegesWithPunctuationShouldThrowError">
	<cfset var obj = createObject("component","myObject")>
	<cftry>
		<cfset obj.addPrivilege("Edit.User")>
		<cfset fail("Should not get here. Function under test should've thrown an error")>
	<cfcatch type="mxunit.exception.AssertionFailedError">
		<cfrethrow>
	</cfcatch>
	<cfcatch type="any"><!--- expect to get here ---></cfcatch>
	</cftry>
</cffunction>
{code}

----
{color:#0000ff}{*}failNotEquals{*}{color}{color:#0000ff}(any value, any value2  \[,String message\]){color}

Used to fail when two values do not equal. This doesn't perform any assertion... it's simply a convenience method for providing a specific type of failure message

{code:title=failNotEquals()}
<cffunction name="demoFailNotEquals">
 	<cfset failNotEquals(myObject1,myOtherObject, "These should not have the same value")>
</cffunction>
{code}


----
{color:#0000ff}{*}assertSame{*}{color}{color:#0000ff}(any obj1, any obj2  \[,String message\]){color}

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail for arrays.
{code:title=assertSame()}
<cffunction name="initShouldReturnSelf">
	<cfset var obj = createObject("component","myObject")>
	<cfset assertSame(obj,obj.init(), "These should be the same thang since init should return 'this'")>
</cffunction>
{code}

----
{color:#0000ff}{*}assertNotSame{*}{color}{color:#0000ff}(any obj1, any obj2  \[,String message\]){color}

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass for arrays.

{code:title=assertNotSame()}
<cffunction name="newInstanceShouldNotReturnSelf">
	<cfset var obj = createObject("component","myObjectFactory")>
	<cfset assertNotSame(obj,obj.newInstance(), "These should not be the same thang since newInstance should return a new instance from the factory")>
</cffunction>
{code}



----
h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion.Note, that these are quite simple, can be easily implemented using the base assertions above, but are provided for convenience.

*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml located in /mxunit/framework/ directory. Simply remove or comment out these line:

{code:title=assertionExtension config-extension}
	<config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true" override="false" />
	<config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false" />
	<config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false" />
{code}

----
{color:#0000ff}{*}assertXPath{*}{color}{color:#0000ff}(String xpath, any data, \[String text\], \[String message\]){color}

Searches data using xpath. If text is specified, it tries to match the exact text to  the xpath expression. Otherwise ,it returns true if any nodes are found that match the xpath expression. Note that, unlike most assertions, assetXPath returns an xml dom representation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this assertion returns true if any elements of the xpath expression are found. Not required. Defaults to ""
\[string message\]: The message to display when this assertion fails Not required. Defaults to The XPath expression, #arguments.xpath#, did not match the data.

# <cffunction&nbsp;name="testFindGoogleInTitle">
# &nbsp;&nbsp;&nbsp;&nbsp;<cfscript>
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes&nbsp;=&nbsp;assertXpath('/html/head/title',&nbsp;"http://google.com",&nbsp;"Google");
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug(nodes);
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes&nbsp;=&nbsp;assertXPath("/html/head/title",&nbsp;"file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes&nbsp;=&nbsp;assertXPath("/root/foo/bar\[@id='123abc'\]",&nbsp;someXmlOrHtml);
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cfscript>
# &nbsp;&nbsp;</cffunction>&nbsp;&nbsp;<cffunction name="testFindGoogleInTitle">
<cfscript>
nodes = assertXpath('/html/head/title', "http://google.com", "Google");
debug(nodes);
nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
</cfscript>
</cffunction>
The above parses the results from urls and strings and searches the parsed results for the XPath expression.
Try it. Really, it works\!
\---\-{color:#0000ff}{*}assertIsArray{*}{color}{color:#0000ff}(any obj1){color}

Determines if the obj1 is a valid array.
# <cffunction&nbsp;name="demoAssertIsArray">
# &nbsp;&nbsp;<cfset&nbsp;assertIsArray(myObject1)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsArray">
<cfset assertIsArray(myObject1)>
</cffunction>

----
{color:#0000ff}{*}assertIsDefined{*}{color}{color:#0000ff}(any obj1){color}

Determines if the obj1 has been defined in the available scope.
# <cffunction&nbsp;name="demoAssertIsDefined">
# &nbsp;&nbsp;<cfset&nbsp;assertIsDefined(myObject1)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsDefined">
<cfset assertIsDefined(myObject1)>
</cffunction>

----
{color:#0000ff}{*}assertIsEmpty{*}{color}{color:#0000ff}(any obj1){color}

Determines if the obj1 is a 0 length string or NULL equivalent.
# <cffunction&nbsp;name="demoAssertIsEmpty">
# &nbsp;&nbsp;<cfset&nbsp;assertIsEmpty(myObject1)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsEmpty">
<cfset assertIsEmpty(myObject1)>
</cffunction>

----
{color:#0000ff}{*}assertIsEmptyArray{*}{color}{color:#0000ff}(any obj1,\[String message\]){color}

Determines if the obj1 is an array with no elements.
# <cffunction&nbsp;name="demoAssertIsEmptyArray">
# &nbsp;&nbsp;<cfset&nbsp;assertIsEmptyArray(myObject1)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsEmptyArray">
<cfset assertIsEmptyArray(myObject1)>
</cffunction>

----
{color:#0000ff}{*}assertIsEmptyQuery{*}{color}{color:#0000ff}(any obj1,\[String message\]){color}

Determines if the obj1 is a query with no rows.
# <cffunction&nbsp;name="demoAssertIsEmptyQuery">
# &nbsp;&nbsp;<cfset&nbsp;assertIsEmptyQuery(myObject1)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsEmptyQuery">
<cfset assertIsEmptyQuery(myObject1)>
</cffunction>

----
{color:#0000ff}{*}assertIsEmptyStruct{*}{color}{color:#0000ff}(any obj1,\[String message\]){color}

Determines if the obj1 is a struct with no keys or values.
# <cffunction&nbsp;name="demoAssertIsEmptyStruct">
# &nbsp;&nbsp;<cfset&nbsp;assertIsEmptyStruct(myObject1)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsEmptyStruct">
<cfset assertIsEmptyStruct(myObject1)>
</cffunction>

----
{color:#0000ff}{*}assertIsQuery{*}{color}{color:#0000ff}(any q){color}

Determines if q is a valid ColdFusion query.
# <cffunction&nbsp;name="demoAssertIsQuery">
# &nbsp;&nbsp;<cfset&nbsp;assertIsQuery(q)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsQuery">
<cfset assertIsQuery(q)>
</cffunction>

----
{color:#0000ff}{*}assertIsStruct{*}{color}{color:#0000ff}(any obj){color}

Determines if obj is a valid ColdFusion structure.
# <cffunction&nbsp;name="demoAssertIsStruct">
# &nbsp;&nbsp;<cfset&nbsp;assertIsStruct(obj)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsStruct">
<cfset assertIsStruct(obj)>
</cffunction>

----
{color:#0000ff}{*}assertIsTypeOf{*}{color}{color:#0000ff}(component obj, String type){color}

Determines if obj is of type. type needs to be fully qualified.
# <cffunction&nbsp;name="demoAssertIsTypeOf">
# &nbsp;&nbsp;<cfset&nbsp;assertIsTypeOf(obj,"my.type.Of.Object")>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsTypeOf">
<cfset assertIsTypeOf(obj,"my.type.Of.Object")>
</cffunction>

----
{color:#0000ff}{*}assertIsXMLDoc{*}{color}{color:#0000ff}(any xml \[, String message\]){color}

Determines if xml is a valid XML DOM object.
# <cffunction&nbsp;name="demoAssertIsXMLDoc">
# &nbsp;&nbsp;<cfset&nbsp;assertIsXMLDoc(xml)>
# </cffunction>&nbsp;&nbsp;<cffunction name="demoAssertIsXMLDoc">
<cfset assertIsXMLDoc(xml)>
</cffunction>

----
Need more? [Build your own ...|http://mxunit.org/doc/index.cfm?doc=customassertions]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786482</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819276</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786515</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819274</id>
    <property name="body"><![CDATA[These shortcuts will work when the MXUnit View is _in focus_. You put a view in focus by clicking somewhere in the view.

*Note:* If an action can be executed with multiple keyboard shortcuts, they're separated by a semicolon
|| Icon || Action || Shortcut ||
| !help.png! | Help | F1 |
| !findtests.png! | Find Tests | CTRL-F |
| !refresh.png! | Reload Tests | F5 |
| !runtests.png! | Run selected Tests | Enter; r |
| !runfailures.png! | Run failures | CTRL-Enter; CTRL-R |
| !expandcollapse.png! | Expand/Collapse tests | = |
| | Select All Tests in Tree | CTRL-A |
| *Test(s) selected in test tree* |
| !internalbrowser.png! | View test output in browser | b; F8 |
| *File selected in the "Trace" table* |
| !fail_circle.png! | Open file at error line | Enter; double-click |]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786513</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819272</id>
    <property name="body"><![CDATA[These shortcuts will work when the MXUnit View is _in focus_. You put a view in focus by clicking somewhere in the view.

*Note:* If an action can be executed with multiple keyboard shortcuts, they're separated by a semicolon
|| Icon || Action || Shortcut ||
| !help.png! | Help | F1 |
| !findtests.png! | Find Tests | CTRL-F |
| !refresh.png! | Reload Tests | F5 |
| | Run selected Tests | Enter; r |
| | Run failures | CTRL-Enter; CTRL-R |
| | Expand/Collapse tests | = |
| | Select All Tests in Tree | CTRL-A |
| *Test(s) selected in test tree* |
| | View test output in browser | b; F8 |
| *File selected in the "Trace" table* |
| | Open file at error line | Enter; double-click |]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786511</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819270</id>
    <property name="body"><![CDATA[These shortcuts will work when the MXUnit View is _in focus_. You put a view in focus by clicking somewhere in the view.

*Note:* If an action can be executed with multiple keyboard shortcuts, they're separated by a semicolon
|| Icon || Action || Shortcut ||
| !help.png! | Help | F1 |
| | Find Tests | CTRL-F |
| | Reload Tests | F5 |
| | Run selected Tests | Enter; r |
| | Run failures | CTRL-Enter; CTRL-R |
| | Expand/Collapse tests | = |
| | Select All Tests in Tree | CTRL-A |
| *Test(s) selected in test tree* |
| | View test output in browser | b; F8 |
| *File selected in the "Trace" table* |
| | Open file at error line | Enter; double-click |]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786509</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819269</id>
    <property name="body"><![CDATA[These shortcuts will work when the MXUnit View is _in focus_. You put a view in focus by clicking somewhere in the view.

*Note:* If an action can be executed with multiple keyboard shortcuts, they're separated by a semicolo
|| Icon || Action || Shortcut ||
| | Help | F1 |
| | Find Tests | CTRL-F |
| | Reload Tests | F5 |
| | Run selected Tests | Enter; r |
| | Run failures | CTRL-Enter; CTRL-R |
| | Expand/Collapse tests | = |
| | Select All Tests in Tree | CTRL-A |
| *Test(s) selected in test tree* |
| | View test output in browser | b; F8 |
| *File selected in the "Trace" table* |
| | Open file at error line | Enter; double-click |]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786508</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819267</id>
    <property name="body"><![CDATA[These shortcuts will work when the MXUnit View is _in focus_. You put a view in focus by clicking somewhere in the view.

*Note:* If an action can be executed with multiple keyboard shortcuts, they're separated by a semicolon (;)]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786506</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819264</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786502</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819292</id>
    <property name="body"><![CDATA[The plugin comes with built-in documentation for configuring and testing the plugin.

*In Eclipse:*
# Open the MXUnit View (Window \-\- Show View \-\- MXUnit)
# On the right side of the view is a "Help" icon. Click it: !help.png!
This will pop up the Eclipse Help for the MXUnit plugin. Start at the start\! ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786533</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819291</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786532</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819289</id>
    <property name="body"><![CDATA[h2.

[Install / Update|Eclipse Plugin -- Install]

[Keyboard Shortcuts|default:Eclipse Plugin Keyboard Shortcuts]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786530</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310431</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=INFO+CPackageManager::GetFile:+index.htm&hl=en&start=10&sa=N]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-06-10 21:55:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-06-10 21:55:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819287</id>
    <property name="body"><![CDATA[h2. *Installing the MXUnit Eclipse Plugin*

Doesn't get much easier\! Install, Configure, Run ...

*Installation*

1. Make sure the [MXUnit Framework|http://mxunit.org/doc/index.cfm?doc=installframework] is installed.

2. Get [Eclipse|http://www.eclipse.org/] if you haven't already

3. In Eclipse, go to Help > Software Updates > Find and Install !plugin-install-1.png!

4. Select the "Search for new features" radio button. Click Next !plugin-install-2.png!

5. Click the "New Remote Site" button.

 !plugin-install-3.png!

6. Add the url [http://mxunit.org/update] to the URL field. Give it any Name; e.g, MXUnit Plugin. Click OK.


 !plugin-install-4.png!

7. Select All features to be installed. Click Next.


 !plugin-install-5.png!

8. Accept License Agreement. Click Next.


 !plugin-install-6.png!

9. Click Finish on the Install Dialogue.


 !plugin-install-7.png!

10. The plugin will download ...


 !plugin-install-8.png!

11. Click Install All.


 !plugin-install-9.png!

12. Allow the plugin to install ...


 !plugin-install-10.png!

13. Click Yes when prompted to restart Eclipse ...


 !plugin-install-11.png!

\[Next - [Configure and Test the Plugin|Configure and Test the Plugin]\]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786527</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310430</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&client=firefox-a&hs=KAp&rls=org.mozilla%3Aen-US%3Aofficial&q=selenium+mxunit+javaloader&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341213</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-06-10 20:40:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-06-10 20:40:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819285</id>
    <property name="body"><![CDATA[h2. *Installing the MXUnit Eclipse Plugin*

Doesn't get much easier\! Install, Configure, Run ...

*Installation*

1. Make sure the [MXUnit Framework|http://mxunit.org/doc/index.cfm?doc=installframework] is installed.

2. Get [Eclipse|http://www.eclipse.org/] if you haven't already

3. In Eclipse, go to Help > Software Updates > Find and Install !plugin-install-1.png!

4. Select the "Search for new features" radio button. Click Next !plugin-install-2.png!

5. Click the "New Remote Site" button. !plugin-install-3.png!

6. Add the url [http://mxunit.org/update] to the URL field. Give it any Name; e.g, MXUnit Plugin. Click OK.

7. Select All features to be installed. Click Next.

8. Accept License Agreement. Click Next.

9. Click Finish on the Install Dialogue.

10. The plugin will download ...

11. Click Install All.

12. Allow the plugin to install ...

13. Click Yes when prompted to restart Eclipse ...

\[Next - [Configure and Test the Plugin|Configure and Test the Plugin]\]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786525</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819283</id>
    <property name="body"><![CDATA[h2. *Installing the MXUnit Eclipse Plugin*

Doesn't get much easier\! Install, Configure, Run ...

*Installation*
# Make sure the [MXUnit Framework|http://mxunit.org/doc/index.cfm?doc=installframework] is installed.
# Get [Eclipse|http://www.eclipse.org/] if you haven't already
# In Eclipse, go to Help > Software Updates > Find and Install !plugin-install-1.png!
# Select the "Search for new features" radio button. Click Next !plugin-install-2.png!
# Click the "New Remote Site" button. !plugin-install-3.png!
# Add the url [http://mxunit.org/update] to the URL field. Give it any Name; e.g, MXUnit Plugin. Click OK.
# Select All features to be installed. Click Next.
# Accept License Agreement. Click Next.
# Click Finish on the Install Dialogue.
# The plugin will download ...
# Click Install All.
# Allow the plugin to install ...
# Click Yes when prompted to restart Eclipse ...

\[Next - [Configure and Test the Plugin|Configure and Test the Plugin]\]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786523</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819281</id>
    <property name="body"><![CDATA[h2. *Installing the MXUnit Eclipse Plugin*

Doesn't get much easier\! Install, Configure, Run ...

*Installation*
# Make sure the [MXUnit Framework|http://mxunit.org/doc/index.cfm?doc=installframework] is installed.
# Get [Eclipse|http://www.eclipse.org/] if you haven't already
# In Eclipse, go to Help > Software Updates > Find and Install
# Select the "Search for new features" radio button. Click Next
# Click the "New Remote Site" button.
# Add the url http://mxunit.org/update to the URL field. Give it any Name; e.g, MXUnit Plugin. Click OK.
# Select All features to be installed. Click Next.
# Accept License Agreement. Click Next.
# Click Finish on the Install Dialogue.
# The plugin will download ...
# Click Install All.
# Allow the plugin to install ...
# Click Yes when prompted to restart Eclipse ...

\[Next - [Configure and Test the Plugin|Configure and Test the Plugin]\]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786521</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819279</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786519</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310383</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.co.uk/search?sourceid=chrome&ie=UTF-8&q=mxunit+tutorial]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-06-09 06:02:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-06-09 06:02:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310379</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpreviousversions.action?pageId=786529]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292771</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-06-08 23:07:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-06-08 23:07:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310250</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?sourceid=chrome&ie=UTF-8&q=mxunit+typeof]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786482</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-06-02 21:51:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-06-02 21:51:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310247</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunit+ant&hl=en&safe=off&rlz=1B3GGGL_enUS357US357&start=10&sa=N]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341340</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-06-02 21:22:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-06-02 21:22:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310141</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=tutorial+mxunit&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-05-28 13:01:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-05-28 13:01:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310148</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&q=mxunit+tutorial&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-05-28 16:28:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-05-28 16:28:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310096</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunittask&ie=utf-8&oe=utf-8&aq=t&client=firefox-a&rlz=1R1GGGL_en___US357]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341281</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-05-26 16:30:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-05-26 16:30:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310106</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=ant+junitreport+classpath&hl=en&client=firefox-a&hs=9fN&rls=org.mozilla:en-US:official&channel=s&start=20&sa=N]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341281</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-05-26 20:19:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-05-26 20:19:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310010</id>
    <property name="viewCount">3</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunit+tutorial&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-05-23 21:39:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-06-23 18:11:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5310013</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&client=firefox-a&hs=pUJ&rls=org.mozilla%3Aen-US%3Aofficial&q=mxunit+documentation&aq=1&aqi=g10&aql=f&oq=mxunit+&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948026</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-05-23 21:46:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-05-23 21:46:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5309873</id>
    <property name="viewCount">2</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunit+integration+test&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786492</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-05-13 19:10:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-05-14 16:44:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6693636</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpreviousversions.action?pageId=4292870]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292874</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-09-06 01:37:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-09-06 01:37:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6693637</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpreviousversions.action?pageId=4292870]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292875</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-09-06 01:38:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-09-06 01:38:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5309705</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?hl=en&source=hp&q=fusebox+framework+tutorials&btnG=Google+Search&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-05-05 17:54:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-05-05 17:54:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819342</id>
    <property name="body"><![CDATA[h2. *MXUnit TestResult output formats*

MXUnit provides a high level of flexibility by providing    test results in various output formats. Some of these are   preformatted, such as HTML, and others are _raw_ to   allow developers to generate customizable output formats.

The available TestResult output formats are:
# HTML Format
# ExtJs Format
# XML Format
# JUnit Report XML
# ColdFusion Query Format
# ColdFusion Array format
We will use the MXUnit example found in  the installation package mxunit/samples/MyTestSuite.cfm as the   base TestResults.    You may want to refer to your local TestResult API for details; e.g., [http://localhost:8500/mxunit/doc/api/]

The syntax for generating the various types of output is:

{code}<cfset output = results.getResultsOutput( ['html', 'extjs', 'xml', 'junitxml', 'query', 'array'] ) />
<cfoutput>#output#<cfoutput>
{code}
Note: Since the above query and array types are complex data structures, you will get an error by trying to print those directly, as illustrated above. You most likely be computing other outputs if you use those types.

Following are simple examples of how to handle the various output types.

Note that in order to toggle between HTML and ExtJs format, pass in a URL.output=\['html'\|'extjs'\] to your TestSuite

*1. HTML Format*

The HTML output is basic preformatted HTML:

{code}<cfoutput>#results.getResultsOutput( 'html' )#<cfoutput>

{code}
*2. ExtJs Format*

ExtJs is a rich user interface set of APIs written in JavaScript.

{code}<cfoutput>#results.getResultsOutput( 'extjs' )#<cfoutput>

{code}
*3. XML Format*

This is basic raw XML format that can be transformed into custom HTML output.


{code}<cfoutput>#results.getResultsOutput( 'xml' )#<cfoutput>

{code}
*4. JUnit Report XML*


This is an XML format that is used by [Ant's JunitReport Task|http://ant.apache.org/manual/OptionalTasks/junitreport.html]. Also see the MXUnit Ant Task for usage information.

{code}<cfoutput>#results.getResultsOutput( 'junitxml' )#<cfoutput>

{code}
*5. ColdFusion Query Format*

Returns a CF Query object that you can loop over as if it were a database query.

{code} <cfset q = results.getResultsOutput( 'query' ) />
 <cfoutput query="q">
   #q.component#, #q.testStatus# ...
 </cfoutput>


{code}
The available columns names: COMPONENT, CONTENT, DATETIME, DEBUG, ERROR, NUMBER, TESTNAME, TESTSTATUS, TIME, TRACE.
Summary data members ( q = results.getResultsOutput('query') ) :
q.testRuns = How many tests were run,
q.failures = How many tests fail,
q.errors = How many errors occurred,
q.successes = How many successes occurred,
q.totalExecutionTime = How long it took, in milliseconds, to run all the tests

{code}<cfdump var="#results.getResultsOutput( 'query' )#" />
{code}
*6. ColdFusion Array Format*

This is how internal test results are stored within the TestResult component.
To access specific members, you can execute the following:

{code} <cfset a = results.getResultsOutput( 'array' ) />
 <cfoutput>
   #a[1]["component"]#, #a[1]["testStatus"]# ...
 </cfoutput>

{code}
{code}<cfdump var="#results.getResultsOutput( 'array' )#" />

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786591</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819344</id>
    <property name="body"><![CDATA[h2. Setting up your environment

So you've downloaded mxunit. Now What? How do you set up your own project? Where do you put your tests?

Everyone hates to hear this, but there's no one right answer. However, we're not gonna leave you hangin' with that lame answer. Here's what we've done (and still do):
* put your tests in a directory named "tests" parallel to your components
*pros:*** in the same place so they're easy to find
** separated so you have no danger of accidentally running a "real" component as a test case *cons:*** if it matters to you, you probably don't want to deploy your tests to prod, so you'd need to filter them out somehow (ANT\!)
* put your tests in a directory named "tests" underneath your components directory
*pros*** same as above{*}cons*** same as above
* put your tests in a directory named "tests" outside your project
*pros*** centralize all your tests in one place
** forces you to find problems where your tests rely on data they shouldn't be able to see (session info, etc)*cons*** potentially not as intuitive to find tests for a project when getting started initially
** makes it harder to access application-specific data (that might be a good thing though)
* put your tests in the same directory as your components
*pros*** extremely easy to see your tests and components together{*}cons*** you probably don't want to deploy tests to production so you'd need to use ANT or some other tool to pull those files out during deployments]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786594</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819350</id>
    <property name="body"><![CDATA[{html}
<H2>TDD Example: Implementing new functionality</H2>
<P>This case study will demonstrate how I implemented new functionality into MXUnit itself using a test-driven approach. I took screenshots at virtually every step in the process. At the end of the case study, I'll explain the changes that took place between the first iteration of the code and a subsequent change a few days later, although I won't document that in pictures. To see the current implementation and the test case that tests the functionality, <A href="../download.cfm" mce_href="../download.cfm">download MXUnit</A> and open mxunit/framework/PublicProxyMaker.cfc and mxunit/tests/framework/PublicProxyMakerTest.cfc </P>
<P>The voice is in the present tense so that you can see what I was thinking as it was happening. </P>
<H3>The Functionality</H3>
<P>I wanted to add a way into MXUnit for more easily testing private methods. A discussion on this topic <A href="index.cfm?doc=testprivate" mce_href="index.cfm?doc=testprivate">is here</A> so I won't go into it again. My goal was to create testable private methods in a line of code, inside the test case itself, without the need for the person writing the tests to create any more components.</P>
<H3>How I intend to implement it</H3>
<P>I intend to make a new component named PublicProxyMaker.cfc. This will contain a function named makePublic(objectWithPrivateMethod, privateMethodUnderTest, optional name for new public method).</P>
<P>makePublic() will create a new throwaway component that contains a public function that will itself call the private function. it will then inject this new public function into the object with the private method. the new public method will be named either whatever it was the programmer passed in as the third arg OR it will be the same as the private function itself, but prefixed with a "_".</P>
<P>I will then add a passthrough call to makePublic() into TestCase itself as a convenience to the programmer so that the test programmer doesn't have to know about the PublicProxyMaker component. All they need to know is that there's a function named makePublic() that they can use. </P>
<P>Thus, the programmer should be able to call this new functionality like this:</P>
<P><cfset objWithPrivate = createObject("component","SomethingWithPrivate")></P>
<P><cfset makePublic(objWithPrivate,"somePrivate","somePublicProxyForThePrivate")></P>
<P><cfset objWithPrivate.somePublicProxyForThePrivate(blah)></P>
<P>OR </P>
<P><cfset makePublic(objWithPrivate,"somePrivate")></P>
<P><cfset objWithPrivate._somePrivate(blah)></P>
<P>My approach will be to implement the functionality in the PublicProxyMaker and then, finally, to add the passthrough into the TestCase.cfc component. Thus, the test case I myself write for this new functionality will call maker.makePublic(), but in the end the programmer using MXUnit would not have to work directly with PublicProxyMaker</P>
<P>  </P>
<H3>The case study, in Pictures </H3>
<P><B>Step 1:</B> Run all existing tests first</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/1%20-%20run%20all%20tests%20first.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/1%20-%20run%20all%20tests%20first.png"><IMG border="0" height="261" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/1%20-%20run%20all%20tests%20first.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/1%20-%20run%20all%20tests%20first.jpg" width="325"></IMG></A></P>
<P><B>Step 2: </B>View problems-only mode for easier reading</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/2%20-%20problems-only%20mode.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/2%20-%20problems-only%20mode.png"><IMG border="0" height="261" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/2%20-%20problems-only%20mode.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/2%20-%20problems-only%20mode.jpg" width="325"></IMG></A></P>
<P><B>Step 3</B>: FOR MYLYN USERS: Open the issue in the Eclipse mylyn browser and activate it (push the blue button). This filters out all the nonessential junk from the navigator view and adds only relevant files as I open them. In the navigator, the "filtering" can be turned on and off by toggling the 3-dot button in that view without needing to deactivate the issue </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/3%20-%20Issue%20in%20mylyn%20browser.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/3%20-%20Issue%20in%20mylyn%20browser.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/3%20-%20Issue%20in%20mylyn%20browser.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/3%20-%20Issue%20in%20mylyn%20browser.jpg" width="365"></IMG></A></P>
<P><B>Step 4: </B>Create new test case. I intend to name the component that contains my new functionality "PublicProxyMaker", so my test case will be named "PublicProxyMakerTest.cfc". Note that I haven't yet created PublicProxyMaker.cfc</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/4%20-%20create%20new%20test%20case.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/4%20-%20create%20new%20test%20case.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/4%20-%20create%20new%20test%20case.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/4%20-%20create%20new%20test%20case.jpg" width="365"></IMG></A></P>
<P><B>Step 5:</B> Add new tests that better fail. Run them in the MXUnit view. What I expect here is a "component not found" error since I haven't built the components i'm testing yet. So... these should fail in setUp() and never even make it into the actual test. </P>
<P>NOTE: you'll notice that my Test Case name is PublicProxyMakerTest.cfc. And you'll notice that I'm creating an object called "sanity" on the component "PublicProxyMakerTest". WTF???? Basically this is my lazy way of creating an object that I know has a private function. I know it might seem weird to be creating another instance of itself. Ignore it. It's another instance ... it's not testing "this". So it's safe to do this. Also you'll see later on when I change the name "sanity" to something else because it kept tripping me up. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/5%20-%20add%20some%20stuff%20sure%20to%20fail%20and%20run.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/5%20-%20add%20some%20stuff%20sure%20to%20fail%20and%20run.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/5%20-%20add%20some%20stuff%20sure%20to%20fail%20and%20run.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/5%20-%20add%20some%20stuff%20sure%20to%20fail%20and%20run.jpg" width="365"></IMG></A></P>
<P><B>Step 6:</B> Create component to test this on. this is just a stub so that I can get past setUp() and into my test functions. My new component is named "PublicProxyMaker". </P>
<P>Note that those test functions aren't actually implemented yet. So technically I'm not following strict TDD here. But that's OK. This is kind of how I work..... chip away at things. I find that I like the momentum that comes with tiny little incremental successes. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/6%20-%20Create%20Component%20to%20test.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/6%20-%20Create%20Component%20to%20test.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/6%20-%20Create%20Component%20to%20test.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/6%20-%20Create%20Component%20to%20test.jpg" width="365"></IMG></A></P>
<P><B>Step 7: </B>Implement a sanity check test. this is the testSanity function in this test case. Basically, it just confirms that I can't test a private method directly. If that test were to not pass, that would mean either the function i'm trying to run isn't private or something else weird is going on. I like to start knowing that all is working as expected. In this case, what I expect is that trying to run a private function will fail. My expectation is proven correct, so I can proceed. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/7%20-%20implement%20sanity%20check%20test.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/7%20-%20implement%20sanity%20check%20test.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/7%20-%20implement%20sanity%20check%20test.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/7%20-%20implement%20sanity%20check%20test.jpg" width="365"></IMG></A></P>
<P><B>Step 8:</B> Implement first test. this is the "testMakePublicNamedArgs" function. This new functionality needs to work both with passing in named args and also not naming the arguments. This one I suspect will be the easiest to confirm so that's where I start. NOTE: the test fails because the function under test doesn't exist yet! </P>
<P>Thus, I wrote my test first that tests the behavior I expect out of the function that I haven't even written yet. This is classic TDD: you test the behavior you want, and when the test passes, you're done. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/8%20-%20implement%20first%20test.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/8%20-%20implement%20first%20test.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/8%20-%20implement%20first%20test.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/8%20-%20implement%20first%20test.jpg" width="365"></IMG></A></P>
<P><B>Step 9:</B> Stub the function under test. Confirm Failure</P>
<P>Here, I just get the function in place, but it doesn't do anything. I run my test again because if it passes, then my test is bad! It fails, which is a good thing. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/9%20-%20stub%20the%20function%20under%20test;%20confirm%20failure.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/9%20-%20stub%20the%20function%20under%20test;%20confirm%20failure.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/9%20-%20stub%20the%20function%20under%20test;%20confirm%20failure.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/9%20-%20stub%20the%20function%20under%20test;%20confirm%20failure.jpg" width="365"></IMG></A></P>
<P><B>Step 10:</B> Implement the second test. Rather than work to get the first test passing, I'm going to implement the second test, which is to test what happens when arguments to my new function are not named, i.e. calling maker.makePublic(arg1, arg2, arg3) instead of maker.makePublic(arg1=blah, arg2=blah, arg3=blah) .</P>
<P>Again, it fails, as it should because I haven't actually implemented the functionality. </P>
<P><BR></BR></P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/10%20-%20implement%20second%20test.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/10%20-%20implement%20second%20test.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/10%20-%20implement%20second%20test.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/10%20-%20implement%20second%20test.jpg" width="365"></IMG></A></P>
<P><B>BREATHER</B>: Let's take a second to review where we're at right now:</P>
<P>We have a new component named PublicProxyMaker.cfc and a test case component named PublicProxyMakerTest.cfc. </P>
<P>PublicProxyMakerTest has 3 test functions: testSanity, testMakePublicNamedArgs, and testMakePublicNonNamedArgs.</P>
<P>testSanity passes. The other two do not because the functionality they test is not yet implemented.</P>
<P>If you look at those two test methods, you'll see that both will pass if they can run a function named "_aPrivateMethod" and that _aPrivateMethod() returns the expected result.<BR></BR>
</P>
<P>Now, back to the show: </P>
<P><BR></BR></P>
<P><B>Step 11</B>: Start implementing.</P>
<P> I do about 5 minutes of coding, and i'm at a point where I need to see my data. I need to find out what the data looks like returned from getMetadata() on my object in question. So, I turn off the failure... I need to see some cfdump. I add a cfdump into my new makePublic() function and then I comment out the failure in my test case so that I can view the output easily in the mxunit plugin view (highlight the test and hit "b" on the keyboard. this brings up the internal browser).</P>
<P>Note the cfdump in the code and the commented out stuff in the test function.</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/11%20-%20turn%20off%20failure;%20need%20to%20see%20dump.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/11%20-%20turn%20off%20failure;%20need%20to%20see%20dump.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/11%20-%20turn%20off%20failure;%20need%20to%20see%20dump.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/11%20-%20turn%20off%20failure;%20need%20to%20see%20dump.jpg" width="365"></IMG></A></P>
<P><B>Step 12:</B> the CF Dump</P>
<P>Here's what the cfdump looks like from the code above.That's all i needed to see. Back to coding. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/12%20-%20picture%20of%20dump.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/12%20-%20picture%20of%20dump.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/12%20-%20picture%20of%20dump.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/12%20-%20picture%20of%20dump.jpg" width="365"></IMG></A></P>
<P><B>Step 13: </B>Code implementation I think will work</P>
<P>I've got the stuff uncommented again in the test case, and I crank out some code I think will work in makePublic(). </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/13%20-%20code%20implementation%20i%20think%20will%20work.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/13%20-%20code%20implementation%20i%20think%20will%20work.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/13%20-%20code%20implementation%20i%20think%20will%20work.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/13%20-%20code%20implementation%20i%20think%20will%20work.jpg" width="365"></IMG></A></P>
<P><B>Step 14:</B> Dagnabbit. It didn't work</P>
<P>I thought I had it, but I guess I didn't. It's giving me function "_aPrivateMethod" not found. WTF? I need to see the data again. </P>
<P>This time, I just add <cfset debug(getMetadata(sanity))> into the test case itself. This yields nothing useful. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/14%20-%20damn%20it%20didnt%20work.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/14%20-%20damn%20it%20didnt%20work.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/14%20-%20damn%20it%20didnt%20work.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/14%20-%20damn%20it%20didnt%20work.jpg" width="365"></IMG></A></P>
<P><B>Step 15:</B> Crap. my variable names caused my problems</P>
<P>An AHA moment. my test case was bad! It was calling <cfset result = maker._aPrivateMethod(...)>, but it should've been calling <cfset result = sanity._aPrivateMethod(...)> because the whole point of the makePublic() code is to inject a new public function into the object that's passed to it, which in this case was the "sanity" object.</P>
<P><BR></BR></P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/15%20-%20CRAP%20--%20my%20dumb%20variable%20names%20caused%20my%20problem.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/15%20-%20CRAP%20--%20my%20dumb%20variable%20names%20caused%20my%20problem.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/15%20-%20CRAP%20--%20my%20dumb%20variable%20names%20caused%20my%20problem.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/15%20-%20CRAP%20--%20my%20dumb%20variable%20names%20caused%20my%20problem.jpg" width="365"></IMG></A></P>
<P>This teaches me something: use really clear variable names. "sanity" was a dumb name to start with. First, I change the test case to be cfset result = sanity._aPrivateMethod.</P>
<P>Then I scrap "sanity" entirely and rename the object "objectWithPrivateMethod". That's much clearer. I do a search/replace in my test case and I'm back in action. In addition, I also fix the code in testMakePublicNonNamedArgs because it, too, was calling maker._aPrivateMethod instead of sanity._aPrivateMethod </P>
<P>This next screen shot will demonstrate the new variable names and such. </P>
<P><B>Step 16: </B>Finally, a good error. With my new variable names in place and me feeling good that things are finally clearer, I run the test again. And I get a new failure message. "PrivateMethodName" is not defined. Some code bug.</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/16%20-%20good%20error%20--%20the%20function%20is%20being%20injected.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/16%20-%20good%20error%20--%20the%20function%20is%20being%20injected.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/16%20-%20good%20error%20--%20the%20function%20is%20being%20injected.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/16%20-%20good%20error%20--%20the%20function%20is%20being%20injected.jpg" width="365"></IMG></A></P>
<P>So I fix the bug in the makePublic() code (it was something dumb... typo or something). </P>
<P><B>Step 17:</B> Works for one but not the other. This means the implementation isn't right </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/17%20-%20Works%20for%20one%20but%20not%20the%20other.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/17%20-%20Works%20for%20one%20but%20not%20the%20other.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/17%20-%20Works%20for%20one%20but%20not%20the%20other.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/17%20-%20Works%20for%20one%20but%20not%20the%20other.jpg" width="365"></IMG></A></P>
<P><B>Step 18: </B>Have to change implementation. It's busted. Back to being broken for both test cases. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/18%20-%20Have%20to%20change%20implementation;%20Back%20to%20being%20broken.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/18%20-%20Have%20to%20change%20implementation;%20Back%20to%20being%20broken.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/18%20-%20Have%20to%20change%20implementation;%20Back%20to%20being%20broken.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/18%20-%20Have%20to%20change%20implementation;%20Back%20to%20being%20broken.jpg" width="365"></IMG></A></P>
<P>So back at it. I basically have to completely rewrite a private function inside PublicProxyMaker named "constructArgumentsString". At first shot, I was just creating a function that did this:</P>
<P><cffunction name="#whatever#" access="public"></P>
<P><cfreturn #privateMethodName#(argumentcollection=arguments)></P>
<P></cffunction></P>
<P>And that worked fine for the named args but not the unnamed args. </P>
<P>So this means I'm going to have to create a proper set of cfargument tags in this new public function that will be injected, and it means i'll have to have to properly call the privateMethod in question using those named args. </P>
<P>So... I do that, then rerun my tests. </P>
<P><B>Step 19:</B> All Green!</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/19%20-%20All%20Green%21.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/19%20-%20All%20Green!.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/19%20-%20All%20Green!.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/19%20-%20All%20Green%21.jpg" width="365"></IMG></A></P>
<P><B>Step 20: </B>Works when adding a file delete (that's a good thing)</P>
<P>I want to be sure that this temp component being created gets cleaned up. so I add a cffile delete on it. I run the tests again, and all is still well. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/20%20-%20Works%20when%20adding%20delete.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/20%20-%20Works%20when%20adding%20delete.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/20%20-%20Works%20when%20adding%20delete.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/20%20-%20Works%20when%20adding%20delete.jpg" width="365"></IMG></A></P>
<P>Step 21: Poor behavior for undefined method</P>
<P>I want to know how this thing will behave should a programmer try to create a public proxy for an undefined method. So I add a test for that. </P>
<P>But I don't like the error message I see. Completely unhelpful. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/21%20-%20poor%20behavior%20for%20undefined%20mehtod.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/21%20-%20poor%20behavior%20for%20undefined%20mehtod.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/21%20-%20poor%20behavior%20for%20undefined%20mehtod.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/21%20-%20poor%20behavior%20for%20undefined%20mehtod.jpg" width="365"></IMG></A></P>
<P>So I add some additional code into makePublic(). </P>
<P>Step 22: I like this error better</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/22%20-%20I%20like%20this%20error%20better.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/22%20-%20I%20like%20this%20error%20better.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/22%20-%20I%20like%20this%20error%20better.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/22%20-%20I%20like%20this%20error%20better.jpg" width="365"></IMG></A></P>
<P>Step 23: Make that test proper</P>
<P>Now that I know what the error is going to look like and I'm satisified with it, I write a proper test for the nonexistent method scenario. </P>
<P>Yes, this is backward from TDD. I don't care. Without seeing the actual failure behavior first, I couldn't tell what it was going to behave like. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/23%20-%20make%20that%20test%20proper.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/23%20-%20make%20that%20test%20proper.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/23%20-%20make%20that%20test%20proper.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/23%20-%20make%20that%20test%20proper.jpg" width="365"></IMG></A></P>
<P>Step 24: Test method with no arguments. Make sure that if a private method doesn't have any arguments that the code doesn't gack. Just seems like a smart thing to do, that's all. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/24%20-%20Test%20for%20method%20with%20no%20args.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/24%20-%20Test%20for%20method%20with%20no%20args.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/24%20-%20Test%20for%20method%20with%20no%20args.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/24%20-%20Test%20for%20method%20with%20no%20args.jpg" width="365"></IMG></A></P>
<P>Step 25: Almost done -- run all tests again.</P>
<P>So far, everything is looking good. Now I want to run all tests again that I ran at the outset. This is all tests I have, not just the ones I just wrote. This is a habit of mine.</P>
<P>Also, as of right now, I still haven't added the passthrough into TestCase.cfc yet. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/25%20-%20Almost%20done%20-%20run%20all%20tests%20again.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/25%20-%20Almost%20done%20-%20run%20all%20tests%20again.png"><IMG border="0" height="261" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/25%20-%20Almost%20done%20-%20run%20all%20tests%20again.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/25%20-%20Almost%20done%20-%20run%20all%20tests%20again.jpg" width="325"></IMG></A></P>
<P>Now I'm ready to add the passthrough into TestCase.cfc. As with before, start with the tests first.... I gotta see stuff fail so I know my tests are good. </P>
<P>Step 26: Add test for it in TestCaseTest. Start with a sanity check</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/26%20-%20add%20test%20for%20it%20in%20TestCaseTest.%20start%20with%20a%20sanity%20check.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/26%20-%20add%20test%20for%20it%20in%20TestCaseTest.%20start%20with%20a%20sanity%20check.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/26%20-%20add%20test%20for%20it%20in%20TestCaseTest.%20start%20with%20a%20sanity%20check.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/26%20-%20add%20test%20for%20it%20in%20TestCaseTest.%20start%20with%20a%20sanity%20check.jpg" width="365"></IMG></A></P>
<P>Step 27: Add test first before adding makepublic method</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/27%20-%20add%20test%20first%20before%20adding%20makepublic%20method.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/27%20-%20add%20test%20first%20before%20adding%20makepublic%20method.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/27%20-%20add%20test%20first%20before%20adding%20makepublic%20method.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/27%20-%20add%20test%20first%20before%20adding%20makepublic%20method.jpg" width="365"></IMG></A></P>
<P>Step 28: Add makePublic into TestCase</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/28%20-%20add%20makePublic%20into%20testcase.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/28%20-%20add%20makePublic%20into%20testcase.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/28%20-%20add%20makePublic%20into%20testcase.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/28%20-%20add%20makePublic%20into%20testcase.jpg" width="365"></IMG></A></P>
<P>Step 29a: Run test again. All Green</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/29%20-%20run%20test%20again%20-%20Green%20Bar.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/29%20-%20run%20test%20again%20-%20Green%20Bar.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/29%20-%20run%20test%20again%20-%20Green%20Bar.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/29%20-%20run%20test%20again%20-%20Green%20Bar.jpg" width="365"></IMG></A></P>
<P>Step 29b: Run all tests again </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/29b%20-%20run%20all%20tests%20again.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/29b%20-%20run%20all%20tests%20again.png"><IMG border="0" height="261" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/29b%20-%20run%20all%20tests%20again.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/29b%20-%20run%20all%20tests%20again.jpg" width="325"></IMG></A></P>
<P>Step 30: Commit changes. This is with the mylyn filter on which is why you only see 4 files to commit. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/30%20-%20with%20mylyn%20filter%20on%20commit%20changes.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/30%20-%20with%20mylyn%20filter%20on%20commit%20changes.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/30%20-%20with%20mylyn%20filter%20on%20commit%20changes.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/30%20-%20with%20mylyn%20filter%20on%20commit%20changes.jpg" width="365"></IMG></A> </P>
{html}

<h2>Wrap Up</h2>
<p>So, this was the initial implementation of the facility in MXUnit that makes it easier to test private methods. It did change slightly from this version, but not much. I added another "style" of working with the makePublic function. It now also returns a brand new object which extends the object you pass into it and overrides the private function you're trying to run. Essentially this is a take on the conventional method of testing private functions, just made easier. <a href="index.cfm?doc=testprivate">It's all documented here</a>. </p>]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786600</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819352</id>
    <property name="body"><![CDATA[{html}
<H2>TDD Example: Implementing new functionality</H2>
<P>This case study will demonstrate how I implemented new functionality into MXUnit itself using a test-driven approach. I took screenshots at virtually every step in the process. At the end of the case study, I'll explain the changes that took place between the first iteration of the code and a subsequent change a few days later, although I won't document that in pictures. To see the current implementation and the test case that tests the functionality, <A href="../download.cfm" mce_href="http://mxunit.org/download.cfm">download MXUnit</A> and open mxunit/framework/PublicProxyMaker.cfc and mxunit/tests/framework/PublicProxyMakerTest.cfc </P>
<P>The voice is in the present tense so that you can see what I was thinking as it was happening. </P>
<H3>The Functionality</H3>
<P>I wanted to add a way into MXUnit for more easily testing private methods. A discussion on this topic <A href="index.cfm?doc=testprivate" mce_href="index.cfm?doc=testprivate">is here</A> so I won't go into it again. My goal was to create testable private methods in a line of code, inside the test case itself, without the need for the person writing the tests to create any more components.</P>
<H3>How I intend to implement it</H3>
<P>I intend to make a new component named PublicProxyMaker.cfc. This will contain a function named makePublic(objectWithPrivateMethod, privateMethodUnderTest, optional name for new public method).</P>
<P>makePublic() will create a new throwaway component that contains a public function that will itself call the private function. it will then inject this new public function into the object with the private method. the new public method will be named either whatever it was the programmer passed in as the third arg OR it will be the same as the private function itself, but prefixed with a "_".</P>
<P>I will then add a passthrough call to makePublic() into TestCase itself as a convenience to the programmer so that the test programmer doesn't have to know about the PublicProxyMaker component. All they need to know is that there's a function named makePublic() that they can use. </P>
<P>Thus, the programmer should be able to call this new functionality like this:</P>
<P><CFSET objwithprivate="createObject("component","SomethingWithPrivate")"></CFSET></P>
<P><CFSET makepublic></CFSET></P>
<P><CFSET objwithprivate.somepublicproxyfortheprivate></CFSET></P>
<P>OR </P>
<P><CFSET makepublic></CFSET></P>
<P><CFSET objwithprivate._someprivate></CFSET></P>
<P>My approach will be to implement the functionality in the PublicProxyMaker and then, finally, to add the passthrough into the TestCase.cfc component. Thus, the test case I myself write for this new functionality will call maker.makePublic(), but in the end the programmer using MXUnit would not have to work directly with PublicProxyMaker</P>
<P><BR></BR></P>
<H3>The case study, in Pictures </H3>
<P><B>Step 1:</B> Run all existing tests first</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/1%20-%20run%20all%20tests%20first.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/1%20-%20run%20all%20tests%20first.png"><IMG border="0" height="261" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/1%20-%20run%20all%20tests%20first.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/1%20-%20run%20all%20tests%20first.jpg" width="325"></IMG></A></P>
<P><B>Step 2: </B>View problems-only mode for easier reading</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/2%20-%20problems-only%20mode.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/2%20-%20problems-only%20mode.png"><IMG border="0" height="261" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/2%20-%20problems-only%20mode.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/2%20-%20problems-only%20mode.jpg" width="325"></IMG></A></P>
<P><B>Step 3</B>: FOR MYLYN USERS: Open the issue in the Eclipse mylyn browser and activate it (push the blue button). This filters out all the nonessential junk from the navigator view and adds only relevant files as I open them. In the navigator, the "filtering" can be turned on and off by toggling the 3-dot button in that view without needing to deactivate the issue </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/3%20-%20Issue%20in%20mylyn%20browser.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/3%20-%20Issue%20in%20mylyn%20browser.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/3%20-%20Issue%20in%20mylyn%20browser.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/3%20-%20Issue%20in%20mylyn%20browser.jpg" width="365"></IMG></A></P>
<P><B>Step 4: </B>Create new test case. I intend to name the component that contains my new functionality "PublicProxyMaker", so my test case will be named "PublicProxyMakerTest.cfc". Note that I haven't yet created PublicProxyMaker.cfc</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/4%20-%20create%20new%20test%20case.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/4%20-%20create%20new%20test%20case.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/4%20-%20create%20new%20test%20case.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/4%20-%20create%20new%20test%20case.jpg" width="365"></IMG></A></P>
<P><B>Step 5:</B> Add new tests that better fail. Run them in the MXUnit view. What I expect here is a "component not found" error since I haven't built the components i'm testing yet. So... these should fail in setUp() and never even make it into the actual test. </P>
<P>NOTE: you'll notice that my Test Case name is PublicProxyMakerTest.cfc. And you'll notice that I'm creating an object called "sanity" on the component "PublicProxyMakerTest". WTF???? Basically this is my lazy way of creating an object that I know has a private function. I know it might seem weird to be creating another instance of itself. Ignore it. It's another instance ... it's not testing "this". So it's safe to do this. Also you'll see later on when I change the name "sanity" to something else because it kept tripping me up. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/5%20-%20add%20some%20stuff%20sure%20to%20fail%20and%20run.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/5%20-%20add%20some%20stuff%20sure%20to%20fail%20and%20run.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/5%20-%20add%20some%20stuff%20sure%20to%20fail%20and%20run.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/5%20-%20add%20some%20stuff%20sure%20to%20fail%20and%20run.jpg" width="365"></IMG></A></P>
<P><B>Step 6:</B> Create component to test this on. this is just a stub so that I can get past setUp() and into my test functions. My new component is named "PublicProxyMaker". </P>
<P>Note that those test functions aren't actually implemented yet. So technically I'm not following strict TDD here. But that's OK. This is kind of how I work..... chip away at things. I find that I like the momentum that comes with tiny little incremental successes. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/6%20-%20Create%20Component%20to%20test.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/6%20-%20Create%20Component%20to%20test.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/6%20-%20Create%20Component%20to%20test.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/6%20-%20Create%20Component%20to%20test.jpg" width="365"></IMG></A></P>
<P><B>Step 7: </B>Implement a sanity check test. this is the testSanity function in this test case. Basically, it just confirms that I can't test a private method directly. If that test were to not pass, that would mean either the function i'm trying to run isn't private or something else weird is going on. I like to start knowing that all is working as expected. In this case, what I expect is that trying to run a private function will fail. My expectation is proven correct, so I can proceed. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/7%20-%20implement%20sanity%20check%20test.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/7%20-%20implement%20sanity%20check%20test.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/7%20-%20implement%20sanity%20check%20test.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/7%20-%20implement%20sanity%20check%20test.jpg" width="365"></IMG></A></P>
<P><B>Step 8:</B> Implement first test. this is the "testMakePublicNamedArgs" function. This new functionality needs to work both with passing in named args and also not naming the arguments. This one I suspect will be the easiest to confirm so that's where I start. NOTE: the test fails because the function under test doesn't exist yet! </P>
<P>Thus, I wrote my test first that tests the behavior I expect out of the function that I haven't even written yet. This is classic TDD: you test the behavior you want, and when the test passes, you're done. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/8%20-%20implement%20first%20test.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/8%20-%20implement%20first%20test.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/8%20-%20implement%20first%20test.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/8%20-%20implement%20first%20test.jpg" width="365"></IMG></A></P>
<P><B>Step 9:</B> Stub the function under test. Confirm Failure</P>
<P>Here, I just get the function in place, but it doesn't do anything. I run my test again because if it passes, then my test is bad! It fails, which is a good thing. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/9%20-%20stub%20the%20function%20under%20test;%20confirm%20failure.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/9%20-%20stub%20the%20function%20under%20test;%20confirm%20failure.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/9%20-%20stub%20the%20function%20under%20test;%20confirm%20failure.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/9%20-%20stub%20the%20function%20under%20test;%20confirm%20failure.jpg" width="365"></IMG></A></P>
<P><B>Step 10:</B> Implement the second test. Rather than work to get the first test passing, I'm going to implement the second test, which is to test what happens when arguments to my new function are not named, i.e. calling maker.makePublic(arg1, arg2, arg3) instead of maker.makePublic(arg1=blah, arg2=blah, arg3=blah) .</P>
<P>Again, it fails, as it should because I haven't actually implemented the functionality. </P>
<P><BR></BR><BR></BR></P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/10%20-%20implement%20second%20test.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/10%20-%20implement%20second%20test.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/10%20-%20implement%20second%20test.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/10%20-%20implement%20second%20test.jpg" width="365"></IMG></A></P>
<P><B>BREATHER</B>: Let's take a second to review where we're at right now:</P>
<P>We have a new component named PublicProxyMaker.cfc and a test case component named PublicProxyMakerTest.cfc. </P>
<P>PublicProxyMakerTest has 3 test functions: testSanity, testMakePublicNamedArgs, and testMakePublicNonNamedArgs.</P>
<P>testSanity passes. The other two do not because the functionality they test is not yet implemented.</P>
<P>If you look at those two test methods, you'll see that both will pass if they can run a function named "_aPrivateMethod" and that _aPrivateMethod() returns the expected result.<BR></BR><BR></BR>
</P>
<P>Now, back to the show: </P>
<P><BR></BR><BR></BR></P>
<P><B>Step 11</B>: Start implementing.</P>
<P> I do about 5 minutes of coding, and i'm at a point where I need to see my data. I need to find out what the data looks like returned from getMetadata() on my object in question. So, I turn off the failure... I need to see some cfdump. I add a cfdump into my new makePublic() function and then I comment out the failure in my test case so that I can view the output easily in the mxunit plugin view (highlight the test and hit "b" on the keyboard. this brings up the internal browser).</P>
<P>Note the cfdump in the code and the commented out stuff in the test function.</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/11%20-%20turn%20off%20failure;%20need%20to%20see%20dump.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/11%20-%20turn%20off%20failure;%20need%20to%20see%20dump.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/11%20-%20turn%20off%20failure;%20need%20to%20see%20dump.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/11%20-%20turn%20off%20failure;%20need%20to%20see%20dump.jpg" width="365"></IMG></A></P>
<P><B>Step 12:</B> the CF Dump</P>
<P>Here's what the cfdump looks like from the code above.That's all i needed to see. Back to coding. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/12%20-%20picture%20of%20dump.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/12%20-%20picture%20of%20dump.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/12%20-%20picture%20of%20dump.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/12%20-%20picture%20of%20dump.jpg" width="365"></IMG></A></P>
<P><B>Step 13: </B>Code implementation I think will work</P>
<P>I've got the stuff uncommented again in the test case, and I crank out some code I think will work in makePublic(). </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/13%20-%20code%20implementation%20i%20think%20will%20work.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/13%20-%20code%20implementation%20i%20think%20will%20work.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/13%20-%20code%20implementation%20i%20think%20will%20work.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/13%20-%20code%20implementation%20i%20think%20will%20work.jpg" width="365"></IMG></A></P>
<P><B>Step 14:</B> Dagnabbit. It didn't work</P>
<P>I thought I had it, but I guess I didn't. It's giving me function "_aPrivateMethod" not found. WTF? I need to see the data again. </P>
<P>This time, I just add <CFSET debug> into the test case itself. This yields nothing useful. </CFSET></P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/14%20-%20damn%20it%20didnt%20work.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/14%20-%20damn%20it%20didnt%20work.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/14%20-%20damn%20it%20didnt%20work.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/14%20-%20damn%20it%20didnt%20work.jpg" width="365"></IMG></A></P>
<P><B>Step 15:</B> Crap. my variable names caused my problems</P>
<P>An AHA moment. my test case was bad! It was calling <CFSET result="maker._aPrivateMethod(...)">, but it should've been calling <CFSET result="sanity._aPrivateMethod(...)"> because the whole point of the makePublic() code is to inject a new public function into the object that's passed to it, which in this case was the "sanity" object.</CFSET></CFSET></P>
<P><BR></BR><BR></BR></P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/15%20-%20CRAP%20--%20my%20dumb%20variable%20names%20caused%20my%20problem.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/15%20-%20CRAP%20--%20my%20dumb%20variable%20names%20caused%20my%20problem.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/15%20-%20CRAP%20--%20my%20dumb%20variable%20names%20caused%20my%20problem.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/15%20-%20CRAP%20--%20my%20dumb%20variable%20names%20caused%20my%20problem.jpg" width="365"></IMG></A></P>
<P>This teaches me something: use really clear variable names. "sanity" was a dumb name to start with. First, I change the test case to be cfset result = sanity._aPrivateMethod.</P>
<P>Then I scrap "sanity" entirely and rename the object "objectWithPrivateMethod". That's much clearer. I do a search/replace in my test case and I'm back in action. In addition, I also fix the code in testMakePublicNonNamedArgs because it, too, was calling maker._aPrivateMethod instead of sanity._aPrivateMethod </P>
<P>This next screen shot will demonstrate the new variable names and such. </P>
<P><B>Step 16: </B>Finally, a good error. With my new variable names in place and me feeling good that things are finally clearer, I run the test again. And I get a new failure message. "PrivateMethodName" is not defined. Some code bug.</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/16%20-%20good%20error%20--%20the%20function%20is%20being%20injected.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/16%20-%20good%20error%20--%20the%20function%20is%20being%20injected.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/16%20-%20good%20error%20--%20the%20function%20is%20being%20injected.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/16%20-%20good%20error%20--%20the%20function%20is%20being%20injected.jpg" width="365"></IMG></A></P>
<P>So I fix the bug in the makePublic() code (it was something dumb... typo or something). </P>
<P><B>Step 17:</B> Works for one but not the other. This means the implementation isn't right </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/17%20-%20Works%20for%20one%20but%20not%20the%20other.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/17%20-%20Works%20for%20one%20but%20not%20the%20other.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/17%20-%20Works%20for%20one%20but%20not%20the%20other.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/17%20-%20Works%20for%20one%20but%20not%20the%20other.jpg" width="365"></IMG></A></P>
<P><B>Step 18: </B>Have to change implementation. It's busted. Back to being broken for both test cases. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/18%20-%20Have%20to%20change%20implementation;%20Back%20to%20being%20broken.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/18%20-%20Have%20to%20change%20implementation;%20Back%20to%20being%20broken.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/18%20-%20Have%20to%20change%20implementation;%20Back%20to%20being%20broken.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/18%20-%20Have%20to%20change%20implementation;%20Back%20to%20being%20broken.jpg" width="365"></IMG></A></P>
<P>So back at it. I basically have to completely rewrite a private function inside PublicProxyMaker named "constructArgumentsString". At first shot, I was just creating a function that did this:</P>
<P><CFFUNCTION access="public" name="#whatever#"></CFFUNCTION></P>
<P><CFRETURN></CFRETURN></P>
<P></P>
<P>And that worked fine for the named args but not the unnamed args. </P>
<P>So this means I'm going to have to create a proper set of cfargument tags in this new public function that will be injected, and it means i'll have to have to properly call the privateMethod in question using those named args. </P>
<P>So... I do that, then rerun my tests. </P>
<P><B>Step 19:</B> All Green!</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/19%20-%20All%20Green%21.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/19%20-%20All%20Green!.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/19%20-%20All%20Green!.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/19%20-%20All%20Green%21.jpg" width="365"></IMG></A></P>
<P><B>Step 20: </B>Works when adding a file delete (that's a good thing)</P>
<P>I want to be sure that this temp component being created gets cleaned up. so I add a cffile delete on it. I run the tests again, and all is still well. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/20%20-%20Works%20when%20adding%20delete.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/20%20-%20Works%20when%20adding%20delete.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/20%20-%20Works%20when%20adding%20delete.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/20%20-%20Works%20when%20adding%20delete.jpg" width="365"></IMG></A></P>
<P>Step 21: Poor behavior for undefined method</P>
<P>I want to know how this thing will behave should a programmer try to create a public proxy for an undefined method. So I add a test for that. </P>
<P>But I don't like the error message I see. Completely unhelpful. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/21%20-%20poor%20behavior%20for%20undefined%20mehtod.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/21%20-%20poor%20behavior%20for%20undefined%20mehtod.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/21%20-%20poor%20behavior%20for%20undefined%20mehtod.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/21%20-%20poor%20behavior%20for%20undefined%20mehtod.jpg" width="365"></IMG></A></P>
<P>So I add some additional code into makePublic(). </P>
<P>Step 22: I like this error better</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/22%20-%20I%20like%20this%20error%20better.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/22%20-%20I%20like%20this%20error%20better.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/22%20-%20I%20like%20this%20error%20better.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/22%20-%20I%20like%20this%20error%20better.jpg" width="365"></IMG></A></P>
<P>Step 23: Make that test proper</P>
<P>Now that I know what the error is going to look like and I'm satisified with it, I write a proper test for the nonexistent method scenario. </P>
<P>Yes, this is backward from TDD. I don't care. Without seeing the actual failure behavior first, I couldn't tell what it was going to behave like. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/23%20-%20make%20that%20test%20proper.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/23%20-%20make%20that%20test%20proper.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/23%20-%20make%20that%20test%20proper.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/23%20-%20make%20that%20test%20proper.jpg" width="365"></IMG></A></P>
<P>Step 24: Test method with no arguments. Make sure that if a private method doesn't have any arguments that the code doesn't gack. Just seems like a smart thing to do, that's all. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/24%20-%20Test%20for%20method%20with%20no%20args.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/24%20-%20Test%20for%20method%20with%20no%20args.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/24%20-%20Test%20for%20method%20with%20no%20args.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/24%20-%20Test%20for%20method%20with%20no%20args.jpg" width="365"></IMG></A></P>
<P>Step 25: Almost done -- run all tests again.</P>
<P>So far, everything is looking good. Now I want to run all tests again that I ran at the outset. This is all tests I have, not just the ones I just wrote. This is a habit of mine.</P>
<P>Also, as of right now, I still haven't added the passthrough into TestCase.cfc yet. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/25%20-%20Almost%20done%20-%20run%20all%20tests%20again.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/25%20-%20Almost%20done%20-%20run%20all%20tests%20again.png"><IMG border="0" height="261" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/25%20-%20Almost%20done%20-%20run%20all%20tests%20again.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/25%20-%20Almost%20done%20-%20run%20all%20tests%20again.jpg" width="325"></IMG></A></P>
<P>Now I'm ready to add the passthrough into TestCase.cfc. As with before, start with the tests first.... I gotta see stuff fail so I know my tests are good. </P>
<P>Step 26: Add test for it in TestCaseTest. Start with a sanity check</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/26%20-%20add%20test%20for%20it%20in%20TestCaseTest.%20start%20with%20a%20sanity%20check.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/26%20-%20add%20test%20for%20it%20in%20TestCaseTest.%20start%20with%20a%20sanity%20check.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/26%20-%20add%20test%20for%20it%20in%20TestCaseTest.%20start%20with%20a%20sanity%20check.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/26%20-%20add%20test%20for%20it%20in%20TestCaseTest.%20start%20with%20a%20sanity%20check.jpg" width="365"></IMG></A></P>
<P>Step 27: Add test first before adding makepublic method</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/27%20-%20add%20test%20first%20before%20adding%20makepublic%20method.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/27%20-%20add%20test%20first%20before%20adding%20makepublic%20method.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/27%20-%20add%20test%20first%20before%20adding%20makepublic%20method.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/27%20-%20add%20test%20first%20before%20adding%20makepublic%20method.jpg" width="365"></IMG></A></P>
<P>Step 28: Add makePublic into TestCase</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/28%20-%20add%20makePublic%20into%20testcase.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/28%20-%20add%20makePublic%20into%20testcase.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/28%20-%20add%20makePublic%20into%20testcase.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/28%20-%20add%20makePublic%20into%20testcase.jpg" width="365"></IMG></A></P>
<P>Step 29a: Run test again. All Green</P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/29%20-%20run%20test%20again%20-%20Green%20Bar.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/29%20-%20run%20test%20again%20-%20Green%20Bar.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/29%20-%20run%20test%20again%20-%20Green%20Bar.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/29%20-%20run%20test%20again%20-%20Green%20Bar.jpg" width="365"></IMG></A></P>
<P>Step 29b: Run all tests again </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/29b%20-%20run%20all%20tests%20again.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/29b%20-%20run%20all%20tests%20again.png"><IMG border="0" height="261" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/29b%20-%20run%20all%20tests%20again.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/29b%20-%20run%20all%20tests%20again.jpg" width="325"></IMG></A></P>
<P>Step 30: Commit changes. This is with the mylyn filter on which is why you only see 4 files to commit. </P>
<P><A href="http://mxunit.org/doc/images/TDDNewFunctionality/30%20-%20with%20mylyn%20filter%20on%20commit%20changes.png" mce_href="http://mxunit.org/doc/images/TDDNewFunctionality/30%20-%20with%20mylyn%20filter%20on%20commit%20changes.png"><IMG border="0" height="222" mce_src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/30%20-%20with%20mylyn%20filter%20on%20commit%20changes.jpg" src="http://mxunit.org/doc/images/TDDNewFunctionality/thumbs/30%20-%20with%20mylyn%20filter%20on%20commit%20changes.jpg" width="365"></IMG></A> </P>
{html}

<h2>Wrap Up</h2>
<p>So, this was the initial implementation of the facility in MXUnit that makes it easier to test private methods. It did change slightly from this version, but not much. I added another "style" of working with the makePublic function. It now also returns a brand new object which extends the object you pass into it and overrides the private function you're trying to run. Essentially this is a take on the conventional method of testing private functions, just made easier. <a href="index.cfm?doc=testprivate">It's all documented here</a>. </p>]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786602</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819330</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786578</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819332</id>
    <property name="body"><![CDATA[h2. *Getting Started with TestSuites*

A TestSuite is a collection of tests that logically fit together.

*Creating and Running a TestSuite*

MXUnit was built to make it as easy as possible to create tests and test suites.
For this tutorial we will _incrementally_ rebuild the MXUnit example found in  the installation package mxunit/samples/MyTestSuite.cfm.

The steps for creating and running a TestSuite are:
# Create a ColdFusion page to run the suite
# Create a TestSuite object
# Tell the TestSuite what tests to add
# run() the TestSuite
# Print the output
# Run the suite in your web browser
*1. Create a ColdFusion page to run this example{*}Create an empty ColdFusion page and save it as MyTestSuite.cfm in/mxunit/doc/tutorial/mytests

*2. Create a TestSuite object{*}Type the following code into the template:[view plain|http://mxunit.org/doc/index.cfm?doc=testsuites#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=testsuites#][print|http://mxunit.org/doc/index.cfm?doc=testsuites#][?|http://mxunit.org/doc/index.cfm?doc=testsuites#]
# <cfscript>
# &nbsp;testSuite&nbsp;=&nbsp;createObject("component","mxunit.framework.TestSuite").TestSuite();
# </cfscript>&nbsp;&nbsp;<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
</cfscript>
*3. Tell the TestSuite what tests to add*[view plain|http://mxunit.org/doc/index.cfm?doc=testsuites#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=testsuites#][print|http://mxunit.org/doc/index.cfm?doc=testsuites#][?|http://mxunit.org/doc/index.cfm?doc=testsuites#]
# <cfscript>
# &nbsp;testSuite&nbsp;=&nbsp;createObject("component","mxunit.framework.TestSuite").TestSuite();
# &nbsp;//Add&nbsp;all&nbsp;runnable&nbsp;methods&nbsp;in&nbsp;MyComponentTest
# &nbsp;testSuite.addAll("mxunit.samples.MyComponentTest");
# &nbsp;testSuite.addAll("mxunit.samples.MyOtherComponentTest");&nbsp;//Identical&nbsp;to&nbsp;above
# &nbsp;//add&nbsp;explicit&nbsp;test&nbsp;cased&nbsp;(don't&nbsp;start&nbsp;with&nbsp;'test').
# &nbsp;//Note&nbsp;you&nbsp;can&nbsp;add&nbsp;more&nbsp;than&nbsp;one&nbsp;at&nbsp;a&nbsp;time&nbsp;as&nbsp;a&nbsp;list
# &nbsp;testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");
# 
# </cfscript>&nbsp;&nbsp;<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
 //Add all runnable methods in MyComponentTest
 testSuite.addAll("mxunit.samples.MyComponentTest");
 testSuite.addAll("mxunit.samples.MyOtherComponentTest"); //Identical to above
 //add explicit test cased (don't start with 'test').
 //Note you can add more than one at a time as a list
 testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");

</cfscript>
*4. Run the TestSuite*[view plain|http://mxunit.org/doc/index.cfm?doc=testsuites#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=testsuites#][print|http://mxunit.org/doc/index.cfm?doc=testsuites#][?|http://mxunit.org/doc/index.cfm?doc=testsuites#]
# <cfscript>
# &nbsp;testSuite&nbsp;=&nbsp;createObject("component","mxunit.framework.TestSuite").TestSuite();
# &nbsp;testSuite.addAll("mxunit.samples.MyComponentTest");
# &nbsp;testSuite.addAll("mxunit.samples.MyOtherComponentTest");
# &nbsp;testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");
# &nbsp;//Run&nbsp;the&nbsp;tests&nbsp;and&nbsp;save&nbsp;everything&nbsp;in&nbsp;"results"
# &nbsp;results&nbsp;=&nbsp;testSuite.run();
# </cfscript>&nbsp;&nbsp;<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
 testSuite.addAll("mxunit.samples.MyComponentTest");
 testSuite.addAll("mxunit.samples.MyOtherComponentTest");
 testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");
 //Run the tests and save everything in "results"
 results = testSuite.run();
</cfscript>
*5. Do something with the output*[view plain|http://mxunit.org/doc/index.cfm?doc=testsuites#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=testsuites#][print|http://mxunit.org/doc/index.cfm?doc=testsuites#][?|http://mxunit.org/doc/index.cfm?doc=testsuites#]
# <cfscript>
# &nbsp;testSuite&nbsp;=&nbsp;createObject("component","mxunit.framework.TestSuite").TestSuite();
# &nbsp;testSuite.addAll("mxunit.samples.MyComponentTest");
# &nbsp;testSuite.addAll("mxunit.samples.MyOtherComponentTest");&nbsp;//Identical&nbsp;to&nbsp;above
# &nbsp;testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");
# &nbsp;results&nbsp;=&nbsp;testSuite.run();
# &nbsp;//Now&nbsp;print&nbsp;the&nbsp;results.&nbsp;Simple\!
# &nbsp;writeOutput(results.getResultsOutput('html'));&nbsp;//See&nbsp;next&nbsp;section&nbsp;for&nbsp;other&nbsp;output&nbsp;formats
# </cfscript>&nbsp;&nbsp;<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
 testSuite.addAll("mxunit.samples.MyComponentTest");
 testSuite.addAll("mxunit.samples.MyOtherComponentTest"); //Identical to above
 testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");
 results = testSuite.run();
 //Now print the results. Simple!
 writeOutput(results.getResultsOutput('html')); //See next section for other output formats
</cfscript>

*6. Run the suite in your web browser*[http://localhost:8500/mxunit/doc/tutorial/mytests/MyTestSuite.cfm|http://localhost:8500/mxunit/doc/tutorial/mytests/MyTestSuite.cfm]
You should see this:


\[Next - [Overview of MXUnit output formats|http://mxunit.org/doc/index.cfm?doc=outputformats]\]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786580</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819326</id>
    <property name="body"><![CDATA[h2. More MXUnit Test Cases

For this section we will add to our [first TestCase|http://mxunit.org/doc/getting-started.html].   We will add more basic math functions to complete a our TestCases: Subtraction, Multiplication, and Division.

Again, following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

Note that this rhythm is referred to as Red-Refactor-Green. This means that the   first step is failure and is signified by {color:red}{*}Red{*}{color}. The second step is to [Refactor|http://www.refactoring.com/] the code. The last step is   to make sure the test passes, which is indicated by {color:green}{*}Green{*}{color}

*1.Write the test* *{_}first{_}*.  Type the following code into your existing file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testSubtract()}
  <cffunction name="testSubtract" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 5;
    actual = mycomponent.subtract(10,5);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}

*2. Watch the test fail. (Red)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this:


Again, this error is exactly what we expect. This tells us that the subtract method does not exist.

*3. Refactor the component. (Refactor)*

Type the following code into MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests


{code:title=MyComponent.cfc subtract()}
  <cffunction name="subtract" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1-num2>
  </cffunction>

{code}

*4. Watch the test pass. (Green)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

You should see this:

*5. Now, let's do something interesting with Division - divide by zero.*

Type the following code into your existing file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testDivide()}
  <cffunction name="testDivide" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.divide(10,0);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}


*6. Watch the test fail. (Red)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

You should see this:



This tells us that the divide method does not exist.

*7. Refactor the component. (Refactor)*

Type the following code into MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=MyComponent.cfc divide()}
  <cffunction name="divide" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1/num2>
  </cffunction>

{code}

*8. Watch the test pass. (Green)*
[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

Hold on\! We're still in red. The exception shows a divide by zero error.
In this case, The test itself is broken. So, we need to fix the test. Replace the existing testDivide test method in MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testDivide() refactored}
  <cffunction name="testDivide" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.divide(10,5);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}



*8 (Redux). Watch the test pass. (Green)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

Ahh\! Oh joy\! Oh rapture\! We're in the green ...

*9. Try the multiplication test on your own.*

[Click here for the full solution|http://mxunit.org/doc/tutorial/solution-1.zip].]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786573</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819329</id>
    <property name="body"><![CDATA[h2. More MXUnit Test Cases

For this section we will add to our [first TestCase|http://mxunit.org/doc/getting-started.html].   We will add more basic math functions to complete a our TestCases: Subtraction, Multiplication, and Division.

Again, following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

Note that this rhythm is referred to as Red-Refactor-Green. This means that the   first step is failure and is signified by {color:red}{*}Red{*}{color}. The second step is to [Refactor|http://www.refactoring.com/] the code. The last step is   to make sure the test passes, which is indicated by {color:green}{*}Green{*}{color}

*1.Write the test* *{_}first{_}*.  Type the following code into your existing file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testSubtract()}
  <cffunction name="testSubtract" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 5;
    actual = mycomponent.subtract(10,5);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}

*2. Watch the test fail. (Red)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this: 

!mxu-sub-fail.png!


Again, this error is exactly what we expect. This tells us that the subtract method does not exist.

*3. Refactor the component. (Refactor)*

Type the following code into MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests


{code:title=MyComponent.cfc subtract()}
  <cffunction name="subtract" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1-num2>
  </cffunction>

{code}

*4. Watch the test pass. (Green)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

You should see this:

!mxu-sub-pass.png!

*5. Now, let's do something interesting with Division - divide by zero.*

Type the following code into your existing file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testDivide()}
  <cffunction name="testDivide" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.divide(10,0);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}


*6. Watch the test fail. (Red)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

You should see this:

!mxu-divide-fail-1.png!



This tells us that the divide method does not exist.

*7. Refactor the component. (Refactor)*

Type the following code into MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=MyComponent.cfc divide()}
  <cffunction name="divide" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1/num2>
  </cffunction>

{code}

*8. Watch the test pass. (Green)*
[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

Hold on\! We're still in red. The exception shows a divide by zero error.

!mxu-divide-fail-2.png!


In this case, The test itself is broken. So, we need to fix the test. Replace the existing testDivide test method in MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests

{code:title=testDivide() refactored}
  <cffunction name="testDivide" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.divide(10,5);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>

{code}



*8 (Redux). Watch the test pass. (Green)*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]

Ahh\! Oh joy\! Oh rapture\! We're in the green ...

!mxu-divide-pass.png!

*9. Try the multiplication test on your own.*

[Click here for the full solution|http://mxunit.org/doc/tutorial/solution-1.zip].]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786577</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5309607</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?sourceid=navclient&ie=UTF-8&rlz=1T4SKPB_enRS374&q=mxunit+port+8500]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-04-30 11:54:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-04-30 11:54:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819338</id>
    <property name="body"><![CDATA[h2. *MXUnit TestResult output formats*

MXUnit provides a high level of flexibility by providing    test results in various output formats. Some of these are   preformatted, such as HTML, and others are _raw_ to   allow developers to generate customizable output formats.

The available TestResult output formats are:
# HTML Format
# ExtJs Format
# XML Format
# JUnit Report XML
# ColdFusion Query Format
# ColdFusion Array format
We will use the MXUnit example found in  the installation package mxunit/samples/MyTestSuite.cfm as the   base TestResults.    You may want to refer to your local TestResult API for details; e.g., [http://localhost:8500/mxunit/doc/api/]

The syntax for generating the various types of output is:

{code}
<cfset output = results.getResultsOutput( ['html', 'extjs', 'xml', 'junitxml', 'query', 'array'] ) />
<cfoutput>#output#<cfoutput>
{code}

Note: Since the above query and array types are complex data structures, you will get an error by trying to print those directly, as illustrated above. You most likely be computing other outputs if you use those types.

Following are simple examples of how to handle the various output types.

Note that in order to toggle between HTML and ExtJs format, pass in a URL.output=['html'|'extjs'] to your TestSuite

*1. HTML Format*
The HTML output is basic preformatted HTML:

{code}
<cfoutput>#results.getResultsOutput( 'html' )#<cfoutput>

{code}

*2. ExtJs Format*

ExtJs is a rich user interface set of APIs written in JavaScript.

{code}
<cfoutput>#results.getResultsOutput( 'extjs' )#<cfoutput>

{code}

*3. XML Format*
This is basic raw XML format that can be transformed into custom HTML output.


{code}
<cfoutput>#results.getResultsOutput( 'xml' )#<cfoutput>

{code}

*4. JUnit Report XML*
This is an XML format that is used by Ant's JunitReport Task. Also see the MXUnit Ant Task for usage information.

{code}
<cfoutput>#results.getResultsOutput( 'junitxml' )#<cfoutput>

{code}

5. ColdFusion Query Format
Returns a CF Query object that you can loop over as if it were a database query.

{code}
 <cfset q = results.getResultsOutput( 'query' ) />
 <cfoutput query="q">
   #q.component#, #q.testStatus# ...
 </cfoutput>


{code}

The available columns names: COMPONENT, CONTENT, DATETIME, DEBUG, ERROR, NUMBER, TESTNAME, TESTSTATUS, TIME, TRACE.
Summary data members ( q = results.getResultsOutput('query') ) :
q.testRuns = How many tests were run,
q.failures = How many tests fail,
q.errors = How many errors occurred,
q.successes = How many successes occurred,
q.totalExecutionTime = How long it took, in milliseconds, to run all the tests

{code}
<cfdump var="#results.getResultsOutput( 'query' )#" />
{code}

6. ColdFusion Array Format
This is how internal test results are stored within the TestResult component.
To access specific members, you can execute the following:

{code}
 <cfset a = results.getResultsOutput( 'array' ) />
 <cfoutput>
   #a[1]["component"]#, #a[1]["testStatus"]# ...
 </cfoutput>

{code}

{code}
<cfdump var="#results.getResultsOutput( 'array' )#" />

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786587</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819340</id>
    <property name="body"><![CDATA[h2. *MXUnit TestResult output formats*

MXUnit provides a high level of flexibility by providing    test results in various output formats. Some of these are   preformatted, such as HTML, and others are _raw_ to   allow developers to generate customizable output formats.

The available TestResult output formats are:
# HTML Format
# ExtJs Format
# XML Format
# JUnit Report XML
# ColdFusion Query Format
# ColdFusion Array format
We will use the MXUnit example found in  the installation package mxunit/samples/MyTestSuite.cfm as the   base TestResults.    You may want to refer to your local TestResult API for details; e.g., [http://localhost:8500/mxunit/doc/api/]

The syntax for generating the various types of output is:

{code}
<cfset output = results.getResultsOutput( ['html', 'extjs', 'xml', 'junitxml', 'query', 'array'] ) />
<cfoutput>#output#<cfoutput>
{code}

Note: Since the above query and array types are complex data structures, you will get an error by trying to print those directly, as illustrated above. You most likely be computing other outputs if you use those types.

Following are simple examples of how to handle the various output types.

Note that in order to toggle between HTML and ExtJs format, pass in a 

*1. HTML Format*
The HTML output is basic preformatted HTML:

{code}
<cfoutput>#results.getResultsOutput( 'html' )#<cfoutput>

{code}

*2. ExtJs Format*

ExtJs is a rich user interface set of APIs written in JavaScript.

{code}
<cfoutput>#results.getResultsOutput( 'extjs' )#<cfoutput>

{code}

*3. XML Format*
This is basic raw XML format that can be transformed into custom HTML output.


{code}
<cfoutput>#results.getResultsOutput( 'xml' )#<cfoutput>

{code}

*4. JUnit Report XML*
This is an XML format that is used by Ant's JunitReport Task. Also see the MXUnit Ant Task for usage information.

{code}
<cfoutput>#results.getResultsOutput( 'junitxml' )#<cfoutput>

{code}

5. ColdFusion Query Format
Returns a CF Query object that you can loop over as if it were a database query.

{code}
 <cfset q = results.getResultsOutput( 'query' ) />
 <cfoutput query="q">
   #q.component#, #q.testStatus# ...
 </cfoutput>


{code}

The available columns names: COMPONENT, CONTENT, DATETIME, DEBUG, ERROR, NUMBER, TESTNAME, TESTSTATUS, TIME, TRACE.
Summary data members ( q = results.getResultsOutput('query') ) :
q.testRuns = How many tests were run,
q.failures = How many tests fail,
q.errors = How many errors occurred,
q.successes = How many successes occurred,
q.totalExecutionTime = How long it took, in milliseconds, to run all the tests

{code}
<cfdump var="#results.getResultsOutput( 'query' )#" />
{code}

6. ColdFusion Array Format
This is how internal test results are stored within the TestResult component.
To access specific members, you can execute the following:

{code}
 <cfset a = results.getResultsOutput( 'array' ) />
 <cfoutput>
   #a[1]["component"]#, #a[1]["testStatus"]# ...
 </cfoutput>

{code}

{code}
<cfdump var="#results.getResultsOutput( 'array' )#" />

{code}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786589</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819335</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786584</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819334</id>
    <property name="body"><![CDATA[h2.


h2. *Getting Started with TestSuites*

A TestSuite is a collection of tests that logically fit together.

*Creating and Running a TestSuite*

MXUnit was built to make it as easy as possible to create tests and test suites.
For this tutorial we will _incrementally_ rebuild the MXUnit example found in  the installation package mxunit/samples/MyTestSuite.cfm.

The steps for creating and running a TestSuite are:
# Create a ColdFusion page to run the suite
# Create a TestSuite object
# Tell the TestSuite what tests to add
# run() the TestSuite
# Print the output
# Run the suite in your web browser

*1. Create a ColdFusion page to run this example*

Create an empty ColdFusion page and save it as MyTestSuite.cfm in/mxunit/doc/tutorial/mytests

*2. Create a TestSuite object*

Type the following code into the template:

{code:title=MyTestSuite.cfm}
<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
</cfscript>

{code}

*3. Tell the TestSuite what tests to add*

{code}
<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
 //Add all runnable methods in MyComponentTest
 testSuite.addAll("mxunit.samples.MyComponentTest");
 testSuite.addAll("mxunit.samples.MyOtherComponentTest"); //Identical to above
 //add explicit test cased (don't start with 'test').
 //Note you can add more than one at a time as a list
 testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");

</cfscript>

{code}

*4. Run the TestSuite*
{code}
<cfscript>
 testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
 testSuite.addAll("mxunit.samples.MyComponentTest");
 testSuite.addAll("mxunit.samples.MyOtherComponentTest");
 testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");
 //Run the tests and save everything in "results"
 results = testSuite.run();
</cfscript>
{code}

*5. Do something with the output*
{code}
<cfscript>
testSuite = createObject("component","mxunit.framework.TestSuite").TestSuite();
testSuite.addAll("mxunit.samples.MyComponentTest");
testSuite.addAll("mxunit.samples.MyOtherComponentTest"); //Identical to above
testSuite.add("mxunit.samples.MyOtherComponentTest","aTestFunctionThatDoesNotBeginWithTest,anotherTestFunctionThatDoesNotBeginWithTest");
results = testSuite.run();
//Now print the results. Simple\!
writeOutput(results.getResultsOutput('html')); //See next section for other output formats
</cfscript>

{code}



*6. Run the suite in your web browser*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyTestSuite.cfm|http://localhost:8500/mxunit/doc/tutorial/mytests/MyTestSuite.cfm]

You should see this:

!suites-1.png!


\[Next - [Overview of MXUnit output formats|http://mxunit.org/doc/index.cfm?doc=outputformats]\]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786583</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819337</id>
    <property name="body"><![CDATA[h2. *MXUnit TestResult output formats*

MXUnit provides a high level of flexibility by providing    test results in various output formats. Some of these are   preformatted, such as HTML, and others are _raw_ to   allow developers to generate customizable output formats.

The available TestResult output formats are:
# HTML Format
# ExtJs Format
# XML Format
# JUnit Report XML
# ColdFusion Query Format
# ColdFusion Array format
We will use the MXUnit example found in  the installation package mxunit/samples/MyTestSuite.cfm as the   base TestResults.    You may want to refer to your local TestResult API for details; e.g., http://localhost:8500/mxunit/doc/api/

The syntax for generating the various types of output is:]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786586</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819316</id>
    <property name="body"><![CDATA[h2. Getting Started with MXUnit

We built MXUnit to make it as easy as possible to write tests. The framework   is designed to facilitate, not get in the way. So, let's write some code.

*Setup*: [|http://mxunit.org/download.cfm]
* [Download|http://mxunit.org/download.cfm] and    install MXUnit directly under your webroot; e.g.; [http://localhost:8500/mxunit/]
* Create a directory in /mxunit/doc/tutorial and call it mytests

Following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

*1.Write the test* *{_}first{_}*.

Type the following code into a new file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests[|http://mxunit.org/doc/index.cfm?doc=firsttestcase#]

{code:title=MyComponentTest.cfc}
<cfcomponent displayname="MyComponentTest"  extends="mxunit.framework.TestCase">
  <cffunction name="testAdd" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.add(1,1);
    assertEquals(expected,actual);
   </cfscript>  
   </cffunction>
</cfcomponent>

{code}

*2. Watch the test fail.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this:

Believe it or not, this is good\! This error is exactly what we expect. This tells us that our component, MyComponent, does not exist.

*3. Write the component.*

Type the following code into a new file called MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests[|http://mxunit.org/doc/index.cfm?doc=firsttestcase#]

{code:title=MyComponent.cfc}
<cfcomponent displayname="MyComponent" >
  <cffunction name="add" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1+num2>
  </cffunction>
</cfcomponent>

{code}

*4. Watch the test pass.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
You should see this:

\[[Next - More TestCases|http://mxunit.org/doc/index.cfm?doc=secondtestcase]\]

----
[http://mxunit.org/license.txt]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786562</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819314</id>
    <property name="body"><![CDATA[h2. Getting Started with MXUnit

We built MXUnit to make it as easy as possible to write tests. The framework   is designed to facilitate, not get in the way. So, let's write some code.

*Setup*: [Download|http://mxunit.org/download.cfm] and    install MXUnit directly under your webroot; e.g.; http://localhost:8500/mxunit/  Create a directory in /mxunit/doc/tutorial and call it mytests Following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

*1.Write the test* *{_}first{_}*.  Type the following code into a new file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests[view plain|http://mxunit.org/doc/index.cfm?doc=firsttestcase#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=firsttestcase#][print|http://mxunit.org/doc/index.cfm?doc=firsttestcase#][?|http://mxunit.org/doc/index.cfm?doc=firsttestcase#]
# <cfcomponent&nbsp;displayname="MyComponentTest"&nbsp;&nbsp;extends="mxunit.framework.TestCase">
# &nbsp;&nbsp;<cffunction&nbsp;name="testAdd"&nbsp;access="public"&nbsp;returntype="void">
# &nbsp;&nbsp;<cfscript>
# &nbsp;&nbsp;&nbsp;&nbsp;mycomponent&nbsp;=&nbsp;createObject("component","MyComponent");
# &nbsp;&nbsp;&nbsp;&nbsp;expected&nbsp;=&nbsp;2;
# &nbsp;&nbsp;&nbsp;&nbsp;actual&nbsp;=&nbsp;mycomponent.add(1,1);
# &nbsp;&nbsp;&nbsp;&nbsp;assertEquals(expected,actual);
# &nbsp;&nbsp;&nbsp;</cfscript>
# &nbsp;&nbsp;&nbsp;&nbsp;</cffunction>
# </cfcomponent>&nbsp;&nbsp;<cfcomponent displayname="MyComponentTest"  extends="mxunit.framework.TestCase">
  <cffunction name="testAdd" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.add(1,1);
    assertEquals(expected,actual);
   </cfscript>
	</cffunction>
</cfcomponent>

*2. Watch the test fail.*[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this:
Believe it or not, this is good\! This error is exaclty what we expect. This tells us that our component,MyComponent, does not exist. *3. Write the component.*Type the following code into a new file called MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests[view plain|http://mxunit.org/doc/index.cfm?doc=firsttestcase#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=firsttestcase#][print|http://mxunit.org/doc/index.cfm?doc=firsttestcase#][?|http://mxunit.org/doc/index.cfm?doc=firsttestcase#]
# <cfcomponent&nbsp;displayname="MyComponent"&nbsp;>
# &nbsp;&nbsp;<cffunction&nbsp;name="add"&nbsp;access="public"&nbsp;returntype="numeric">
# &nbsp;&nbsp;&nbsp;&nbsp;<cfargument&nbsp;name="num1"&nbsp;type="numeric"&nbsp;/>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfargument&nbsp;name="num2"&nbsp;type="numeric"&nbsp;/>
# &nbsp;&nbsp;&nbsp;&nbsp;<cfreturn&nbsp;num1+num2>
# &nbsp;&nbsp;&nbsp;&nbsp;</cffunction>
# </cfcomponent>&nbsp;&nbsp;<cfcomponent displayname="MyComponent" >
  <cffunction name="add" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1+num2>
	</cffunction>
</cfcomponent>

*4. Watch the test pass.*[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
You should see this:
\[[Next - More TestCases|http://mxunit.org/doc/index.cfm?doc=secondtestcase]\]

----
[|http://mxunit.org/license.txt]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819324</id>
    <property name="body"><![CDATA[h2. More MXUnit Test Cases

For this section we will add to our [first TestCase|http://mxunit.org/doc/getting-started.html].   We will add more basic math functions to complete a our TestCases: Subtraction, Multiplication, and Division.

Again, following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

Note that this rhythm is referred to as Red-Refactor-Green. This means that the   first step is failure and is signified by {color:red}{*}Red{*}{color}. The second step is to [Refactor|http://www.refactoring.com/] the code. The last step is   to make sure the test passes, which is indicated by {color:green}{*}Green{*}{color}

*1.Write the test* *{_}first{_}*.  Type the following code into your existing file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests[view plain|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][print|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][?|http://mxunit.org/doc/index.cfm?doc=secondtestcase#]
# <cffunction&nbsp;name="testSubtract"&nbsp;access="public"&nbsp;returntype="void">
# <cfscript>
# &nbsp;&nbsp;mycomponent&nbsp;=&nbsp;createObject("component","MyComponent");
# &nbsp;&nbsp;expected&nbsp;=&nbsp;5;
# &nbsp;&nbsp;actual&nbsp;=&nbsp;mycomponent.subtract(10,5);
# &nbsp;&nbsp;assertEquals(expected,actual);
# &nbsp;</cfscript>
# &nbsp;</cffunction>&nbsp;&nbsp;  <cffunction name="testSubtract" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 5;
    actual = mycomponent.subtract(10,5);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>
*2. Watch the test fail. (Red)*[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this:
Again, this error is exactly what we expect. This tells us that the subtract method does not exist.

*3. Refactor the component. (Refactor)*Type the following code into MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests[view plain|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][print|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][?|http://mxunit.org/doc/index.cfm?doc=secondtestcase#]
# <cffunction&nbsp;name="subtract"&nbsp;access="public"&nbsp;returntype="numeric">
# &nbsp;&nbsp;<cfargument&nbsp;name="num1"&nbsp;type="numeric"&nbsp;/>
# &nbsp;&nbsp;<cfargument&nbsp;name="num2"&nbsp;type="numeric"&nbsp;/>
# &nbsp;&nbsp;<cfreturn&nbsp;num1-num2>
# </cffunction>&nbsp;&nbsp;  <cffunction name="subtract" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1-num2>
  </cffunction>

*4. Watch the test pass. (Green)*[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
You should see this:
*5. Now, let's do something interesting with Division - divide by zero.*Type the following code into your existing file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests[view plain|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][print|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][?|http://mxunit.org/doc/index.cfm?doc=secondtestcase#]
# <cffunction&nbsp;name="testDivide"&nbsp;access="public"&nbsp;returntype="void">
# <cfscript>
# &nbsp;&nbsp;mycomponent&nbsp;=&nbsp;createObject("component","MyComponent");
# &nbsp;&nbsp;expected&nbsp;=&nbsp;2;
# &nbsp;&nbsp;actual&nbsp;=&nbsp;mycomponent.divide(10,0);
# &nbsp;&nbsp;assertEquals(expected,actual);
# &nbsp;</cfscript>
# &nbsp;</cffunction>&nbsp;&nbsp;  <cffunction name="testDivide" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.divide(10,0);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>
*6. Watch the test fail. (Red)*[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
You should see this:
This tells us that the divide method does not exist.

*7. Refactor the component. (Refactor)*Type the following code into MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests[view plain|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][print|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][?|http://mxunit.org/doc/index.cfm?doc=secondtestcase#]
# <cffunction&nbsp;name="divide"&nbsp;access="public"&nbsp;returntype="numeric">
# &nbsp;&nbsp;<cfargument&nbsp;name="num1"&nbsp;type="numeric"&nbsp;/>
# &nbsp;&nbsp;<cfargument&nbsp;name="num2"&nbsp;type="numeric"&nbsp;/>
# &nbsp;&nbsp;<cfreturn&nbsp;num1/num2>
# </cffunction>&nbsp;&nbsp;  <cffunction name="divide" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1/num2>
  </cffunction>

*8. Watch the test pass. (Green)*[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Hold on\! We're still in red. The exception shows a divide by zero error.
In this case, The test itself is broken. So, we need to fix the test. Replace the existing testDivide test method in MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests[view plain|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][copy to clipboard|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][print|http://mxunit.org/doc/index.cfm?doc=secondtestcase#][?|http://mxunit.org/doc/index.cfm?doc=secondtestcase#]
# <cffunction&nbsp;name="testDivide"&nbsp;access="public"&nbsp;returntype="void">
# <cfscript>
# &nbsp;&nbsp;mycomponent&nbsp;=&nbsp;createObject("component","MyComponent");
# &nbsp;&nbsp;expected&nbsp;=&nbsp;2;
# &nbsp;&nbsp;actual&nbsp;=&nbsp;mycomponent.divide(10,5);
# &nbsp;&nbsp;assertEquals(expected,actual);
# &nbsp;</cfscript>
# &nbsp;</cffunction>&nbsp;&nbsp;  <cffunction name="testDivide" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.divide(10,5);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>
*8 (Redux). Watch the test pass. (Green)*[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Ahh\! Oh joy\! Oh rapture\! We're in the green ...

*9. Try the multiplication test on your own.*[Click here for the full solution|http://mxunit.org/doc/tutorial/solution-1.zip].]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786571</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5309563</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.gr/search?hl=el&q=confluence+tutorial&start=50&sa=N]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-04-28 08:27:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-04-28 08:27:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819322</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786569</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819320</id>
    <property name="body"><![CDATA[h2. Getting Started with MXUnit

We built MXUnit to make it as easy as possible to write tests. The framework   is designed to facilitate, not get in the way. So, let's write some code.

*Setup*: [http://mxunit.org/download.cfm]
* [Download|http://mxunit.org/download.cfm] and    install MXUnit directly under your webroot; e.g.; [http://localhost:8500/mxunit/]
* Create a directory in /mxunit/doc/tutorial and call it mytests

Following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

*1.Write the test* *{_}first{_}*.

Type the following code into a new file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests[http://mxunit.org/doc/index.cfm?doc=firsttestcase#]

{code:title=MyComponentTest.cfc}<cfcomponent displayname="MyComponentTest"  extends="mxunit.framework.TestCase">
  <cffunction name="testAdd" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.add(1,1);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>
</cfcomponent>

{code}{*}2. Watch the test fail.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this:

!mx-testfail-1.png!

Believe it or not, this is good\! This error is exactly what we expect. This tells us that our component, MyComponent, does not exist.

*3. Write the component.*

Type the following code into a new file called MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests[http://mxunit.org/doc/index.cfm?doc=firsttestcase#]

{code:title=MyComponent.cfc}<cfcomponent displayname="MyComponent" >
  <cffunction name="add" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1+num2>
  </cffunction>
</cfcomponent>

{code}{*}4. Watch the test pass.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
You should see this:


!mx-testpass-1.png!

\[[Next - More TestCases|default:Getting Started -- More Test Cases][|http://mxunit.org/doc/index.cfm?doc=secondtestcase]\]

----
[http://mxunit.org/license.txt]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786567</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819318</id>
    <property name="body"><![CDATA[h2. Getting Started with MXUnit

We built MXUnit to make it as easy as possible to write tests. The framework   is designed to facilitate, not get in the way. So, let's write some code.

*Setup*: [http://mxunit.org/download.cfm]
* [Download|http://mxunit.org/download.cfm] and    install MXUnit directly under your webroot; e.g.; [http://localhost:8500/mxunit/]
* Create a directory in /mxunit/doc/tutorial and call it mytests

Following Kent Beck's Test Driven Development (TDD) we will follow this simple method:
# Write the test _first_
# Watch the test fail
# Write the component
# Watch the test pass

*1.Write the test* *{_}first{_}*.

Type the following code into a new file called MyComponentTest.cfc and save it to /mxunit/doc/tutorial/mytests[http://mxunit.org/doc/index.cfm?doc=firsttestcase#]

{code:title=MyComponentTest.cfc}<cfcomponent displayname="MyComponentTest"  extends="mxunit.framework.TestCase">
  <cffunction name="testAdd" access="public" returntype="void">
  <cfscript>
    mycomponent = createObject("component","MyComponent");
    expected = 2;
    actual = mycomponent.add(1,1);
    assertEquals(expected,actual);
   </cfscript>
   </cffunction>
</cfcomponent>

{code}
*2. Watch the test fail.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
Change the server name and port as needed.
You should see this:

!mx-testfail-1.png!

Believe it or not, this is good\! This error is exactly what we expect. This tells us that our component, MyComponent, does not exist.

*3. Write the component.*

Type the following code into a new file called MyComponent.cfc and save it to /mxunit/doc/tutorial/mytests[http://mxunit.org/doc/index.cfm?doc=firsttestcase#]

{code:title=MyComponent.cfc}<cfcomponent displayname="MyComponent" >
  <cffunction name="add" access="public" returntype="numeric">
    <cfargument name="num1" type="numeric" />
    <cfargument name="num2" type="numeric" />
    <cfreturn num1+num2>
  </cffunction>
</cfcomponent>

{code}
*4. Watch the test pass.*

[http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote|http://localhost:8500/mxunit/doc/tutorial/mytests/MyComponentTest.cfc?method=runTestRemote]
You should see this:


!mx-testpass-1.png!

\[[Next - More TestCases|http://mxunit.org/doc/index.cfm?doc=secondtestcase]\]

----
[http://mxunit.org/license.txt]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786565</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819298</id>
    <property name="body"><![CDATA[h2. *Installing the MXUnit Framework*

This should be the easiest part\! Download, unzip, and test ...
1. [Download|http://mxunit.org/download.cfm] the latest version ... !install-download.png!


2. Unzip to your webroot; e.g., C:\Inetpub\wwwroot\
{color:darkred}{*}Note:*{color} The MXUnit framework can exist in any ColdFusion context -        in the webroot or in the custom tags.
{color:darkred}{*}However{*}{color},        The examples assume installation directly under the webroot. !install-unzip.png!


3. Test the install by pointing your web browser to the installation; e.g., [http://localhost:8500/mxunit/index.cfm|http://localhost:8500/mxunit/index.cfm] You should see this: !install-test.png!
4. Write some good clean code that works.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786540</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819297</id>
    <property name="body"><![CDATA[h2. *Installing the MXUnit Framework*

This should be the easiest part\! Download, unzip, and test ...
1. [Download|http://mxunit.org/download.cfm] the latest version ...


2. Unzip to your webroot; e.g., C:\Inetpub\wwwroot\
{color:darkred}{*}Note:*{color} The MXUnit framework can exist in any ColdFusion context -        in the webroot or in the custom tags.
{color:darkred}{*}However{*}{color},        The examples assume installation directly under the webroot.


3. Test the install by pointing your web browser to the installation; e.g., [http://localhost:8500/mxunit/index.cfm|http://localhost:8500/mxunit/index.cfm] You should see this:
4. Write some good clean code that works.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786539</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819295</id>
    <property name="body"><![CDATA[h2. *Installing the MXUnit Framework*

This should be the easiest part\! Download, unzip, and test ...
#  [Download|http://mxunit.org/download.cfm] the latest version ...


# Unzip to your webroot; e.g., C:\Inetpub\wwwroot\
{color:darkred}{*}Note:*{color} The MXUnit framework can exist in any ColdFusion context -        in the webroot or in the custom tags.
{color:darkred}{*}However{*}{color},        The examples assume installation directly under the webroot.


# Test the install by pointing your web browser to the installation; e.g., [http://localhost:8500/mxunit/index.cfm|http://localhost:8500/mxunit/index.cfm] You should see this:
# Write some good clean code that works.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786537</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819309</id>
    <property name="body"><![CDATA[h2. *Installing the MXUnit Eclipse Plugin*

*Update Site URL:* http://mxunit.org/update


h3. Detailed Instructions

Doesn't get much easier\! Install, Configure, Run ...

*Installation*

1. Make sure the [MXUnit Framework|http://mxunit.org/doc/index.cfm?doc=installframework] is installed.

2. Get [Eclipse|http://www.eclipse.org/] if you haven't already

3. In Eclipse, go to Help > Software Updates > Find and Install !plugin-install-1.png!

4. Select the "Search for new features" radio button. Click Next !plugin-install-2.png!

5. Click the "New Remote Site" button.

 !plugin-install-3.png!

6. Add the url [http://mxunit.org/update] to the URL field. Give it any Name; e.g, MXUnit Plugin. Click OK.


 !plugin-install-4.png!

7. Select All features to be installed. Click Next.


 !plugin-install-5.png!

8. Accept License Agreement. Click Next.


 !plugin-install-6.png!

9. Click Finish on the Install Dialogue.


 !plugin-install-7.png!

10. The plugin will download ...


 !plugin-install-8.png!

11. Click Install All.


 !plugin-install-9.png!

12. Allow the plugin to install ...


 !plugin-install-10.png!

13. Click Yes when prompted to restart Eclipse ...


 !plugin-install-11.png!

\[Next - [Configure and Test the Plugin|Configure and Test the Plugin]\]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786554</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819308</id>
    <property name="body"><![CDATA[h2.

[Install / Update|Eclipse Plugin -- Install]

[Configure and Test|default:Configure and Test the Plugin]


[Keyboard Shortcuts|default:Eclipse Plugin Keyboard Shortcuts]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786553</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819304</id>
    <property name="body"><![CDATA[h2. *Installing the MXUnit Framework*

This should be the easiest part\! Download, unzip, and test ...
1. [Download|http://mxunit.org/download.cfm] the latest version ... 


!install-download.png!


2. Unzip to your webroot; e.g., C:\Inetpub\wwwroot\
{color:darkred}{*}Note:*{color} The MXUnit framework can exist in any ColdFusion context -        in the webroot or in the custom tags.
{color:darkred}{*}However{*}{color},        The examples assume installation directly under the webroot. 

!install-unzip.png!


3. Test the install by pointing your web browser to the installation; e.g., [http://localhost:8500/mxunit/index.cfm|http://localhost:8500/mxunit/index.cfm] You should see this:

 !install-test.png!


4. Write some good clean code that works.]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786547</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819302</id>
    <property name="body"><![CDATA[<center>

	<!-- the comment and script is used to workaround the KB912945 patch -->
	<!--[if gte IE 6]> <comment id="to_be_rewritten"> <![endif]-->
	<OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" WIDTH="718" HEIGHT="541" id="movie">
	<PARAM NAME=movie VALUE="mxunit-install3.swf"> 
	<PARAM NAME=quality VALUE=high>
	<PARAM NAME=bgcolor VALUE=#FFFFFF>
	<EMBED src="mxunit-install3.swf" quality=high bgcolor=#FFFFFF WIDTH="718" HEIGHT="541" NAME="movie" ALIGN="" TYPE="application/x-shockwave-flash" PLUGINSPAGE="http://www.macromedia.com/go/getflashplayer"></EMBED>
	</OBJECT>
	</comment><script language="Javascript" src="ieupdate.js"></script>

</center> ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786545</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5309533</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.co.in/url?sa=t&source=web&ct=res&cd=8&ved=0CCEQFjAH&url=http%3A%2F%2Fwww.fuseboxframework.org%2Fpages%2Fviewpage.action%3FpageId%3D5341338&rct=j&q=coldfusion++mxunit+ant&ei=LfXWS-T7AY2cnQPojbGbCA&usg=AFQjCNGDWVfp4A2KTOdBsBAYxFvzzNheCg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341338</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-04-27 14:32:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-04-27 14:32:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819369</id>
    <property name="body"><![CDATA[This is the home of the MXUnit Public Wiki space.

How can we get this to appear as the default when calling wiki.mxunit.org?

The idea, maybe, is that this would be the public home for tech docs, blogs, musings, "the book", etc. Maybe use feedburner to publish the various parts ... content taxonomies?

mxunit.org may still be the landing point, maybe make static html pages for blog, wiki, support, etc. This would allow for google webmaster tools to create a site map.





{section}



{column:width=60%}

{recently-updated}
{column}
{column:width=5%}



{column}
{column:width=35%}

h6. Navigate space
{pagetreesearch}
{pagetree}
{column}
{section}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786619</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4718637</id>
    <property name="body"><![CDATA[h2. Custom Assertions - How To

Sometimes you need complex and/or repetitive assertions. This can put a damper on any TDD effort. So, we provide you an easy way to add custom assertions to your tests without having to change the mxunit core.

The steps for creating your custom assertion are as follows:
# Write a test for your assertion
# Write the assertion
# Decide how you want to load it: Always or only on selected tests.

Assertion Rules:

# Your assertion will need to throw mxunit.exception.AssertionFailedError or use an existing     assertion that throws this exception.
# If you want to have optional first or last parameter message, you will need to call normalizeArguments(arguments) in your code.

*Custom Assertion Example:* Say you need to frequently validate email addresses. You can do this with a pretty regular expression such as this :
{noformat}
^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$

{noformat}

The code for this might look like:
{code}
 <cffunctionname="testValidEmailAddress">
 <cfscript>
 varemailRegEx="^\[A-Za-z0-9\]((\[_\.\-\]?\[a-zA-Z0-9\]+)*)@(\[A-Za-z0-9\]+)((\[\.\-\]?\[a-zA-Z0-9\]+)*)\.(\[A-Za-z\]{2,})$";
 varemailAddress="somebody@somewhere.com";
 assertTrue(refind(emailRegEx,emailAddress)lt1,"Invalidemailaddressformat");
 </cfscript>
 </cffunction><cffunction name="testValidEmailAddress">
  <cfscript>
   var emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   var emailAddress = "somebody@somewhere.com";
   assertTrue(refind(emailRegEx,emailAddress) lt 1,"Invalid email address format");
  </cfscript>
</cffunction>
{code}
This is fine, but you could save yourself some typing and some Ctrl+C/Ctrl+V errors.  How about something that looks like this instead?

{code}
 <cffunctionname="testValidEmailAddress">
 <cfscript>
 varemailAddress="somebody@somewhere.com";
 assertIsValidEmail(emailAddress);
 </cfscript>
 </cffunction><cffunction name="testValidEmailAddress">
  <cfscript>
   var emailAddress = "somebody@somewhere.com";
   assertIsValidEmail(emailAddress);
  </cfscript>
</cffunction>
{code}

Much better\! And this has the added bonus of _not_ having to find a replace hundreds of complex regular expressions in your code; you would just do that in one place.
Here's how:


1. Write a test for your assertion:

{code}
 <cfscript>
 vargoodEmailAddress="somebody@somewhere.com";
 varbadEmailAddress="so~~/\/\/\/\/\~~m=+ebod$y@someplace.zombie";
 addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
 assertIsValidEmail(goodEmailAddress);
 try{
 //expectfailure
 assertIsValidEmail(badEmailAddress);
 }
 catch(mxunit.exception.AssertionFailedErrore){}
 </cfscript>
 </cffunction>
 
 </cfcomponent>
<cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >


<cffunction name="testAssertIsValidEmail">
  <cfscript>
    var goodEmailAddress = "somebody@somewhere.com";
    var badEmailAddress = "so ~~/\/\/\/\/\~~ m=+ebod$y@someplace.zombie";
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
    assertIsValidEmail(goodEmailAddress);
    try{
      //expect failure
      assertIsValidEmail(badEmailAddress);
    }
    catch(mxunit.exception.AssertionFailedError e){}
  </cfscript>
</cffunction>

</cfcomponent>
{code}

The above fails because we do not yet have ValidEmailAssertion written. *Note{*}the addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion") statement. This tells the MXUnit framework to load your assertion at runtime.

2. Write the assertion

{code}
 <cfcomponentname="ValidEmailAssertion">
 
 <cffunctionname="assertIsValidEmail"returntype="boolean">
 <cfargumentname="email"type="string"/>
 <cfargumentname="message"type="string"required="false"default="Emailaddressdoesnotappearvalid."/>
 
 <cfscript>
 arguments=normalizeArguments(arguments);
 emailRegEx="^\[A-Za-z0-9\]((\[_\.\-\]?\[a-zA-Z0-9\]+)*)@(\[A-Za-z0-9\]+)((\[\.\-\]?\[a-zA-Z0-9\]+)*)\.(\[A-Za-z\]{2,})$";
 actual=refind(emailRegEx,arguments.email);
 </cfscript>
 
 <cfifactuallt1>
 <cfthrowtype="mxunit.exception.AssertionFailedError"message="arguments.message"/>
 </cfif>
 <cfreturntrue/>
 </cffunction>
 
 </cfcomponent><cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   </cfscript>

  <cfif actual lt 1>
  <cfthrow type="mxunit.exception.AssertionFailedError" message="arguments.message" />
  </cfif>
  <cfreturn true />
</cffunction>

</cfcomponent>
{code}


You could also leverage existing assertions and write the following instead:

{code}
 <cfcomponentname="ValidEmailAssertion">
 
 <cffunctionname="assertIsValidEmail"returntype="boolean">
 <cfargumentname="email"type="string"/>
 <cfargumentname="message"type="string"required="false"default="Emailaddressdoesnotappearvalid."/>
 
 <cfscript>
 arguments=normalizeArguments(arguments);
 emailRegEx="^\[A-Za-z0-9\]((\[_\.\-\]?\[a-zA-Z0-9\]+)*)@(\[A-Za-z0-9\]+)((\[\.\-\]?\[a-zA-Z0-9\]+)*)\.(\[A-Za-z\]{2,})$";
 actual=refind(emailRegEx,arguments.email);
 assertTrue(refind(emailRegEx,arguments.email)lt1,arguments.message);
 </cfscript>
 
 <cfreturntrue/>
 </cffunction>
 
 </cfcomponent><cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   assertTrue(refind(emailRegEx,arguments.email) lt 1, arguments.message);
  </cfscript>

   <cfreturn true />
</cffunction>

</cfcomponent>
{code}

Note the arguments = normalizeArguments(arguments) statement. This allows for the flexibility if you want to be able to pass the message parameter first or last.

Ok. Now when we run our test, we're in the green. Our new assertion works as expected. Wahoo\!

3. Decide how you want to load the new code. The options are for each test or for{_}all_ tests. You've already seen how to load custom assertions in your code. This can also be done in setUp().

{code}
 <cfcomponentname="ValidEmailAssertionTest"extends="mxunit.framework.TestCase">
 ...
 <cffunctionname="setUp">
 <cfscript>
 addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
 </cfscript>
 </cffunction>
 
 </cfcomponent><cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >
 ...
<cffunction name="setUp">
  <cfscript>
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
  </cfscript>
</cffunction>
{code}

What if you want your new assertion to _always_ be available? Edit the mxunit-config.xml file located in {mxunit install}/mxunit/framework/ Add the following line :
 <?xmlversion="1.0"encoding="UTF-8"?>
 <mxunit-config>
 ...
 <config-elementtype="assertionExtension"path="mxunit.framework.ext.ValidEmailAssertion"autoload="true"override="false"/>
 ...
 </mxunit-config> 
]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4685871</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4718635</id>
    <property name="body"><![CDATA[h2. Custom Assertions - How To

Sometimes you need complex and/or repetitive assertions. This can put a damper on any TDD effort. So, we provide you an easy way to add custom assertions to your tests without having to change the mxunit core.

The steps for creating your custom assertion are as follows:
# Write a test for your assertion
# Write the assertion
# Decide how you want to load it: Always or only on selected tests.

Assertion Rules:

# Your assertion will need to throw mxunit.exception.AssertionFailedError or use an existing     assertion that throws this exception.
# If you want to have optional first or last parameter message, you will need to call normalizeArguments(arguments) in your code.

*Custom Assertion Example:* Say you need to frequently validate email addresses. You can do this with a pretty regular expression such as this :
^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$The code for this might look like:[|http://mxunit.org/doc/index.cfm?doc=customassertions#][
|http://mxunit.org/doc/index.cfm?doc=customassertions#]
# <cffunction&nbsp;name="testValidEmailAddress">&nbsp;&nbsp;
# &nbsp;&nbsp;<cfscript>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;var&nbsp;emailRegEx&nbsp;=&nbsp;"^\[A-Za-z0-9\]((\[_\.\-\]?\[a-zA-Z0-9\]+)*)@(\[A-Za-z0-9\]+)((\[\.\-\]?\[a-zA-Z0-9\]+)*)\.(\[A-Za-z\]{2,})$";&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;var&nbsp;emailAddress&nbsp;=&nbsp;"somebody@somewhere.com";&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;assertTrue(refind(emailRegEx,emailAddress)&nbsp;lt&nbsp;1,"Invalid&nbsp;email&nbsp;address&nbsp;format");&nbsp;&nbsp;
# &nbsp;&nbsp;</cfscript>&nbsp;&nbsp;
# </cffunction>&nbsp;&nbsp;<cffunction name="testValidEmailAddress">
  <cfscript>
   var emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   var emailAddress = "somebody@somewhere.com";
   assertTrue(refind(emailRegEx,emailAddress) lt 1,"Invalid email address format");
  </cfscript>
</cffunction>
This is fine, but you could save yourself some typing and some Ctrl+C/Ctrl+V errors.  How about something that looks like this instead?[|http://mxunit.org/doc/index.cfm?doc=customassertions#][
|http://mxunit.org/doc/index.cfm?doc=customassertions#]
# <cffunction&nbsp;name="testValidEmailAddress">&nbsp;&nbsp;
# &nbsp;&nbsp;<cfscript>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;var&nbsp;emailAddress&nbsp;=&nbsp;"somebody@somewhere.com";&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;assertIsValidEmail(emailAddress);&nbsp;&nbsp;
# &nbsp;&nbsp;</cfscript>&nbsp;&nbsp;
# </cffunction>&nbsp;&nbsp;<cffunction name="testValidEmailAddress">
  <cfscript>
   var emailAddress = "somebody@somewhere.com";
   assertIsValidEmail(emailAddress);
  </cfscript>
</cffunction>
Much better\! And this has the added bonus of _not_ having to find a replace hundreds of complex regular expressions in your code; you would just do that in one place.
Here's how:


1. Write a test for your assertion:[|http://mxunit.org/doc/index.cfm?doc=customassertions#][
|http://mxunit.org/doc/index.cfm?doc=customassertions#]
# <cfcomponent&nbsp;name="ValidEmailAssertionTest"&nbsp;extends="mxunit.framework.TestCase"&nbsp;>&nbsp;&nbsp;
# &nbsp;&nbsp;
# <cffunction&nbsp;name="testAssertIsValidEmail">&nbsp;&nbsp;
# &nbsp;&nbsp;<cfscript>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;goodEmailAddress&nbsp;=&nbsp;"somebody@somewhere.com";&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;badEmailAddress&nbsp;=&nbsp;"so&nbsp;~~/\/\/\/\/\~~&nbsp;m=+ebod$y@someplace.zombie";&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;assertIsValidEmail(goodEmailAddress);&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;try{&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//expect&nbsp;failure&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertIsValidEmail(badEmailAddress);&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;catch(mxunit.exception.AssertionFailedError&nbsp;e){}&nbsp;&nbsp;
# &nbsp;&nbsp;</cfscript>&nbsp;&nbsp;
# </cffunction>&nbsp;&nbsp;
# &nbsp;&nbsp;
# </cfcomponent>&nbsp;&nbsp;<cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >

<cffunction name="testAssertIsValidEmail">
  <cfscript>
    var goodEmailAddress = "somebody@somewhere.com";
    var badEmailAddress = "so ~~/\/\/\/\/\~~ m=+ebod$y@someplace.zombie";
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
    assertIsValidEmail(goodEmailAddress);
    try{
      //expect failure
      assertIsValidEmail(badEmailAddress);
    }
    catch(mxunit.exception.AssertionFailedError e){}
  </cfscript>
</cffunction>

</cfcomponent>
The above fails because we do not yet have ValidEmailAssertion written. *Note{*}the addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion") statement. This tells the MXUnit framework to load your assertion at runtime.

2. Write the assertion[|http://mxunit.org/doc/index.cfm?doc=customassertions#][
|http://mxunit.org/doc/index.cfm?doc=customassertions#]
# <cfcomponent&nbsp;name="ValidEmailAssertion"&nbsp;>&nbsp;&nbsp;
# &nbsp;&nbsp;
# <cffunction&nbsp;name="assertIsValidEmail"&nbsp;returntype="boolean"&nbsp;>&nbsp;&nbsp;
# &nbsp;&nbsp;<cfargument&nbsp;name="email"&nbsp;type="string"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<cfargument&nbsp;name="message"&nbsp;type="string"&nbsp;required="false"&nbsp;default="Email&nbsp;address&nbsp;does&nbsp;not&nbsp;appear&nbsp;valid."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<cfscript>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;arguments&nbsp;=&nbsp;normalizeArguments(arguments);&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;emailRegEx&nbsp;=&nbsp;"^\[A-Za-z0-9\]((\[_\.\-\]?\[a-zA-Z0-9\]+)*)@(\[A-Za-z0-9\]+)((\[\.\-\]?\[a-zA-Z0-9\]+)*)\.(\[A-Za-z\]{2,})$";&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;actual&nbsp;=&nbsp;refind(emailRegEx,arguments.email);&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;</cfscript>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<cfif&nbsp;actual&nbsp;lt&nbsp;1>&nbsp;&nbsp;
# &nbsp;&nbsp;<cfthrow&nbsp;type="mxunit.exception.AssertionFailedError"&nbsp;message="#arguments.message#"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;</cfif>&nbsp;&nbsp;
# &nbsp;&nbsp;<cfreturn&nbsp;true&nbsp;/>&nbsp;&nbsp;
# </cffunction>&nbsp;&nbsp;
# &nbsp;&nbsp;
# </cfcomponent>&nbsp;&nbsp;<cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   </cfscript>

  <cfif actual lt 1>
  <cfthrow type="mxunit.exception.AssertionFailedError" message="#arguments.message#" />
  </cfif>
  <cfreturn true />
</cffunction>

</cfcomponent>
You could also leverage existing assertions and write the following instead:[|http://mxunit.org/doc/index.cfm?doc=customassertions#][
|http://mxunit.org/doc/index.cfm?doc=customassertions#]
# <cfcomponent&nbsp;name="ValidEmailAssertion"&nbsp;>&nbsp;&nbsp;
# &nbsp;&nbsp;
# <cffunction&nbsp;name="assertIsValidEmail"&nbsp;returntype="boolean"&nbsp;>&nbsp;&nbsp;
# &nbsp;&nbsp;<cfargument&nbsp;name="email"&nbsp;type="string"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;<cfargument&nbsp;name="message"&nbsp;type="string"&nbsp;required="false"&nbsp;default="Email&nbsp;address&nbsp;does&nbsp;not&nbsp;appear&nbsp;valid."&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;<cfscript>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;arguments&nbsp;=&nbsp;normalizeArguments(arguments);&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;emailRegEx&nbsp;=&nbsp;"^\[A-Za-z0-9\]((\[_\.\-\]?\[a-zA-Z0-9\]+)*)@(\[A-Za-z0-9\]+)((\[\.\-\]?\[a-zA-Z0-9\]+)*)\.(\[A-Za-z\]{2,})$";&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;actual&nbsp;=&nbsp;refind(emailRegEx,arguments.email);&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;assertTrue(refind(emailRegEx,arguments.email)&nbsp;lt&nbsp;1,&nbsp;arguments.message);&nbsp;&nbsp;
# &nbsp;&nbsp;</cfscript>&nbsp;&nbsp;
# &nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;<cfreturn&nbsp;true&nbsp;/>&nbsp;&nbsp;
# </cffunction>&nbsp;&nbsp;
# &nbsp;&nbsp;
# </cfcomponent>&nbsp;&nbsp;<cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   assertTrue(refind(emailRegEx,arguments.email) lt 1, arguments.message);
  </cfscript>

   <cfreturn true />
</cffunction>

</cfcomponent>
Note the arguments = normalizeArguments(arguments) statement. This allows for the flexibility if you want to be able to pass the message parameter first or last.

Ok. Now when we run our test, we're in the green. Our new assertion works as expected. Wahoo\!

3. Decide how you want to load the new code. The options are for each test or for{_}all_ tests. You've already seen how to load custom assertions in your code. This can also be done in setUp().[|http://mxunit.org/doc/index.cfm?doc=customassertions#][
|http://mxunit.org/doc/index.cfm?doc=customassertions#]
# <cfcomponent&nbsp;name="ValidEmailAssertionTest"&nbsp;extends="mxunit.framework.TestCase"&nbsp;>&nbsp;&nbsp;
# &nbsp;...&nbsp;&nbsp;
# <cffunction&nbsp;name="setUp">&nbsp;&nbsp;
# &nbsp;&nbsp;<cfscript>&nbsp;&nbsp;
# &nbsp;&nbsp;&nbsp;&nbsp;addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");&nbsp;&nbsp;
# &nbsp;&nbsp;</cfscript>&nbsp;&nbsp;
# </cffunction>&nbsp;&nbsp;
# &nbsp;&nbsp;
# </cfcomponent>&nbsp;&nbsp;<cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >
 ...
<cffunction name="setUp">
  <cfscript>
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
  </cfscript>
</cffunction>

</cfcomponent>
What if you want your new assertion to _always_ be available? Edit the mxunit-config.xml file located in {mxunit install}/mxunit/framework/ Add the following line :[|http://mxunit.org/doc/index.cfm?doc=customassertions#][
|http://mxunit.org/doc/index.cfm?doc=customassertions#]
# <?xml&nbsp;version="1.0"&nbsp;encoding="UTF-8"&nbsp;?>&nbsp;&nbsp;
# &nbsp;<mxunit-config>&nbsp;&nbsp;
# &nbsp;&nbsp;...&nbsp;&nbsp;
# &nbsp;&nbsp;<config-element&nbsp;type="assertionExtension"&nbsp;path="mxunit.framework.ext.ValidEmailAssertion"&nbsp;autoload="true"&nbsp;override="false"&nbsp;/>&nbsp;&nbsp;
# &nbsp;&nbsp;...&nbsp;&nbsp;
# &nbsp;</mxunit-config>&nbsp; ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4685869</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4718631</id>
    <property name="body"><![CDATA[This document outlines the core of unit testing, i.e. Assertions. Assertions are simple: You assert something, and if that assertion does not result in your expectation, the test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions. A single failed assertion means that any subsequent assertions in a test will not execute and thus you won't know if those assertions indicate further problems in your code.

Need an assertion you don't see here? [Roll your own ...|Custom Assertions]

Without further delay, our players, The Assertions:

h3. assertTrue(boolean condition \[,String message\])

assertTrue is one of the two "bread and butter" assertions in any testing framework. The philosophy is simple: you assert something to be true; if it's not, the test fails

{code:title=assertTrue()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertTrue( StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

assertTrue has an opposite, assertFalse:

h3. assertFalse(){*}(boolean condition \[, String message\])

{code:title=assertFalse}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertFalse( StructIsEmpty(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertTrue( StructIsEmpty(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>

{code}

h3. assertEquals{*}(any expected, any actual \[, String message\])

assertEquals is the other core assertion. Here, you're asserting that some result equals some expected result. This could be two numbers, two strings, two structs, whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals to compare any type of data.

{code:title=assertEquals()}<cffunction name="clearPrivilegesShouldClearPrivilegesFromObject">
	<cfset  obj = createObject("component","myObject")>
	<cfset obj.addPrivilege("EditUsers")>
	<cfset assertEquals(1, StructCount(obj.getPrivileges()),  "Guard assertion: Ensure we're starting out with privileges before testing clearPrivileges()")>
	<cfset  result = obj.clearPrivileges()>
	<cfset assertEquals(0, StructCount(obj.getPrivileges()), "clearPrivileges Should Have Emptied The Structure of privileges but didn't" )>
</cffunction>
{code}

h3. fail{*}(String message)

fail() is used to actively fail a test. It's useful when you're stubbing a test and you want to ensure it fails, like so:

{code:title=fail()}<cffunction name="addPrivilegeShouldHaveNoEffectIfPrivilegeExists">
 	<cfset fail("test not yet implemented")>
</cffunction>
{code}


It's also useful when you're testing an "error path", like so:

{code:title=fail() to test Error Paths}<cffunction name="addPrivilegesWithPunctuationShouldThrowError">
	<cfset var obj = createObject("component","myObject")>
	<cftry>
		<cfset obj.addPrivilege("Edit.User")>
		<cfset fail("Should not get here. Function under test should've thrown an error")>
	<cfcatch type="mxunit.exception.AssertionFailedError">
		<cfrethrow>
	</cfcatch>
	<cfcatch type="any"><!--- expect to get here ---></cfcatch>
	</cftry>
</cffunction>
{code}

h3. failNotEquals{*}(any value, any value2  \[,String message\])

Used to fail when two values do not equal. This doesn't perform any assertion... it's simply a convenience method for providing a specific type of failure message

{code:title=failNotEquals()}<cffunction name="demoFailNotEquals">
 	<cfset failNotEquals(myObject1,myOtherObject, "These should not have the same value")>
</cffunction>
{code}

h3. assertSame{*}(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail for arrays.
{code:title=assertSame()}<cffunction name="initShouldReturnSelf">
	<cfset var obj = createObject("component","myObject")>
	<cfset assertSame(obj,obj.init(), "These should be the same thang since init should return 'this'")>
</cffunction>
{code}

h3. assertNotSame{*}(any obj1, any obj2  \[,String message\])

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass for arrays.

{code:title=assertNotSame()}<cffunction name="newInstanceShouldNotReturnSelf">
	<cfset var obj = createObject("component","myObjectFactory")>
	<cfset assertNotSame(obj,obj.newInstance(), "These should not be the same thang since newInstance should return a new instance from the factory")>
</cffunction>
{code}

h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion.Note, that these are quite simple, can be easily implemented using the base assertions above, but are provided for convenience.

*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml located in /mxunit/framework/ directory. Simply remove or comment out these line:

{code:title=assertionExtension config-extension in mxunit-config.xml}	<config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true" override="false" />
	<config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false" />
	<config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false" />
{code}

h3. assertXPath{*}(String xpath, any data, \[String text\], \[String message\])

Searches data using xpath. If text is specified, it tries to match the exact text to  the xpath expression. Otherwise ,it returns true if any nodes are found that match the xpath expression. Note that, unlike most assertions, assertXPath returns an xml dom representation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this assertion returns true if any elements of the xpath expression are found. Not required. Defaults to ""
\[string message\]: The message to display when this assertion fails Not required. Defaults to The XPath expression, #arguments.xpath#, did not match the data.

{code:title=assertXPath()}
<cffunction name="testFindGoogleInTitle">
	<cfscript>
	nodes = assertXpath('/html/head/title', "http://google.com", "Google");
	debug(nodes);
	nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
	nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
	</cfscript>
</cffunction>
{code}

The above parses the results from urls and strings and searches the parsed results for the XPath expression.
Try it. Really, it works\!

h3. assertIsTypeOf{*}(component obj, String type)

Determines if obj is of type. type needs to be fully qualified.
{code:title=assertIsTypeOf()}
<cffunction name="demoAssertIsTypeOf">
  <cfset assertIsTypeOf(obj,"my.type.Of.Object")>
</cffunction>
{code}

h3. assertIsXMLDoc{*}(any xml \[, String message\])

Determines if xml is a valid XML DOM object.
{code:title=assertIsXMLDoc()}
<cffunction name="demoAssertIsXMLDoc">
  <cfset assertIsXMLDoc(xml)>
</cffunction>
{code}

h3. assertIsArray{*}(any obj1)

Determines if the obj1 is a valid array.
{code:title=assertIsArray()}
<cffunction name="demoAssertIsArray">
  <cfset assertIsArray(myObject1)>
</cffunction>
{code}

h3. assertIsDefined{*}(any obj1)

Determines if the obj1 has been defined in the available scope.
{code:title=assertIsDefined()}
<cffunction name="demoAssertIsDefined">
  <cfset assertIsDefined("myObject1")>
</cffunction>
{code}

h3. assertIsEmpty{*}(any obj1)

Determines if the obj1 is a 0 length string or NULL equivalent.
{code:title=assertIsEmpty()}
<cffunction name="demoAssertIsEmpty">
  <cfset assertIsEmpty(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyArray{*}(any obj1,\[String message\])

Determines if the obj1 is an array with no elements.
{code:title=assertIsEmptyArray()}
<cffunction name="demoAssertIsEmptyArray">
  <cfset assertIsEmptyArray(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyQuery{*}(any obj1,\[String message\])

Determines if the obj1 is a query with no rows.
{code:title=assertIsEmptyQuery()}
<cffunction name="demoAssertIsEmptyQuery">
  <cfset assertIsEmptyQuery(myObject1)>
</cffunction>
{code}

h3. assertIsEmptyStruct{*}(any obj1,\[String message\])

Determines if the obj1 is a struct with no keys or values.
{code:title=assertIsEmptyStruct()}
<cffunction name="demoAssertIsEmptyStruct">
  <cfset assertIsEmptyStruct(myObject1)>
</cffunction>
{code}

h3. assertIsQuery{*}(any q)

Determines if q is a valid ColdFusion query.
{code:title=assertIsQuery()}
<cffunction name="demoAssertIsQuery">
  <cfset assertIsQuery(q)>
</cffunction>
{code}

h3. assertIsStruct{*}(any obj)

Determines if obj is a valid ColdFusion structure.
{code:title=assertIsStruct()}
<cffunction name="demoAssertIsStruct">
  <cfset assertIsStruct(obj)>
</cffunction>
{code}

----
Need more? [Build your own ...|Custom Assertions]]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4685865</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4718625</id>
    <property name="body"><![CDATA[{mockup:balsamiq-test|1}

{section:border=false}

 {column:width=60%}
   h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world. 
    h6. Quick Links
      * [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
      * [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
      * [The MXUnit Blog|http://blog.mxunit.org]
      * [Download|http://mxunit.org/download.cfm]
      * [Eclipse Plugin Update Site|http://mxunit.org/update]
      * [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]

    h6. Support
      * [MXUnit Google Group|http://groups.google.com/group/mxunit]
      * [File a Bug|http://code.google.com/p/mxunit/issues/list]
     
    h6. Committers
       * Marc	Esher
       * Adam	Haskel
       * Mike	Henke
       * Randy	Merril
       * Mike	Rankin
       * Bill	Shelton 
       * Bob	Silverberg


 {column}

{column:width=5%}
 &nbsp;
{column}


{column:width=35%}
  h6. Navigate space
  {pagetreesearch}
  {pagetree:startDepth=3}
{column}

{section}

{recently-updated-dashboard:types=page,comment}




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4685858</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4718624</id>
    <property name="body"><![CDATA[{section:border=false}

 {column:width=60%}
   h5. MXUnit is a proven and robust test framework and Eclipse plugin used by the some of the best ColdFusion developers around the world. 
    h6. Quick Links
      * [Getting Started|http://wiki.fuseboxframework.com/display/default/Getting+Started]
      * [Installing The Eclipse Plugin|http://wiki.fuseboxframework.com/display/default/Install+the+Eclipse+Plugin]
      * [The MXUnit Blog|http://blog.mxunit.org]
      * [Download|http://mxunit.org/download.cfm]
      * [Eclipse Plugin Update Site|http://mxunit.org/update]
      * [SVN Source Code|http://mxunit.googlecode.com/svn/mxunit/trunk/]

    h6. Support
      * [MXUnit Google Group|http://groups.google.com/group/mxunit]
      * [File a Bug|http://code.google.com/p/mxunit/issues/list]
     
    h6. Committers
       * Marc	Esher
       * Adam	Haskel
       * Mike	Henke
       * Randy	Merril
       * Mike	Rankin
       * Bill	Shelton 
       * Bob	Silverberg


 {column}

{column:width=5%}
 &nbsp;
{column}


{column:width=35%}
  h6. Navigate space
  {pagetreesearch}
  {pagetree:startDepth=3}
{column}

{section}

{recently-updated-dashboard:types=page,comment}




]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4685857</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5309241</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.hn/url?sa=t&source=web&ct=res&cd=5&ved=0CBkQFjAE&url=http%3A%2F%2Fwww.fuseboxframework.org%2Fpages%2Fviewpage.action%3FpageId%3D786560&rct=j&q=tutorial+cfcomponent&ei=pHjES9bMF8H68AaG_onPDw&usg=AFQjCNGCxNqF5U8dPiDMPJJDuaYwsgj7Vw]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-04-13 16:35:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-04-13 16:35:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4718638</id>
    <property name="body"><![CDATA[h2. Custom Assertions - How To

Sometimes you need complex and/or repetitive assertions. This can put a damper on any TDD effort. So, we provide you an easy way to add custom assertions to your tests without having to change the mxunit core.

The steps for creating your custom assertion are as follows:
# Write a test for your assertion
# Write the assertion
# Decide how you want to load it: Always or only on selected tests.

Assertion Rules:

# Your assertion will need to throw mxunit.exception.AssertionFailedError or use an existing     assertion that throws this exception.
# If you want to have optional first or last parameter message, you will need to call normalizeArguments(arguments) in your code.

*Custom Assertion Example:* Say you need to frequently validate email addresses. You can do this with a pretty regular expression such as this :
{noformat}
^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$

{noformat}

The code for this might look like:
{code}
 <cffunctionname="testValidEmailAddress">
 <cfscript>
 varemailRegEx="^\[A-Za-z0-9\]((\[_\.\-\]?\[a-zA-Z0-9\]+)*)@(\[A-Za-z0-9\]+)((\[\.\-\]?\[a-zA-Z0-9\]+)*)\.(\[A-Za-z\]{2,})$";
 varemailAddress="somebody@somewhere.com";
 assertTrue(refind(emailRegEx,emailAddress)lt1,"Invalidemailaddressformat");
 </cfscript>
 </cffunction><cffunction name="testValidEmailAddress">
  <cfscript>
   var emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   var emailAddress = "somebody@somewhere.com";
   assertTrue(refind(emailRegEx,emailAddress) lt 1,"Invalid email address format");
  </cfscript>
</cffunction>
{code}
This is fine, but you could save yourself some typing and some Ctrl+C/Ctrl+V errors.  How about something that looks like this instead?

{code}
 <cffunctionname="testValidEmailAddress">
 <cfscript>
 varemailAddress="somebody@somewhere.com";
 assertIsValidEmail(emailAddress);
 </cfscript>
 </cffunction><cffunction name="testValidEmailAddress">
  <cfscript>
   var emailAddress = "somebody@somewhere.com";
   assertIsValidEmail(emailAddress);
  </cfscript>
</cffunction>
{code}

Much better\! And this has the added bonus of _not_ having to find a replace hundreds of complex regular expressions in your code; you would just do that in one place.
Here's how:


1. Write a test for your assertion:

{code}
 <cfscript>
 vargoodEmailAddress="somebody@somewhere.com";
 varbadEmailAddress="so~~/\/\/\/\/\~~m=+ebod$y@someplace.zombie";
 addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
 assertIsValidEmail(goodEmailAddress);
 try{
 //expectfailure
 assertIsValidEmail(badEmailAddress);
 }
 catch(mxunit.exception.AssertionFailedErrore){}
 </cfscript>
 </cffunction>

 </cfcomponent>
<cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >


<cffunction name="testAssertIsValidEmail">
  <cfscript>
    var goodEmailAddress = "somebody@somewhere.com";
    var badEmailAddress = "so ~~/\/\/\/\/\~~ m=+ebod$y@someplace.zombie";
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
    assertIsValidEmail(goodEmailAddress);
    try{
      //expect failure
      assertIsValidEmail(badEmailAddress);
    }
    catch(mxunit.exception.AssertionFailedError e){}
  </cfscript>
</cffunction>

</cfcomponent>
{code}

The above fails because we do not yet have ValidEmailAssertion written. *Note{*}the addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion") statement. This tells the MXUnit framework to load your assertion at runtime.

2. Write the assertion

{code}
 <cfcomponentname="ValidEmailAssertion">

 <cffunctionname="assertIsValidEmail"returntype="boolean">
 <cfargumentname="email"type="string"/>
 <cfargumentname="message"type="string"required="false"default="Emailaddressdoesnotappearvalid."/>

 <cfscript>
 arguments=normalizeArguments(arguments);
 emailRegEx="^\[A-Za-z0-9\]((\[_\.\-\]?\[a-zA-Z0-9\]+)*)@(\[A-Za-z0-9\]+)((\[\.\-\]?\[a-zA-Z0-9\]+)*)\.(\[A-Za-z\]{2,})$";
 actual=refind(emailRegEx,arguments.email);
 </cfscript>

 <cfifactuallt1>
 <cfthrowtype="mxunit.exception.AssertionFailedError"message="arguments.message"/>
 </cfif>
 <cfreturntrue/>
 </cffunction>

 </cfcomponent><cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   </cfscript>

  <cfif actual lt 1>
  <cfthrow type="mxunit.exception.AssertionFailedError" message="arguments.message" />
  </cfif>
  <cfreturn true />
</cffunction>

</cfcomponent>
{code}


You could also leverage existing assertions and write the following instead:

{code}
 <cfcomponentname="ValidEmailAssertion">

 <cffunctionname="assertIsValidEmail"returntype="boolean">
 <cfargumentname="email"type="string"/>
 <cfargumentname="message"type="string"required="false"default="Emailaddressdoesnotappearvalid."/>

 <cfscript>
 arguments=normalizeArguments(arguments);
 emailRegEx="^\[A-Za-z0-9\]((\[_\.\-\]?\[a-zA-Z0-9\]+)*)@(\[A-Za-z0-9\]+)((\[\.\-\]?\[a-zA-Z0-9\]+)*)\.(\[A-Za-z\]{2,})$";
 actual=refind(emailRegEx,arguments.email);
 assertTrue(refind(emailRegEx,arguments.email)lt1,arguments.message);
 </cfscript>

 <cfreturntrue/>
 </cffunction>

 </cfcomponent><cfcomponent name="ValidEmailAssertion" >

<cffunction name="assertIsValidEmail" returntype="boolean" >
  <cfargument name="email" type="string" />
  <cfargument name="message" type="string" required="false" default="Email address does not appear valid." />

  <cfscript>
   arguments = normalizeArguments(arguments);
   emailRegEx = "^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$";
   actual = refind(emailRegEx,arguments.email);
   assertTrue(refind(emailRegEx,arguments.email) lt 1, arguments.message);
  </cfscript>

   <cfreturn true />
</cffunction>

</cfcomponent>
{code}

Note the arguments = normalizeArguments(arguments) statement. This allows for the flexibility if you want to be able to pass the message parameter first or last.

Ok. Now when we run our test, we're in the green. Our new assertion works as expected. Wahoo\!

3. Decide how you want to load the new code. The options are for each test or for{_}all_ tests. You've already seen how to load custom assertions in your code. This can also be done in setUp().

{code}
 <cfcomponentname="ValidEmailAssertionTest"extends="mxunit.framework.TestCase">
 ...
 <cffunctionname="setUp">
 <cfscript>
 addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
 </cfscript>
 </cffunction>

 </cfcomponent><cfcomponent name="ValidEmailAssertionTest" extends="mxunit.framework.TestCase" >
 ...
<cffunction name="setUp">
  <cfscript>
    addAssertDecorator("mxunit.framework.ext.ValidEmailAssertion");
  </cfscript>
</cffunction>
{code}

What if you want your new assertion to _always_ be available? Edit the mxunit-config.xml file located in \{mxunit install\}/mxunit/framework/ Add the following line :

<?xmlversion="1.0"encoding="UTF-8"?>
<mxunit-config>
...
<config-elementtype="assertionExtension"path="mxunit.framework.ext.ValidEmailAssertion"autoload="true"override="false"/>
...
</mxunit-config> ]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4685872</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6694146</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.ca/search?aq=f&sourceid=chrome&ie=UTF-8&q=mxunittask]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-09-15 19:56:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-09-15 19:56:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4718594</id>
    <property name="body"><![CDATA[


{html}
<center>

	<!-- the comment and script is used to workaround the KB912945 patch -->
	<!--[if gte IE 6]> <comment id="to_be_rewritten"> <![endif]-->
	<OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" WIDTH="718" HEIGHT="541" id="movie">
	<PARAM NAME=movie VALUE="mxunit-install3.swf"> 
	<PARAM NAME=quality VALUE=high>
	<PARAM NAME=bgcolor VALUE=#FFFFFF>
	<EMBED src="http://mxunit.org/doc/video/mxunit-install3.swf" quality=high bgcolor=#FFFFFF WIDTH="718" HEIGHT="541" NAME="movie" ALIGN="" TYPE="application/x-shockwave-flash" PLUGINSPAGE="http://www.macromedia.com/go/getflashplayer"></EMBED>
	</OBJECT>
	</comment><script language="Javascript" src="ieupdate.js"></script>

</center> 
{html}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4685826</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4718597</id>
    <property name="body"><![CDATA[
{html}
<center>

	<!-- the comment and script is used to workaround the KB912945 patch -->
	<!--[if gte IE 6]> <comment id="to_be_rewritten"> <![endif]-->
	<OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" WIDTH="718" HEIGHT="541" id="movie">
	<PARAM NAME=movie VALUE="mxunit-install3.swf"> 
	<PARAM NAME=quality VALUE=high>
	<PARAM NAME=bgcolor VALUE=#FFFFFF>
	<EMBED src="http://mxunit.s3.amazonws.com/video/mxunit-install3.swf" quality=high bgcolor=#FFFFFF WIDTH="718" HEIGHT="541" NAME="movie" ALIGN="" TYPE="application/x-shockwave-flash" PLUGINSPAGE="http://www.macromedia.com/go/getflashplayer"></EMBED>
	</OBJECT>
	</comment><script language="Javascript" src="ieupdate.js"></script>

</center> 
{html}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4685829</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4718596</id>
    <property name="body"><![CDATA[

{html}
<center>

	<!-- the comment and script is used to workaround the KB912945 patch -->
	<!--[if gte IE 6]> <comment id="to_be_rewritten"> <![endif]-->
	<OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" WIDTH="718" HEIGHT="541" id="movie">
	<PARAM NAME=movie VALUE="mxunit-install3.swf"> 
	<PARAM NAME=quality VALUE=high>
	<PARAM NAME=bgcolor VALUE=#FFFFFF>
	<EMBED src="http://mxunit.s3.amazonws.com/doc/video/mxunit-install3.swf" quality=high bgcolor=#FFFFFF WIDTH="718" HEIGHT="541" NAME="movie" ALIGN="" TYPE="application/x-shockwave-flash" PLUGINSPAGE="http://www.macromedia.com/go/getflashplayer"></EMBED>
	</OBJECT>
	</comment><script language="Javascript" src="ieupdate.js"></script>

</center> 
{html}]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4685828</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4718620</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4685852</id>
    </property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6694295</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mentity+framework+roadmap&rls=com.microsoft:en-us&ie=UTF-8&oe=UTF-8&startIndex=&startPage=1]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786619</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-09-19 22:44:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-09-19 22:44:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5309004</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunit+%22First+Test+Case%22&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292754</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-04-05 22:33:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-04-05 22:33:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5309013</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.co.in/search?hl=en&client=firefox-a&hs=7jg&rls=org.mozilla%3Aen-US%3Aofficial&q=fusebox+framework+tutorial&meta=&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-04-06 05:14:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-04-06 05:14:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5308782</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.de/search?q=mxunit+tutorial&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:de:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786560</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-03-29 12:47:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-03-29 12:47:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">5308521</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.co.uk/search?hl=en&source=hp&q=MxUnit+Mockup&meta=&aq=f&aqi=&aql=&oq=&gs_rfai=]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4685858</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-03-24 10:30:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-03-24 10:30:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6691110</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?client=ubuntu&channel=fs&q=Type+mismatch+for+port+%22m%22+in+component+%22sha512%22+when+binding+to+entity+%22sha512%22&ie=utf-8&oe=utf-8]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341213</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-07-12 13:42:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-07-12 13:42:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6691082</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.co.uk/search?q=install+mxunit+on+eclipse&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-GB:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">786523</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-07-11 20:24:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-07-11 20:24:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6691556</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.co.uk/search?q=mxunit+test+tutorial&sourceid=ie7&rls=com.microsoft:en-gb:IE-Address&ie=&oe=&redir_esc=&ei=CJklTvDQJ9Cr0AHvp6zoCg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292754</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-07-19 14:56:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-07-19 14:56:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6691662</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=4948033&navigatingVersions=trueindex.php]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-07-21 01:51:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-07-21 01:51:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6691744</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpreviousversions.action?pageId=4292775]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4292849</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-07-22 17:39:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-07-22 17:39:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6691749</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&source=web&cd=1&ved=0CBcQFjAA&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D5341294&rct=j&q=mxunittask%20doc&ei=htkpTtqGDKjUiAKBxsWvAg&usg=AFQjCNF-26i-6EnbLebWqmb4BrD9lME1Jg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-07-22 20:21:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-07-22 20:21:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6691943</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?sourceid=chrome&ie=UTF-8&q=mxunit+getting+started]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341206</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-07-28 21:02:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-07-28 21:02:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6691915</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.co.uk/search?q=classname+from+xml+not+in+ant+junit+report&rls=com.microsoft:en-gb:IE-SearchBox&ie=UTF-8&oe=UTF-8&sourceid=ie7&rlz=1I7DKUK&redir_esc=&ei=zFQxTt-EMcWBhQfJruHSDg]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-07-28 12:34:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-07-28 12:34:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6520923</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=mxunit+snipex&rls=com.microsoft:en-us&ie=UTF-8&oe=UTF-8&startIndex=&startPage=1]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5734402</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-11-09 18:08:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-11-09 18:08:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6521008</id>
    <property name="viewCount">3</property>
    <property name="url"
      ><![CDATA[http://www.google.co.id/search?hl=id&client=firefox-a&hs=lEm&rls=org.mozilla%3Aen-US%3Aofficial&q=index.htm%3Flang%3D1033%26locale%3D1033&btnG=Telusuri]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">4948033</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-11-13 02:54:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-11-13 02:56:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6521022</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://wiki.mxunit.org/pages/viewpage.action?pageId=5341619]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341619</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2010-11-15 04:28:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2010-11-15 04:28:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6692406</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/url?sa=t&source=web&cd=4&ved=0CCwQFjAD&url=http%3A%2F%2Fwiki.mxunit.org%2Fpages%2Fviewpage.action%3FpageId%3D6750309&rct=j&q=query%20mxunit&ei=f7FBTvGLBIn-sQKm08ShCQ&usg=AFQjCNE2Ym_9G05LwvjhzitM6vlkqsYkpQ]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">6750309</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-08-09 22:28:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-08-09 22:28:15.000</property>
  </object>
  <object class="SpaceDescription" package="com.atlassian.confluence.spaces">
    <id name="id">5341313</id>
    <property name="title"/>
    <collection name="bodyContents">
      <element class="BodyContent" package="com.atlassian.confluence.core">
        <id name="id">5374067</id>
      </element>
    </collection>
    <property name="version">6</property>
    <property name="creatorName"><![CDATA[virtix]]></property>
    <property name="creationDate">2009-01-17 10:51:32.000</property>
    <property name="lastModifierName"><![CDATA[virtix]]></property>
    <property name="lastModificationDate">2010-01-07 10:57:33.000</property>
    <property name="versionComment"><![CDATA[]]></property>
    <property name="originalVersion" class="SpaceDescription"
      package="com.atlassian.confluence.spaces">
      <id name="id">786456</id>
    </property>
    <property name="contentStatus"><![CDATA[current]]></property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6692790</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.com/search?q=junitreport+todir+mxunit&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-08-17 22:33:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-08-17 22:33:15.000</property>
  </object>
  <object class="ReferralLink" package="com.atlassian.confluence.links">
    <id name="id">6692755</id>
    <property name="viewCount">1</property>
    <property name="url"
      ><![CDATA[http://www.google.de/search?sourceid=chrome&ie=UTF-8&q=juniteport+encode]]></property>
    <property name="sourceContent" class="Page" package="com.atlassian.confluence.pages">
      <id name="id">5341294</id>
    </property>
    <property name="creatorName"/>
    <property name="creationDate">2011-08-17 12:47:15.000</property>
    <property name="lastModifierName"/>
    <property name="lastModificationDate">2011-08-17 12:47:15.000</property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">5374067</id>
    <property name="body"><![CDATA[New home for MXUnit documentation]]></property>
    <property name="content" class="SpaceDescription" package="com.atlassian.confluence.spaces">
      <id name="id">5341313</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783164</id>
    <property name="body"><![CDATA[Mocking is a tough concept to get your brain around the first time you encounter it. I still struggle, conceptually. This is example shows mocking quite well, but there are enough distractions that it's a little hard to see, especially for Googlers who might lack context. If I might be so bold as to offer suggested edits which might allow the illustration of the core concept to show through the code more clearly:

The first stumbling block is the hint. "My component to mock" is a little misleading. That's the code for MyComponent, which people like me who skip straight to code without bothering to read the very instructive header just above will get to first, so a more instructive hint might be "Depends on data from myOtherComponent, so we'll need to provide a mock to stub it out for testing."

The next distraction is that the method always returns true, so we don't understand as well why we're mocking, maybe if it just returned the result of myOtherComponent('foo'), or multiplied it by two or something, we'd see the interactions better?

And <cfargument name="aCollaborator" could even be confusing since "aCollaborator" is never seen again, it's only one line, so maybe replacing the ellipsis with <cfset myOtherComponent = arguments.aCollaborator> would even help keep the example more tightly focussed?

And it looks like either kpenny is right and you meant to use assertTrue, or you're using the "Red, Green, Refactor" approach in the assert, and have stopped at "Red." While the latter is excellent TDD methodology, it would be a little too confusing in this example. An assert statement that showed the dependence on the mock's data might help to illustrate the core concept more clearly, like myOtherComponent.doSomething('foo') might return 2, and myComponent.myMethod('foo') might return 4, then the assert could be assertEquals(actual,4,'cool and bad-ass') - leaving the mock object method creation line the only confusing thing in the example, the way it should be :)

Thanks!

B)]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6750404</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">6783163</id>
    <property name="body"><![CDATA[Mocking is a tough concept to get your brain around the first time you encounter it. I still struggle, conceptually. This is example shows mocking quite well, but there are enough distractions that it's a little hard to see, especially for Googlers who might lack context. If I might be so bold as to offer suggested edits which might allow the illustration of the core concept to show through the code more clearly:

The first stumbling block is the hint. "My component to mock" is a little misleading. That's the code for MyComponent, which people like me who skip straight to code without bothering to read the very instructive header just above will get to first, so a more instructive hint might be "Depends on data from myOtherComponent, so we'll need to provide a mock to stub it out for testing."

The next distraction is that the method always returns true, so we don't understand as well why we're mocking, maybe if it just returned the result of myOtherComponent('foo'), or multiplied it by two or something, we'd see the interactions better?

And <cfargument name="aCollaborator" could even be confusing since "aCollaborator" is never seen again, it's only one line, so maybe replacing the ellipsis with <cfset myOtherComponent = arguments.aCollaborator> would even help keep the example more tightly focussed?

And it looks like you're using the "Red, Green, Refactor" approach in the assert, and have stopped at "Red." While this is excellent TDD methodology, it's a little confusing in this example. An assert statement that showed the dependence on the mock's data might help to illustrate the core concept more clearly, like myOtherComponent.doSomething('foo') might return 2, and myComponent.myMethod('foo') might return 4, then the assert could be assertEquals(actual,4) - leaving the mock object method creation line the only confusing thing in the example, the way it should be :)

Thanks!

B)]]></property>
    <property name="content" class="Comment" package="com.atlassian.confluence.pages">
      <id name="id">6750403</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325582</id>
    <property name="body"
      ><![CDATA[Slowly migrating from documentation from main website.]]></property>
    <property name="content" class="SpaceDescription" package="com.atlassian.confluence.spaces">
      <id name="id">4292862</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325586</id>
    <property name="body"><![CDATA[New home for MXUnit documentation]]></property>
    <property name="content" class="SpaceDescription" package="com.atlassian.confluence.spaces">
      <id name="id">4292866</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325587</id>
    <property name="body"><![CDATA[New home for MXUnit documentation]]></property>
    <property name="content" class="SpaceDescription" package="com.atlassian.confluence.spaces">
      <id name="id">4292867</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">4325525</id>
    <property name="body"><![CDATA[Possibly the default public space]]></property>
    <property name="content" class="SpaceDescription" package="com.atlassian.confluence.spaces">
      <id name="id">4292798</id>
    </property>
  </object>
  <object class="BodyContent" package="com.atlassian.confluence.core">
    <id name="id">819231</id>
    <property name="body"><![CDATA[]]></property>
    <property name="content" class="SpaceDescription" package="com.atlassian.confluence.spaces">
      <id name="id">786465</id>
    </property>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">2195464</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750362</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341233</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750368</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341231</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341320</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#UsinginjectMethodforsimplemocking-Introduction'>Introduction</a></li>
    <li><a href='#UsinginjectMethodforsimplemocking-UsinginjectMethod%28%29'>Using injectMethod()</a></li>
    <li><a href='#UsinginjectMethodforsimplemocking-DifferencefromMocking'>Difference from Mocking</a></li>
    <li><a href='#UsinginjectMethodforsimplemocking-UsingrestoreMethod%28%29'>Using restoreMethod()</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341208</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341218</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734455</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341332</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#AddingMXUnitSnippetsToCFEclipseandColdFusionBuilder-Step1%3AWheredoyoursnippetslive%3F'>Step 1: Where do your snippets live?</a></li>
    <li><a href='#AddingMXUnitSnippetsToCFEclipseandColdFusionBuilder-Step2%3AManuallyCopythesnippets'>Step 2: Manually Copy the snippets</a></li>
    <li><a href='#AddingMXUnitSnippetsToCFEclipseandColdFusionBuilder-Step2%28optional%29%3AUseANTtocopythemforyou'>Step 2 (optional): Use ANT to copy them for you</a></li>
    <li><a href='#AddingMXUnitSnippetsToCFEclipseandColdFusionBuilder-Step3%3ARefreshyourSnipTreeView'>Step 3: Refresh your Snip Tree View</a></li>
    <li><a href='#AddingMXUnitSnippetsToCFEclipseandColdFusionBuilder-Step4%3AGiveitashot'>Step 4: Give it a shot</a></li>
    <li><a href='#AddingMXUnitSnippetsToCFEclipseandColdFusionBuilder-Step5%3AShareyoursnippetswithyourothercomputers'>Step 5: Share your snippets with your other computers</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341260</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786582</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341253</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786593</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4685860</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[11]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734518</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734496</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786598</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734498</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341239</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4685860</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:2]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4685860</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341250</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734498</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786552</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786549</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734518</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#ReleaseNotes-Framework%5C%5C2.1%5C%5CNovember12%2C2011'>Framework -- 2.1 -- November 12, 2011</a></li>
    <li><a href='#ReleaseNotes-Framework%5C%5C2.0.3%5C%5CMay5%2C2011'>Framework -- 2.0.3 -- May 5, 2011</a></li>
    <li><a href='#ReleaseNotes-Framework%5C%5C2.0.2%5C%5CNovember19%2C2010'>Framework -- 2.0.2 -- November 19, 2010</a></li>
    <li><a href='#ReleaseNotes-Framework%5C%5C2.0.1'>Framework -- 2.0.1</a></li>
    <li><a href='#ReleaseNotes-EclipsePlugin%5C%5C1.4.1%5C%5CMarch23%2C2011'>Eclipse Plugin -- 1.4.1 -- March 23, 2011</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786558</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786564</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734518</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341473</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786575</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734518</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786517</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341320</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292870</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750461</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341200</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786529</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341332</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750466</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341416</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750464</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786536</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750477</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750368</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#ContinuousIntegration--ANT-TheGluebetweenJenkinsandyourTests-WhyANT%3F'>Why ANT?</a></li>
    <li><a href='#ContinuousIntegration--ANT-TheGluebetweenJenkinsandyourTests-Assumptions'>Assumptions</a></li>
    <li><a href='#ContinuousIntegration--ANT-TheGluebetweenJenkinsandyourTests-AthoroughdescriptionofrunningyourtestswithANT'>A thorough description of running your tests with ANT</a></li>
    <li><a href='#ContinuousIntegration--ANT-TheGluebetweenJenkinsandyourTests-Onceyou%27refamiliarwithrunningyourtestswithANT'>Once you're familiar with running your tests with ANT</a></li>
<ul>
    <li><a href='#ContinuousIntegration--ANT-TheGluebetweenJenkinsandyourTests-DirectoryStructure'>Directory Structure</a></li>
    <li><a href='#ContinuousIntegration--ANT-TheGluebetweenJenkinsandyourTests-CopyfilesfromMXUnittoyourapp'>Copy files from MXUnit to your app</a></li>
    <li><a href='#ContinuousIntegration--ANT-TheGluebetweenJenkinsandyourTests-Modifybuild.xml'>Modify build.xml</a></li>
    <li><a href='#ContinuousIntegration--ANT-TheGluebetweenJenkinsandyourTests-Runthe%22init%22target'>Run the "init" target</a></li>
    <li><a href='#ContinuousIntegration--ANT-TheGluebetweenJenkinsandyourTests-Runthe%22runtests%22target'>Run the "runtests" target</a></li>
</ul>
    <li><a href='#ContinuousIntegration--ANT-TheGluebetweenJenkinsandyourTests-NextSteps'>Next Steps</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734496</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">294926</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750362</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#ContinuousIntegration--GettingStarted-BigPicture'>Big Picture</a></li>
    <li><a href='#ContinuousIntegration--GettingStarted-InstallingJenkins'>Installing Jenkins</a></li>
    <li><a href='#ContinuousIntegration--GettingStarted-PullingyourprojectfromSubversion%28SVN%29'>Pulling your project from Subversion (SVN)</a></li>
    <li><a href='#ContinuousIntegration--GettingStarted-What%27sNext%3F'>What's Next?</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786543</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341187</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341432</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734498</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786499</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341253</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786478</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#Built-InAssertions-CoreBuiltinAssertions'>Core Built-in Assertions</a></li>
<ul>
    <li><a href='#Built-InAssertions-assertTrue%28booleancondition%5C%2CStringmessage%5C%29'>assertTrue(boolean condition [,String message])</a></li>
    <li><a href='#Built-InAssertions-assertFalse%28booleancondition%5C%2CStringmessage%5C%29%5C'>assertFalse(boolean condition [, String message])*</a></li>
    <li><a href='#Built-InAssertions-assert%28booleancondition%5C%2CStringmessage%5C%29'>assert(boolean condition [,String message])</a></li>
    <li><a href='#Built-InAssertions-assertEquals%28anyexpected%2Canyactual%5C%2CStringmessage%5C%29'>assertEquals*(any expected, any actual [, String message])</a></li>
<ul>
    <li><a href='#Built-InAssertions-ComparingArrays%2CQueries%2CandStructures'>Comparing Arrays, Queries, and Structures</a></li>
</ul>
    <li><a href='#Built-InAssertions-fail%28Stringmessage%29'>fail*(String message)</a></li>
    <li><a href='#Built-InAssertions-failNotEquals%28anyvalue%2Canyvalue2%5C%2CStringmessage%5C%29'>failNotEquals*(any value, any value2 [,String message])</a></li>
    <li><a href='#Built-InAssertions-assertSame%28anyobj1%2Canyobj2%5C%2CStringmessage%5C%29'>assertSame*(any obj1, any obj2 [,String message])</a></li>
    <li><a href='#Built-InAssertions-assertNotSame%28anyobj1%2Canyobj2%5C%2CStringmessage%5C%29'>assertNotSame*(any obj1, any obj2 [,String message])</a></li>
</ul>
    <li><a href='#Built-InAssertions-MXUnitAssertionExtensions'>MXUnit Assertion Extensions</a></li>
<ul>
    <li><a href='#Built-InAssertions-assertXPath%28Stringxpath%2Canydata%2C%5CStringtext%5C%2C%5CStringmessage%5C%29'>assertXPath*(String xpath, any data, [String text], [String message])</a></li>
    <li><a href='#Built-InAssertions-assertIsTypeOf%28componentobj%2CStringtype%29'>assertIsTypeOf*(component obj, String type)</a></li>
    <li><a href='#Built-InAssertions-assertIsXMLDoc%28anyxml%5C%2CStringmessage%5C%29'>assertIsXMLDoc*(any xml [, String message])</a></li>
    <li><a href='#Built-InAssertions-assertIsArray%28anyobj1%29'>assertIsArray*(any obj1)</a></li>
    <li><a href='#Built-InAssertions-assertIsDefined%28anyobj1%29'>assertIsDefined*(any obj1)</a></li>
    <li><a href='#Built-InAssertions-assertIsEmpty%28anyobj1%29'>assertIsEmpty*(any obj1)</a></li>
    <li><a href='#Built-InAssertions-assertIsEmptyArray%28anyobj1%2C%5CStringmessage%5C%29'>assertIsEmptyArray*(any obj1,[String message])</a></li>
    <li><a href='#Built-InAssertions-assertIsEmptyQuery%28anyobj1%2C%5CStringmessage%5C%29'>assertIsEmptyQuery*(any obj1,[String message])</a></li>
    <li><a href='#Built-InAssertions-assertIsEmptyStruct%28anyobj1%2C%5CStringmessage%5C%29'>assertIsEmptyStruct*(any obj1,[String message])</a></li>
    <li><a href='#Built-InAssertions-assertIsQuery%28anyq%29'>assertIsQuery*(any q)</a></li>
    <li><a href='#Built-InAssertions-assertIsStruct%28anyobj%29'>assertIsStruct*(any obj)</a></li>
</ul>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341260</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786494</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341271</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786494</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#TDDExample--Fixingabugintheplugin-TDDExample%3AFixingaBuginthePlugin'>TDD Example: Fixing a Bug in the Plugin</a></li>
<ul>
    <li><a href='#TDDExample--Fixingabugintheplugin-TheBug'>The Bug</a></li>
    <li><a href='#TDDExample--Fixingabugintheplugin-FindingtheBug'>Finding the Bug</a></li>
    <li><a href='#TDDExample--Fixingabugintheplugin-FixingtheBug'>Fixing the Bug</a></li>
    <li><a href='#TDDExample--Fixingabugintheplugin-Howthissavedmetime'>How this saved me time</a></li>
</ul>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341269</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160402</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341276</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160404</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160392</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160394</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786504</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786501</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734455</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292817</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786461</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786464</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786457</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341231</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292815</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750543</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#ContinuousIntegration--UsinggitasyourSCM-Introduction'>Introduction</a></li>
    <li><a href='#ContinuousIntegration--UsinggitasyourSCM-Prerequisites'>Prerequisites</a></li>
    <li><a href='#ContinuousIntegration--UsinggitasyourSCM-InstallingandconfiguringthegitplugininJenkins'>Installing and configuring the git plugin in Jenkins</a></li>
<ul>
    <li><a href='#ContinuousIntegration--UsinggitasyourSCM-Gitpath'>Git path</a></li>
    <li><a href='#ContinuousIntegration--UsinggitasyourSCM-Gituservalues'>Git user values</a></li>
</ul>
    <li><a href='#ContinuousIntegration--UsinggitasyourSCM-SSHKeys'>SSH Keys</a></li>
    <li><a href='#ContinuousIntegration--UsinggitasyourSCM-ConfiguringyourJenkinsjob'>Configuring your Jenkins job</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341233</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750546</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#ContinuousIntegration--StartingandStoppingWindowsservicesinyourbuild-Introduction'>Introduction</a></li>
    <li><a href='#ContinuousIntegration--StartingandStoppingWindowsservicesinyourbuild-InstallingMongoDBasaservice'>Installing MongoDB as a service</a></li>
    <li><a href='#ContinuousIntegration--StartingandStoppingWindowsservicesinyourbuild-HowyouwillbeabletorunthisserviceinJenkins%2Cbutcan%27tquiteyet'>How you will be able to run this service in Jenkins, but can't quite yet</a></li>
    <li><a href='#ContinuousIntegration--StartingandStoppingWindowsservicesinyourbuild-HowtouseANTtostartandstoptheMongoDBWindowsService'>How to use ANT to start and stop the MongoDB Windows Service</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750546</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341239</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786484</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750543</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750546</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786478</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786473</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750543</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341250</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734424</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786471</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341324</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341320</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6586373</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341286</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341332</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341326</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786494</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160404</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[2]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750461</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#ContinuousIntegration--RunningtestswithJenkins-Assumptions'>Assumptions</a></li>
    <li><a href='#ContinuousIntegration--RunningtestswithJenkins-ConfiguringANTwithinJenkins'>Configuring ANT within Jenkins</a></li>
    <li><a href='#ContinuousIntegration--RunningtestswithJenkins-Configuringyourproject%E2%80%99stestrunnerstep'>Configuring your project's test runner step</a></li>
    <li><a href='#ContinuousIntegration--RunningtestswithJenkins-TestRunnerStepConfiguration%2CPart2%3AProperties'>Test Runner Step Configuration, Part 2: Properties</a></li>
    <li><a href='#ContinuousIntegration--RunningtestswithJenkins-Configuringyourproject%E2%80%99sJUnitXMLOutput'>Configuring your project's JUnit XML Output</a></li>
    <li><a href='#ContinuousIntegration--RunningtestswithJenkins-Resavingant.bat'>Re-saving ant.bat</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160402</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[14]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341269</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750466</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#ContinuousIntegration--SettingupNotifications-CommunicatingBuildResults'>Communicating Build Results</a></li>
    <li><a href='#ContinuousIntegration--SettingupNotifications-ConfiguringEmailSettings'>Configuring Email Settings</a></li>
    <li><a href='#ContinuousIntegration--SettingupNotifications-ConfiguringSMS%28Jabber%29viaGTalk'>Configuring SMS (Jabber) via GTalk</a></li>
    <li><a href='#ContinuousIntegration--SettingupNotifications-NoiseControl'>Noise Control</a></li>
    <li><a href='#ContinuousIntegration--SettingupNotifications-ConfiguringUsers'>Configuring Users</a></li>
    <li><a href='#ContinuousIntegration--SettingupNotifications-Sowhat%E2%80%99sallthisgetme%3F'>So what's all this get me?</a></li>
    <li><a href='#ContinuousIntegration--SettingupNotifications-Summary'>Summary</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4947975</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[11]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341271</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160394</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[5]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341276</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750464</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#ContinuousIntegration--Failingbuildsforfailingtests-Fail%3FOrUnstable%3F'>Fail? Or Unstable?</a></li>
    <li><a href='#ContinuousIntegration--Failingbuildsforfailingtests-Howtofailabuildforfailingtests'>How to fail a build for failing tests</a></li>
    <li><a href='#ContinuousIntegration--Failingbuildsforfailingtests-Whythisworks'>Why this works</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750466</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750477</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#ContinuousIntegration--AdvancedNotificationControl-Introduction'>Introduction</a></li>
    <li><a href='#ContinuousIntegration--AdvancedNotificationControl-TheEmailExtensionPlugin%3AWhatitgetsyou'>The Email Extension Plugin: What it gets you</a></li>
    <li><a href='#ContinuousIntegration--AdvancedNotificationControl-MyTake'>My Take</a></li>
    <li><a href='#ContinuousIntegration--AdvancedNotificationControl-HowtoInstall'>How to Install</a></li>
    <li><a href='#ContinuousIntegration--AdvancedNotificationControl-Conclusion'>Conclusion</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341326</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341286</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341332</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750461</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341320</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341324</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160433</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341307</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750477</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786478</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341307</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341473</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750362</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750546</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750368</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750543</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160404</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160402</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292817</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[11]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750679</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#CFObjective2011--ContinuousIntegration-SessionDescription'>Session Description</a></li>
    <li><a href='#CFObjective2011--ContinuousIntegration-Download'>Download</a></li>
    <li><a href='#CFObjective2011--ContinuousIntegration-Github'>Github</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160394</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292815</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[11]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750399</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341519</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341218</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341208</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4947975</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341416</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341200</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750302</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341187</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341432</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4685860</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341601</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292766</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341597</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750679</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160394</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#CreatinganAWSAccount-CreatinganAWSAccount'>Creating an AWS Account</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4947975</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292775</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160402</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#LaunchingyourfirstEC2Instance-Expectations'>Expectations</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-Stopvs.Terminate'>Stop vs. Terminate</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-LaunchingyourfirstEC2Instance'>Launching your first EC2 Instance</a></li>
<ul>
    <li><a href='#LaunchingyourfirstEC2Instance-RequestInstancesWizard'>Request Instances Wizard</a></li>
<ul>
    <li><a href='#LaunchingyourfirstEC2Instance-32bitor64bit%2CLinuxorWindows%3F'>32bit or 64 bit, Linux or Windows?</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-LaunchorSpot%3F'>Launch or Spot?</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-KeyPairs'>Key Pairs</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-SecurityGroup'>Security Group</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-TheMeterisnowrunning'>The Meter is now running</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-Almostthere'>Almost there</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-Connectingtoyourinstance'>Connecting to your instance</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-You%27rein'>You're in</a></li>
</ul>
    <li><a href='#LaunchingyourfirstEC2Instance-TheSoftwareyouneed'>The Software you need</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-Installation'>Installation</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-SecureCFAdmin'>Secure CFAdmin</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-WindowsFirewall'>Windows Firewall</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-EC2Windowsuseraccount'>EC2 Windows user account</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-ConfigureSSH'>Configure SSH</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-Whew%5C%21'>Whew!</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-Let%27stest'>Let's test</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-What%27sthepublicURL%3F'>What's the public URL?</a></li>
    <li><a href='#LaunchingyourfirstEC2Instance-Nextsteps'>Next steps</a></li>
</ul>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4947973</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292773</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341606</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160404</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#CreatinganEC2ColdFusionAMI-WhycreateanAMI%3F'>Why create an AMI?</a></li>
    <li><a href='#CreatinganEC2ColdFusionAMI-CreatetheAMI'>Create the AMI</a></li>
    <li><a href='#CreatinganEC2ColdFusionAMI-Visibility'>Visibility</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4685860</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160394</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341636</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4685854</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160392</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292794</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160404</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160402</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341623</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292817</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292820</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292815</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341647</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4685867</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4948032</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160433</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341530</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4685831</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750302</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292713</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292736</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734424</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292751</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6160433</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#LaunchingyourColdFusionAMIasanewInstance-Launchingyourinstance'>Launching your instance</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750679</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[4]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786529</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786517</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6586373</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786501</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786504</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786499</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786494</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786484</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786478</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750302</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786473</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786471</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786593</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786582</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">294929</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#Hi%2CI%27mMarc-Who%3F'>Who?</a></li>
    <li><a href='#Hi%2CI%27mMarc-What%3F'>What?</a></li>
    <li><a href='#Hi%2CI%27mMarc-SayHi'>Say Hi</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786575</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786558</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786564</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786552</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786549</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750477</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[3]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786543</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750362</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786536</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750466</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[6]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750368</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750461</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[2]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750464</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4947975</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4947973</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750399</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">294929</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750543</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[4]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750546</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[3]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786598</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4685831</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750466</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750461</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4685854</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4685860</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750477</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341636</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292794</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750679</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341623</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292773</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292775</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341606</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292820</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292817</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292815</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341647</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4685867</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786478</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[14]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">294926</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734498</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#Howcfcomponentoutput%3Dtruecanaffectmemoryconsumption-TL%3BDR'>TL;DR</a></li>
    <li><a href='#Howcfcomponentoutput%3Dtruecanaffectmemoryconsumption-Introduction'>Introduction</a></li>
    <li><a href='#Howcfcomponentoutput%3Dtruecanaffectmemoryconsumption-FirstLineofDefense'>First Line of Defense</a></li>
    <li><a href='#Howcfcomponentoutput%3Dtruecanaffectmemoryconsumption-Myfirsttask...'>My first task...</a></li>
    <li><a href='#Howcfcomponentoutput%3Dtruecanaffectmemoryconsumption-Meanwhile%2CBackatBob%27sRanch'>Meanwhile, Back at Bob's Ranch</a></li>
    <li><a href='#Howcfcomponentoutput%3Dtruecanaffectmemoryconsumption-Gatheringdata'>Gathering data</a></li>
    <li><a href='#Howcfcomponentoutput%3Dtruecanaffectmemoryconsumption-Inspectingdata'>Inspecting data</a></li>
<ul>
    <li><a href='#Howcfcomponentoutput%3Dtruecanaffectmemoryconsumption-Narrowingdownto%22FusionContext%22'>Narrowing down to "FusionContext"</a></li>
    <li><a href='#Howcfcomponentoutput%3Dtruecanaffectmemoryconsumption-NarrowingdowntoaCodeFile'>Narrowing down to a Code File</a></li>
</ul>
    <li><a href='#Howcfcomponentoutput%3Dtruecanaffectmemoryconsumption-LightBulb'>Light Bulb</a></li>
    <li><a href='#Howcfcomponentoutput%3Dtruecanaffectmemoryconsumption-FullDisclosure'>Full Disclosure</a></li>
    <li><a href='#Howcfcomponentoutput%3Dtruecanaffectmemoryconsumption-Conclusion'>Conclusion</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">2195464</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750302</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#Howcfloopquery%3DkilledaColdFusionserver-ExecutiveSummary'>Executive Summary</a></li>
    <li><a href='#Howcfloopquery%3DkilledaColdFusionserver-Thecode%2Cbefore'>The code, before</a></li>
    <li><a href='#Howcfloopquery%3DkilledaColdFusionserver-Heapmemory%2Cbefore'>Heap memory, before</a></li>
    <li><a href='#Howcfloopquery%3DkilledaColdFusionserver-Thecode%2Cafter'>The code, after</a></li>
    <li><a href='#Howcfloopquery%3DkilledaColdFusionserver-Heapmemory%2Cafter'>Heap memory, after</a></li>
    <li><a href='#Howcfloopquery%3DkilledaColdFusionserver-Conclusion'>Conclusion</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4948032</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292817</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#EclipsePluginFAQ-Q%3AWhatversionofEclipsewillthepluginworkin%3F'>Q: What version of Eclipse will the plugin work in?</a></li>
    <li><a href='#EclipsePluginFAQ-Q%3AWhywon%27tthepluginsee%22MyFile.cfc%22asatest%3F'>Q: Why won't the plugin see "MyFile.cfc" as a test?</a></li>
    <li><a href='#EclipsePluginFAQ-Q%3AWhatisaRemoteFacadeandwhatisitspurpose%3F'>Q: What is a RemoteFacade and what is its purpose?</a></li>
    <li><a href='#EclipsePluginFAQ-Q%3AThepluginseemstobeignoringmycustomRemoteFacade.cfcURL'>Q: The plugin seems to be ignoring my custom RemoteFacade.cfc URL</a></li>
    <li><a href='#EclipsePluginFAQ-Q%3ATheplugincan%27tfigureoutmy%22cfcpath%22%28dotnotation%29'>Q: The plugin can't figure out my "cfc path" (dot notation)</a></li>
    <li><a href='#EclipsePluginFAQ-Q%3AThepluginwon%27tdoanythingwithaTestSuiteIcreated'>Q: The plugin won't do anything with a TestSuite I created</a></li>
    <li><a href='#EclipsePluginFAQ-Q%3AWhydoesn%27tthepluginsupportNTLMv2%3F'>Q: Why doesn't the plugin support NTLMv2?</a></li>
    <li><a href='#EclipsePluginFAQ-Q%3AWhenIrunthetestsintheplugin%2CmyApplicationscopevariablesaren%27tpresent'>Q: When I run the tests in the plugin, my Application scope variables aren't present</a></li>
    <li><a href='#EclipsePluginFAQ-Q%3AWhenIrunthetestsintheplugin%2CIget%22VariableFORMisundefined%22.Why%3F'>Q: When I run the tests in the plugin, I get "Variable FORM is undefined". Why?</a></li>
    <li><a href='#EclipsePluginFAQ-Q%3AWhenIaddcertainvariablestoa%22debug%28%29%22call%2Cthepluginhangs.Why%3F'>Q: When I add certain variables to a "debug()" call, the plugin hangs. Why?</a></li>
    <li><a href='#EclipsePluginFAQ-Q%3AWhatarethedifferencesbetweenhowthepluginrunstestsandhowthetestsrunwhenIruntheminthebrowser%3F'>Q: What are the differences between how the plugin runs tests and how the tests run when I run them in the browser?</a></li>
    <li><a href='#EclipsePluginFAQ-Q%3AWhatdoyoucallasnailinaship%3F'>Q: What do you call a snail in a ship?</a></li>
    <li><a href='#EclipsePluginFAQ-Q%3ADoesthePluginworkinColdFusionBuilder%3F'>Q: Does the Plugin work in ColdFusion Builder?</a></li>
    <li><a href='#EclipsePluginFAQ-Q%3ADoIneedtodosomethingspecialtotestColdFusionORMapps%3F'>Q: Do I need to do something special to test ColdFusion ORM apps?</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292815</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#EclipsePluginTroubleshooting-CFCPath'>CFC Path</a></li>
    <li><a href='#EclipsePluginTroubleshooting-RemoteFacade'>RemoteFacade</a></li>
    <li><a href='#EclipsePluginTroubleshooting-UsingtheRemoteFacadeTester.cfm'>Using the RemoteFacadeTester.cfm</a></li>
    <li><a href='#EclipsePluginTroubleshooting-Mytestsloadbuteitherneverfinishorthrowinexplicableerrorswithnostacktrace'>My tests load but either never finish or throw inexplicable errors with no stack trace</a></li>
    <li><a href='#EclipsePluginTroubleshooting-Anoteondebuggingyourtests'>A note on debugging your tests</a></li>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292870</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341320</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[6]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750302</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[5]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">294929</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:tocCount]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[1]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341332</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[8]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734498</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[7]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341530</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341519</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786494</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[3]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750368</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[11]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750362</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[7]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292736</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292713</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786457</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786464</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">786461</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4947975</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cached:1]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[<div>
<ul>
    <li><a href='#TestingMXUnit-Dependencies'>Dependencies</a></li>
    <li><a href='#TestingMXUnit-RunningtheUnitTestsviatheEclipsePlugin'>Running the Unit Tests via the Eclipse Plugin</a></li>
<ul>
    <li><a href='#TestingMXUnit-ExpectedErrorsandFailures'>Expected Errors and Failures</a></li>
</ul>
    <li><a href='#TestingMXUnit-RunningtheUnitTestsviatheBrowser'>Running the Unit Tests via the Browser</a></li>
    <li><a href='#TestingMXUnit-RunningtheUnitTestsviaANT'>Running the Unit Tests via ANT</a></li>
<ul>
    <li><a href='#TestingMXUnit-Settingyour%22paths%22'>Setting your "paths"</a></li>
    <li><a href='#TestingMXUnit-Runningthetests'>Running the tests</a></li>
    <li><a href='#TestingMXUnit-ViewingtheJUnitReport'>Viewing the JUnit Report</a></li>
</ul>
</ul></div>]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341597</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292766</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5341601</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">5734518</property>
      <property name="key"><![CDATA[net.customware.confluence.plugin.toc:cachedVersion]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[17]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">4292751</property>
      <property name="key"><![CDATA[isbookmark]]></property>
    </composite-id>
    <property name="type">5</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
  <object class="BucketPropertySetItem" package="bucket.user.propertyset">
    <composite-id>
      <property name="entityName"><![CDATA[confluence_ContentEntityObject]]></property>
      <property name="entityId">6750679</property>
      <property name="key"><![CDATA[socialbookmarkingurl]]></property>
    </composite-id>
    <property name="type">6</property>
    <property name="booleanVal">false</property>
    <property name="doubleVal">0.0</property>
    <property name="stringVal"/>
    <property name="textVal"><![CDATA[]]></property>
    <property name="longVal">0</property>
    <property name="intVal">0</property>
    <property name="dateVal"/>
  </object>
</hibernate-generic>