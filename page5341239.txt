






Mocking

5374001
h3. Mocking

If your dependency does not return any data, but rather _does_ something (returns
void), you will want to verify that it was called, but maybe you don't want to incur
side-effects, such as emails or logging:

{code:title=MyComponent (The component under test) }
&lt;cfcomponent hint="Example Component To Mock" output="false"&gt;

&lt;cffunction name="myMethod"&gt;
&lt;cfargument name="foo" /&gt;
&lt;cfset myOtherComponent.writeToLog('Hello.') /&gt;
&lt;!--- do a bunch of other stuff ... ---&gt;
&lt;cfset myOtherComponent.writeToLog('Good bye.') /&gt;
&lt;/cffunction&gt;

&lt;cffunction name="setMyOtherComponent"&gt;
&lt;cfargument name='aCollaborator' type='MyOtherComponent' /&gt;
...
&lt;/cffunction&gt;

&lt;/cfcomponent&gt;
{code}

Using the MXUnit mocking facility, you can mock MyOtherComponent like this:

{code:title=Sample MXUnit Test Case}
&lt;cfcomponent extends="mxunit.framework.TestCase" output="false"&gt;

&lt;cffunction name="testMyComponent"&gt;

	&lt;!--- Our component under test (CUT) ---&gt;
	&lt;cfset myComponent = createObject('component','MyComponent') /&gt;

	&lt;!--- Create the mock ---&gt;
	&lt;cfset mockOtherComponent = mock() /&gt;

	&lt;!--- Define Behavior ---&gt;
	&lt;cfset mockOtherComponent.writeToLog('Hello.') /&gt;
	&lt;cfset mockOtherComponent.writeToLog('Good Bye.') /&gt;

	&lt;!--- Inject the mock into CUT ---&gt;
	&lt;cfset myComponent.setMyOtherComponent(mockOtherComponent) /&gt;

	&lt;!--- Exercise MyComponent ---&gt;
	&lt;cfset actual = myComponent.myMethod('foo') /&gt;

	&lt;!--- Verify ---&gt;
	&lt;cfset mockOtherComponent.verify().writeToLog('Hello.') /&gt;
	&lt;cfset mockOtherComponent.verify().writeToLog('Good Bye.') /&gt;
&lt;/cffunction&gt;

&lt;/cfcomponent&gt;
{code}

For more information on verification methods, see the [Verification] section.

If you are not overly concerned with the literal details of the method calls, you
could simplify this with _argument patterns_:

{code:title=Sample MXUnit Test Case}
&lt;cfcomponent extends="mxunit.framework.TestCase" output="false"&gt;

&lt;cffunction name="testMyComponent"&gt;

	&lt;!--- Our component under test (CUT) ---&gt;
	&lt;cfset myComponent = createObject('component','MyComponent') /&gt;

	&lt;!--- Create the mock ---&gt;
	&lt;cfset mockOtherComponent = mock('MyOtherComponent') /&gt;

	&lt;!--- Define Behavior ---&gt;
	&lt;cfset mockOtherComponent.writeToLog('{string}').returns() /&gt;

	&lt;!--- Inject the mock into CUT ---&gt;
	&lt;cfset myComponent.setMyOtherComponent(mockOtherComponent) /&gt;

	&lt;!--- Exercise MyComponent ---&gt;
	&lt;cfset actual = myComponent.myMethod('foo') /&gt;

	&lt;!--- Verify ---&gt;
	&lt;cfset mockOtherComponent.verifyTimes(2).writeToLog('{string}') /&gt;
&lt;/cffunction&gt;

&lt;/cfcomponent&gt;
{code}

In the above example, we use the keyword, \{string\}, instead of literal arguments.

What happens under the hood is that when the method is called by the component that
is passing in any _single string argument_ as a parameter, the defined mock behavior
is invoked.

Argument patterns support all common CFML data types. The intent is that it's identical
to the typeattribute of CFARGUMENT : \{numeric\} , \{any\} , \{query\} , \{struct\}
, \{array\} , etc.  See the [Argument Matching] section for more detail.


5341239





Verstion: 9

Created By: virtix

Created On: 2010-03-26 10:09:03.000

Last Update By: bob.silverberg@gmail.com

Last Update On: 2010-06-21 16:04:20.000




