






Testing MXUnit

4980740
{toc}
When making changes to the MXUnit framework it's a good idea to test those changes
to ensure you haven't broken anything. Luckily MXUnit can be used to test itself\!
Methods of running MXUnit's tests include:
# via the Eclipse plugin
# via the browser
# via the ant task

h2. Dependencies

There are unit tests which are designed to test the integration between MXUnit and
a number of mocking frameworks. If you do not have those mocking frameworks installed
you will see errors and test failures in mxunit.tests.framework.TestCaseTest. The
frameworks required, and their expected locations are:

* MightyMock - this now ships with MXUnit so it will always be available
* ColdMock - this is expected to be found in /coldmock
* MockBox - this is expected to be found in /Coldbox/system/testing

h2. Running the Unit Tests via the Eclipse Plugin

In the _Navigator_ tab, simply point to the _/tests_ folder, off of the MXUnit root,
right-click, and choose *{_}Run MXUnit Tests{_}*. You should see the results of the
tests in the MXUnit tab.

h3. Expected Errors and Failures

*Fixtures Can Be Safely Ignored*

When running all of the tests in the /tests folder, some errors and failures will
be reported. Most of these are due to fixtures being run as tests, so you can safely
ignore any errors or failures reported from test cases that reside in a folder with
the word _fixture_ in its name.

*Expected Failures*
* testAdd2() in mxunit.tests.samples.MyComponentTest fails with an mxunit.exception.AssertionFailedError
failure. It can be safely ignored.
* mismatchedArgumentTypesShouldFail() in mxunit.tests.mightymock.ArgumentMatcherTest
fails because it is a placeholder for unimplemented logic.
* attemptingToRegisterTheSamePatternShouldThrowMeaningfulException() in mxunit.tests.mightymock.InvocationTestArgumentMatcherTest
fails as a reminder to fix or document an issue.
* testWriteLog() in mxunit.tests.mightymock.MockLoggerTest fails because it is a placeholder
for unimplemented logic.
* $addInvocationRecordForBothPatternAndLiteral() in mxunit.tests.mightymock.MockRegistryTest
fails because it is a placeholder for unimplemented logic.
* howToHandlePatternVerification() in mxunit.tests.mightymock.MockVerificationTest
fails because it is a placeholder for unimplemented logic.
* $verifyExact() in mxunit.tests.mightymock.OrderTest fails because it is a placeholder
for unimplemented logic.
* shouldBeAbleToVerifyBothePatternAndLiteral() in mxunit.tests.mightymock.PatternInvocationTest
fails because it is a placeholder for unimplemented logic.

h2. Running the Unit Tests via the Browser

&amp;nbsp; You can run mxunit/tests/run.cfm in your browser. For example, I run it at
[http://localhost/mxunit/tests/run.cfm]

h2. Running the Unit Tests via ANT

h3. Setting your "paths"

* In mxunit/buildprops, copy the contents of the antrunner_sample.properties file.
Create a new file in that directory named "antrunner.properties"
* Fill in your server, port, and webroot properties and save the file. For example,
mine looks like this:
{code:title=antrunner.properties}
server=localhost
port=80
webroot=c:/inetpub/wwwroot/
{code}



h3. Running the tests
* From within Eclipse, drag mxunit/build.xml into the Ant view
*Run the "runTests" target
*It'll print out the results in the console view. A run should look something like
this:

{code:title=ANT output from runTests}
Buildfile: C:\inetpub\wwwroot\mxunit\build.xml
init:
runTests:
[delete] Deleting directory C:\inetpub\wwwroot\mxunit\tests\testresults\html
[delete] Deleting directory C:\inetpub\wwwroot\mxunit\tests\testresults\tmp
[mkdir] Created dir: C:\inetpub\wwwroot\mxunit\tests\testresults\html
[mkdir] Created dir: C:\inetpub\wwwroot\mxunit\tests\testresults\tmp
[mxunittask] Greetings, earth being ...
[mxunittask] Running MXUnitAntTask version : 1.0.3
[mxunittask] Outputting results to: tests/testresults/tmp
[mxunittask] Verbose: true
[mxunittask] MXunit home :mxunit
[mxunittask] Using server:port : localhost:80
[mxunittask] Using connectionMethod: http
[mxunittask] AuthMethod: no_auth
[mxunittask] Default runner : /mxunit/runner/HttpAntRunner.cfc
[mxunittask] [HttpHelper] Running URL : http://localhost:80/mxunit/runner/HttpAntRunner.cfc?method=run&amp;type=dir&amp;value=c:/inetpub/wwwroot//mxunit/tests/framework/&amp;recurse=false&amp;excludes=&amp;packageName=mxunit.tests.framework&amp;componentPath=mxunit.tests.framework
[mxunittask] [HttpStatus] 200
[mxunittask] [Testresults] Test runs=221. Errors=0. Failures=0. Time=23748ms 
[mxunittask] writing file : tests/testresults/tmp/mxunitdirectorytestsuite_1.xml
[mxunittask] [HttpHelper] Running URL : http://localhost:80/mxunit/runner/HttpAntRunner.cfc?method=run&amp;type=dir&amp;value=c:/inetpub/wwwroot//mxunit/tests/runner&amp;recurse=false&amp;excludes=&amp;packageName=mxunit.tests.runner&amp;componentPath=mxunit.tests.runner
[mxunittask] [HttpStatus] 200
[mxunittask] [Testresults] Test runs=20. Errors=0. Failures=0. Time=5785ms 
[mxunittask] writing file : tests/testresults/tmp/mxunitdirectorytestsuite_2.xml
[mxunittask] Total testruns: 241
[mxunittask] Total errors: 0
[mxunittask] Total failures: 0
[mxunittask] Total time: 29533
[mxunittask] Failure ratio: .00
[mxunittask] Error ratio: .00
[mxunittask] Success ratio: 1.00
[mxunittask] Fare thee well, human.
[junitreport] Processing C:\inetpub\wwwroot\mxunit\tests\testresults\html\TESTS-TestSuites.xml
to C:\Users\marc\AppData\Local\Temp\null2085236895
[junitreport] Loading stylesheet C:\inetpub\wwwroot\mxunit\ant\xsl\junit-frames.xsl
[junitreport] Transform time: 836ms
[junitreport] Deleting: C:\Users\marc\AppData\Local\Temp\null2085236895
BUILD SUCCESSFUL
Total time: 33 seconds

{code}

h3. Viewing the JUnit Report

The runTests target will create JUnit XML and run it through the JUnitReport task.
This creates an HTML view of the test results. They are placed in mxunit/tests/testresults/html

You can view them in the browser by going to http://&lt;yourserver&gt;:port/mxunit/tests/testresults/html/index.html.
It'll look something like this:

!Capture.PNG|thumbnail!



{tip}When you run the tests via run.cfm or via ANT, the "fixtures" and "samples" tests
are all filtered out, so you needn't mentally filter them yourself{tip}

4947975





Verstion: 11

Created By: bob.silverberg@gmail.com

Created On: 2010-02-09 22:58:16.000

Last Update By: marcesher

Last Update On: 2010-02-12 15:49:19.000




