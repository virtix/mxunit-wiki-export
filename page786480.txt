


Built-In Assertions

819246
h2. Built-In Assertions

This document outlines the core of unit testing, i.e. Assertions. Assertions are simple:
You assert something, and if that assertion does not result in your expectation, the
test fails. All code AFTER a failed assertion will NOT execute. Repeat: A failed assertion
means the end of that test.

This is why it's best practice to not load your test functions with lots of assertions.
A single failed assertion means that any subsequent assertions in a test will not
execute and thus you won't know if those assertions indicate further problems in your
code.

Need an assertion you don't see here? [Roll your own ...|http://mxunit.org/doc/index.cfm?doc=customassertions]

Without further delay, our players, The Assertions:
----
{color:#0000ff}{*}assertTrue{*}{color}{color:#0000ff}(boolean condition \[,String
message\]){color}

assertTrue is one of the two "bread and butter" assertions in any testing framework.
The philosophy is simple: you assert something to be true; if it's not, the test fails[http://mxunit.org/doc/index.cfm?doc=builtinassertions#]\[
| http://mxunit.org/doc/index.cfm?doc=builtinassertions#\]
# &lt;cffunction&amp;nbsp;name="demoAssertTrue"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;createObject("component","myObject")&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;isL33t&amp;nbsp;=&amp;nbsp;obj.AreYouThirteenAndDoYouUsePHP(&amp;nbsp;you&amp;nbsp;)&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertTrue(isL33t,"This&amp;nbsp;better&amp;nbsp;damn&amp;nbsp;well&amp;nbsp;fail")&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertTrue"&gt;\\
&lt;cfset obj = createObject("component","myObject")&gt;\\
&lt;cfset isL33t = obj.AreYouThirteenAndDoYouUsePHP( you )&gt;\\
&lt;cfset assertTrue(isL33t,"This better damn well fail")&gt;\\
&lt;/cffunction&gt;\\
That test above... it'll fail
----{color:#0000ff}{*}assertFalse{*}{color}{color:#0000ff}(boolean condition \[,String
message\]){color}
# &lt;cffunction&amp;nbsp;name="demoAssertFalse"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;createObject("component","myObject")&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;isBadass&amp;nbsp;=&amp;nbsp;obj.EvaluateBadassnessFromType(&amp;nbsp;"php"&amp;nbsp;)&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertFalse(isBadass,"&amp;nbsp;How&amp;nbsp;about&amp;nbsp;trying&amp;nbsp;CF?&amp;nbsp;")&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertFalse"&gt;\\
&lt;cfset obj = createObject("component","myObject")&gt;\\
&lt;cfset isBadass = obj.EvaluateBadassnessFromType( "php" )&gt;\\
&lt;cfset assertFalse(isBadass," How about trying CF? ")&gt;\\
&lt;/cffunction&gt; |

----
{color:#0000ff}{*}assertEquals{*}{color}{color:#0000ff}(any expected, any actual \[,
String message\]){color}

assertEquals is the other core assertion. Here, you're asserting that some result
equals some expected result. This could be two numbers, two strings, two structs,
whatever. For now, MXUnit follows the JUnit pattern of using a single assertEquals
to compare any type of data.
# &lt;cffunction&amp;nbsp;name="demoAssertEquals"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;createObject("component","myObject")&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;result&amp;nbsp;=&amp;nbsp;obj.computeMySalary(&amp;nbsp;me&amp;nbsp;)&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertEquals(500000,result,"You're&amp;nbsp;not&amp;nbsp;paid&amp;nbsp;enough,&amp;nbsp;my&amp;nbsp;friend")&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertEquals"&gt;
&lt;cfset obj = createObject("component","myObject")&gt;
&lt;cfset result = obj.computeMySalary( me )&gt;
&lt;cfset assertEquals(500000,result,"You're not paid enough, my friend")&gt;
&lt;/cffunction&gt;
That test will fail, too. It's a travesty.
----{color:#0000ff}{*}fail{*}{color}{color:#0000ff}(String message){color}

fail() is used to actively fail a test. It's useful when you're stubbing a test and
you want to ensure it fails, like so:
# &lt;cffunction&amp;nbsp;name="demoFail"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;fail("test&amp;nbsp;not&amp;nbsp;yet&amp;nbsp;implemented")&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoFail"&gt;
&lt;cfset fail("test not yet implemented")&gt;
&lt;/cffunction&gt;
It's also useful when you're testing an "error path", like so:
# &lt;cffunction&amp;nbsp;name="demoFail2"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;createObject("component","myObject")&gt;
# &amp;nbsp;&amp;nbsp;&lt;cftry&gt;
# &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;somethingDumb&amp;nbsp;=&amp;nbsp;obj.PayMarc5MillionToDrinkDalwhinnie15AllDayLong()&gt;
# &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;fail("Should&amp;nbsp;not&amp;nbsp;get&amp;nbsp;here.&amp;nbsp;Function&amp;nbsp;under&amp;nbsp;test&amp;nbsp;should've&amp;nbsp;thrown&amp;nbsp;an&amp;nbsp;error")&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfcatch&amp;nbsp;type="mxunit.exception.AssertionFailedError"&gt;
# &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cfrethrow&gt;
# &amp;nbsp;&amp;nbsp;&lt;/cfcatch&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfcatch&amp;nbsp;type="any"&gt;&lt;\!-\--&amp;nbsp;expect&amp;nbsp;to&amp;nbsp;get&amp;nbsp;here&amp;nbsp;-\--&gt;&lt;/cfcatch&gt;
# &amp;nbsp;&amp;nbsp;&lt;/cftry&gt;
# 
# 
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoFail2"&gt;
&lt;cfset obj = createObject("component","myObject")&gt;
&lt;cftry&gt;
&lt;cfset somethingDumb = obj.PayMarc5MillionToDrinkDalwhinnie15AllDayLong()&gt;
&lt;cfset fail("Should not get here. Function under test should've thrown an error")&gt;
&lt;cfcatch type="mxunit.exception.AssertionFailedError"&gt;
&lt;cfrethrow&gt;
&lt;/cfcatch&gt;
&lt;cfcatch type="any"&gt;&lt;\!--\- expect to get here \---&gt;&lt;/cfcatch&gt;
&lt;/cftry&gt;


&lt;/cffunction&gt;

----
{color:#0000ff}{*}assertSame{*}{color}{color:#0000ff}(any obj1, any obj2  \[,String
message\]){color}

Used to determine if the obj1 and obj2 refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always fail
for arrays.
# &lt;cffunction&amp;nbsp;name="demoAssertSame"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertSame(myObject1,myOtherObject,&amp;nbsp;"These&amp;nbsp;should&amp;nbsp;be&amp;nbsp;the&amp;nbsp;same&amp;nbsp;thang")&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertSame"&gt;
&lt;cfset assertSame(myObject1,myOtherObject, "These should be the same thang")&gt;
&lt;/cffunction&gt;

----
{color:#0000ff}{*}assertNotSame{*}{color}{color:#0000ff}(any obj1, any obj2  \[,String
message\]){color}

Used to determine if the obj1 and obj2 _do not_ refer to the same instance.
Note that arrays in Adobe ColdFusion are passed by value, so, this will always pass
for arrays.
# &lt;cffunction&amp;nbsp;name="demoAssertNotSame"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertNotSame(myObject1,myOtherObject,&amp;nbsp;"These&amp;nbsp;should&amp;nbsp;not&amp;nbsp;be&amp;nbsp;the&amp;nbsp;same&amp;nbsp;thang")&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertNotSame"&gt;
&lt;cfset assertNotSame(myObject1,myOtherObject, "These should not be the same thang")&gt;
&lt;/cffunction&gt;

----
{color:#0000ff}{*}failNotEquals{*}{color}{color:#0000ff}(any obj1, any obj2  \[,String
message\]){color}

Used to fail when two objects do not have the same values.
# &lt;cffunction&amp;nbsp;name="demoFailNoteEquals"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;failNoteEquals(myObject1,myOtherObject,&amp;nbsp;"These&amp;nbsp;should&amp;nbsp;not&amp;nbsp;have&amp;nbsp;the&amp;nbsp;same&amp;nbsp;value")&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoFailNoteEquals"&gt;
&lt;cfset failNoteEquals(myObject1,myOtherObject, "These should not have the same value")&gt;
&lt;/cffunction&gt;

----
h2. MXUnit Assertion Extensions

These are extensions to the base set of assertions and are specific to ColdFusion.
Note, that these are quite simple, can be easily implemented using the base assertions
above, but are provided for convenience.
*Note:* These extensions can be disabled at runtime by editing the mxunit-config.xml
located in /mxunit/framework/ directory. Simply remove or comment out these line:
# &lt;config-element&amp;nbsp;type="assertionExtension"&amp;nbsp;path="MXUnitAssertionExtensions"&amp;nbsp;autoload="true"&amp;nbsp;override="false"&amp;nbsp;/&gt;
# &lt;config-element&amp;nbsp;type="assertionExtension"&amp;nbsp;path="HamcrestAssert"&amp;nbsp;autoload="true"&amp;nbsp;override="false"&amp;nbsp;/&gt;
# &lt;config-element&amp;nbsp;type="assertionExtension"&amp;nbsp;path="XPathAssert"&amp;nbsp;autoload="true"&amp;nbsp;override="false"&amp;nbsp;/&gt;&amp;nbsp;&amp;nbsp;
&lt;config-element type="assertionExtension" path="MXUnitAssertionExtensions" autoload="true"
override="false" /&gt;
&lt;config-element type="assertionExtension" path="HamcrestAssert" autoload="true" override="false"
/&gt;
&lt;config-element type="assertionExtension" path="XPathAssert" autoload="true" override="false"
/&gt;

----
{color:#0000ff}{*}assertXPath{*}{color}{color:#0000ff}(String xpath, any data, \[String
text\], \[String message\]){color}

Searches data using xpath. If text is specified, it tries to match the exact text
to  the xpath expression. Otherwise ,it returns true if any nodes are found that match
the xpath expression. Note that, unlike most assertions, assetXPath returns an xml
dom represenation of any nodes found. This can be useful for further inspection.

*Parameters* String xpath:    string representing an xpath expression
any data:    String or URL to search; e.g.,  ..., [http://google.com], [file://c:/path/to/my.html]
\[string text\]: The text to match against the xpath expression. If omitted, this
assertion returns true if any elements of the xpath expression are found. Not required.
Defaults to ""
\[string message\]: The message to display when this assertion fails Not required.
Defaults to The XPath expression, #arguments.xpath#, did not match the data.

# &lt;cffunction&amp;nbsp;name="testFindGoogleInTitle"&gt;
# &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cfscript&gt;
# &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nodes&amp;nbsp;=&amp;nbsp;assertXpath('/html/head/title',&amp;nbsp;"http://google.com",&amp;nbsp;"Google");
# &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;debug(nodes);
# &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nodes&amp;nbsp;=&amp;nbsp;assertXPath("/html/head/title",&amp;nbsp;"file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
# &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nodes&amp;nbsp;=&amp;nbsp;assertXPath("/root/foo/bar\[@id='123abc'\]",&amp;nbsp;someXmlOrHtml);
# &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/cfscript&gt;
# &amp;nbsp;&amp;nbsp;&lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="testFindGoogleInTitle"&gt;
&lt;cfscript&gt;
nodes = assertXpath('/html/head/title', "http://google.com", "Google");
debug(nodes);
nodes = assertXPath("/html/head/title", "file:///coldfusion8/wwwroot/mxunit/tests/framework/fixture/xpath/mxunit.org.html");
nodes = assertXPath("/root/foo/bar[@id='123abc']", someXmlOrHtml);
&lt;/cfscript&gt;
&lt;/cffunction&gt;
The above parses the results from urls and strings and searches the parsed results
for the XPath expression.
Try it. Really, it works\!
----{color:#0000ff}{*}assertIsArray{*}{color}{color:#0000ff}(any obj1){color}

Determines if the obj1 is a valid array.
# &lt;cffunction&amp;nbsp;name="demoAssertIsArray"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertIsArray(myObject1)&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertIsArray"&gt;
&lt;cfset assertIsArray(myObject1)&gt;
&lt;/cffunction&gt;

----
{color:#0000ff}{*}assertIsDefined{*}{color}{color:#0000ff}(any obj1){color}

Determines if the obj1 has been defined in the available scope.
# &lt;cffunction&amp;nbsp;name="demoAssertIsDefined"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertIsDefined(myObject1)&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertIsDefined"&gt;
&lt;cfset assertIsDefined(myObject1)&gt;
&lt;/cffunction&gt;

----
{color:#0000ff}{*}assertIsEmpty{*}{color}{color:#0000ff}(any obj1){color}

Determines if the obj1 is a 0 length string or NULL equivalent.
# &lt;cffunction&amp;nbsp;name="demoAssertIsEmpty"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertIsEmpty(myObject1)&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertIsEmpty"&gt;
&lt;cfset assertIsEmpty(myObject1)&gt;
&lt;/cffunction&gt;

----
{color:#0000ff}{*}assertIsEmptyArray{*}{color}{color:#0000ff}(any obj1,\[String message\]){color}

Determines if the obj1 is an array with no elements.
# &lt;cffunction&amp;nbsp;name="demoAssertIsEmptyArray"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertIsEmptyArray(myObject1)&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertIsEmptyArray"&gt;
&lt;cfset assertIsEmptyArray(myObject1)&gt;
&lt;/cffunction&gt;

----
{color:#0000ff}{*}assertIsEmptyQuery{*}{color}{color:#0000ff}(any obj1,\[String message\]){color}

Determines if the obj1 is a query with no rows.
# &lt;cffunction&amp;nbsp;name="demoAssertIsEmptyQuery"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertIsEmptyQuery(myObject1)&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertIsEmptyQuery"&gt;
&lt;cfset assertIsEmptyQuery(myObject1)&gt;
&lt;/cffunction&gt;

----
{color:#0000ff}{*}assertIsEmptyStruct{*}{color}{color:#0000ff}(any obj1,\[String message\]){color}

Determines if the obj1 is a struct with no keys or values.
# &lt;cffunction&amp;nbsp;name="demoAssertIsEmptyStruct"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertIsEmptyStruct(myObject1)&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertIsEmptyStruct"&gt;
&lt;cfset assertIsEmptyStruct(myObject1)&gt;
&lt;/cffunction&gt;

----
{color:#0000ff}{*}assertIsQuery{*}{color}{color:#0000ff}(any q){color}

Determines if q is a valid ColdFusion query.
# &lt;cffunction&amp;nbsp;name="demoAssertIsQuery"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertIsQuery(q)&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertIsQuery"&gt;
&lt;cfset assertIsQuery(q)&gt;
&lt;/cffunction&gt;

----
{color:#0000ff}{*}assertIsStruct{*}{color}{color:#0000ff}(any obj){color}

Determines if obj is a valid ColdFusion structure.
# &lt;cffunction&amp;nbsp;name="demoAssertIsStruct"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertIsStruct(obj)&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertIsStruct"&gt;
&lt;cfset assertIsStruct(obj)&gt;
&lt;/cffunction&gt;

----
{color:#0000ff}{*}assertIsTypeOf{*}{color}{color:#0000ff}(component obj, String type){color}

Determines if obj is of type. type needs to be fully qualified.
# &lt;cffunction&amp;nbsp;name="demoAssertIsTypeOf"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertIsTypeOf(obj,"my.type.Of.Object")&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertIsTypeOf"&gt;
&lt;cfset assertIsTypeOf(obj,"my.type.Of.Object")&gt;
&lt;/cffunction&gt;

----
{color:#0000ff}{*}assertIsXMLDoc{*}{color}{color:#0000ff}(any xml \[, String message\]){color}

Determines if xml is a valid XML DOM object.
# &lt;cffunction&amp;nbsp;name="demoAssertIsXMLDoc"&gt;
# &amp;nbsp;&amp;nbsp;&lt;cfset&amp;nbsp;assertIsXMLDoc(xml)&gt;
# &lt;/cffunction&gt;&amp;nbsp;&amp;nbsp;&lt;cffunction name="demoAssertIsXMLDoc"&gt;
&lt;cfset assertIsXMLDoc(xml)&gt;
&lt;/cffunction&gt;

----
Need more? [Build your own ...|http://mxunit.org/doc/index.cfm?doc=customassertions]

786480




Verstion: 1

Created By: marcesher

Created On: 2009-01-18 12:44:08.000

Last Update By: marcesher

Last Update On: 2009-01-18 12:44:08.000



